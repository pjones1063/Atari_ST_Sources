;-----------------------------------------------------------------------;
; Programmed by Griff of Electronic Images (Inner Circle).		;
;-----------------------------------------------------------------------;

screen		EQU $F0000			; screen address.

		CLR -(SP)
		PEA -1.W
		PEA -1.W
		MOVE #5,-(SP)
		TRAP #14			; ensure lowres
		LEA 12(SP),SP
		CLR.L -(SP)
		MOVE #$20,-(SP)
		TRAP #1				; supervisor mode
		ADDQ.L #6,SP
		LEA my_stack,SP
		BSR cls		
		MOVE.L log_base(PC),D0
		LSR #8,D0
		MOVE.L D0,$FFFF8200.W
set_ints	MOVE #$2700,SR
		BSR flush			; flush IKBD
		MOVE.B #$12,$FFFFFC02.W		; kill mouse
		LEA old_mfp+32,A0
		MOVEM.L $FFFF8240.W,D0-D7
		MOVEM.L D0-D7,-32(A0)
		MOVE.B $FFFFFA07.W,(A0)+
	        MOVE.B $FFFFFA09.W,(A0)+
		MOVE.B $FFFFFA13.W,(A0)+
        	MOVE.B $FFFFFA15.W,(A0)+
	        MOVE.B $FFFFFA19.W,(A0)+	; save all vectors
        	MOVE.B $FFFFFA1F.W,(A0)+	; that we change
		MOVE.L $68.W,(A0)+
		MOVE.L $70.W,(A0)+
		MOVE.L $120.W,(A0)+
		MOVE.L $134.W,(A0)+
	        MOVE.B #$21,$FFFFFA07.W		; timer a and hbl
	        CLR.B $FFFFFA09.W		
        	MOVE.B #$21,$FFFFFA13.W		
		CLR.B $FFFFFA15.W
		CLR.B $FFFFFA19.W		; clear em out
		CLR.B $FFFFFA1B.W
		MOVE.L #phbl,$68.W
		MOVE.L #vbl,$70.W
		MOVE.L #syncscroll,$134.W	; and set our vectors
		MOVE.L #setpal1,$120.w
		BCLR.B #3,$FFFFFA17.W		; soft end of interrupt
		MOVE #$2300,SR

; Little demo which scrolls the screen vertically to oblivion!
		
wait_key	BSR wait_vbl			; obvious!
		BSR BitFadeSeq
		CMP.B #$39,$FFFFFC02.W		; <SPACE> exits.
		BNE.S wait_key

restore		MOVE #$2700,SR
		LEA old_mfp,A0
		MOVEM.L (A0)+,D0-D7
		MOVEM.L D0-D7,$FFFF8240.W
		BSR flush
		MOVE.B #$8,$FFFFFC02.W
		MOVE.B (A0)+,$FFFFFA07.W
	        MOVE.B (A0)+,$FFFFFA09.W
        	MOVE.B (A0)+,$FFFFFA13.W	; restore mfp
        	MOVE.B (A0)+,$FFFFFA15.W
	        MOVE.B (A0)+,$FFFFFA19.W
            	MOVE.B (A0)+,$FFFFFA1F.W
		MOVE.L (A0)+,$68.W
		MOVE.L (A0)+,$70.W		; and vects
		MOVE.L (A0)+,$120.W
		MOVE.L (A0)+,$134.W
		BSET.B #3,$FFFFFA17.W
		MOVE #$2300,SR
		CLR -(SP)			; see ya!
		TRAP #1

; A bit fader

BitFadeSeq	LEA pic+34(PC),A0
		MOVE.L log_base(PC),A1
		LEA 27*160(A1),A1
		MOVE.L mask_ptr(PC),A2
		MOVE.W mask_in(PC),D6
		ADDQ #4,D6
		MOVEQ #(16*4)-1,D7
		AND.W D7,D6
		MOVE.W D6,mask_in
		
		MOVE #200-1,D5
.lp2		MOVEQ #10-1,D4
		LEA (A2,D6),A3
.lp1		MOVEM.L (A0)+,D0-D3
		AND.L (A3),D0
		AND.L (A3)+,D1
		AND.L (A3),D2
		AND.L (A3)+,D3
		OR.L D0,(A1)+
		OR.L D1,(A1)+
		OR.L D2,(A1)+
		OR.L D3,(A1)+
		DBF D4,.lp1
		ADD.W #8*10,D6
		AND.W D7,D6
		DBF D5,.lp2
		RTS

mask_ptr	DC.L masks2
mask_in		DC.W 0
masks1		
		REPT 4
		DC.L %10000000000000001000000000000000
		DC.L %01000000000000000100000000000000
		DC.L %00100000000000000010000000000000
		DC.L %00010000000000000001000000000000
		DC.L %00001000000000000000100000000000
		DC.L %00000100000000000000010000000000
		DC.L %00000010000000000000001000000000
		DC.L %00000001000000000000000100000000
		DC.L %00000000100000000000000010000000
		DC.L %00000000010000000000000001000000
		DC.L %00000000001000000000000000100000
		DC.L %00000000000100000000000000010000
		DC.L %00000000000010000000000000001000
		DC.L %00000000000001000000000000000100
		DC.L %00000000000000100000000000000010
		DC.L %00000000000000010000000000000001
		ENDR

masks2		
		REPT 4
		DC.L %00000000100000000000000010000000
		DC.L %00000001000000000000000100000000
		DC.L %00000010000000000000001000000000
		DC.L %00000000010000000000000001000000
		DC.L %00000100000000000000010000000000
		DC.L %00000000001000000000000000100000
		DC.L %00001000000000000000100000000000
		DC.L %00000000000100000000000000010000
		DC.L %00010000000000000001000000000000
		DC.L %00000000000010000000000000001000
		DC.L %00100000000000000010000000000000
		DC.L %00000000000001000000000000000100
		DC.L %01000000000000000100000000000000
		DC.L %00000000000000100000000000000010
		DC.L %10000000000000001000000000000000
		DC.L %00000000000000010000000000000001
		ENDR

masks3		
		rept 4
		DC.L %00000000100000000000000010000000
		DC.L %01000000000000000100000000000000
		DC.L %00000010000000000000001000000000
		DC.L %00000000000001000000000000000100
		DC.L %10000000000000001000000000000000
		DC.L %00000000010000000000000001000000
		DC.L %00010000000000000001000000000000
		DC.L %00001000000000000000100000000000
		DC.L %00000001000000000000000100000000
		DC.L %00000000000010000000000000001000
		DC.L %00000100000000000000010000000000
		DC.L %00100000000000000010000000000000
		DC.L %00000000001000000000000000100000
		DC.L %00000000000000010000000000000001
		DC.L %00000000000100000000000000010000
		DC.L %00000000000000100000000000000010
		endr

; Wait for one vbl
; (d0 destroyed)

wait_vbl	MOVE.W vbl_timer(PC),D0
.wait		CMP.W vbl_timer(PC),D0
		BEQ.S .wait
		RTS

vbl		CLR.B $FFFFFA19.W
		MOVE.B #99,$FFFFFA1F.W		; set off timer(top border)
		MOVE.B #4,$FFFFFA19.W
		CLR.B $FFFFFA1B.W
		MOVE.B #26,$FFFFFA21.W		
		MOVE.B #8,$FFFFFA1B.W
		MOVEM.L D0/A0,-(SP)
		MOVE #$8240,A0
		MOVEQ #0,D0
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+			; clear palette
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVEM.L (SP)+,D0/A0
		ADDQ #1,vbl_timer
		RTE

syncscroll	MOVE #$2100,SR			; ipl=1(hbl)
		STOP #$2100			; wait for processor hbl
		MOVE #$2700,SR			; (we are now synced with 8 cycles!!!)
		CLR.B $FFFFFA19.W
		MOVEM.L D0-D7/A0-A1,-(SP)
		DCB.W 60,$4E71
		MOVE.B #0,$FFFF820A.W		; zap into 60hz
		DCB.W 7,$4E71
		CLR D1				; top border removed!!
		MOVE #$8209,A0	
		MOVE.B #2,$FFFF820A.W		; switch back to 50hz
		MOVEM.L (SP)+,D0-D7/A0-A1
phbl		RTE

setpal1		MOVEM.L A0-A1,-(SP)
		LEA pic+2(PC),A0
		LEA $FFFF8240.W,A1
		REPT 8
		MOVE.L (A0)+,(A1)+		; set palette
		ENDR				; for rest of screen
		MOVEM.L (SP)+,A0-A1
		CLR.B $FFFFFA1B.W
		RTE

; Copy the piccy to the screen.

cls		MOVE.L log_base(PC),A1
		MOVE #(228*160)/4-1,D1
.clr		CLR.L (A1)+
		DBF D1,.clr
		RTS

LINE_JMPS	DS.L 7*128

; Flush keyboard

flush		BTST.B #0,$FFFFFC00.W
		BEQ.S flok
		MOVE.B $FFFFFC02.W,D0
		BRA.S flush
flok		RTS

log_base	DC.L screen
vbl_timer	DC.W 0

		SECTION DATA

pic		INCBIN OXYGENE.PI1

		SECTION BSS

old_mfp		DS.L 30			; saved mfp vects etc
		DS.L 249
my_stack	DS.L 2			; our own stack..

	