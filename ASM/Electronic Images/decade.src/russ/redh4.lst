HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 1



    1 T  00000000                      ;------------------------;
    2 T  00000000                      ; 3d demo screen by Russ ;
    3 T  00000000                      ;------------------------;
    4 T  00000000                      
    5   =00000000                      demo        equ 0
    6 T  00000000                      
    7 T  00000000                                  opt   o+,ow-
    8 T  00000000                      
    9 T  00000000                                  section TEXT
   10 T  00000000                      ;
   11 T  00000000                      ; equates for starfield and stuff
   12 T  00000000                      ;
   13 T  00000000                      
   14   =00000032                      numstars    equ   50          ;number of stars
   15   =00002000                      randnum     equ   8192        ;size of random lookup table
   16   =00000140                      sxmax       equ   320         ;
   17   =000000C6                      symax       equ   198         ;starfield rectangle
   18   =0000009F                      smidx       equ   160-1       ;
   19   =00000063                      smidy       equ   100-1       ;
   20 T  00000000                      ;
   21   =0000001F                      height            equ   31          ;24 lines
   22   =00000002                      width       equ   2           ;width in blocks
   23   =000000A0                      nextline    equ   160         ;line length in bytes
   24   =000000C8                      row         equ   200         ;scroll row number
   25   =00000300                      nextchar    equ   (width+1)*(height+1)*8
   26   =00000007                      nblocks     equ   7           ;number of 16 pixel blocks
   27 T  00000000                      ;
   28   =00000400                      stacksize   equ   1024        ;1k for stack
   29 T  00000000                      
   30 T  00000000                      ;
   31 T  00000000                      ; OBJECT DEFINITION
   32 T  00000000                      ;
   33 T  00000000                                  rsreset
   34   =00000000                      ob_next     rs.l  1           ;link to next shape
   35   =00000004                      ob_lptr     rs.l  1           ;left and right
   36   =00000008                      ob_rptr     rs.l  1           ;pointers for sort
   37   =0000000C                      ob_depth    rs.w  1           ;max depth away
   38   =0000000E                      ob_wxyz     rs.l  3           ;world position
   39   =0000001A                      ob_uxyz     rs.l  3           ;user view position
   40   =00000026                      ob_angxyz   rs.l  3           ;object rotation
   41   =00000032                      ob_matrix   rs.w  9           ;3x3 rotation matrix
   42   =00000044                      ob_shape    rs.l  1           ;pointer to shape
   43   =00000048                      ob_draw     rs.l  1           ;draw routine
   44   =0000004C                      ob_cat            rs.w  1           ;object category
   45   =0000004E                      ob_flags    rs.w  1           ;misc flags
   46   =00000050                      i_ptr       rs.l  1
   47   =00000054                      i_size            rs.b  1
   48 T  00000000                      
   49 T  00000000                                  rsreset
   50   =00000000                      ipos.x            rs.l  1
   51   =00000004                      ipos.y            rs.l  1
   52   =00000008                      ipos.z            rs.l  1
   53   =0000000C                      ipos.ax           rs.l  1
   54   =00000010                      ipos.ay           rs.l  1
   55   =00000014                      ipos.az           rs.l  1
   56   =00000018                      ipos.size   rs.b  1
   57 T  00000000                      
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 2



   58 T  00000000                                  rsreset
   59   =00000000                      movcount    rs.w  1
   60   =00000002                      movdx       rs.l  1
   61   =00000006                      movdy       rs.l  1
   62   =0000000A                      movdz       rs.l  1
   63   =0000000E                      angcount    rs.w  1
   64   =00000010                      angdx       rs.l  1
   65   =00000014                      angdy       rs.l  1
   66   =00000018                      angdz       rs.l  1
   67   =0000001C                      movent.size rs.b  1
   68 T  00000000                      
   69 T  00000000                      ;====================================================================
   70 T  00000000                      ;
   71 T  00000000                      ; start of program
   72 T  00000000                      ;
   73 T  00000000                      ;====================================================================
   74 T  00000000                      
   75   =00000000                      start       ifeq demo
   76 T  00000000 4267                             clr -(sp)
   77 T  00000002 4878FFFF                         pea $ffffffff.w
   78 T  00000006 4878FFFF                         pea $ffffffff.w
   79 T  0000000A 3F3C0005                         move #5,-(sP)
   80 T  0000000E 4E4E                             trap #14
   81 T  00000010 4FEF000C                         lea 12(sp),sp
   82 T  00000014 42A7                             clr.l -(sp)
   83 T  00000016 3F3C0020                         move.w      #$20,-(sp)        ;must make
   84 T  0000001A 4E41                             trap  #1                ;a system call
   85 T  0000001C 2F400002                         move.l      d0,2(sp)          ;to get to super mode
   86 T  00000020                                  endc
   87 T  00000020                                  
   88 T  00000020 46FC2700                         move #$2700,sr
   89 T  00000024 23CF00000466                     move.l sp,oldsp
   90 T  0000002A 4FF900000462                     lea our_stack,sp
   91 T  00000030 203C00080000         execsuper   move.l      #$80000,d0        ;top of RAM
   92 T  00000036 048000021BFC                     sub.l #miscmem+stacksize,d0
   93 T  0000003C 23C000008A3A                     move.l      d0,maxram
   94 T  00000042 61000426                         bsr   savesys
   95 T  00000046 610004B6                         bsr   quiet
   96 T  0000004A 6100050C                         bsr   main              ;exec screen
   97 T  0000004E 61000462                         bsr   restoresys
   98 T  00000052 610004AA                         bsr   quiet
   99   =00000000                                  ifeq demo
  100 T  00000056 4E41                             trap  #1                ;back to user mode
  101 T  00000058 4297                             clr.l (sp)
  102 T  0000005A 4E41                             trap  #1
  103 T  0000005C                                  endc
  104 T  0000005C 2E7A0408                         move.l oldsp(pc),sp
  105 T  00000060 4E75                             rts
  106 T  00000062                      
  107 T  00000462                                  ds.l 256
  108 T  00000466                      our_stack   ds.l 1
  109 T  00000466                      
  110 T  00000466                      
  111 T  00000466 00000000             oldsp       dc.l 0
  112 T  0000046A                      ;
  113 T  0000046A                      ; save system
  114 T  0000046A                      ;
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 3



  115 T  0000046A                      
  116 T  0000046A 41FA00AC             savesys           lea   mfp(pc),a0
  117 T  0000046E 43F8FA00                         lea   $fffffa00.w,a1
  118 T  00000472 10E90007                         move.b      $07(a1),(a0)+           ;iea
  119 T  00000476 10E90009                         move.b      $09(a1),(a0)+           ;ieb
  120 T  0000047A 10E90013                         move.b      $13(a1),(a0)+           ;ieb
  121 T  0000047E 10E90015                         move.b      $15(a1),(a0)+           ;ieb
  122 T  00000482 10E90003                         move.b      $03(a1),(a0)+           ;aer
  123 T  00000486 10E90017                         move.b      $17(a1),(a0)+           ;vbr
  124 T  0000048A 10E9001B                         move.b      $1b(a1),(a0)+           ;timer B control
  125 T  0000048E 10E90021                         move.b      $21(a1),(a0)+           ;timer B data
  126 T  00000492 20F80014                         move.l      $14.w,(a0)+       ;div by 0
  127 T  00000496 20F80068                         move.l      $68.w,(a0)+       ;spurious
  128 T  0000049A 20F80070                         move.l      $70.w,(a0)+       ;vblank
  129 T  0000049E 10F88201                         move.b      $ffff8201.w,(a0)+
  130 T  000004A2 10F88203                         move.b      $ffff8203.w,(a0)+ ;screen address
  131 T  000004A6 4CF800FF8240                     movem.l     $ffff8240.w,d0-d7
  132 T  000004AC 48D000FF                         movem.l     d0-d7,(a0)        ;colours
  133 T  000004B0 4E75                             rts
  134 T  000004B2                      ;
  135 T  000004B2                      ; restore system
  136 T  000004B2                      ;
  137 T  000004B2 46FC2700             restoresys  move #$2700,sr
  138 T  000004B6 41FA0060                         lea   mfp(pc),a0
  139 T  000004BA 43F8FA00                         lea   $fffffa00.w,a1
  140 T  000004BE 13580007                         move.b      (a0)+,$07(a1)           ;iea
  141 T  000004C2 13580009                         move.b      (a0)+,$09(a1)           ;ieb
  142 T  000004C6 13580013                         move.b      (a0)+,$13(a1)           ;ieb
  143 T  000004CA 13580015                         move.b      (a0)+,$15(a1)           ;ieb
  144 T  000004CE 13580003                         move.b      (a0)+,$03(a1)           ;aer
  145 T  000004D2 13580017                         move.b      (a0)+,$17(a1)           ;vbr
  146 T  000004D6 1358001B                         move.b      (a0)+,$1b(a1)           ;timer B control
  147 T  000004DA 13580021                         move.b      (a0)+,$21(a1)           ;timer B data
  148 T  000004DE 21D80014                         move.l      (a0)+,$14.w       ;div by 0
  149 T  000004E2 21D80068                         move.l      (a0)+,$68.w       ;spurious
  150 T  000004E6 21D80070                         move.l      (a0)+,$70.w       ;vblank
  151 T  000004EA 11D88201                         move.b      (a0)+,$ffff8201.w
  152 T  000004EE 11D88203                         move.b      (a0)+,$ffff8203.w ;screen address
  153 T  000004F2 4CD800FF                         movem.l     (a0)+,d0-d7
  154 T  000004F6 48F800FF8240                     movem.l     d0-d7,$ffff8240.w ;colours
  155 T  000004FC 4E75                             rts
  156 T  000004FE                      
  157 T  000004FE                      ;
  158 T  000004FE                      ; stop any noise
  159 T  000004FE                      ;
  160 T  000004FE 21FC080000008800     quiet       move.l      #$08000000,$ffff8800.w
  161 T  00000506 21FC090000008800                 move.l      #$09000000,$ffff8800.w
  162 T  0000050E 21FC0A0000008800                 move.l      #$0a000000,$ffff8800.w
  163 T  00000516 4E75                             rts
  164 T  00000518                      
  165 T  00000518                      ;
  166 T  00000518                      ; storage for mfp variables
  167 T  00000518                      ;
  168 T  00000518                      
  169 T  00000558                      mfp         ds.b  64
  170 T  00000558                      
  171 T  00000558                      ;====================================================================
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 4



  172 T  00000558                      ;
  173 T  00000558                      ; start of main program
  174 T  00000558                      ;
  175 T  00000558                      ;====================================================================
  176 T  00000558                      
  177 T  00000558 46FC2700             main        move.w      #$2700,sr
  178 T  0000055C 4238FA07                         clr.b $fffffa07.w
  179 T  00000560 4238FA09                         clr.b $fffffa09.w
  180 T  00000564 4238FA13                         clr.b $fffffa13.w
  181 T  00000568 4238FA15                         clr.b $fffffa15.w
  182 T  0000056C 41FA0120                         lea   anrte(pc),a0
  183 T  00000570 21C80014                         move.l      a0,$14.w
  184 T  00000574 21C80068                         move.l      a0,$68.w
  185 T  00000578 21C80070                         move.l      a0,$70.w
  186 T  0000057C 11FC0040FA17                     move.b      #$40,$fffffa17.w  ;set mfp vector address
  187 T  00000582 4238FA1B                         clr.b $fffffa1b.w
  188 T  00000586 08F80000FA07                     bset  #0,$fffffa07.w          ;timer B
  189 T  0000058C 08F80000FA13                     bset  #0,$fffffa13.w          ;timer B
  190 T  00000592 08B80003FA03                     bclr  #3,$FFFFFA03.W          ;set active edge
  191 T  00000598 4E722300                         stop  #$2300
  192 T  0000059C 4CF900FF000217FC                 movem.l     miscmem,d0-d7
  193 T  000005A4 48F800FF8240                     movem.l     d0-d7,$ffff8240.w
  194 T  000005AA 4EB900008A06                     jsr   dealloc
  195 T  000005B0 610000E2                         bsr   genscreens
  196 T  000005B4 4E722300                         stop  #$2300
  197 T  000005B8 203900000736                     move.l      screen1,d0
  198 T  000005BE E048                             lsr.w #8,d0
  199 T  000005C0 21C08200                         move.l      d0,$ffff8200.w          ;force display
  200 T  000005C4                      
  201 T  000005C4                      ;
  202 T  000005C4                      ; continue initialization
  203 T  000005C4                      ;
  204 T  000005C4 6100010A                         bsr   genpixtable
  205 T  000005C8 6100047C                         bsr   prerot                  ;init fast scroll
  206 T  000005CC 61000646                         bsr   setscroll
  207 T  000005D0 4EB9000089D0                     jsr   init3d
  208 T  000005D6 4EB9000086F2                     jsr   initstars
  209 T  000005DC 21FC000007880070                 move.l      #vbl,$70.w
  210 T  000005E4 7001                             moveq #1,d0
  211 T  000005E6 4EB900008AC0                     jsr   music
  212 T  000005EC 4E722300                         stop  #$2300                  ;ensure video sync
  213 T  000005F0                      ;
  214 T  000005F0                      ; clear the three workscreens
  215 T  000005F0                      ;
  216 T  000005F0 61000150                         bsr   clearscreen
  217 T  000005F4 61000112                         bsr   screenswap
  218 T  000005F8 61000148                         bsr   clearscreen
  219 T  000005FC 6100010A                         bsr   screenswap
  220 T  00000600 61000140                         bsr   clearscreen
  221 T  00000604 61000102                         bsr   screenswap
  222 T  00000608                      ;
  223 T  00000608                      ; recycle - restart from beginning
  224 T  00000608                      ;
  225 T  00000608 23F9000217FC00000690             move.l      miscmem,imem            ;save free mem
  226 T  00000612 227900016478                     move.l      igdptr,a1
  227 T  00000618 2011                 reround           move.l      (a1),d0
  228 T  0000061A 23C900016478         roundagain  move.l      a1,igdptr
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 5



  229 T  00000620 2240                             move.l      d0,a1
  230 T  00000622 4EB900016088                     jsr   set4igd                 ;init animation
  231 T  00000628                      ;
  232 T  00000628                      ; play a single animation
  233 T  00000628                      ;
  234 T  00000628 42B90000C9DC         mainloop    clr.l root
  235 T  0000062E 4EB900016196                     jsr   insert_igd
  236 T  00000634 23F9000007360000C9D8             move.l      screen1,logbase
  237 T  0000063E 4EB900000742                     jsr   clearscreen
  238 T  00000644 4EB90000C9E8                     jsr   treesort
  239 T  0000064A 4EB900000708                     jsr   screenswap
  240 T  00000650 4EB9000161BA                     jsr   move_igd
  241 T  00000656 4EB900016226                     jsr   remove_igd
  242 T  0000065C 0C380039FC02                     cmp.b #$39,$FFFFFC02.W  ;SPACE pressed?
  243 T  00000662 67000028                         beq   exit
  244 T  00000666 4A79000163BC                     tst.w igdnumob
  245 T  0000066C 66BA                             bne   mainloop          ;all objects gone?
  246 T  0000066E                      ;
  247 T  0000066E                      ; move to next object in sequence
  248 T  0000066E                      ;
  249 T  0000066E 227900016478         nextone           move.l      igdptr,a1
  250 T  00000674 5889                             addq.l      #4,a1
  251 T  00000676 2011                             move.l      (a1),d0                 ;another waiting?
  252 T  00000678 66A0                             bne   roundagain
  253 T  0000067A 23F900000690000217FC             move.l      imem,miscmem            ;reset memptr
  254 T  00000684 227C0001647C                     move.l      #igdtable,a1
  255 T  0000068A 608C                             bra   reround
  256 T  0000068C                      
  257 T  0000068C 4E75                 exit        rts
  258 T  0000068E                      
  259 T  0000068E                      ;
  260 T  0000068E                      ; for exception handler
  261 T  0000068E                      ;
  262 T  0000068E                      
  263 T  0000068E 4E73                 anrte       rte
  264 T  00000690 00000000             imem        dc.l  0
  265 T  00000694                      
  266 T  00000694                      ;
  267 T  00000694                      ; generate 3 screens
  268 T  00000694                      ;
  269 T  00000694                      
  270 T  00000694 203C0001D800         genscreens  move.l      #(40192*3)+256,d0
  271 T  0000069A 4EB900008A1E                     jsr   malloc
  272 T  000006A0 2009                             move.l      a1,d0
  273 T  000006A2 068000000100                     add.l #256,d0
  274 T  000006A8 4200                             clr.b d0
  275 T  000006AA 23C000000736                     move.l      d0,screen1
  276 T  000006B0 068000009D00                     add.l #40192,d0
  277 T  000006B6 23C00000073A                     move.l      d0,screen2
  278 T  000006BC 068000009D00                     add.l #40192,d0
  279 T  000006C2 23C00000073E                     move.l      d0,screen3
  280 T  000006C8 23C000008A3E                     move.l      d0,physbase
  281 T  000006CE 4E75                             rts
  282 T  000006D0                      
  283 T  000006D0                      ;
  284 T  000006D0                      ; generate a pixel lookup table
  285 T  000006D0                      ;
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 6



  286 T  000006D0                      
  287 T  000006D0 203C00000500         genpixtable move.l      #320*4,d0
  288 T  000006D6 4EB900008A1E                     jsr   malloc
  289 T  000006DC 23C900000704                     move.l      a1,pixtable
  290 T  000006E2 4240                             clr.w d0
  291 T  000006E4 3200                 .loop       move.w      d0,d1
  292 T  000006E6 E841                             asr.w #4,d1
  293 T  000006E8 E741                             asl.w #3,d1
  294 T  000006EA 32C1                             move.w      d1,(a1)+    ;offset into line
  295 T  000006EC 3200                             move.w      d0,d1
  296 T  000006EE 0241000F                         and.w #15,d1
  297 T  000006F2 343C8000                         move.w      #$8000,d2
  298 T  000006F6 E27A                             ror.w d1,d2
  299 T  000006F8 32C2                             move.w      d2,(a1)+    ;bitset for pixel
  300 T  000006FA 5240                             addq.w      #1,d0
  301 T  000006FC B07C0140                         cmp.w #320,d0
  302 T  00000700 66E2                             bne.s .loop
  303 T  00000702 4E75                             rts
  304 T  00000704 00000000             pixtable    dc.l  0
  305 T  00000708                      
  306 T  00000708                      ;
  307 T  00000708                      ; swap between screens
  308 T  00000708                      ;
  309 T  00000708                      
  310 T  00000708 4A79000007F8         screenswap  tst.w vblsem
  311 T  0000070E 67F8                             beq.s screenswap
  312 T  00000710 4279000007F8                     clr.w vblsem
  313 T  00000716 4CFA0007001C                     movem.l screen1(pc),d0-d2
  314 T  0000071C C141                             exg   d0,d1
  315 T  0000071E C342                             exg   d1,d2
  316 T  00000720 48F9000700000736                 movem.l d0-d2,screen1
  317 T  00000728                      ;
  318 T  00000728                      ; display screen
  319 T  00000728                      ;
  320 T  00000728 23C200008A3E                     move.l      d2,physbase
  321 T  0000072E E04A                             lsr.w #8,d2
  322 T  00000730 21C28200                         move.l      d2,$ffff8200.w
  323 T  00000734 4E75                             rts
  324 T  00000736                      ;
  325 T  00000736                      ; pointers to screen memory (aligned to 256 byte boundary)
  326 T  00000736                      ;
  327 T  00000736 00000000             screen1     dc.l  0                 ;ptrs to screen mem
  328 T  0000073A 00000000             screen2     dc.l  0
  329 T  0000073E 00000000             screen3     dc.l  0
  330 T  00000742                      
  331 T  00000742                      ;
  332 T  00000742                      ; clear the entire screen
  333 T  00000742                      ;
  334 T  00000742                      
  335 T  00000742 303C0063             clearscreen move.w      #200/2-1,d0
  336 T  00000746 207AFFEE                         move.l      screen1(pc),a0
  337 T  0000074A 41E87D00                         lea   32000(a0),a0
  338 T  0000074E 7200                             moveq #0,d1
  339 T  00000750 7400                             moveq #0,d2
  340 T  00000752 2601                             move.l      d1,d3
  341 T  00000754 2802                             move.l      d2,d4
  342 T  00000756 2A01                             move.l      d1,d5
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 7



  343 T  00000758 2C02                             move.l      d2,d6
  344 T  0000075A 2E01                             move.l      d1,d7
  345 T  0000075C 2242                             move.l      d2,a1
  346 T  0000075E 2441                             move.l      d1,a2
  347 T  00000760 2642                             move.l      d2,a3
  348 T  00000762 48E07F70             .loop       movem.l d1-d7/a1-a3,-(a0)
  349 T  00000766 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  350 T  0000076A 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  351 T  0000076E 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  352 T  00000772 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  353 T  00000776 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  354 T  0000077A 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  355 T  0000077E 48E07F70                         movem.l d1-d7/a1-a3,-(a0)
  356 T  00000782 51C8FFDE                         dbra  d0,.loop
  357 T  00000786 4E75                             rts
  358 T  00000788                      
  359 T  00000788                      ;
  360 T  00000788                      ; vertical blanking interrupt (50Hz)
  361 T  00000788                      ;
  362 T  00000788                      
  363 T  00000788 48E7FFFE             vbl         movem.l d0-d7/a0-a6,-(sp)
  364 T  0000078C 4CF900FF00016436                 movem.l igdpalette,d0-d7
  365 T  00000794 48F800FF8240                     movem.l d0-d7,$ffff8240.w
  366 T  0000079A 4238FA1B                         clr.b $fffffa1b.w       ;reset timer B
  367 T  0000079E 11FC00C7FA21                     move.b      #199,$fffffa21.w
  368 T  000007A4 11FC0008FA1B                     move.b      #8,$fffffa1b.w
  369 T  000007AA 21FC000007FA0120                 move.l      #hbl,$120.w
  370 T  000007B2 7000                             moveq #0,d0             ;read h/w for
  371 T  000007B4 10388205                         move.b      $ffff8205.w,d0          ;actual video address
  372 T  000007B8 4840                             swap  d0
  373 T  000007BA 10388207                         move.b      $ffff8207.w,d0
  374 T  000007BE E140                             asl.w #8,d0
  375 T  000007C0 23C000008A3E                     move.l      d0,physbase
  376 T  000007C6 61007D24                         bsr   scroll                  ;draw scrolling msg
  377 T  000007CA 6100012C                         bsr   edges             ;and overwrite edges
  378 T  000007CE 41FA0128                         lea   fontpal+16*2(pc),a0
  379 T  000007D2 3020                             move.w      -(a0),d0
  380 T  000007D4                                  rept  3
  381 T  000007D4                                  move.l      -(a0),2(a0)
  382 T  000007D4                                  endr
  383 T  000007E0 31600002                         move.w      -(a0),2(a0)
  384 T  000007E4 3080                             move.w      d0,(a0)
  385 T  000007E6 4EB900008ACE                     jsr   refresh                 ;play music
  386 T  000007EC 4CDF7FFF                         movem.l (sp)+,d0-d7/a0-a6
  387 T  000007F0 50F9000007F8                     st    vblsem
  388 T  000007F6 4E73                             rte
  389 T  000007F8 0000                 vblsem            dc.w  0
  390 T  000007FA                      
  391 T  000007FA                      ;
  392 T  000007FA                      ; horizontal blank interrupt routine
  393 T  000007FA                      ;
  394 T  000007FA                      
  395 T  000007FA 48E7FFFE             hbl         movem.l     d0-d7/a0-a6,-(sp)
  396 T  000007FE 4238FA1B                         clr.b $fffffa1b.w       ;stop timer B
  397 T  00000802 41FA0016                         LEA noplist(PC),A0
  398 T  00000806 327C8209                         MOVE #$8209,A1
  399 T  0000080A 1011                 .syncb            MOVE.B (A1),D0
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 8



  400 T  0000080C 67FC                             BEQ.S .syncb
  401 T  0000080E 04000060                         SUBI.B #$60,D0
  402 T  00000812 0240007E                         AND #$7E,D0
  403 T  00000816 D0C0                             ADDA.W D0,A0
  404 T  00000818 4ED0                             JMP (A0)
  405 T  0000089C                      noplist           DCB.W 65,$4E71
  406 T  0000089C 41FA003A                         lea fontpal(pc),a0
  407 T  000008A0 327C8240                         move.w      #$8240,a1
  408 T  000008A4 22D8                             move.l      (a0)+,(a1)+       
  409 T  000008A6 22D8                             move.l      (a0)+,(a1)+       
  410 T  000008A8 22D8                             move.l      (a0)+,(a1)+       
  411 T  000008AA 4E71                             nop
  412 T  000008AC 4238820A                         clr.b $FffF820A.w
  413 T  000008B0 22D8                             move.l      (a0)+,(a1)+       
  414 T  000008B2 22D8                             move.l      (a0)+,(a1)+       
  415 T  000008B4 22D8                             move.l      (a0)+,(a1)+       
  416 T  000008B6 11FC0002820A                     MOVE.B #2,$FffF820A.w
  417 T  000008BC 22D8                             move.l      (a0)+,(a1)+       
  418 T  000008BE 22D8                             move.l      (a0)+,(a1)+       
  419 T  000008C0 4EB90000887C                     jsr   clearstars
  420 T  000008C6 4EB90000889A                     jsr   movestars
  421 T  000008CC 4EB9000087B4                     jsr   drawstars
  422 T  000008D2 4CDF7FFF                         movem.l     (sp)+,d0-d7/a0-a6
  423 T  000008D6 4E73                             rte
  424 T  000008D8                      
  425 T  000008D8 00000003000400150025 fontpal           dc.w  $000,$003,$004,$015,$025,$036,$046,$057
  426 T  000008E8 00020002000200020002             dc.w  $002,$002,$002,$002,$002,$002,$002,$226
  427 T  000008F8                      
  428 T  000008F8                      ;
  429 T  000008F8                      ; draw edges to scroll bar
  430 T  000008F8                      ;
  431 T  000008F8                      
  432 T  000008F8 207900008A3E         edges       move.l      physbase,a0
  433 T  000008FE D0FC7D00                         add.w #row*nextline,a0
  434 T  00000902 701F                             moveq #height,d0
  435 T  00000904 7200                             moveq #0,d1
  436 T  00000906 2141FFF0                         move.l      d1,-16(a0)
  437 T  0000090A 2141FFF4                         move.l      d1,-12(a0)
  438 T  0000090E 2141FFF8                         move.l      d1,-8(a0)
  439 T  00000912 2141FFFC                         move.l      d1,-4(a0)
  440 T  00000916 43FA002E                         lea   edgeimg(pc),a1
  441 T  0000091A 2219                 .loop       move.l      (a1)+,d1
  442 T  0000091C 2419                             move.l      (a1)+,d2
  443 T  0000091E 2081                             move.l      d1,0(a0)
  444 T  00000920 21420004                         move.l      d2,4(a0)
  445 T  00000924 21410098                         move.l      d1,152(a0)
  446 T  00000928 2142009C                         move.l      d2,156(a0)
  447 T  0000092C 41E800A0                         lea   160(a0),a0
  448 T  00000930 51C8FFE8                         dbra  d0,.loop
  449 T  00000934 7200                             moveq #0,d1
  450 T  00000936 2081                             move.l      d1,(a0)
  451 T  00000938 21410004                         move.l      d1,4(a0)
  452 T  0000093C 21410008                         move.l      d1,8(a0)
  453 T  00000940 2141000C                         move.l      d1,12(a0)
  454 T  00000944 4E75                             rts
  455 T  00000946                      edgeimg           rept  (height+1)/8
  456 T  00000946                                  dc.w  $0000,$0000,$0000,$ffff ;8
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 9



  457 T  00000946                                  dc.w  $ffff,$0000,$0000,$ffff ;9
  458 T  00000946                                  dc.w  $0000,$ffff,$0000,$ffff ;10
  459 T  00000946                                  dc.w  $ffff,$ffff,$0000,$ffff ;11
  460 T  00000946                                  dc.w  $0000,$0000,$ffff,$ffff ;12
  461 T  00000946                                  dc.w  $ffff,$0000,$ffff,$ffff ;13
  462 T  00000946                                  dc.w  $0000,$ffff,$ffff,$ffff ;14
  463 T  00000946                                  dc.w  $ffff,$ffff,$ffff,$ffff ;15
  464 T  00000946                                  endr
  465 T  00000A46                      
  466 T  00000A46                      ;
  467 T  00000A46                      ; pre-rotate characters
  468 T  00000A46                      ;
  469 T  00000A46                      
  470 T  00000A46 203C00023668         prerot            move.l      #145000,d0
  471 T  00000A4C 4EB900008A1E                     jsr   malloc
  472 T  00000A52 23C900008ABC                     move.l      a1,chartab
  473 T  00000A58 41FA0292                         lea   charset(pc),a0          ;font data
  474 T  00000A5C 7E2D                             moveq #45,d7
  475 T  00000A5E 3F07                 .loop       move.w d7,-(Sp)
  476 T  00000A60 6100003C                         bsr   clrchar
  477 T  00000A64 6100005E                         bsr   drawchar
  478 T  00000A68 61000078                         bsr   storechar         ;normal
  479 T  00000A6C 6100011E                         bsr   rotleft
  480 T  00000A70 61000070                         bsr   storechar         ;4 left
  481 T  00000A74 61000116                         bsr   rotleft
  482 T  00000A78 61000068                         bsr   storechar         ;8 left
  483 T  00000A7C 6100010E                         bsr   rotleft
  484 T  00000A80 61000060                         bsr   storechar         ;12 left
  485 T  00000A84 3E1F                             move.w (sp)+,d7
  486 T  00000A86 51CFFFD6                         dbf d7,.loop
  487 T  00000A8A 41F900000CEC                     lea charset,a0
  488 T  00000A90 303C0EFF                         move #(30720/8)-1,d0
  489 T  00000A94 4298                 clearc            clr.l (a0)+
  490 T  00000A96 4298                             clr.l (a0)+
  491 T  00000A98 51C8FFFA                         DBF D0,clearc
  492 T  00000A9C 4E75                             rts
  493 T  00000A9E                      
  494 T  00000A9E                      ;
  495 T  00000A9E                      ; clear character
  496 T  00000A9E                      ;
  497 T  00000A9E 2C7900008A3E         clrchar     move.l      physbase,a6
  498 T  00000AA4 701F                             moveq #height,d0
  499 T  00000AA6 7200                             moveq #0,d1
  500 T  00000AA8 2A4E                 .clrloop    move.l      a6,a5
  501 T  00000AAA                                  rept  width+2
  502 T  00000AAA                                  move.l      d1,(a5)+
  503 T  00000AAA                                  move.l      d1,(a5)+
  504 T  00000AAA                                  endr
  505 T  00000ABA 4DEE00A0                         lea   nextline(a6),a6
  506 T  00000ABE 51C8FFE8                         dbra  d0,.clrloop
  507 T  00000AC2 4E75                             rts
  508 T  00000AC4                      ;
  509 T  00000AC4                      ; draw character
  510 T  00000AC4                      ;
  511 T  00000AC4 2C7900008A3E         drawchar    move.l      physbase,a6
  512 T  00000ACA 504E                             addq.w      #8,a6             ;2nd block
  513 T  00000ACC 701F                             moveq #height,d0
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 10



  514 T  00000ACE 2A4E                 .drawloop   move.l      a6,a5
  515 T  00000AD0                                  rept  width
  516 T  00000AD0                                  move.l      (a0)+,(a5)+
  517 T  00000AD0                                  move.l      (a0)+,(a5)+
  518 T  00000AD0                                  endr
  519 T  00000AD8 4DEE00A0                         lea   nextline(a6),a6
  520 T  00000ADC 51C8FFF0                         dbra  d0,.drawloop
  521 T  00000AE0 4E75                             rts
  522 T  00000AE2                      ;
  523 T  00000AE2                      ; store character
  524 T  00000AE2                      ;
  525 T  00000AE2 2C7900008A3E         storechar   move.l      physbase,a6
  526 T  00000AE8 284E                             move.l      a6,a4
  527 T  00000AEA 49EC3E80                         lea   100*nextline(a4),a4
  528 T  00000AEE 701F                             moveq #height,d0
  529 T  00000AF0 2A4E                 .storeloop  move.l      a6,a5
  530 T  00000AF2 264C                             move.l      a4,a3
  531 T  00000AF4                                  rept  width+1
  532 T  00000AF4                                  movem.w (a5)+,d1-d4
  533 T  00000AF4                                  move.w      d1,d5
  534 T  00000AF4                                  or.w  d2,d5
  535 T  00000AF4                                  or.w  d3,d5
  536 T  00000AF4                                  or.w  d4,d5
  537 T  00000AF4                                  not.w d5
  538 T  00000AF4                                  move.w      (a3)+,d6
  539 T  00000AF4                                  and.w d5,d6
  540 T  00000AF4                                  or.w  d1,d6
  541 T  00000AF4                                  move.w      d6,(a1)+          ;p0
  542 T  00000AF4                                  move.w      (a3)+,d6
  543 T  00000AF4                                  and.w d5,d6
  544 T  00000AF4                                  or.w  d2,d6
  545 T  00000AF4                                  move.w      d6,(a1)+          ;p1
  546 T  00000AF4                                  move.w      (a3)+,d6
  547 T  00000AF4                                  and.w d5,d6
  548 T  00000AF4                                  or.w  d3,d6
  549 T  00000AF4                                  move.w      d6,(a1)+          ;p2
  550 T  00000AF4                                  move.w      (a3)+,d6
  551 T  00000AF4                                  and.w d5,d6
  552 T  00000AF4                                  or.w  d4,d6
  553 T  00000AF4                                  move.w      d6,(a1)+          ;p3
  554 T  00000AF4                                  endr
  555 T  00000B7E 49EC00A0                         lea   nextline(a4),a4
  556 T  00000B82 4DEE00A0                         lea   nextline(a6),a6
  557 T  00000B86 51C8FF68                         dbra  d0,.storeloop
  558 T  00000B8A 4E75                             rts
  559 T  00000B8C                      ;
  560 T  00000B8C                      ; rotate character left 4 pixels
  561 T  00000B8C                      ;
  562 T  00000B8C 2C7900008A3E         rotleft     move.l      physbase,a6
  563 T  00000B92 701F                             moveq #height,d0
  564 T  00000B94 7204                             moveq #4,d1
  565 T  00000B96 2A4E                 .rotloop    move.l      a6,a5
  566 T  00000B98                                  rept  width+1
  567 T  00000B98                                  movem.w 8(a5),d2-d5
  568 T  00000B98                                  swap  d2
  569 T  00000B98                                  swap  d3
  570 T  00000B98                                  swap  d4
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 11



  571 T  00000B98                                  swap  d5
  572 T  00000B98                                  move.w      (a5),d2
  573 T  00000B98                                  rol.l d1,d2
  574 T  00000B98                                  move.w      d2,(a5)+
  575 T  00000B98                                  move.w      (a5),d3
  576 T  00000B98                                  rol.l d1,d3
  577 T  00000B98                                  move.w      d3,(a5)+
  578 T  00000B98                                  move.w      (a5),d4
  579 T  00000B98                                  rol.l d1,d4
  580 T  00000B98                                  move.w      d4,(a5)+
  581 T  00000B98                                  move.w      (a5),d5
  582 T  00000B98                                  rol.l d1,d5
  583 T  00000B98                                  move.w      d5,(a5)+
  584 T  00000B98                                  endr
  585 T  00000C0A 4DEE00A0                         lea   nextline(a6),a6
  586 T  00000C0E 51C8FF86                         dbra  d0,.rotloop
  587 T  00000C12 4E75                             rts
  588 T  00000C14                      ;
  589 T  00000C14                      ; initialize scroller
  590 T  00000C14                      ;
  591 T  00000C14 203C00007D00         setscroll   move.l      #row*nextline,d0
  592 T  00000C1A 41F900008A46                     lea   ptrtab,a0
  593 T  00000C20 6100007A                         bsr   .store6
  594 T  00000C24 5180                             subq.l      #8,d0
  595 T  00000C26 61000074                         bsr   .store6
  596 T  00000C2A 5180                             subq.l      #8,d0
  597 T  00000C2C 6100006E                         bsr   .store6
  598 T  00000C30 23FC00008A4600008A42             move.l      #ptrtab,ptrptr
  599 T  00000C3A 203900008ABC                     move.l      chartab,d0
  600 T  00000C40 068000022800                     add.l #46*nextchar*4,d0
  601 T  00000C46 41F900008A9A                     lea   charptr,a0
  602 T  00000C4C                                  rept  nblocks
  603 T  00000C4C                                  move.l      d0,(a0)+
  604 T  00000C4C                                  endr
  605 T  00000C5A 33FC000400008AB6                 move.w      #4,coffset
  606 T  00000C62 41F90000A48E                     lea   scrolltext,a0
  607 T  00000C68 1010                             move.b      (a0),d0
  608 T  00000C6A 61000018             .fixloop    bsr   .convert
  609 T  00000C6E 10C0                             move.b      d0,(a0)+
  610 T  00000C70 1010                             move.b      (a0),d0
  611 T  00000C72 66F6                             bne.s .fixloop
  612 T  00000C74 10BC00FF                         move.b      #-1,(a0)
  613 T  00000C78 23FC0000A48E00008AB8             move.l      #scrolltext,textptr
  614 T  00000C82 4E75                             rts
  615 T  00000C84 43F900000CBC         .convert    lea   charlookup,a1
  616 T  00000C8A B019                 .search     cmp.b (a1)+,d0
  617 T  00000C8C 6704                             beq.s .found
  618 T  00000C8E 4A11                             tst.b (a1)
  619 T  00000C90 66F8                             bne.s .search
  620 T  00000C92 93FC00000CBD         .found            sub.l #charlookup+1,a1
  621 T  00000C98 2009                             move.l      a1,d0
  622 T  00000C9A 4E75                             rts
  623 T  00000C9C 2200                 .store6     move.l      d0,d1
  624 T  00000C9E 7418                             moveq #24,d2
  625 T  00000CA0                                  rept  nblocks-1
  626 T  00000CA0                                  move.l      d1,(a0)+
  627 T  00000CA0                                  add.l d2,d1
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 12



  628 T  00000CA0                                  endr
  629 T  00000CB8 20C1                             move.l      d1,(a0)+
  630 T  00000CBA 4E75                             rts
  631 T  00000CBC                      ;
  632 T  00000CBC                      ; character set
  633 T  00000CBC                      ;
  634 T  00000CBC 20212728292C2D2E3031 charlookup  dc.b  " !'(),-.0123456789:?ABCDEFGHIJKLMNOP"
  635 T  00000CE0 5152535455565758595A             dc.b  "QRSTUVWXYZ",0
  636 T  00000CEC                                  even
  637 T  00000CEC                      igdworkspace      
  638 T  000084EC                      charset     incbin      "megadeth.ch4"
  639 T  000084EC                      charsetend  even
  640 T  000084EC                      ;
  641 T  000084EC                      ; main scroller
  642 T  000084EC                      ;
  643 T  000084EC                      
  644 T  000084EC 2C7900008A42         scroll            move.l      ptrptr,a6
  645   =00000000                      xaddr       set   0
  646 T  000084F2                                  rept  nblocks
  647 T  000084F2                                  move.l      charptr+xaddr,a0
  648 T  000084F2                                  move.l      (a6)+,a1
  649 T  000084F2                                  bsr   .drawchar
  650 T  000084F2                      xaddr       set   xaddr+4
  651 T  000084F2                                  endr
  652 T  00008546 537900008AB6                     subq.w      #1,coffset
  653 T  0000854C 671C                             beq.s .reload
  654 T  0000854E 41F900008A9A                     lea   charptr,a0
  655 T  00008554 203C00000300                     move.l      #nextchar,d0
  656 T  0000855A                                  rept  nblocks
  657 T  0000855A                                  add.l d0,(a0)+
  658 T  0000855A                                  endr
  659 T  00008568 4E75                             rts
  660 T  0000856A 33FC000400008AB6     .reload     move.w      #4,coffset
  661 T  00008572 41F900008A9A                     lea   charptr,a0
  662 T  00008578 203C00000900                     move.l      #nextchar*3,d0
  663 T  0000857E                                  rept  nblocks
  664 T  0000857E                                  sub.l d0,(a0)+
  665 T  0000857E                                  endr
  666 T  0000858C BDFC00008A9A                     cmp.l #ptrtabend,a6
  667 T  00008592 6708                             beq.s .wrap
  668 T  00008594 23CE00008A42                     move.l      a6,ptrptr
  669 T  0000859A 4E75                             rts
  670 T  0000859C 23FC00008A4600008A42 .wrap       move.l      #ptrtab,ptrptr
  671 T  000085A6 41F900008A9A                     lea   charptr,a0
  672 T  000085AC                                  rept  nblocks-1
  673 T  000085AC                                  move.l      4(a0),(a0)+
  674 T  000085AC                                  endr
  675 T  000085C4 227900008AB8                     move.l      textptr,a1
  676 T  000085CA 7000                             moveq #0,d0
  677 T  000085CC 1019                 .redo       move.b      (a1)+,d0
  678 T  000085CE 6B14                             bmi.s .endofstring
  679 T  000085D0 23C900008AB8                     move.l      a1,textptr
  680 T  000085D6 C0FC0C00                         mulu  #nextchar*4,d0
  681 T  000085DA D0B900008ABC                     add.l chartab,d0
  682 T  000085E0 2080                             move.l      d0,(a0)
  683 T  000085E2 4E75                             rts
  684 T  000085E4 227C0000A48E         .endofstring      move.l      #scrolltext,a1
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 13



  685 T  000085EA 60E0                             bra.s .redo
  686 T  000085EC D3F900008A3E         .drawchar   add.l physbase,a1
  687   =00000000                      oset        set   0
  688 T  000085F2                                  rept  (height+1)/2
  689 T  000085F2                                  movem.l (a0)+,d0-d7/a2-a5
  690 T  000085F2                                  movem.l d0-d5,oset(a1)
  691 T  000085F2                                  movem.l d6-d7/a2-a5,oset+160(a1)
  692 T  000085F2                      oset        set   oset+320
  693 T  000085F2                                  endr
  694 T  000086F0 4E75                             rts
  695 T  000086F2                      
  696 T  000086F2                      ;
  697 T  000086F2                      ; initialize starfield
  698 T  000086F2                      ;
  699 T  000086F2                      
  700 T  000086F2 203C00000258         initstars   move.l      #numstars*12,d0
  701 T  000086F8 61000324                         bsr   malloc
  702 T  000086FC 23C900008768                     move.l      a1,startab0
  703 T  00008702 203C00000258                     move.l      #numstars*12,d0
  704 T  00008708 61000314                         bsr   malloc
  705 T  0000870C 23C90000876C                     move.l      a1,startab1
  706 T  00008712 50D1                             st    (a1)
  707 T  00008714 203C0000C000                     move.l      #randnum*6,d0
  708 T  0000871A 61000302                         bsr   malloc
  709 T  0000871E 23C900008770                     move.l      a1,randtab
  710 T  00008724 23C900008774                     move.l      a1,randptr
  711 T  0000872A 3E3C0031                         move.w      #numstars-1,d7
  712 T  0000872E 207900008768                     move.l      startab0,a0
  713 T  00008734 61000042             .newstar    bsr   genstar
  714 T  00008738 4840                             swap  d0
  715 T  0000873A 4841                             swap  d1                ;startable entry
  716 T  0000873C 4842                             swap  d2                ;is 12 bytes
  717 T  0000873E 4240                             clr.w d0                ; 0  = x coord
  718 T  00008740 4241                             clr.w d1                ; 4  = y coord
  719 T  00008742 4242                             clr.w d2                ; 12 = colour
  720 T  00008744 20C0                             move.l      d0,(a0)+
  721 T  00008746 20C1                             move.l      d1,(a0)+
  722 T  00008748 20C2                             move.l      d2,(a0)+
  723 T  0000874A 51CFFFE8                         dbra  d7,.newstar
  724 T  0000874E 3E3C1FFF                         move.w      #randnum-1,d7
  725 T  00008752 207900008770                     move.l      randtab,a0
  726 T  00008758 6100001E             .newrand    bsr   genstar           ;d0=x d1=y d2=col
  727 T  0000875C 30C0                             move.w      d0,(a0)+
  728 T  0000875E 30C1                             move.w      d1,(a0)+
  729 T  00008760 30C2                             move.w      d2,(a0)+
  730 T  00008762 51CFFFF4                         dbra  d7,.newrand
  731 T  00008766 4E75                             rts
  732 T  00008768 00000000             startab0    dc.l  0
  733 T  0000876C 00000000             startab1    dc.l  0
  734 T  00008770 00000000             randtab     dc.l  0     ;* must be before randptr *
  735 T  00008774 00000000             randptr     dc.l  0     ;* these two must be together *
  736 T  00008778                      ;
  737 T  00008778                      ; generate a random star
  738 T  00008778                      ;
  739 T  00008778 4EB90000C9F8         genstar     jsr   random
  740 T  0000877E 024000FF                         and.w #255,d0           ;0-255
  741 T  00008782 B07C00C6                         cmp.w #symax,d0
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 14



  742 T  00008786 6CF0                             bge.s genstar
  743 T  00008788 B07C0063                         cmp.w #smidy,d0
  744 T  0000878C 67EA                             beq.s genstar
  745 T  0000878E 3200                             move.w      d0,d1             ;y coord
  746 T  00008790 4EB90000C9F8                     jsr   random
  747 T  00008796 3400                             move.w      d0,d2             ;colour
  748 T  00008798 4EB90000C9F8         .genx       jsr   random
  749 T  0000879E 024001FF                         and.w #511,d0           ;0-511
  750 T  000087A2 B07C0140                         cmp.w #sxmax,d0
  751 T  000087A6 6CF0                             bge.s .genx
  752 T  000087A8 B07C009F                         cmp.w #smidx,d0
  753 T  000087AC 67EA                             beq.s .genx
  754 T  000087AE 02420003                         and.w #3,d2
  755 T  000087B2 4E75                             rts
  756 T  000087B4                      ;
  757 T  000087B4                      ; draw the current starfield
  758 T  000087B4                      ;
  759 T  000087B4 207900008768         drawstars   move.l      startab0,a0
  760 T  000087BA 43F90000885C                     lea   .ds_x30,a1
  761 T  000087C0 45FA1B3C                         lea   x160(pc),a2
  762 T  000087C4 267900000704                     move.l      pixtable,a3
  763 T  000087CA 49F900008850                     lea   .ds_next,a4
  764 T  000087D0 2A790000876C                     move.l      startab1,a5
  765 T  000087D6 2C3A0266                         move.l      physbase(pc),d6
  766 T  000087DA 3E3C0031                         move.w      #numstars-1,d7
  767 T  000087DE 3010                 .ds_loop    move.w      (a0),d0           ;x
  768 T  000087E0 32280004                         move.w      4(a0),d1          ;y
  769 T  000087E4 34280008                         move.w      8(a0),d2          ;col
  770 T  000087E8 D040                             add.w d0,d0
  771 T  000087EA D040                             add.w d0,d0             ;x * 4
  772 T  000087EC D241                             add.w d1,d1
  773 T  000087EE 2C46                             move.l      d6,a6             ;top of screen
  774 T  000087F0 DCF21000                         add.w 0(a2,d1.w),a6
  775 T  000087F4 DCF30000                         add.w 0(a3,d0.w),a6
  776 T  000087F8 30330002                         move.w      2(a3,d0.w),d0           ;bitset for pixel
  777 T  000087FC 3200                             move.w      d0,d1
  778 T  000087FE 4641                             not.w d1                ;bitmask
  779 T  00008800 361E                             move.w      (a6)+,d3
  780 T  00008802 865E                             or.w  (a6)+,d3
  781 T  00008804 865E                             or.w  (a6)+,d3          ;read current pixel
  782 T  00008806 865E                             or.w  (a6)+,d3
  783 T  00008808 C641                             and.w d1,d3
  784 T  0000880A 66000044                         bne   .ds_next          ;not blank!
  785 T  0000880E 4DEEFFF8                         lea   -8(a6),a6
  786 T  00008812 2ACE                             move.l      a6,(a5)+          ;address
  787 T  00008814 3AC1                             move.w      d1,(a5)+          ;bitset for pixel
  788 T  00008816 D442                             add.w d2,d2
  789 T  00008818 34312000                         move.w      0(a1,d2.w),d2           ;jmp offset
  790 T  0000881C 4EFB2002                         jmp   .ds_star0(pc,d2.w)
  791 T  00008820                      
  792 T  00008820 815E                 .ds_star0   or.w  d0,(a6)+          ;colour 11
  793 T  00008822 815E                             or.w  d0,(a6)+
  794 T  00008824 C35E                             and.w d1,(a6)+
  795 T  00008826 815E                             or.w  d0,(a6)+
  796 T  00008828 4ED4                             jmp   (a4)
  797 T  0000882A                      
  798 T  0000882A C35E                 .ds_star1   and.w d1,(a6)+          ;colour 12
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 15



  799 T  0000882C C35E                             and.w d1,(a6)+
  800 T  0000882E 815E                             or.w  d0,(a6)+
  801 T  00008830 815E                             or.w  d0,(a6)+
  802 T  00008832 4ED4                             jmp   (a4)
  803 T  00008834                      
  804 T  00008834 815E                 .ds_star2   or.w  d0,(a6)+          ;colour 13
  805 T  00008836 C35E                             and.w d1,(a6)+
  806 T  00008838 815E                             or.w  d0,(a6)+
  807 T  0000883A 815E                             or.w  d0,(a6)+
  808 T  0000883C 4ED4                             jmp   (a4)
  809 T  0000883E                      
  810 T  0000883E C35E                 .ds_star3   and.w d1,(a6)+          ;colour 14
  811 T  00008840 815E                             or.w  d0,(a6)+
  812 T  00008842 815E                             or.w  d0,(a6)+
  813 T  00008844 815E                             or.w  d0,(a6)+
  814 T  00008846 4ED4                             jmp   (a4)
  815 T  00008848                      
  816 T  00008848 815E                 .ds_star4   or.w  d0,(a6)+          ;colour 15
  817 T  0000884A 815E                             or.w  d0,(a6)+
  818 T  0000884C 815E                             or.w  d0,(a6)+
  819 T  0000884E 815E                             or.w  d0,(a6)+
  820 T  00008850                      
  821 T  00008850 41E8000C             .ds_next    lea   12(a0),a0
  822 T  00008854 51CFFF88                         dbra  d7,.ds_loop
  823 T  00008858 50D5                             st    (a5)              ;terminate list
  824 T  0000885A 4E75                             rts
  825 T  0000885C                      
  826 T  0000885C 0000000A0014001E0028 .ds_x30     dc.w  0,10,20,30,40,40,40,40,40,40,40,40,40,40,40,40
  827 T  0000887C                      
  828 T  0000887C                      ;
  829 T  0000887C                      ; remove the current starfield
  830 T  0000887C                      ;
  831 T  0000887C 20790000876C         clearstars  move.l      startab1,a0
  832 T  00008882 2018                             move.l      (a0)+,d0
  833 T  00008884 6B000012                         bmi   .cs_exit
  834 T  00008888 2240                 .cs_loop    move.l      d0,a1
  835 T  0000888A 3018                             move.w      (a0)+,d0
  836 T  0000888C C159                             and.w d0,(a1)+
  837 T  0000888E C159                             and.w d0,(a1)+
  838 T  00008890 C159                             and.w d0,(a1)+
  839 T  00008892 C159                             and.w d0,(a1)+
  840 T  00008894 2018                             move.l      (a0)+,d0
  841 T  00008896 6AF0                             bpl.s .cs_loop
  842 T  00008898 4E75                 .cs_exit    rts
  843 T  0000889A                      ;
  844 T  0000889A                      ; move the starfield
  845 T  0000889A                      ;
  846 T  0000889A 04B900008000000088FA movestars   sub.l #32768,.timer
  847 T  000088A4 6A2C                             bpl.s .same
  848 T  000088A6 23FC00640000000088FA             move.l      #100<<16,.timer
  849 T  000088B0 3039000088FE                     move.w      .smcvar,d0
  850 T  000088B6 5240                             addq.w      #1,d0
  851 T  000088B8 B07C0010                         cmp.w #16,d0
  852 T  000088BC 6602                             bne.s .nowrap
  853 T  000088BE 7000                             moveq #0,d0
  854 T  000088C0 33C0000088FE         .nowrap     move.w      d0,.smcvar
  855 T  000088C6 D040                             add.w d0,d0
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 16



  856 T  000088C8 D040                             add.w d0,d0
  857 T  000088CA 23FB00340000895E                 move.l      .smctab(pc,d0.w),.rotsmc
  858 T  000088D2 207900008768         .same       move.l      startab0,a0
  859 T  000088D8 247900008770                     move.l      randtab,a2
  860 T  000088DE D5FC0000C000                     add.l #randnum*6,a2
  861 T  000088E4 267900008774                     move.l      randptr,a3
  862 T  000088EA 3E3C0031                         move.w      #numstars-1,d7
  863 T  000088EE 61000050                         bsr   .loop             ;move stars
  864 T  000088F2 23CB00008774                     move.l      a3,randptr
  865 T  000088F8 4E75                             rts
  866 T  000088FA 00640000             .timer            dc.l  100<<16
  867 T  000088FE 0000                 .smcvar     dc.w  0
  868 T  00008900 4E71                 .smctab     nop
  869 T  00008902 4E71                             nop
  870 T  00008904 D083                             add.l d3,d0             ;splay from center
  871 T  00008906 4E71                             nop                     ;
  872 T  00008908 4E71                             nop
  873 T  0000890A 4E71                             nop
  874 T  0000890C 9083                             sub.l d3,d0             ;splay from center
  875 T  0000890E 4E71                             nop                     ;
  876 T  00008910 4E71                             nop
  877 T  00008912 4E71                             nop
  878 T  00008914 D082                             add.l d2,d0             ;out sides from center
  879 T  00008916 9283                             sub.l d3,d1
  880 T  00008918 4E71                             nop
  881 T  0000891A 4E71                             nop
  882 T  0000891C 9082                             sub.l d2,d0             ;out top/bot from center
  883 T  0000891E D283                             add.l d3,d1
  884 T  00008920 4E71                             nop
  885 T  00008922 4E71                             nop
  886 T  00008924 9083                             sub.l d3,d0             ;clockwise
  887 T  00008926 D282                             add.l d2,d1
  888 T  00008928 4E71                             nop
  889 T  0000892A 4E71                             nop
  890 T  0000892C D083                             add.l d3,d0             ;anti-clockwise
  891 T  0000892E 9282                             sub.l d2,d1
  892 T  00008930 4E71                             nop
  893 T  00008932 4E71                             nop
  894 T  00008934 9083                             sub.l d3,d0             ;?
  895 T  00008936 9282                             sub.l d2,d1
  896 T  00008938 4E71                             nop
  897 T  0000893A 4E71                             nop
  898 T  0000893C D083                             add.l d3,d0             ;?
  899 T  0000893E D282                             add.l d2,d1
  900 T  00008940 2010                 .loop       move.l      (a0),d0           ;x
  901 T  00008942 22280004                         move.l      4(a0),d1          ;y
  902 T  00008946 0480009F0000                     sub.l #smidx<<16,d0
  903 T  0000894C 048100630000                     sub.l #smidy<<16,d1
  904 T  00008952 2400                             move.l      d0,d2
  905 T  00008954 2601                             move.l      d1,d3             ;delta
  906 T  00008956 EA82                             asr.l #5,d2
  907 T  00008958 EA83                             asr.l #5,d3
  908 T  0000895A D082                             add.l d2,d0
  909 T  0000895C D283                             add.l d3,d1
  910 T  0000895E 4E71                 .rotsmc     nop
  911 T  00008960 4E71                             nop
  912 T  00008962 0680009F0000                     add.l #smidx<<16,d0           ;normalize x
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 17



  913 T  00008968 B0BC01400000                     cmp.l #sxmax<<16,d0
  914 T  0000896E 6432                             bcc.s .newstar
  915 T  00008970 068100630000                     add.l #smidy<<16,d1           ;normalize y
  916 T  00008976 B2BC00C60000                     cmp.l #symax<<16,d1
  917 T  0000897C 6424                             bcc.s .newstar
  918 T  0000897E 24280008                         move.l      8(a0),d2
  919 T  00008982 068200000800                     add.l #$800,d2          ;brighter
  920 T  00008988 B4BC000F0000                     cmp.l #15<<16,d2
  921 T  0000898E 6F06                             ble.s .next             ;force 0-15
  922 T  00008990 243C000F0000                     move.l      #15<<16,d2
  923 T  00008996 20C0                 .next       move.l      d0,(a0)+
  924 T  00008998 20C1                             move.l      d1,(a0)+          ;save new coords
  925 T  0000899A 20C2                             move.l      d2,(a0)+
  926 T  0000899C 51CFFFA2                         dbra  d7,.loop
  927 T  000089A0 4E75                             rts
  928 T  000089A2 301B                 .newstar    move.w      (a3)+,d0          ;x
  929 T  000089A4 321B                             move.w      (a3)+,d1          ;y
  930 T  000089A6 341B                             move.w      (a3)+,d2          ;col
  931 T  000089A8 4840                             swap  d0
  932 T  000089AA 4841                             swap  d1
  933 T  000089AC 4842                             swap  d2
  934 T  000089AE 4240                             clr.w d0
  935 T  000089B0 4241                             clr.w d1
  936 T  000089B2 4242                             clr.w d2
  937 T  000089B4 20C0                             move.l      d0,(a0)+
  938 T  000089B6 20C1                             move.l      d1,(a0)+          ;save new coords
  939 T  000089B8 20C2                             move.l      d2,(a0)+
  940 T  000089BA B7CA                             cmp.l a2,a3
  941 T  000089BC 6706                             beq.s .wrap
  942 T  000089BE 51CFFF80                         dbra  d7,.loop
  943 T  000089C2 4E75                             rts
  944 T  000089C4 267900008770         .wrap       move.l      randtab,a3
  945 T  000089CA 51CFFF74                         dbra  d7,.loop
  946 T  000089CE 4E75                             rts
  947 T  000089D0                      
  948 T  000089D0                      ;
  949 T  000089D0                      ; initialize the 3d, and move bottom clipping up one line
  950 T  000089D0                      ; to hide the palette swap 'bounce'
  951 T  000089D0                      ;
  952 T  000089D0                      
  953 T  000089D0 41F90000C9D0         init3d            lea   xmax,a0
  954 T  000089D6 2248                             move.l      a0,a1
  955 T  000089D8 303C4B5B                         move.w      #(threedend-xmax)/2-1,d0
  956 T  000089DC 7200                             moveq #0,d1
  957 T  000089DE D258                 .ggg        add.w (a0)+,d1
  958 T  000089E0 51C8FFFC                         dbra  d0,.ggg
  959 T  000089E4 044151FC                         sub.w #$51FC,d1
  960 T  000089E8 4EA9FFE4                         jsr   -28(a1)
  961 T  000089EC 203C00000400                     move.l      #1024,d0          ;1k for selfsort
  962 T  000089F2 6100002A                         bsr   malloc
  963 T  000089F6 23C90000C9F4                     move.l      a1,ss_workspace
  964 T  000089FC 33FC00C60000C9D2                 move.w      #198,ymax
  965 T  00008A04 4E75                             rts
  966 T  00008A06                      
  967 T  00008A06                      ;
  968 T  00008A06                      ; free all allocated memory
  969 T  00008A06                      ;
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 18



  970 T  00008A06                      
  971 T  00008A06 43F9000217FC         dealloc     lea   miscmem,a1
  972 T  00008A0C 203A002C                         move.l      maxram(pc),d0
  973 T  00008A10 22C0                             move.l      d0,(a1)+
  974 T  00008A12 7200                             moveq #0,d1
  975 T  00008A14 22C1                 .clrloop    move.l      d1,(a1)+
  976 T  00008A16 22C1                             move.l      d1,(a1)+
  977 T  00008A18 5180                             subq.l      #8,d0
  978 T  00008A1A 6AF8                             bpl.s .clrloop
  979 T  00008A1C 4E75                             rts
  980 T  00008A1E                      
  981 T  00008A1E                      ;
  982 T  00008A1E                      ; allocate memory block
  983 T  00008A1E                      ;
  984 T  00008A1E                      
  985 T  00008A1E 43F9000217FC         malloc            lea   miscmem,a1
  986 T  00008A24 B091                             cmp.l (a1),d0
  987 T  00008A26 6E06                             bgt.s .nomem
  988 T  00008A28 9191                             sub.l d0,(a1)           ;work downwards
  989 T  00008A2A D3D9                             add.l (a1)+,a1
  990 T  00008A2C 4E75                             rts
  991 T  00008A2E 46FC2700             .nomem            move #$2700,sr
  992 T  00008A32 31FC07008240                     move #$700,$ffff8240.w
  993 T  00008A38 60FE                 .forever    bra .forever
  994 T  00008A3A                      
  995 T  00008A3A                      ;
  996 T  00008A3A                      ; variables / data
  997 T  00008A3A                      ;
  998 T  00008A3A                      
  999 T  00008A3A 00080000             maxram            dc.l  $80000
 1000 T  00008A3E 00078000             physbase    dc.l  $78000
 1001 T  00008A42 00000000             ptrptr            dc.l  0
 1002 T  00008A9A                      ptrtab            ds.l  nblocks*3
 1003 T  00008A9A                      ptrtabend
 1004 T  00008AB6                      charptr     ds.l  nblocks
 1005 T  00008AB6 0000                 coffset     dc.w  0
 1006 T  00008AB8 0000A48E             textptr     dc.l  scrolltext
 1007 T  00008ABC 00000000             chartab     dc.l  0
 1008 T  00008AC0                      
 1009 T  00008AC0                      ;
 1010 T  00008AC0                      ; david whittaker music
 1011 T  00008AC0                      ;
 1012 T  00008AC0                      
 1013 T  0000A2FE                      music       incbin      "blaze.wit"
 1014   =00008ACE                      refresh     equ   music+$e
 1015 T  0000A2FE                      
 1016 T  0000A2FE                      ;
 1017 T  0000A2FE                      ; lookup table for x160
 1018 T  0000A2FE                      ;
 1019 T  0000A2FE                      
 1020 T  0000A2FE                      x160
 1021   =00000000                      offset            set   0
 1022 T  0000A2FE                                  rept  200
 1023 T  0000A2FE                                  dc.w  offset
 1024 T  0000A2FE                      offset            set   offset+160
 1025 T  0000A2FE                                  endr
 1026 T  0000A48E                      ;
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 19



 1027 T  0000A48E                      ; SCROLLING MESSAGE
 1028 T  0000A48E                      ;
 1029 T  0000A48E                      ; typed and composed by Mark Stafford
 1030 T  0000A48E                      ;
 1031 T  0000A48E                      scrolltext
 1032 T  0000A48E 20202020202020202020  DC.B "             "
 1033 T  0000A49B 202050524553454E5449  DC.B "  PRESENTING"
 1034 T  0000A4A7 2020414E20415544494F  DC.B "  AN AUDIO-VISUAL EXPERIENCE "
 1035 T  0000A4C4 202042524F5547485420  DC.B "  BROUGHT TO YOU BY "
 1036 T  0000A4D8 20205448452052454420  DC.B "  THE RED HERRINGS "
 1037 T  0000A4EB 2020494E204153534F43  DC.B "  IN ASSOCIATION WITH "
 1038 T  0000A501 202054484520494E4E45  DC.B "  THE INNER CIRCLE "
 1039 T  0000A514 2020435245444954533A  DC.B "  CREDITS: "
 1040 T  0000A51F 202050524F4752414D4D  DC.B "  PROGRAMMING, SHAPES AND POTS OF TEA "
 1041 T  0000A545 2020544845204D41534B  DC.B "  THE MASKED PROGRAMMER  --  "
 1042 T  0000A562 2020574F5244532C2041  DC.B "  WORDS, ARTY STUFF AND TEA DRINKER "
 1043 T  0000A586 20204D41524B20535441  DC.B "  MARK STAFFORD "
 1044 T  0000A596 20205448452052454420  DC.B "  THE RED HERRINGS WOULD LIKE TO THANK "
 1045 T  0000A5BD 20204445565041432044  DC.B "  DEVPAC DEVELOPER "
 1046 T  0000A5D0 20204143544956495349  DC.B "  ACTIVISIONS MUSIC STUDIO "
 1047 T  0000A5EB 202031535420574F5244  DC.B "  1ST WORD PLUS "
 1048 T  0000A5FB 20204C4545445320554E  DC.B "  LEEDS UNITED "
 1049 T  0000A60A 202050454F504C452057  DC.B "  PEOPLE WHO GIVE THE HERRINGS MONEY "
 1050 T  0000A62F 2020485950454420534F  DC.B "  HYPED SOFTWARE WHICH DOES NOT DELIVER "
 1051 T  0000A657 20204154415249205354  DC.B "  ATARI STS EVERYWHERE "
 1052 T  0000A66E 2020534154454C4C4954  DC.B "  SATELLITE TELEVISION "
 1053 T  0000A685 202059414D4148412053  DC.B "  YAMAHA SYNTHESIZERS "
 1054 T  0000A69B 2020434153494F205359  DC.B "  CASIO SYNTHESIZERS "
 1055 T  0000A6B0 2020414B41492050524F  DC.B "  AKAI PROFESSIONAL SAMPLERS "
 1056 T  0000A6CD 202054415343414D2052  DC.B "  TASCAM RECORDING EQUIPMENT "
 1057 T  0000A6EA 20205048494C49505320  DC.B "  PHILIPS AUDIO "
 1058 T  0000A6FA 2020535045454420414E  DC.B "  SPEED AND THRASH METAL "
 1059 T  0000A713 2020414D535452414420  DC.B "  AMSTRAD MODEMS "
 1060 T  0000A724 2020464F524420464F52  DC.B "  FORD FOR MAKING A HEAP CALLED A SIERRA "
 1061 T  0000A74D 20204C45494345535445  DC.B "  LEICESTER POLY FOR OUR EDEWKAYSHUN "
 1062 T  0000A772 202044494E4F2044494E  DC.B "  DINO DINI FOR PLAYER MANAGER "
 1063 T  0000A791 202052555353454C4C53  DC.B "  RUSSELLS WORK CAN BE FOUND ON "
 1064 T  0000A7B1 202046414C434F4E2046  DC.B "  FALCON F16 "
 1065 T  0000A7BE 20204632392052455441  DC.B "  F29 RETALIATOR "
 1066 T  0000A7CF 20204D41524B5320574F  DC.B "  MARKS WORK CAN ALSO BE FOUND ON "
 1067 T  0000A7F1 20204C415641544F5259  DC.B "  LAVATORY WALLS "
 1068 T  0000A802 202052555353454C4C20  DC.B "  RUSSELL AND MARK ARE BOTH AVAILABLE FOR"
 1069 T  0000A82B 2020414E5920434F4D50  DC.B "  ANY COMPUTER GAMES WORK WHICH PAYS GOOD"
 1070 T  0000A854 20205357454449534820  DC.B "  SWEDISH NYMPHOMANIACS "
 1071 T  0000A86C 202050415254595320    DC.B "  PARTYS "
 1072 T  0000A875 20204E4F57204120574F  DC.B "  NOW A WORD TO ANY POTENTIAL SPONSORS "
 1073 T  0000A89C 2020574859204E4F5420  DC.B "  WHY NOT RENT SPACE IN THESE SCROLLING "
 1074 T  0000A8C4 415245415320544F2041  DC.B "AREAS TO ADVERTISE YOUR PRODUCT OR EVEN "
 1075 T  0000A8EC 48415645204120435553  DC.B "HAVE A CUSTOMISED DEMO PRODUCED FOR YOUR "
 1076 T  0000A915 50524F44554354204259  DC.B "PRODUCT BY THE RED HERRINGS ? "
 1077 T  0000A933 2020434F554C44204245  DC.B "  COULD BE USED AS PART OF ANY "
 1078 T  0000A952 415544494F2D56495355  DC.B "AUDIO-VISUAL PRESENTATION "
 1079 T  0000A96C 20202D2D2D2D2020      DC.B "  ----  "
 1080 T  0000A974 20204E4F5720464F5220  DC.B "  NOW FOR THE TECHNICAL BITS "
 1081 T  0000A991 20205448452053544152  DC.B "  THE STARFIELD HAS 50 STARS IN IT "
 1082 T  0000A9B4 20205448455345205354  DC.B "  THESE STARS GO THROUGH 4 SHADES "
 1083 T  0000A9D6 20205448452053435245  DC.B "  THE SCREEN REFRESH RATE IS 50 FRAMES/SEC"
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 20



 1084 T  0000AA00 202054484953204D4541  DC.B "  THIS MEANS MAX SPEED TO YOU AND ME "
 1085 T  0000AA25 20203620504F4C595320  DC.B "  6 POLYS CAN BE DISPLAYED AT THIS RATE "
 1086 T  0000AA4D 202054484953204D4541  DC.B "  THIS MEANS A TOTAL OF 300 POLYS PER SEC!"
 1087 T  0000AA77 20205448495320494E43  DC.B "  THIS INCLUDES HASH COLOURS "
 1088 T  0000AA94 20205448495320535455  DC.B "  THIS STUFF HAS BEEN REWRITTEN MANY TIMES"
 1089 T  0000AABE 20205255535320534159  DC.B "  RUSS SAYS HE CAN STILL MAKE IT FASTER "
 1090 T  0000AAE6 20205452592054484553  DC.B "  TRY THESE AUTHORS TO GET GOOD INFO "
 1091 T  0000AB0B 2020464F4C455920414E  DC.B "  FOLEY AND VAN DAM "
 1092 T  0000AB1F 2020484541524E20414E  DC.B "  HEARN AND BAKER "
 1093 T  0000AB31 2020444156494420524F  DC.B "  DAVID ROGERS "
 1094 T  0000AB40 20204A4F484E204C414E  DC.B "  JOHN LANSDOWN "
 1095 T  0000AB50 2020524F424552542053  DC.B "  ROBERT SEDGEWICK "
 1096 T  0000AB63 20204255524745522041  DC.B "  BURGER AND GILLIES "
 1097 T  0000AB78 20204E4F57204120574F  DC.B "  NOW A WORD TO ANY POTENTIAL SPONSORS "
 1098 T  0000AB9F 2020574859204E4F5420  DC.B "  WHY NOT RENT SPACE IN THESE SCROLLING "
 1099 T  0000ABC7 415245415320544F2041  DC.B "AREAS TO ADVERTISE YOUR PRODUCT OR EVEN "
 1100 T  0000ABEF 48415645204120435553  DC.B "HAVE A CUSTOMISED DEMO PRODUCED FOR YOUR "
 1101 T  0000AC18 50524F44554354204259  DC.B "PRODUCT BY THE RED HERRINGS ? "
 1102 T  0000AC36 2020434F554C44204245  DC.B "  COULD BE USED AS PART OF ANY "
 1103 T  0000AC55 2020415544494F2D5649  DC.B "  AUDIO-VISUAL PRESENTATION "
 1104 T  0000AC71 202D2D2D2D20          DC.B " ---- "
 1105 T  0000AC77 202054484520464F4C4C  DC.B "  THE FOLLOWING PEOPLE OWE US A DRINK "
 1106 T  0000AC9D 20205345414E20284D45  DC.B "  SEAN (ME BROTHER) "
 1107 T  0000ACB1 2020414C4C2054484520  DC.B "  ALL THE DAVES "
 1108 T  0000ACC1 202054455A5A4120      DC.B "  TEZZA "
 1109 T  0000ACC9 2020524F4220          DC.B "  ROB "
 1110 T  0000ACCF 2020415243484945204D  DC.B "  ARCHIE MICK "
 1111 T  0000ACDD 2020424947204A41434B  DC.B "  BIG JACK T (MR ATARI) "
 1112 T  0000ACF5 202056495A20434F4D49  DC.B "  VIZ COMICS FOR A FREE PLUG "
 1113 T  0000AD12 202049414E20          DC.B "  IAN "
 1114 T  0000AD18 20204452205354455645  DC.B "  DR STEVE "
 1115 T  0000AD23 20204452204D41525449  DC.B "  DR MARTIN (I WISH SOMEONE WOULD) "
 1116 T  0000AD46 20204F5552204D554D53  DC.B "  OUR MUMS AND DADS "
 1117 T  0000AD5A 20205448452052454420  DC.B "  THE RED HERRINGS ENDORSE AND WOULD LIKE "
 1118 T  0000AD84 20204645525241524920  DC.B "  FERRARI TESTAROSSA "
 1119 T  0000AD99 2020504F524348452039  DC.B "  PORCHE 911 TARGA "
 1120 T  0000ADAC 2020544F594F54412043  DC.B "  TOYOTA CELICA GT 4X4 "
 1121 T  0000ADC3 202041504F4C4C4F2044  DC.B "  APOLLO DN10000 "
 1122 T  0000ADD4 202053554E2053504152  DC.B "  SUN SPARCSTATION "
 1123 T  0000ADE7 20204154415249204154  DC.B "  ATARI ATW "
 1124 T  0000ADF3 20204252495449534820  DC.B "  BRITISH AIRWAYS TRANSATLANTIC FLIGHTS "
 1125 T  0000AE1B 2020434153494F20465A  DC.B "  CASIO FZ1 "
 1126 T  0000AE27 2020535445494E424552  DC.B "  STEINBERG CUBASE "
 1127 T  0000AE3A 20205155415254455420  DC.B "  QUARTET "
 1128 T  0000AE44 20205048494C49505320  DC.B "  PHILIPS COLOUR MONITOR "
 1129 T  0000AE5D 2020414B4149204D4731  DC.B "  AKAI MG1212 "
 1130 T  0000AE6B 2020524F4C414E442044  DC.B "  ROLAND D50 "
 1131 T  0000AE78 2020414B414920533130  DC.B "  AKAI S1000 "
 1132 T  0000AE85 20204245434B53204245  DC.B "  BECKS BEER "
 1133 T  0000AE92 202057414C4C5320434F  DC.B "  WALLS CORNETTOS "
 1134 T  0000AEA4 2020434F434120434F4C  DC.B "  COCA COLA "
 1135 T  0000AEB0 2020504550534920      DC.B "  PEPSI "
 1136 T  0000AEB8 2020424C55205441434B  DC.B "  BLU TACK "
 1137 T  0000AEC3 20204150504C45204C41  DC.B "  APPLE LASERWRITER "
 1138 T  0000AED7 20204850204C41534552  DC.B "  HP LASERJET III "
 1139 T  0000AEE9 202042524F4F4B452053  DC.B "  BROOKE SHIELDS (FOR HER MIND) "
 1140 T  0000AF09 20204D41444F4E4E4120  DC.B "  MADONNA (FOR HER MONEY) "
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 21



 1141 T  0000AF23 20204C4545445320554E  DC.B "  LEEDS UNITED SEASON TICKETS "
 1142 T  0000AF41 202031393435204D4754  DC.B "  1945 MGTC "
 1143 T  0000AF4D 20204E4F57204120574F  DC.B "  NOW A WORD TO ANY POTENTIAL SPONSORS "
 1144 T  0000AF74 2020574859204E4F5420  DC.B "  WHY NOT RENT SPACE IN THESE SCROLLING "
 1145 T  0000AF9C 415245415320544F2041  DC.B "AREAS TO ADVERTISE YOUR PRODUCT OR EVEN "
 1146 T  0000AFC4 48415645204120435553  DC.B "HAVE A CUSTOMISED DEMO PRODUCED FOR YOUR "
 1147 T  0000AFED 50524F44554354204259  DC.B "PRODUCT BY THE RED HERRINGS ? "
 1148 T  0000B00B 2020434F554C44204245  DC.B "  COULD BE USED AS PART OF ANY "
 1149 T  0000B02A 2020415544494F2D5649  DC.B "  AUDIO-VISUAL PRESENTATION "
 1150 T  0000B046 20202D2D2D2020        DC.B "  ---  "
 1151 T  0000B04D 20204E4F5720544F2050  DC.B "  NOW TO PROGRAMMING LANGUAGES..... "
 1152 T  0000B071 20202E2E2E414E442057  DC.B "  ...AND WHAT THEY SAY ABOUT YOU... "
 1153 T  0000B095 2020424153494320      DC.B "  BASIC "
 1154 T  0000B09D 2020524543454E542052  DC.B "  RECENT RESEARCH SHOWS THAT THE AVERAGE "
 1155 T  0000B0C6 42415349432050524F47  DC.B "BASIC PROGRAMMER IS OF LOW INTELLEGENCE "
 1156 T  0000B0EE 20205448454952204D41  DC.B "  THEIR MAIN AIM IN LIFE IS TO GET A FAST "
 1157 T  0000B118 43415220425554205448  DC.B "CAR BUT THEY USUALLY SETTLE FOR A SKODA "
 1158 T  0000B140 20204241534943205052  DC.B "  BASIC PROGRAMMERS HAVE NO SENCE OF FUN "
 1159 T  0000B169 414E4420415245204F46  DC.B "AND ARE OFTEN ALSO SEEN AT THE END OF "
 1160 T  0000B18F 43524557452053544154  DC.B "CREWE STATION LOOKING FOR A DELTIC "
 1161 T  0000B1B2 20204241534943205052  DC.B "  BASIC PROGRAMMERS TEND TO HAVE NO "
 1162 T  0000B1D6 414D424954494F4E2041  DC.B "AMBITION AND ARE OFTEN FOUND IN ANORAKS "
 1163 T  0000B1FE 4C4F4F4B494E47204154  DC.B "LOOKING AT SHOP ASSISTANT ADVERTS IN THE"
 1164 T  0000B226 204C4F43414C204A4F42  DC.B " LOCAL JOB CENTRE "
 1165 T  0000B238 20204241534943205052  DC.B "  BASIC PROGRAMMERS OFTEN READ THE STAR "
 1166 T  0000B260 202041524520544F4E45  DC.B "  ARE TONE DEAF "
 1167 T  0000B270 2020454154204241434F  DC.B "  EAT BACON BUTTIES "
 1168 T  0000B284 20204C495354454E2054  DC.B "  LISTEN TO BROS "
 1169 T  0000B295 2020414E44204D4F4C45  DC.B "  AND MOLEST SHEEP "
 1170 T  0000B2A8 2020434F424F4C20      DC.B "  COBOL "
 1171 T  0000B2B0 2020594F555220415645  DC.B "  YOUR AVERAGE COBOL PROGRAMMER IS A "
 1172 T  0000B2D5 46525553545241544544  DC.B "FRUSTRATED ACCOUNTANT "
 1173 T  0000B2EB 20205448455245204D41  DC.B "  THERE MAIN AIM IN LIFE IS TO BE NOTICED "
 1174 T  0000B315 57484943482054484559  DC.B "WHICH THEY DO SUCCESSFULLY BY WEARING "
 1175 T  0000B33B 504C4154464F524D2053  DC.B "PLATFORM SHOES AND FLAIRED JEANS "
 1176 T  0000B35C 2020434F424F4C205052  DC.B "  COBOL PROGRAMMERS ARE REFORMED DROPOUTS "
 1177 T  0000B386 57484F5345204D4F5241  DC.B "WHOSE MORAL STANCE IN LIFE MAKES THEM "
 1178 T  0000B3AC 494445414C2043414E44  DC.B "IDEAL CANDIDATES FOR JEHOVAHS WITNESSES "
 1179 T  0000B3D4 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND IN WH SMITHS "
 1180 T  0000B3FB 52454144494E47205448  DC.B "READING THE PEOPLES FRIEND. "
 1181 T  0000B417 2020434F424F4C205052  DC.B "  COBOL PROGRAMMERS READ THE FT "
 1182 T  0000B437 20204C495354454E2054  DC.B "  LISTEN TO RADIO 3 "
 1183 T  0000B44B 20204452494E4B204C45  DC.B "  DRINK LEMON TEA "
 1184 T  0000B45D 20205355434B2054554E  DC.B "  SUCK TUNES "
 1185 T  0000B46A 2020414E442055534520  DC.B "  AND USE SHEEP AS A CONTRACEPTIVE "
 1186 T  0000B48D 202050415343414C20    DC.B "  PASCAL "
 1187 T  0000B496 2020594F555220504153  DC.B "  YOUR PASCAL PROGRAMMER IS ENVIROMENTALLY"
 1188 T  0000B4C0 20465249454E444C592C  DC.B " FRIENDLY, BUT OFTEN STINKS "
 1189 T  0000B4DC 20205448455245204D41  DC.B "  THERE MAIN AIM IN LIFE IS TO WRITE A "
 1190 T  0000B503 42454155544946554C20  DC.B "BEAUTIFUL CONSTRUCT "
 1191 T  0000B517 20205448455345204152  DC.B "  THESE ARE THE DROPOUTS WHO DIDNT REFORM"
 1192 T  0000B540 20205448455920415245  DC.B "  THEY ARE NOT REAL PROGRAMMERS AND OFTEN"
 1193 T  0000B569 20535045414B20544543  DC.B " SPEAK TECHNICAL BULLSHIT TO APPEAR "
 1194 T  0000B58D 494E54454C4C4947454E  DC.B "INTELLIGENT "
 1195 T  0000B599 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND IN VILLAGE PUBS "
 1196 T  0000B5C3 4C495354454E494E4720  DC.B "LISTENING TO FOLK MUSIC OR "
 1197 T  0000B5DE 4D4F525249532044414E  DC.B "MORRIS DANCING "
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 22



 1198 T  0000B5ED 202050415343414C2050  DC.B "  PASCAL PROGRAMMERS READ THE GUARDIAN "
 1199 T  0000B614 20204452494E4B205245  DC.B "  DRINK REAL ALE "
 1200 T  0000B625 202047524F5720424541  DC.B "  GROW BEARDS "
 1201 T  0000B633 2020414E44204D4F4C45  DC.B "  AND MOLEST YOUNG BOYS "
 1202 T  0000B64B 2020464F525452414E20  DC.B "  FORTRAN "
 1203 T  0000B655 20205448455345204152  DC.B "  THESE ARE THE REAL PROGRAMMERS "
 1204 T  0000B676 4F4654454E2053554646  DC.B "OFTEN SUFFER FOR THEIR ART AND TEND TO "
 1205 T  0000B69D 42452055474C592C2046  DC.B "BE UGLY, FAT OR BOTH "
 1206 T  0000B6B2 20205448454952204D41  DC.B "  THEIR MAIN AIM IN LIFE IS TO PROGRAM IN"
 1207 T  0000B6DB 204320574954484F5554  DC.B " C WITHOUT USING UNIX AND THEREFORE FAIL"
 1208 T  0000B703 20544845592041524520  DC.B " THEY ARE THE MOST APPROACHABLE OF PEOPLE"
 1209 T  0000B72C 20425554204F4654454E  DC.B " BUT OFTEN HAVE A DARK SIDE AND GET WELL "
 1210 T  0000B755 44455052455353454420  DC.B "DEPRESSED "
 1211 T  0000B75F 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND AT FOOTBALL "
 1212 T  0000B785 4D41544348455320414E  DC.B "MATCHES AND ARE OFTEN SKINT "
 1213 T  0000B7A1 2020464F525452414E20  DC.B "  FORTRAN PROGRAMMERS READ THE INDEPENDENT"
 1214 T  0000B7CB 20204452494E4B204C4F  DC.B "  DRINK LOTS OF LARGER "
 1215 T  0000B7E2 20204152452056455259  DC.B "  ARE VERY SCRUFFY "
 1216 T  0000B7F5 20204C495354454E2054  DC.B "  LISTEN TO LOUD ROCK MUSIC "
 1217 T  0000B811 2020414E44204E455645  DC.B "  AND NEVER PULL THE OPPOSITE SEX "
 1218 T  0000B833 20204320              DC.B "  C "
 1219 T  0000B837 20205448455345204152  DC.B "  THESE ARE FORTRAN PROGRAMMERS WHO DONT "
 1220 T  0000B860 4649542054484520464F  DC.B "FIT THE FORTRAN IMAGE "
 1221 T  0000B876 20205448455920474554  DC.B "  THEY GET PAID A LOT FOR FUCK ALL "
 1222 T  0000B899 414E44204C4F4F4B2047  DC.B "AND LOOK GOOD IN ANYTHING "
 1223 T  0000B8B3 20205448455245204D41  DC.B "  THERE MAIN AIM IN LIFE IS TO DO THE "
 1224 T  0000B8D9 4F4646494345204A554E  DC.B "OFFICE JUNIOR OR THEIR BOSS "
 1225 T  0000B8F5 20205448455245204F46  DC.B "  THERE OFTEN HAVE NO TIME FOR ANYONE "
 1226 T  0000B91B 554E4C45535320544845  DC.B "UNLESS THEY GET PAID DOUBLE TIME "
 1227 T  0000B93C 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND IN EXPENSIVE "
 1228 T  0000B963 524553545552414E5453  DC.B "RESTURANTS WHILE THE FORTRAN PROGRAMMER"
 1229 T  0000B98A 20444542554753205448  DC.B " DEBUGS THEIR CODE "
 1230 T  0000B99D 2020432050524F475241  DC.B "  C PROGRAMMERS READ THE SUNDAY SPORT "
 1231 T  0000B9C3 20204452494E4B20414E  DC.B "  DRINK ANYTHING IN AN EXPENSIVE BOTTLE "
 1232 T  0000B9EB 20204255592054484549  DC.B "  BUY THEIR CLOTHS AT NEXT "
 1233 T  0000BA06 20204C495354454E2054  DC.B "  LISTEN TO RADIO 1 "
 1234 T  0000BA1A 2020414E442050554C4C  DC.B "  AND PULL THE LOWER INTELLEGENT "
 1235 T  0000BA3B 2020363830303020      DC.B "  68000 "
 1236 T  0000BA43 20205448455345204152  DC.B "  THESE ARE FORTRAN PROGRAMMERS IN DECLINE"
 1237 T  0000BA6D 2054484559204C494B45  DC.B " THEY LIKE SUFFERING THE WORLDS ILLS "
 1238 T  0000BA92 20205448455920444F4E  DC.B "  THEY DONT EARN MONEY AND ARE OFTEN THIN "
 1239 T  0000BABC 20205448455245204D41  DC.B "  THERE MAIN AIM IN LIFE IS TO STEEL A FEW"
 1240 T  0000BAE6 204D4F5245204359434C  DC.B " MORE CYCLES AND GO EVEN FASTER "
 1241 T  0000BB06 20205448455920415245  DC.B "  THEY ARE NOT VERY EASY TO COMMUNICATE "
 1242 T  0000BB2E 20574954482042454341  DC.B " WITH BECAUSE ITS HARD TO UNDERSTAND WHAT"
 1243 T  0000BB57 205448452048454C4C20  DC.B " THE HELL THEY ARE TALKING ABOUT "
 1244 T  0000BB78 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND AT HOME AND ONLY"
 1245 T  0000BBA2 2020574F524B20574845  DC.B "  WORK WHEN ITS DARK "
 1246 T  0000BBB7 20203638303030205052  DC.B "  68000 PROGRAMMERS READ JOURNALS "
 1247 T  0000BBD9 20204452494E4B20414E  DC.B "  DRINK ANYTHING AS LONG AS ITS ALCOHOL "
 1248 T  0000BC01 20204541542052454420  DC.B "  EAT RED MEAT "
 1249 T  0000BC10 2020504C4159204C4F54  DC.B "  PLAY LOTS OF CHESS "
 1250 T  0000BC25 2020414E44204D4F4C45  DC.B "  AND MOLEST COMPUTERS "
 1251 T  0000BC3C 2020464F52544820      DC.B "  FORTH "
 1252 T  0000BC44 2020464F525448205052  DC.B "  FORTH PROGRAMMERS ARE A DODGY LOT "
 1253 T  0000BC68 20205448455920415245  DC.B "  THEY ARE OFTEN PSYCHOPATHS AND TEND TO "
 1254 T  0000BC91 54574954434820414E44  DC.B "TWITCH AND HAVE NO SPEECH CONTROL "
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 23



 1255 T  0000BCB3 20205448455245204D41  DC.B "  THERE MAIN AIM IN LIFE IN TO WRITE A "
 1256 T  0000BCDA 50524F4752414D204F4E  DC.B "PROGRAM ON A JUPITER ACE WHICH DOES "
 1257 T  0000BCFE 534F4D455448494E4720  DC.B "SOMETHING REMOTELY USEFUL "
 1258 T  0000BD18 202054484559204F4654  DC.B "  THEY OFTEN MIX WORDS UP IN A SENTENCE "
 1259 T  0000BD40 414E442043414E204F4E  DC.B "AND CAN ONLY SUCCESSFULLY HOLD A "
 1260 T  0000BD61 434F4E56455253415449  DC.B "CONVERSATION WHEN THEY ARE DRUNK "
 1261 T  0000BD82 544845592043414E204F  DC.B "THEY CAN OFTEN BE FOUND IN LIBRARIES "
 1262 T  0000BDA7 20434F4D504C41494E49  DC.B " COMPLAINING ABOUT THE LACK OF COMPUTER "
 1263 T  0000BDCF 205245464552454E4345  DC.B " REFERENCE BOOKS ALTHOUGH AS EVERYONE "
 1264 T  0000BDF5 204B4E4F575320544845  DC.B " KNOWS THEY ONLY LOOK AT THE PICTURES "
 1265 T  0000BE1B 2020464F525448205052  DC.B "  FORTH PROGRAMMERS CANT READ "
 1266 T  0000BE39 202045415420414E5954  DC.B "  EAT ANYTHING THAT GOES IN A MICROWAVE "
 1267 T  0000BE61 2020504C415920414E59  DC.B "  PLAY ANYTHING VIOLENT "
 1268 T  0000BE79 2020414E442054454E44  DC.B "  AND TEND TO BE MASS RAPISTS "
 1269 T  0000BE97 202041444120          DC.B "  ADA "
 1270 T  0000BE9D 20205448455345204152  DC.B "  THESE ARE THE PROGRAMMERS WHO GET IT "
 1271 T  0000BEC4 205245414C2043555348  DC.B " REAL CUSHY HAVING NEVER WORKED HARD IN "
 1272 T  0000BEEC 20544845495220454E54  DC.B " THEIR ENTIRE LIFE "
 1273 T  0000BEFF 20205448455920484156  DC.B "  THEY HAVE NO REAL IDEA ABOUT BEING "
 1274 T  0000BF24 50524143544943414C20  DC.B "PRACTICAL AND HENCE TAKE A YEAR TO WRITE"
 1275 T  0000BF4C 205448452053494D504C  DC.B " THE SIMPLIST OF BUBBLE SORTS "
 1276 T  0000BF6A 20205448454952204D41  DC.B "  THEIR MAIN AIM IN LIFE IS TO MAKE A "
 1277 T  0000BF90 444541444C494E452041  DC.B "DEADLINE AT LEAST ONCE "
 1278 T  0000BFA7 20204144412050524F47  DC.B "  ADA PROGRAMMERS ARE VERY BORING TO TALK"
 1279 T  0000BFD0 20544F20424543415553  DC.B " TO BECAUSE THEY TAKE TOO LONG TO GET "
 1280 T  0000BFF6 544F2054484520504F49  DC.B "TO THE POINT "
 1281 T  0000C003 2020544845592043414E  DC.B "  THEY CAN OFTEN BE FOUND AT CONFERENCES "
 1282 T  0000C02C 41534B494E47204C4F54  DC.B "ASKING LOTS OF INANE QUESTIONS "
 1283 T  0000C04B 20204144412050524F47  DC.B "  ADA PROGRAMMERS READ DICTIONARIES "
 1284 T  0000C06F 2020454154204E4F5645  DC.B "  EAT NOVEAUX RICHE "
 1285 T  0000C083 20205245464552454520  DC.B "  REFEREE ANYTHING WITH COMPLEX RULES "
 1286 T  0000C0A9 2020414E442054454E44  DC.B "  AND TEND TO PERFORM SEX ALONE "
 1287 T  0000C0C9 20204E4F57204120574F  DC.B "  NOW A WORD TO ANY POTENTIAL SPONSORS "
 1288 T  0000C0F0 2020574859204E4F5420  DC.B "  WHY NOT RENT SPACE IN THESE SCROLLING "
 1289 T  0000C118 415245415320544F2041  DC.B "AREAS TO ADVERTISE YOUR PRODUCT OR EVEN"
 1290 T  0000C13F 20484156452041204355  DC.B " HAVE A CUSTOMISED DEMO PRODUCED FOR YOUR "
 1291 T  0000C169 50524F44554354204259  DC.B "PRODUCT BY THE RED HERRINGS ? "
 1292 T  0000C187 2020434F554C44204245  DC.B "  COULD BE USED AS PART OF ANY "
 1293 T  0000C1A6 415544494F2D56495355  DC.B "AUDIO-VISUAL PRESENTATION "
 1294 T  0000C1C0 202D2D20              DC.B " -- "
 1295 T  0000C1C4 20204E4F572041205641  DC.B "  NOW A VALUABLE SERVICE FOR SPORTS FANS "
 1296 T  0000C1ED 20204C4545445320554E  DC.B "  LEEDS UNITEDS 1989/90 RESULTS "
 1297 T  0000C20D 20205748494348204D41  DC.B "  WHICH MADE THEM 2ND DIVISION CHAMPIONS "
 1298 T  0000C236 20204157415920415420  DC.B "  AWAY AT NEWCASTLE UNITED LOST 5-2 "
 1299 T  0000C25A 2020484F4D4520544F20  DC.B "  HOME TO MIDDLESBOROUGH WON 2-1 "
 1300 T  0000C27B 2020484F4D4520415420  DC.B "  HOME AT BLACKBURN ROVERS DREW 1-1 "
 1301 T  0000C29F 20204157415920415420  DC.B "  AWAY AT STOKE CITY DREW 1-1 "
 1302 T  0000C2BD 2020484F4D4520544F20  DC.B "  HOME TO IPSWICH TOWN DREW 1-1 "
 1303 T  0000C2DD 20204157415920415420  DC.B "  AWAY AT HULL CITY WON 1-0 "
 1304 T  0000C2F9 2020484F4D4520544F20  DC.B "  HOME TO SWINDON TOWN WON 4-0 "
 1305 T  0000C318 2020484F4D4520544F20  DC.B "  HOME TO OXFORD UNITED WON 2-1 "
 1306 T  0000C338 20204157415920415420  DC.B "  AWAY AT PORT VALE DREW 0-0 "
 1307 T  0000C355 20204157415920415420  DC.B "  AWAY AT WEST HAM WON 1-0 "
 1308 T  0000C370 2020484F4D4520544F20  DC.B "  HOME TO SUNDERLAND WON 2-0 "
 1309 T  0000C38D 20204157415920415420  DC.B "  AWAY AT PORTSMOUTH DREW 3-3 "
 1310 T  0000C3AB 2020484F4D4520544F20  DC.B "  HOME TO WOLVEHAMPTON WANDERERS WON 1-0 "
 1311 T  0000C3D4 20204157415920415420  DC.B "  AWAY AT BRADFORD CITY WON 1-0 "
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 24



 1312 T  0000C3F4 2020484F4D4520544F20  DC.B "  HOME TO PLYMOUTH ARGYLE WON 2-1 "
 1313 T  0000C416 2020484F4D4520544F20  DC.B "  HOME TO AFC BOURNEMOUTH WON 3-0 "
 1314 T  0000C438 20204157415920415420  DC.B "  AWAY AT LEICESTER CITY LOST 4-3 "
 1315 T  0000C45A 2020484F4D4520544F20  DC.B "  HOME TO WATFORD WON 2-1 "
 1316 T  0000C474 20204157415920415420  DC.B "  AWAY AT WEST BROMWICH ALBION LOST 2-1 "
 1317 T  0000C49C 2020484F4D4520544F20  DC.B "  HOME TO NEWCASTLE UNITED WON 1-0 "
 1318 T  0000C4BF 20204157415920415420  DC.B "  AWAY AT MIDDLESBOROUGH WON 2-0 "
 1319 T  0000C4E0 2020484F4D4520544F20  DC.B "  HOME TO BRIGHTON + HOVE ALBION WON 3-0 "
 1320 T  0000C509 20204157415920415420  DC.B "  AWAY AT SHEFFIELD UNITED DREW 2-2 "
 1321 T  0000C52D 20204157415920415420  DC.B "  AWAY AT BARNSLEY LOST 1-0 "
 1322 T  0000C549 2020484F4D4520544F20  DC.B "  HOME TO OLDHAM ATHLETIC DREW 1-1 "
 1323 T  0000C56C 20204157415920415420  DC.B "  AWAY AT BLACKBURN ROVERS WON 2-1 "
 1324 T  0000C58F 2020484F4D4520544F20  DC.B "  HOME TO STOKE CITY WON 2-0 "
 1325 T  0000C5AC 20204157415920415420  DC.B "  AWAY AT SWINDON TOWN LOST 3-2 "
 1326 T  0000C5CC 2020484F4D4520544F20  DC.B "  HOME TO HULL CITY WON 4-3 "
 1327 T  0000C5E8 20204157415920415420  DC.B "  AWAY AT IPSWICH TOWN DREW 2-2 "
 1328 T  0000C608 2020484F4D4520544F20  DC.B "  HOME TO WEST BROMWICH ALBION DREW 2-2 "
 1329 T  0000C630 20204157415920415420  DC.B "  AWAY AT WATFORD LOST 1-0 "
 1330 T  0000C64B 2020484F4D4520544F20  DC.B "  HOME TO PORT VALE DREW 0-0 "
 1331 T  0000C668 20204157415920415420  DC.B "  AWAY AT OXFORD UNITED WON 4-2 "
 1332 T  0000C688 2020484F4D4520544F20  DC.B "  HOME TO WEST HAM UNITED WON 3-2 "
 1333 T  0000C6AA 20204157415920415420  DC.B "  AWAY AT SUNDERLAND WON 1-0 "
 1334 T  0000C6C7 2020484F4D4520544F20  DC.B "  HOME TO PORTSMOUTH WON 2-0 "
 1335 T  0000C6E4 20204157415920415420  DC.B "  AWAY AT WOLVERHAMPTON WANDERERS LOST 1-0"
 1336 T  0000C70E 2020484F4D4520544F20  DC.B "  HOME TO BRADFORD CITY DREW 1-1 "
 1337 T  0000C72F 20204157415920415420  DC.B "  AWAY AT PLYMOUTH ARGYLE DREW 1-1 "
 1338 T  0000C752 20204157415920415420  DC.B "  AWAY AT OLDHAM ATHLETIC LOST 3-1 "
 1339 T  0000C775 2020484F4D4520544F20  DC.B "  HOME TO SHEFFIELD UNITED WON 4-0 "
 1340 T  0000C798 20204157415920415420  DC.B "  AWAY AT BRIGHTON + HOVE ALBION DREW 2-2 "
 1341 T  0000C7C2 2020484F4D4520544F20  DC.B "  HOME TO BARNSLEY LOST 2-1 "
 1342 T  0000C7DE 2020484F4D4520544F20  DC.B "  HOME TO LEICESTER CITY WON 2-1 "
 1343 T  0000C7FF 20204157415920415420  DC.B "  AWAY AT AFC BOURNEMOUTH WON 1-0 "
 1344 T  0000C821 202046494E4953484544  DC.B "  FINISHED WITH A RECORD OF "
 1345 T  0000C83D 2020574F4E2032342044  DC.B "  WON 24 DREW 13 LOST 9 FOR 78 AGAINST 52 "
 1346 T  0000C867 2020504F494E54532038  DC.B "  POINTS 85 "
 1347 T  0000C873 20204E4F57204120574F  DC.B "  NOW A WORD TO ANY POTENTIAL SPONSORS "
 1348 T  0000C89A 2020574859204E4F5420  DC.B "  WHY NOT RENT SPACE IN THESE SCROLLING "
 1349 T  0000C8C2 2020415245415320544F  DC.B "  AREAS TO ADVERTISE YOUR PRODUCT OR EVEN"
 1350 T  0000C8EB 20484156452041204355  DC.B " HAVE A CUSTOMISED DEMO PRODUCED FOR YOUR "
 1351 T  0000C915 2050524F445543542042  DC.B " PRODUCT BY THE RED HERRINGS ? "
 1352 T  0000C934 2020434F554C44204245  DC.B "  COULD BE USED AS PART OF ANY "
 1353 T  0000C953 415544494F2D56495355  DC.B "AUDIO-VISUAL PRESENTATION "
 1354 T  0000C96D 20202020202020202020  DC.B "           "
 1355 T  0000C978 20202020202020205548  DC.B "        UH OH .... LOOKS LIKE ITS TIME TO WRAP "
 1356 T  0000C9A7 20202020202020202020  DC.B "           "
 1357 T  0000C9B2 00                    DC.B 0
 1358 T  0000C9B4                                  EVEN
 1359 T  0000C9B4                      
 1360 T  0000C9B4                      ;
 1361 T  0000C9B4                      ; 3d incbin library
 1362 T  0000C9B4                      ;
 1363 T  0000C9B4                      
 1364 T  00016088                      threed            incbin      "3d.img"
 1365 T  00016088                      threedend
 1366 T  00016088                      
 1367   =0000C9D0                      xmax        equ   threed+$1c
 1368   =0000C9D2                      ymax        equ   threed+$1c+2
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 25



 1369   =0000C9D4                      midx        equ   threed+$1c+4
 1370   =0000C9D6                      midy        equ   threed+$1c+6
 1371   =0000C9D8                      logbase           equ   threed+$1c+8
 1372   =0000C9DC                      root        equ   threed+$1c+12
 1373   =0000C9E0                      orientation equ   threed+$1c+16
 1374   =0000C9E4                      view_object equ   threed+$1c+20
 1375   =0000C9E8                      treesort    equ   threed+$1c+24
 1376   =0000C9EC                      draw_mobile equ   threed+$1c+28
 1377   =0000C9F0                      locate_shape      equ   threed+$1c+32
 1378   =0000C9F4                      ss_workspace      equ   threed+$1c+36
 1379   =0000C9F8                      random            equ   threed+$1c+40
 1380 T  00016088                      
 1381 T  00016088                      ;
 1382 T  00016088                      ; setup for a IGD format data file
 1383 T  00016088                      ;
 1384 T  00016088                      ; file is madeup as follows:
 1385 T  00016088                      ;
 1386 T  00016088                      ;         2 bytes of id $1020
 1387 T  00016088                      ;        32 bytes of palette
 1388 T  00016088                      ;     rept 10 times
 1389 T  00016088                      ;         2 bytes of header $1234 or $5678
 1390 T  00016088                      ;         ? bytes of shape data and
 1391 T  00016088                      ;         ? bytes of movement stuff if $1234
 1392 T  00016088                      ;     end repeat
 1393 T  00016088                      ;         2 bytes of end marker $9ABC
 1394 T  00016088                      ;
 1395 T  00016088                      
 1396 T  00016088 41F900000CEC         set4igd           lea   igdworkspace,a0
 1397 T  0001608E C348                             exg   a0,a1
 1398 T  00016090 610001D0                         bsr   decrunch
 1399 T  00016094 43F900000CEC                     lea   igdworkspace,a1
 1400 T  0001609A 0C591020                         cmp.w #$1020,(a1)+
 1401 T  0001609E 6702                             beq.s .okid
 1402 T  000160A0 4AFC                             illegal
 1403 T  000160A2                      ;
 1404 T  000160A2                      ; palette
 1405 T  000160A2                      ;
 1406 T  000160A2 4CD900FF             .okid       movem.l     (a1)+,d0-d7
 1407 T  000160A6 48F900FF00016436                 movem.l     d0-d7,igdpalette
 1408 T  000160AE                      ;
 1409 T  000160AE                      ; movement & shape tables
 1410 T  000160AE                      ;
 1411 T  000160AE 7E09                             moveq #10-1,d7
 1412 T  000160B0 45FA030C                         lea   igdmovtab(pc),a2
 1413 T  000160B4 47FA0330                         lea   igdshapetab(pc),a3
 1414 T  000160B8 3019                 .movloop    move.w      (a1)+,d0
 1415 T  000160BA B07C1234                         cmp.w #$1234,d0
 1416 T  000160BE 6708                             beq.s .movdef
 1417 T  000160C0 B07C5678                         cmp.w #$5678,d0
 1418 T  000160C4 671C                             beq.s .movnext
 1419 T  000160C6 4AFC                             illegal
 1420 T  000160C8 7000                 .movdef           moveq #0,d0
 1421 T  000160CA 3019                             move.w      (a1)+,d0
 1422 T  000160CC 26C9                             move.l      a1,(a3)+          ;shape pointer
 1423 T  000160CE D2C0                             add.w d0,a1
 1424 T  000160D0 24C9                             move.l      a1,(a2)+          ;initial pos'n
 1425 T  000160D2 43E90018                         lea   ipos.size(a1),a1
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 26



 1426 T  000160D6 3011                 .findlast   move.w      movcount(a1),d0
 1427 T  000160D8 8069000E                         or.w  angcount(a1),d0         ;movcount==0 &&
 1428 T  000160DC 43E9001C                         lea   movent.size(a1),a1      ;angcount==0
 1429 T  000160E0 66F4                             bne.s .findlast
 1430 T  000160E2 51CFFFD4             .movnext    dbra  d7,.movloop
 1431 T  000160E6 0C599ABC                         cmp.w #$9ABC,(a1)+
 1432 T  000160EA 6702                             beq.s .eofok
 1433 T  000160EC 4AFC                             illegal
 1434 T  000160EE 95FC000163BE         .eofok            sub.l #igdmovtab,a2
 1435 T  000160F4 200A                             move.l      a2,d0
 1436 T  000160F6 E448                             lsr.w #2,d0
 1437 T  000160F8 33C0000163BC                     move.w      d0,igdnumob       ;number of objects
 1438 T  000160FE 6602                             bne.s .gotsome
 1439 T  00016100 4E75                             rts                     ;ummm...zero objects!
 1440 T  00016102                      ;
 1441 T  00016102                      ; fix shapes into object and set initial positions
 1442 T  00016102                      ;
 1443 T  00016102 3E00                 .gotsome    move.w      d0,d7
 1444 T  00016104 5347                             subq.w      #1,d7             ;number of objects
 1445 T  00016106 45FA0306                         lea   igdobtab(pc),a2
 1446 T  0001610A 47FA02DA                         lea   igdshapetab(pc),a3
 1447 T  0001610E 49FA02AE                         lea   igdmovtab(pc),a4
 1448 T  00016112                      ;
 1449 T  00016112                      ; allocate new shape
 1450 T  00016112                      ;
 1451 T  00016112 203C00000054         .obloop           move.l      #i_size,d0
 1452 T  00016118 4EB900008A1E                     jsr   malloc
 1453 T  0001611E 24C9                             move.l      a1,(a2)+          ;save address of obj
 1454 T  00016120 205B                             move.l      (a3)+,a0
 1455 T  00016122                      ;
 1456 T  00016122                      ; define important bits in object structure
 1457 T  00016122                      ;
 1458 T  00016122 23480044                         move.l      a0,ob_shape(a1)
 1459 T  00016126 4269004E                         clr.w ob_flags(a1)
 1460 T  0001612A 20390000C9EC                     move.l      draw_mobile,d0
 1461 T  00016130 06800000C9D0                     add.l #threed+$1c,d0
 1462 T  00016136 23400048                         move.l      d0,ob_draw(a1)
 1463 T  0001613A 48E70140                         movem.l     d7/a1,-(sp)
 1464 T  0001613E 4EB90000C9F0                     jsr   locate_shape
 1465 T  00016144 4CDF0280                         movem.l     (sp)+,d7/a1
 1466 T  00016148                      ;
 1467 T  00016148                      ; set initial position and angles
 1468 T  00016148                      ;
 1469 T  00016148 205C                             move.l      (a4)+,a0
 1470 T  0001614A 4CD80007                         movem.l     (a0)+,d0-d2       ;init pos
 1471 T  0001614E 48E90007000E                     movem.l     d0-d2,ob_wxyz(a1)
 1472 T  00016154 4CD80007                         movem.l     (a0)+,d0-d2       ;angles
 1473 T  00016158 48E900070026                     movem.l     d0-d2,ob_angxyz(a1)
 1474 T  0001615E 23480050                         move.l      a0,i_ptr(a1)            ;movement pointer
 1475 T  00016162                      ;
 1476 T  00016162                      ; create initial orientation matrix
 1477 T  00016162                      ;
 1478 T  00016162 48E7017C                         movem.l     d7/a1-a5,-(sp)
 1479 T  00016166 30290026                         move.w      ob_angxyz(a1),d0
 1480 T  0001616A 3229002A                         move.w      ob_angxyz+4(a1),d1
 1481 T  0001616E 3429002E                         move.w      ob_angxyz+8(a1),d2
 1482 T  00016172 7E04                             moveq #4,d7
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 27



 1483 T  00016174 EE68                             lsr.w d7,d0
 1484 T  00016176 EE69                             lsr.w d7,d1
 1485 T  00016178 EE6A                             lsr.w d7,d2
 1486 T  0001617A 4447                             neg.w d7
 1487 T  0001617C C047                             and.w d7,d0
 1488 T  0001617E C247                             and.w d7,d1
 1489 T  00016180 C447                             and.w d7,d2
 1490 T  00016182 45E90032                         lea   ob_matrix(a1),a2
 1491 T  00016186 4EB90000C9E0                     jsr   orientation
 1492 T  0001618C 4CDF3E80                         movem.l     (sp)+,d7/a1-a5
 1493 T  00016190 51CFFF80                         dbra  d7,.obloop
 1494 T  00016194 4E75                             rts
 1495 T  00016196                      
 1496 T  00016196                      ;
 1497 T  00016196                      ; insert igd objects into viewtree
 1498 T  00016196                      ;
 1499 T  00016196                      
 1500 T  00016196 3E3A0224             insert_igd  move.w      igdnumob(pc),d7
 1501 T  0001619A 6700001C                         beq   .empty
 1502 T  0001619E 5347                             subq.w      #1,d7
 1503 T  000161A0 41FA026C                         lea   igdobtab(pc),a0
 1504 T  000161A4 2258                 .loop       move.l      (a0)+,a1
 1505 T  000161A6 48E70180                         movem.l     d7/a0,-(sp)
 1506 T  000161AA 4EB90000C9E4                     jsr   view_object
 1507 T  000161B0 4CDF0180                         movem.l     (sp)+,d7/a0
 1508 T  000161B4 51CFFFEE                         dbra  d7,.loop
 1509 T  000161B8 4E75                 .empty            rts
 1510 T  000161BA                      
 1511 T  000161BA                      ;
 1512 T  000161BA                      ; move the introgen objects
 1513 T  000161BA                      ;
 1514 T  000161BA                      
 1515 T  000161BA 41FA0252             move_igd    lea   igdobtab(pc),a0
 1516 T  000161BE 3E3A01FC                         move.w      igdnumob(pc),d7
 1517 T  000161C2 6602                             bne.s .movone
 1518 T  000161C4 4E75                             rts
 1519 T  000161C6 2258                 .movone           move.l      (a0)+,a1
 1520 T  000161C8 24690050                         move.l      i_ptr(a1),a2
 1521 T  000161CC 3012                             move.w      movcount(a2),d0
 1522 T  000161CE 806A000E                         or.w  angcount(a2),d0
 1523 T  000161D2 6700004C                         beq   .next
 1524 T  000161D6                      ;
 1525 T  000161D6                      ; object needs moving
 1526 T  000161D6                      ;
 1527 T  000161D6 3012                             move.w      movcount(a2),d0
 1528 T  000161D8 67000016                         beq   .tryang
 1529 T  000161DC 5352                             subq.w      #1,movcount(a2)
 1530 T  000161DE 4CEA00070002                     movem.l     movdx(a2),d0-d2
 1531 T  000161E4 D1A9000E                         add.l d0,ob_wxyz(a1)
 1532 T  000161E8 D3A90012                         add.l d1,ob_wxyz+4(a1)
 1533 T  000161EC D5A90016                         add.l d2,ob_wxyz+8(a1)
 1534 T  000161F0                      .tryang
 1535 T  000161F0                      ;
 1536 T  000161F0                      ; object needs rotating
 1537 T  000161F0                      ;
 1538 T  000161F0 302A000E                         move.w      angcount(a2),d0
 1539 T  000161F4 67000018                         beq   .trynext
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 28



 1540 T  000161F8 536A000E                         subq.w      #1,angcount(a2)
 1541 T  000161FC 4CEA00070010                     movem.l     angdx(a2),d0-d2
 1542 T  00016202 D1A90026                         add.l d0,ob_angxyz(a1)
 1543 T  00016206 D3A9002A                         add.l d1,ob_angxyz+4(a1)
 1544 T  0001620A D5A9002E                         add.l d2,ob_angxyz+8(a1)
 1545 T  0001620E                      .trynext
 1546 T  0001620E                      ;
 1547 T  0001620E                      ; move to next movent?
 1548 T  0001620E                      ;
 1549 T  0001620E 3012                             move.w      movcount(a2),d0
 1550 T  00016210 806A000E                         or.w  angcount(a2),d0
 1551 T  00016214 6600000A                         bne   .next
 1552 T  00016218 45EA001C                         lea   movent.size(a2),a2
 1553 T  0001621C 234A0050                         move.l      a2,i_ptr(a1)
 1554 T  00016220                      ;
 1555 T  00016220                      ; done them all?
 1556 T  00016220                      ;
 1557 T  00016220 5347                 .next       subq.w      #1,d7
 1558 T  00016222 66A2                             bne   .movone
 1559 T  00016224 4E75                             rts
 1560 T  00016226                      
 1561 T  00016226                      ;
 1562 T  00016226                      ; remove igd object which have finished there list
 1563 T  00016226                      ;
 1564 T  00016226                      
 1565 T  00016226 3E3A0194             remove_igd  move.w      igdnumob(pc),d7
 1566 T  0001622A 67000034                         beq   .exit
 1567 T  0001622E 41FA01DE                         lea   igdobtab(pc),a0
 1568 T  00016232 2258                 .loop       move.l      (a0)+,a1
 1569 T  00016234 24690050                         move.l      i_ptr(a1),a2
 1570 T  00016238 3012                             move.w      movcount(a2),d0
 1571 T  0001623A 806A000E                         or.w  angcount(a2),d0
 1572 T  0001623E 6600001C                         bne   .next
 1573 T  00016242                      ;
 1574 T  00016242                      ; remove this entry
 1575 T  00016242                      ;
 1576 T  00016242 3007                             move.w      d7,d0
 1577 T  00016244 5340                             subq.w      #1,d0
 1578 T  00016246 43E8FFFC                         lea   -4(a0),a1
 1579 T  0001624A 22E90004             .remove           move.l      4(a1),(a1)+
 1580 T  0001624E 51C8FFFA                         dbra  d0,.remove
 1581 T  00016252 41E8FFFC                         lea   -4(a0),a0
 1582 T  00016256 5379000163BC                     subq.w      #1,igdnumob
 1583 T  0001625C                      ;
 1584 T  0001625C                      ; move to next entry
 1585 T  0001625C                      ;
 1586 T  0001625C 5347                 .next       subq.w      #1,d7
 1587 T  0001625E 66D2                             bne   .loop
 1588 T  00016260 4E75                 .exit       rts
 1589 T  00016262                      
 1590 T  00016262                      ;***************************************************************************
 1591 T  00016262                      ; Unpacking source for Pack-Ice Version 2.1
 1592 T  00016262                      ; a0: Pointer on packed Data
 1593 T  00016262                      ; a1: Pointer on destination of unpacked data
 1594 T  00016262 48E7FFFE             decrunch:   movem.l d0-a6,-(sp)
 1595 T  00016266 0C9849636521                     cmpi.l      #'Ice!',(a0)+     ; Is data packed?
 1596 T  0001626C 6614                             bne.s ice_03            ; no!
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 29



 1597 T  0001626E 2018                             move.l      (a0)+,d0    ; read packed data
 1598 T  00016270 4BF008F8                         lea   -8(a0,d0.l),a5
 1599 T  00016274 2E98                             move.l      (a0)+,(sp)
 1600 T  00016276 2849                             movea.l a1,a4
 1601 T  00016278 2C49                             movea.l a1,a6
 1602 T  0001627A DDD7                             adda.l      (sp),a6
 1603 T  0001627C 264E                             movea.l a6,a3
 1604 T  0001627E 6134                             bsr.s ice_08
 1605 T  00016280 6106                             bsr.s ice_04
 1606 T  00016282 4CDF7FFF             ice_03:           movem.l (sp)+,d0-a6
 1607 T  00016286 4E75                             rts
 1608 T  00016288 6156                 ice_04:           bsr.s ice_0c
 1609 T  0001628A 6422                             bcc.s ice_07
 1610 T  0001628C 7200                             moveq #0,d1
 1611 T  0001628E 6150                             bsr.s ice_0c
 1612 T  00016290 6416                             bcc.s ice_06
 1613 T  00016292 43FA00F8                         lea   ice_1a(pc),a1
 1614 T  00016296 7604                             moveq #4,d3
 1615 T  00016298 2021                 ice_05:           move.l      -(a1),d0
 1616 T  0001629A 616A                             bsr.s ice_0f
 1617 T  0001629C 4840                             swap  d0
 1618 T  0001629E B240                             cmp.w d0,d1
 1619 T  000162A0 56CBFFF6                         dbne  d3,ice_05
 1620 T  000162A4 D2A90014                         add.l 20(a1),d1
 1621 T  000162A8 1D25                 ice_06:           move.b      -(a5),-(a6)
 1622 T  000162AA 51C9FFFC                         dbra  d1,ice_06
 1623 T  000162AE BDCC                 ice_07:           cmpa.l      a4,a6
 1624 T  000162B0 6E62                             bgt.s ice_12
 1625 T  000162B2 4E75                             rts
 1626 T  000162B4 7003                 ice_08:           moveq #3,d0
 1627 T  000162B6 1E25                 ice_09:           move.b      -(a5),d7
 1628 T  000162B8 E09F                             ror.l #8,d7
 1629 T  000162BA 51C8FFFA                         dbra  d0,ice_09
 1630 T  000162BE 4E75                             rts
 1631 T  000162C0 3E0D                 ice_0a:           move.w      a5,d7
 1632 T  000162C2 08070000                         btst  #0,d7
 1633 T  000162C6 6606                             bne.s ice_0b
 1634 T  000162C8 2E25                             move.l      -(a5),d7
 1635 T  000162CA DF87                             addx.l      d7,d7
 1636 T  000162CC 603E                             bra.s ice_11
 1637 T  000162CE 2E2DFFFB             ice_0b:           move.l      -5(a5),d7
 1638 T  000162D2 E18F                             lsl.l #8,d7
 1639 T  000162D4 1E25                             move.b      -(a5),d7
 1640 T  000162D6 578D                             subq.l      #3,a5
 1641 T  000162D8 DE87                             add.l d7,d7
 1642 T  000162DA 08C70000                         bset  #0,d7
 1643 T  000162DE 602C                             bra.s ice_11
 1644 T  000162E0 DE87                 ice_0c:           add.l d7,d7
 1645 T  000162E2 6702                             beq.s ice_0d
 1646 T  000162E4 4E75                             rts
 1647 T  000162E6 3E0D                 ice_0d:           move.w      a5,d7
 1648 T  000162E8 08070000                         btst  #0,d7
 1649 T  000162EC 6606                             bne.s ice_0e
 1650 T  000162EE 2E25                             move.l      -(a5),d7
 1651 T  000162F0 DF87                             addx.l      d7,d7
 1652 T  000162F2 4E75                             rts
 1653 T  000162F4 2E2DFFFB             ice_0e:           move.l      -5(a5),d7
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 30



 1654 T  000162F8 E18F                             lsl.l #8,d7
 1655 T  000162FA 1E25                             move.b      -(a5),d7
 1656 T  000162FC 578D                             subq.l      #3,a5
 1657 T  000162FE DE87                             add.l d7,d7
 1658 T  00016300 08C70000                         bset  #0,d7
 1659 T  00016304 4E75                             rts
 1660 T  00016306 7200                 ice_0f:           moveq #0,d1
 1661 T  00016308 DE87                 ice_10:           add.l d7,d7
 1662 T  0001630A 67B4                             beq.s ice_0a
 1663 T  0001630C D341                 ice_11:           addx.w      d1,d1
 1664 T  0001630E 51C8FFF8                         dbra  d0,ice_10
 1665 T  00016312 4E75                             rts
 1666 T  00016314 43FA008A             ice_12:           lea   ice_1b(pc),a1
 1667 T  00016318 7403                             moveq #3,d2
 1668 T  0001631A 61C4                 ice_13:           bsr.s ice_0c
 1669 T  0001631C 54CAFFFC                         dbcc  d2,ice_13
 1670 T  00016320 7800                             moveq #0,d4
 1671 T  00016322 7200                             moveq #0,d1
 1672 T  00016324 10312001                         move.b      1(a1,d2.w),d0
 1673 T  00016328 4880                             ext.w d0
 1674 T  0001632A 6B02                             bmi.s ice_14
 1675 T  0001632C 61D8                             bsr.s ice_0f
 1676 T  0001632E 18312006             ice_14:           move.b      6(a1,d2.w),d4
 1677 T  00016332 D841                             add.w d1,d4
 1678 T  00016334 671E                             beq.s ice_16
 1679 T  00016336 43FA0072                         lea   ice_1c(pc),a1
 1680 T  0001633A 7401                             moveq #1,d2
 1681 T  0001633C 61A2                 ice_15:           bsr.s ice_0c
 1682 T  0001633E 54CAFFFC                         dbcc  d2,ice_15
 1683 T  00016342 7200                             moveq #0,d1
 1684 T  00016344 10312001                         move.b      1(a1,d2.w),d0
 1685 T  00016348 4880                             ext.w d0
 1686 T  0001634A 61BA                             bsr.s ice_0f
 1687 T  0001634C D442                             add.w d2,d2
 1688 T  0001634E D2712006                         add.w 6(a1,d2.w),d1
 1689 T  00016352 6012                             bra.s ice_18
 1690 T  00016354 7200                 ice_16:           moveq #0,d1
 1691 T  00016356 7005                             moveq #5,d0
 1692 T  00016358 7400                             moveq #0,d2
 1693 T  0001635A 6184                             bsr.s ice_0c
 1694 T  0001635C 6404                             bcc.s ice_17
 1695 T  0001635E 7008                             moveq #8,d0
 1696 T  00016360 7440                             moveq #$40,d2
 1697 T  00016362 61A2                 ice_17:           bsr.s ice_0f
 1698 T  00016364 D242                             add.w d2,d1
 1699 T  00016366 43F64002             ice_18:           lea   2(a6,d4.w),a1
 1700 T  0001636A D2C1                             adda.w      d1,a1
 1701 T  0001636C 1D21                             move.b      -(a1),-(a6)
 1702 T  0001636E 1D21                 ice_19:           move.b      -(a1),-(a6)
 1703 T  00016370 51CCFFFC                         dbra  d4,ice_19
 1704 T  00016374 6000FF12                         bra   ice_04
 1705 T  00016378 7FFF000E00FF0007                 DC.B $7f,$ff,$00,$0e,$00,$ff,$00,$07
 1706 T  00016380 0007000200030001                 DC.B $00,$07,$00,$02,$00,$03,$00,$01
 1707 T  00016388 00030001                         DC.B $00,$03,$00,$01
 1708 T  0001638C 0000010D0000000E     ice_1a:           DC.B $00,$00,$01,$0d,$00,$00,$00,$0e
 1709 T  00016394 0000000700000004                 DC.B $00,$00,$00,$07,$00,$00,$00,$04
 1710 T  0001639C 00000001                         DC.B $00,$00,$00,$01
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 31



 1711 T  000163A0 090100FFFF080402     ice_1b:           DC.B $09,$01,$00,$ff,$ff,$08,$04,$02
 1712 T  000163A8 0100                             DC.B $01,$00
 1713 T  000163AA 0B04070001200000     ice_1c:           DC.B $0b,$04,$07,$00,$01,$20,$00,$00
 1714 T  000163B2 0020                             DC.B $00,$20
 1715 T  000163B4                      
 1716 T  000163B4                      ;
 1717 T  000163B4                      ; Intro Generator Data file pointers
 1718 T  000163B4                      ;
 1719 T  000163B4                      
 1720 T  000163B4 00000000             igdscreen   dc.l  0
 1721 T  000163B8 00000000             igd_dlt           dc.l  0
 1722 T  000163BC 0000                 igdnumob    dc.w  0
 1723 T  000163E6                      igdmovtab   ds.l  10
 1724 T  0001640E                      igdshapetab ds.l  10
 1725 T  00016436                      igdobtab    ds.l  10
 1726 T  00016476                      igdpalette  ds.w  32
 1727 T  00016476 0000                 igdfcount   dc.w  0
 1728 T  00016478                      
 1729 T  00016478 0001647C             igdptr            dc.l  igdtable
 1730 T  0001647C 000164B8             igdtable    dc.l  igd1
 1731 T  00016480 000165C8                         dc.l  igd2
 1732 T  00016484 0001677A                         dc.l  igd3
 1733 T  00016488 0001693C                         dc.l  igd4
 1734 T  0001648C 00016A7A                         dc.l  igd5
 1735 T  00016490 00018AF0                         dc.l  igd6
 1736 T  00016494 00018C98                         dc.l  igd7
 1737 T  00016498 000193F0                         dc.l  igd8
 1738 T  0001649C 00019606                         dc.l  igd9
 1739 T  000164A0 000198E8                         dc.l  igd10
 1740 T  000164A4 0001BE36                         dc.l  igd11
 1741 T  000164A8 0001BF64                         dc.l  igd12
 1742 T  000164AC 0001F044                         dc.l  igd13
 1743 T  000164B0 0001F5EA                         dc.l  igd14
 1744 T  000164B4 00000000                         dc.l  0
 1745 T  000164B8                      ;
 1746 T  000164B8                      ; include 3d files
 1747 T  000164B8                      ;
 1748 T  000164B8                      
 1749 T  000165C8                      igd1        incbin      "OCTO.IGD"
 1750 T  0001677A                      igd2        incbin      "SOCTO.IGD"
 1751 T  0001693C                      igd3        incbin      "BLOCK.IGD"
 1752 T  00016A7A                      igd4        incbin      "HOUSE.IGD"
 1753 T  00018AF0                      igd5        incbin      "RINGSHIP.IGD"
 1754 T  00018C98                      igd6        incbin      "CIRC.IGD"
 1755 T  000193F0                      igd7        incbin      "SPHERE.IGD"
 1756 T  00019606                      igd8        incbin      "DISCS.IGD"
 1757 T  000198E8                      igd9        incbin      "KLI.IGD"
 1758 T  0001BE36                      igd10       incbin      "HERRING.IGD"
 1759 T  0001BF64                      igd11       incbin      "SPIRAL.IGD"
 1760 T  0001F044                      igd12       incbin      "I_C.IGD"
 1761 T  0001F5EA                      igd13       incbin      "TORUS.IGD"
 1762 T  000217FC                      igd14       incbin      "CUBEROOM.IGD"
 1763 T  000217FC                                  even
 1764 T  000217FC                      
 1765 B  00000000                                  section     BSS
 1766 B  00000000                      
 1767 B  00000000                      
HiSoft GenST 680x0 Macro Assembler v2.08   28/08/95  14:12:26  Page 32



 1768 B  00000000                      ;
 1769 B  00000000                      ; rest of memory is allocated as needed
 1770 B  00000000                      ;
 1771 B  00000000                      workspace   ds.l  0
 1772 B  00000040                      miscmem     ds.l  16
 1773 B  00000040                      

