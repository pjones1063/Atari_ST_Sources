* This is the parrallax scroll
* by Griff (C) 1990

		OPT O+,OW-

demo		EQU 0

		IFEQ demo
		CLR -(SP)
		PEA -1.W
		PEA -1.W
		MOVE #5,-(SP)
		TRAP #14
		LEA 12(SP),SP
		MOVE #37,-(SP)
		TRAP #14
		ADDQ.L #2,SP 
		CLR.L -(SP)
		MOVE #$20,-(SP)
		TRAP #1
		ADDQ.L #6,SP
		ENDC

		MOVE #$2700,SR
		MOVE.L SP,oldsp
		LEA my_stack,SP
		MOVEM.L blank_pal,D0-D7
		MOVEM.L D0-D7,$FFFF8240.W
		LEA log_base(pc),A0
		MOVE.L #screens+256,D0
		CLR.B D0
		MOVE.L #58880,D1
		MOVE.L D0,(A0)+
		ADD.L D1,D0
		MOVE.L D0,(A0)+
		ADD.L D1,D0
		MOVE.L D0,(A0)+
		ADD.L D1,D0
		MOVE.L D0,(A0)+
Initmus	MOVEQ #1,D0	
		JSR music+28
		MOVE #6143,D0
		LEA recorded,A1
recordit	JSR music+28+10
		LEA musbytes-20,A0
		REPT 11
		MOVE.B (A0)+,(A1)+
		ENDR
		DBF D0,recordit
	
		JSR Init_tiles
		JSR combine_two
		JSR flush
		JSR SETUPSCROLL
		JSR makeoffsets
		JSR cls

		MOVE.B #$12,$FFFFFC02.W
		LEA old_mfp,A0
		MOVE.B $FFFFFA07.W,(A0)+
            MOVE.B $FFFFFA09.W,(A0)+
		MOVE.B $FFFFFA13.W,(A0)+
            MOVE.B $FFFFFA15.W,(A0)+
            MOVE.B $FFFFFA17.W,(A0)+
            MOVE.B $FFFFFA19.W,(A0)+
            MOVE.B $FFFFFA1F.W,(A0)+
		MOVE.B $FFFF8260.W,(A0)+
		MOVE.L $70.W,(A0)+
		MOVE.L $134.W,(A0)+
		BCLR.B #3,$FFFFFA17.W
            MOVE.B #$21,$FFFFFA07.W
            CLR.B $FFFFFA09.W
            MOVE.B #$21,$FFFFFA13.W
		CLR.B $FFFFFA15.W
		CLR.B $FFFFFA19.W
	 	CLR.B $FFFFFA1F.W
	 	CLR.B $FFFFFA21.W
	 	CLR.B $FFFFFA1B.W
		MOVE.L #overscan,$134.W
		MOVE.L #first_vbl,$70.W
set_pal	MOVEM.L pal,D0-D7
		MOVEM.L D0-D7,$FFFF8240.W
		MOVE #$2300,SR

* Here is the main vbl loop!

vbl_lp	MOVE vbl_timer(PC),D0
.wait_vbl	CMP vbl_timer(PC),D0
		BEQ.S .wait_vbl
		NOT switch
		BNE.S notnewchunk
		MOVE sc_x(PC),D4
		ADDQ #8,D4
		CMP #232,D4
		BNE.S .notwrap
		CLR sc_x
		LEA log_base(PC),A0
		MOVEM.L (A0),D0-D3
		MOVE.L D3,(A0)+
		MOVE.L D2,(A0)+
		MOVE.L D1,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D3,A0
		LSR #8,D3
		MOVE.L D3,$FFFF8200.W
		BRA.S calclog
.notwrap	MOVE D4,sc_x
notnewchunk	LEA log_base(PC),A0
		MOVEM.L (A0),D0-D3
		MOVE.L D1,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D3,(A0)+
		MOVE.L D2,(A0)+
		MOVE.L D1,A0
		LSR #8,D1
		MOVE.L D1,$FFFF8200.W
calclog	ADD sc_x(PC),A0
		LEA 1760(A0),A0
		MOVE.L A0,log_baseo
		MOVE.L log_base1(PC),A0
		LEA 1760(A0),A0
		ADD sc_x(PC),A0
		MOVE.L A0,log_base1o

* Tile little bit of screen that
* there wasn't time to do in hbl

.do_para	MOVE.L para_ptr(PC),A0
		MOVE (A0)+,D0
		MOVE (A0)+,D1
		CMP.L #para_end-4,A0
		BLO.S .not_nwave
		LEA parawave,A0
.not_nwave	MOVE.L A0,para_ptr
		MOVEQ #31,D2
		AND D2,D0
		AND D2,D1
.mul12_64	MOVE D0,D2
		ADD D2,D2
		ADD D2,D0
		LSL #8,d0
.mul_12	MOVE D1,D2
		ADD D2,D2
		ADD D2,D1
		ADD D1,D1
		ADD D1,D1		
		LEA tiles,A0
		ADD D0,D1
		ADDA.W D1,A0
		MOVE.L A0,tile_ptr
		MOVE.L log_baseo(PC),A1
		MOVEQ #0,D0
		MOVE.L D0,(22*230)+216(A1)
		MOVE.L D0,(22*230)+220(A1)
		LEA 160+(118*230)(A1),A1
i		set 0
		REPT 32
		MOVEM.W (A0)+,D0-D5
		MOVEM.W D3-D5,i+(-64*230)(A1)
		MOVEM.W D0-D2,i+(-64*230)+8(A1)
		MOVEM.W D3-D5,i+(-64*230)+16(A1)
		MOVEM.W D0-D2,i+(-64*230)+24(A1)
		MOVEM.W D3-D5,i+(-64*230)+32(A1)
		MOVEM.W D3-D5,i+(-32*230)(A1)
		MOVEM.W D0-D2,i+(-32*230)+8(A1)
		MOVEM.W D3-D5,i+(-32*230)+16(A1)
		MOVEM.W D0-D2,i+(-32*230)+24(A1)
		MOVEM.W D3-D5,i+(-32*230)+32(A1)
		MOVEM.W D3-D5,i(A1)
		MOVEM.W D0-D2,i+8(A1)
		MOVEM.W D3-D5,i+16(A1)
		MOVEM.W D0-D2,i+24(A1)
		MOVEM.W D3-D5,i+32(A1)
		MOVEM.W D0-D2,i+(-64*230)+40(A1)
		MOVEM.W D0-D2,i+(-32*230)+40(A1)
		MOVEM.W D0-D2,i+40(A1)
		MOVEM.W D0-D2,i+(32*230)+40(A1)
		MOVEM.W D0-D2,i+(64*230)+40(A1)
		MOVEM.W D0-D2,i+(96*230)+40(A1)
		MOVE.W D2,i-132-(32*230)(A1)
		MOVE.W D2,i-132(A1)
		MOVE.W D2,i-132+(32*230)(A1)
i		SET i-230
		ENDR

* Place endchunk of scroller....

endchunk	MOVE.L scr_point(PC),A5
		MOVE scrx(PC),D0
		ADDQ #1,D0
		CMP #13,D0
		BLO.S .notnewchar
		ADDQ.L #1,A5
		MOVE.B 1(A5),D0
		BNE.S .not_wrap
		LEA text(PC),A5
.not_wrap	MOVE.L A5,scr_point
		MOVEQ #1,D0
.notnewchar	MOVE D0,scrx
		MOVEQ #0,D1
		MOVE.B (A5)+,D1
		LEA char_tab,A4
		ADD D1,D1
		LEA font(PC),A0
		ADD (A4,D1),A0
		MOVE.L log_baseo(PC),A1
		LEA 222+(124*230)(A1),A1
		MOVE.L log_base1o(PC),A3
		LEA 220-230+(124*230)(A3),A3
		MOVEQ #0,D1
		MOVE D1,-102*230(A1)
		MOVE D1,-101*230(A1)
		MOVE D1,-100*230(A1)
		MOVE D1,-99*230(A1)
		MOVE D1,-98*230(A1)
		MOVE D1,-97*230(A1)
		MOVE D1,-102*230(A3)
		MOVE D1,-101*230(A3)
		MOVE D1,-100*230(A3)
		MOVE D1,-99*230(A3)
		MOVE D1,-98*230(A3)
		MOVE D1,-97*230(A3)
		LEA -1(A0,D0),A0
		LEA 1(A0),A2
		CMP #12,D0
		BNE plot_end
		MOVEQ #0,D0
		MOVE.B (A5),D0
		LEA char_tab,A4
		ADD D0,D0
		LEA font(PC),A2
		ADD (A4,D0),A2
i		SET 0
j		SET -96*230
plot_end	REPT 36
		MOVE.B i(A0),j(A1)
		MOVE.B i(A2),j+1(A1)
		MOVE.W j(A1),D0
		MOVE D0,j(A3)
		MOVE D0,j+230(A3)
		MOVE D0,j+460(A3)
		MOVE D0,j+690(A3)
		MOVE D0,j+920(A3)
		MOVE D0,j+230(A1)
		MOVE D0,j+460(A1)
		MOVE D0,j+690(A1)
		MOVE D0,j+920(A1)
i		SET i+12
j		SET j+1150
		ENDR
		MOVEQ #0,D1
		MOVE.W D1,j(A1)
		MOVE.W D1,j+230(A1)
		MOVE.W D1,j+460(A1)
		MOVE.W D1,j+690(A1)
		MOVE.W D1,j+920(A1)
		MOVE.W D1,j+1150(A1)
		MOVE.W D1,j+1380(A1)
		MOVE.W D1,j(A3)
		MOVE.W D1,j+230(A3)
		MOVE.W D1,j+460(A3)
		MOVE.W D1,j+690(A3)
		MOVE.W D1,j+920(A3)
		MOVE.W D1,j+1150(A3)
		MOVE.W D1,j+1380(A3)
		MOVE.L D1,j+1610(A3)
		MOVE.L D1,j+1614(A3)

play_mus	LEA $FFFF8800.W,A1
		MOVE.L mus_ptr,A0
		MOVE.B #0,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #1,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #2,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #3,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #4,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #5,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #6,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #7,(A1)
		MOVE.B (A1),D0
		MOVE.B (A0)+,D1
		AND.B #%11000000,D0
		AND.B #%00111111,D1
		OR.B D1,D0
		MOVE.B D0,2(A1)
		MOVE.B #8,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #9,(A1)
		MOVE.B (A0)+,2(A1)
		MOVE.B #10,(A1)
		MOVE.B (A0)+,2(A1)
		CMP.L #recorded+(11*6144),A0
		BLT.S notendmus
		LEA recorded,A0
notendmus	MOVE.L A0,mus_ptr

scr32		MOVE.L log_baseo(PC),A1
		LEA 230+216(A1),A5
		ADD.L #216+(217*230),A1
		MOVE.L log_base1o(PC),A4
		LEA 214(A4),A6
		ADD.L #214-230+(217*230),A4
		MOVE.L scr_point32(PC),A3
		MOVE scrx32(PC),D0
		ADD #80,D0
		CMP #3*80,D0
		BLO.S not_next32
		ADDQ.L #1,A3
		MOVE.B 1(A3),D0
		BNE.S not_wrap32
		LEA text32(PC),A3
not_wrap32	MOVE.L A3,scr_point32
		MOVEQ #0,D0
not_next32	MOVE D0,scrx32
		CLR D1
		MOVE.B (A3)+,D1
		ADD D1,D1
		ADD D1,D1
		LEA char_tab1(PC),A0
		MOVE.L (A0,D1),A0
		ADDA.W D0,A0
		LEA 80(A0),A2
		CMP #2*80,D0
		BNE.S plot_end32
		CLR D0
		MOVE.B (A3),D0
		ADD D0,D0
		ADD D0,D0
		LEA char_tab1(PC),A2
		MOVE.L (A2,D0),A2
i		SET 0
plot_end32	REPT 2
		MOVEM.L (A0)+,D0-D7
		MOVEP.L D0,i(A1)
		MOVEP.L D1,i+230(A1)
		MOVEP.L D2,i+460(A1)
		MOVEP.L D3,i+690(A1)
		MOVEP.L D4,i+920(A1)
		MOVEP.L D5,i+1150(A1)
		MOVEP.L D6,i+1380(A1)
		MOVEP.L D7,i+1610(A1)
		MOVEM.L (A2)+,D0-D7
		MOVEP.L D0,i+1(A1)
		MOVEP.L D1,i+231(A1)
		MOVEP.L D2,i+461(A1)
		MOVEP.L D3,i+691(A1)
		MOVEP.L D4,i+921(A1)
		MOVEP.L D5,i+1151(A1)
		MOVEP.L D6,i+1381(A1)
		MOVEP.L D7,i+1611(A1)
		MOVEM.L i(A1),D0-D1
		MOVEM.L D0-D1,i(A4)
		MOVEM.L D0-D1,i(A5)
		MOVEM.L D0-D1,i(A6)
		MOVEM.L i+230(A1),D0-D1
		MOVEM.L D0-D1,i+230(A4)
		MOVEM.L D0-D1,i+230(A5)
		MOVEM.L D0-D1,i+230(A6)
		MOVEM.L i+460(A1),D0-D1
		MOVEM.L D0-D1,i+460(A4)
		MOVEM.L D0-D1,i+460(A5)
		MOVEM.L D0-D1,i+460(A6)
		MOVEM.L i+690(A1),D0-D1
		MOVEM.L D0-D1,i+690(A4)
		MOVEM.L D0-D1,i+690(A5)
		MOVEM.L D0-D1,i+690(A6)
		MOVEM.L i+920(A1),D0-D1
		MOVEM.L D0-D1,i+920(A4)
		MOVEM.L D0-D1,i+920(A5)
		MOVEM.L D0-D1,i+920(A6)
		MOVEM.L i+1150(A1),D0-D1
		MOVEM.L D0-D1,i+1150(A4)
		MOVEM.L D0-D1,i+1150(A5)
		MOVEM.L D0-D1,i+1150(A6)
		MOVEM.L i+1380(A1),D0-D1
		MOVEM.L D0-D1,i+1380(A4)
		MOVEM.L D0-D1,i+1380(A5)
		MOVEM.L D0-D1,i+1380(A6)
		MOVEM.L i+1610(A1),D0-D1
		MOVEM.L D0-D1,i+1610(A4)
		MOVEM.L D0-D1,i+1610(A5)
		MOVEM.L D0-D1,i+1610(A6)
i		SET i+(230*8)
		ENDR
		MOVEM.L (A0)+,D0-D3
		MOVEP.L D0,i(A1)
		MOVEP.L D1,i+230(A1)
		MOVEP.L D2,i+460(A1)
		MOVEP.L D3,i+690(A1)
		MOVEM.L (A2)+,D0-D3
		MOVEP.L D0,i+1(A1)
		MOVEP.L D1,i+231(A1)
		MOVEP.L D2,i+461(A1)
		MOVEP.L D3,i+691(A1)
		MOVEM.L i(A1),D0-D1
		MOVEM.L D0-D1,i(A4)
		MOVEM.L D0-D1,i(A5)
		MOVEM.L D0-D1,i(A6)
		MOVEM.L i+230(A1),D0-D1
		MOVEM.L D0-D1,i+230(A4)
		MOVEM.L D0-D1,i+230(A5)
		MOVEM.L D0-D1,i+230(A6)
		MOVEM.L i+460(A1),D0-D1
		MOVEM.L D0-D1,i+460(A4)
		MOVEM.L D0-D1,i+460(A5)
		MOVEM.L D0-D1,i+460(A6)
		MOVEM.L i+690(A1),D0-D1
		MOVEM.L D0-D1,i+690(A4)
		MOVEM.L D0-D1,i+690(A5)
		MOVEM.L D0-D1,i+690(A6)
i		SET i+(230*4)

Test_key	MOVEQ #0,D0
		MOVE.L D0,i(A4)
		MOVE.L D0,i+4(A4)
		MOVE.L D0,i-(21*230)(A1)
		MOVE.L D0,i-(21*230)+4(A1)
		MOVE.L D0,i-(21*230)-4(A5)
		MOVE.L D0,i-(21*230)-8(A5)

		MOVE.L D0,i(A6)
		MOVE.L D0,i+4(A6)
		MOVE.L D0,i+8(A6)
		MOVE.L D0,i+12(A6)
		MOVE.L D0,i-(21*230)(A5)
		MOVE.L D0,i-(21*230)+4(A5)
		BTST.B #0,$FFFFFC00.W
		BEQ vbl_lp
		CMP.B #$39,$FFFFFC02.W
		BNE vbl_lp

* Restore mfp interrupts and various
* vectors that the demo used.

restore	MOVE vbl_timer(PC),D0
last_vbl	CMP vbl_timer(PC),D0
		BEQ.S last_vbl
		MOVE #$2700,SR
		MOVE #$8800,A0
		MOVE.L #$08000000,(A0)
		MOVE.L #$09000000,(A0)
		MOVE.L #$0A000000,(A0)
		JSR flush
		MOVE.B #$8,$FFFFFC02.W
		LEA old_mfp,A0
		MOVE.B (A0)+,$FFFFFA07.W
            MOVE.B (A0)+,$FFFFFA09.W
            MOVE.B (A0)+,$FFFFFA13.W
            MOVE.B (A0)+,$FFFFFA15.W
            MOVE.B (A0)+,$FFFFFA17.W
            MOVE.B (A0)+,$FFFFFA19.W
            MOVE.B (A0)+,$FFFFFA1F.W
            MOVE.B (A0)+,$FFFF8260.W
		MOVE.L (A0)+,$70.W
		MOVE.L (A0)+,$134.W
		MOVE #$2300,SR
		IFEQ demo
		MOVE.L #$07770000,$FFFF8240.W
		MOVE.L #$00000000,$FFFF8244.W
		CLR -(SP)
		TRAP #1
		ENDC
		MOVE.L oldsp(PC),SP
		RTS
oldsp		DC.L 0
* Variables used within program

log_base	DC.L 0
phy_base	DC.L 0
log_base1	DC.L 0
phy_base1	DC.L 0
log_baseo	DC.L 0
log_base1o	DC.L 0
switch	DC.W 0
vbl_timer	DC.W 0
sc_x		DC.W 0
para_ptr	DC.L parawave
tile_ptr	DC.L tiles
mus_ptr	DC.L recorded
scr_point32	DC.L text32
scrx32	DC.W 0
scr_point	DC.L text
scrx		DC.W 12
text		DC.B "                          WOW! THIS DEMO SURE DOES BEAT THE LOST BOYS PATHETIC EFFORT!!! "
		DC.B "THE RESISTANCE PROUDLY PRESENT THE PARALLAX SCROLL... FIRST OF ALL L"
		DC.B "ETS DO SOME CREDITS....CODING BY GRIFF.... THE MUSIC IS BY COUNT ZERO OF ELECTRONIC IMAGES (OF COURSE!) THE SMA"
		DC.B "LL FONT IS BY MASTER AND THE LARGE FONT BY COUNT ZERO..... SPECIAL T"
		DC.B "HANKS GO TO CHRIS N. FOR DRAWING THE LOVELY BACKGROUND TILES.       "
		DC.B "RIGHT THEN WOT SHALL WE TALK ABOUT IN THIS SCROLLER....ERM..... I KN"
		DC.B "OW LET'S TALK ABOUT - THE LOST BOYS!   PLEASE READ ALLL OF THE FOLLO"
		DC.B "WING TEXT AS IT CLEARS UP A LOT OF THINGS THAT WERE SAID ABOUT US IN"
		DC.B " THE MINDBOMB DEMO!         MANY MONTHS AGO THE RESISTANCE MEET THE "
		DC.B "LOST BOYS FOR THE FIRST TIME AT THE PC SHOW.AFTER THEY HAD SEEN SOME O"
		DC.B "F THE DEMOS WE WERE WRITING AND BEING REALLY IMPRESSED BY THEM THEY "
		DC.B "ASKED US TO WRITE A SCREEN FOR THEIR FORTHCOMING MINDBOMB DEMO, THEY"
		DC.B " ASKED US TO DO SOMETHING WITH THE ORIGINAL TWIST SCROLLER, SO WE WE"
		DC.B "NT AWAY AND CODED A DEMO CALLED - THE TWISTSCROLL 2 - WHICH CONTAINE"
		DC.B "D TWO TWISTSCROLLERS, LOTSA SPRITES, A VU-METER AND LOTSA OTHER STUFF"
		DC.B ", ANYWAY DURING THE TIME WE WERE WRITING THIS DEMO WE RECEIVED SOM"
		DC.B "E PREVIEW SCREENS WRITTEN BY LOST BOYS...THEY TOLD US ON NO ACCOUNT "
		DC.B "MUST WE SPREAD THESE SCREENS, SO NATURALLY WE RESPECTED THEIR WISHES"
		DC.B " AND DID NOT GIVE THEM TO ANYONE ELSE, THAT IS UNTIL WE WERE AT THE "
		DC.B "NEW YEAR COPY PARTY WHEN ARCHIE OF THE ST SQUAD DECIDED TO TAKE IT UPO"
		DC.B "N HIMSELF TO COPY IT WITHOUT ASKING...AS WELL AS COPYING THIS HE ALS"
		DC.B "O COPIED A LOT OF MY SOURCE CODE AND MY MUSIC RIPS (HE THEN CLAIMED "
		DC.B "TO HAVE RIPPED THEM HIMSELF!)...WORDS FAIL TO DESCRIBE THIS PERSON(B"
		DC.B "UT I'LL TRY ANYWAY)...ARCHIE YOU ARE A MOTHERFUCKINGSHITHEADBASTA"
		DC.B "RDCUNTFACE*POORLYHUNG!*SONAOFAFUCKINRETARDEDBITCH!  AS I SAID WORDS JUST"
		DC.B " CANNOT DESCRIBE THIS GUY..... AS I WAS THE ONLY ONE TO HAVE RECEIVE"
		DC.B "D THIS PARTICULAR PREVIEW THEN I NATURALLY GOT THE BLAM AND WAS GENE"
		DC.B "RALLY SLAGGED OFF AND FUCKING GREETED IN THE MINDBOMB DEMO .AS WELL AS"
		DC.B " THIS THEY ALSO DIDN'T INCLUDE MY SCREEN BECAUSE I HAD SUPPOSEDLY BE"
		DC.B "EN SUCH A BASTARD. ANYWAY ALL THIS TROUBLE IS NOW CLEARED UP AND WE "
		DC.B "ARE ON SPEAKING TERMS WITH THE LOST BOYS AGAIN!!  BY THE WAY IT TOOK"
		DC.B " A TWO AND A HALF HOUR PHONE CALL TO MANIKIN TO SORT ALL THE TROUBLE"
		DC.B " OUT!!          THERE ARE NO GREETINGS IN THIS SCROLLER ONLY A SPECI"
		DC.B "AL FUCKING GREETING TO ARCHIE........FUCK OFF ARCHIE YOU PIECE OF SH"
		DC.B "IT, ALL THE INNER CIRCLE HATE YOU,WHY DON'T YOU DO THE WORLD SOME GO"
		DC.B "OD AND GO KILL YOURSELF!    NOW I'VE GOT THAT OFF MY CHEST I THINK I"
		DC.B "TS TIME TO WRAP...BEFORE WE WRAP ONE FINAL FUCK OFF: FUCK OFF ARCHIE"
		DC.B ".....       WRAP!!           "
		DC.B 0
		EVEN

text32	DC.B "    				  WHERE AM DAT POTATO???? 	   HERE IT IS!  	  .MASTER.    THE MAN ON TH"
		DC.B "E DRINK. 	 THE MAN WITH THE STICK.     THE MAN WITH THE SICK (HANGOVER TIM"
		DC.B "E!).     RIGHT!    TALK TIME!    ABOUT HOW INNER CIRCLE WAS FORMED, AND ALSO "
		DC.B "A FEW GREETS FOR THE EGO TRIPPERS OUT THERE!    FIRSTLY HOW INNER CIRCLE WA"
		DC.B "S FORMED...    IT WAS FROM THE LOINS OF ZEUS HIMSELF, PERFECTLY FORMED!"
		DC.B "    THE STRENGTH OF A MOLES LEFT EYE!    THE POWER OF A SHEEPS LEFT FOOT!    TH"
		DC.B "E BRAINS OF A CATS TAIL!    AND A BARREL LOAD OF CAMEL SHITE TO HELP BALANCE"
		DC.B " IT!   NOW FOR THE WAVES(INSTEAD OF HI'S!)...    WAVE TO ALL INNER CIRCLE MEN! (ELECTRONIC "
		DC.B "IMAGES  (TOODALOOOOO COUNTY, PHANTY, GIZMY!), HOTLINE (WAVES TO SENSE 'N' "
		DC.B "LOTUS    THE ONLY ONES I'VE MET OF YOU ALL! BUT WAVES TO YOU AS WELL!)"
		DC.B ", THE FINGERBOBS (WAVEY TO T.C.C, OBERJE', THE 'MAD' COUNT AND ALL!)"
		DC.B ", ST SQUAD (INTERESTING MATRIXX, HOW'S THE CHIMP????  WAVEY TO ALBA!)"
		DC.B ").. EXTREMELY NICE WAVES TO THE RED HERRINGS, WHO ARE MORE OF MEMBERS "
		DC.B "THAN GUESTS!  WAVES TO ALL CREWS OF THE FOLLOWING... THE UNION, ALLI"
		DC.B "ANCE ( BOTH! ), OVERLANDERS, AENIGMATICA, PHALANX, THE EMPIRE... THAT SHO"
		DC.B "ULD SUM UP MOST CREWS!    BUT IN ADDITION TO THOSE, WAVES TO SYNC, SEWE"
		DC.B "R SOFTWARE, POMPEY PIRATES, MEDWAY BOYS, AUTOMATION, TLT, AGRESSION (H"
		DC.B "ELLO THERE!), THE STARFIRES (NICE FULLSCREEN!), LULU, ALL THOSE IN SO "
		DC.B "WATT (IN CASE YOU WEREN'T LISTED IN THE EARLIER ORGANISATIONS...).. "
		DC.B "A SPECIAL GREETING TO THREE PEOPLE NOW... TO    .STAINLESS STEEL RAT. "
		DC.B "    .RED BARON.     .ELEKTRA.      ...THEY HAD TO BE GREETED!    SO ON"
		DC.B "TOP OF OTHER THINGS... PREFERABLY MEG RYAN, JAMIE LEE CURTIS, KIM BASI"
		DC.B "NGER, JULIA ROBERTS, (DROOL, DROOL, SLOBBER...)."
		DC.B "..    IF YOU WERE NOT MENTIONED THEN CONTACT ME AND GIVE ME A GOOD REASON WHY YOU SHOULD BE GREETED! I KNOW THERE ARE A LOT WHO SHOULD BE BUT ANY I MISSED HERE ARE IN THE FLEXISCROLL SCROLLTEXT (THE ONES UP THE SIDE OF THE SCREEN!)"
		DC.B "   ANYWAY, DO CONTACT US!!    THE ADDRESSES ARE IN ONE OF THE MANY SECT"
		DC.B "ORS AND IN THE MAIN MENU SCROLLTEXT SO READ IT!!    I EXPECT TO HEAR FROM"
		DC.B "   YOU ALL, AND I MEAN ALL OF YOU!!     TIME TO SAY GOODBYE, BUT BEFOR"
		DC.B "E I JUMP INTO THE WAGON LOAD OF IDIOTS, I HAVE TO GIVE SOME FUCKING GR"
		DC.B "EETINGS TO A FEW PEOPLE... THEY ARE...  THIRD * COAST * TECHNOLOGIES"
		DC.B "... CORONA * LEMONADE ...  ATTENDANTS FOR BADLY LOOKED AFTER TO"
		DC.B "ILETS (???)... * POLL TAX *... * PARADOX * SOFTWARE *... * PROBE * SOFTW"
		DC.B "ARE *... REASONS ARE THAT...   THIRD * COAST AS THEY HAVE TERRIBLE SERVICE, CORONA * FOR THA"
		DC.B "T PISS LEMONADE, POLL * TAX FOR BEING SO HIGH, PARADOX AND PROBE FOR"
		DC.B " MAKING SHITE GAMES (ONE OF PROBE'S EXCLUDED..CAN'T THINK WHICH ONE THOUGH!)...     NOW THE TIME HAS COME TO TERMINATE THE SCROLLTEXT AN"
		DC.B "D ABOUT TIME TOO!.... OK... LET US SAY THIS SHITE ALL OVER AGAIN...   "
		DC.B "   WRAP  	     WRAZ   	  WRASSP  	     WARP         LOOP         AND RESTART...  					                                       I REALL"
		DC.B "Y AM RESTARTING....            OK, HERE'S SOME SYMBOLS TO STOP IT ALL"
		DC.B "....      * * * * * * * * * * *    DON'T BE OFFENDED BY THEM..   THEY WERE DONE FOR CERTAIN PEOPLE... WHO NEEDED IT.... AND THERE ARE MORE WHO NEED THEM, BUT LOOK FOR MORE IN THE FLEXISCROLL....                  "
		DC.B 0

		EVEN

font		INCBIN PARALLAX.INC\NICKFNT1.DAT

* Character offset table

char_tab	DS.W 92
char_tab1	REPT 33
		DC.L font32+(34*240)
		ENDR
		DC.L font32+(29*240)

		DC.L font32+(34*240)
		DC.L font32+(34*240)
		DC.L font32+(34*240)
		DC.L font32+(34*240)
		DC.L font32+(34*240)
		DC.L font32+(28*240)	;'
		DC.L font32+(31*240)	;(
		DC.L font32+(32*240)	;)
		DC.L font32+(33*240)	;DICKHEAD
		DC.L font32+(34*240)	
		DC.L font32+(27*240)	;,
		DC.L font32+(34*240)
		DC.L font32+(26*240)	;.

		REPT 16
		DC.L font32+(34*240)
		ENDR

i		set 0
		DC.L font32+(30*240)
		DC.L font32+(34*240)
		REPT 26
		DC.L font32+i
i		set i+240
		ENDR

blank_pal	DS.W 16

* Create character offset tables

makeoffsets	LEA char_tab(PC),A0
		MOVEQ #31,D0
		MOVEQ #0,D1
offy1_lp	MOVE D1,(A0)+
		DBF D0,offy1_lp
		MOVEQ #59,D0
offy2_lp	MOVE D1,(A0)+
		ADD #432,D1
		DBF D0,offy2_lp
		RTS

* First vbl ensures sync.

first_vbl	MOVE.L #vbl,$70.W
		ADDQ #1,vbl_timer
		RTE

* Vbl to setup hardware scroll
* vectors and zero colours...
			
vbl		MOVE.B #99,$FFFFFA1F.W
		MOVE.B #4,$FFFFFA19.W
		MOVEM.L D0/A0-A1,-(SP)	
		MOVE sc_x(PC),D0
		LSR #1,D0
		MOVE.L tab9(PC,D0),A0
		LEA HL1+2(PC),A1
		MOVE.L (A0)+,(A1)
		MOVE.L (A0)+,6(A1)
		MOVE.L (A0)+,12(A1)
		MOVE.L (A0)+,18(A1)
		MOVE.L (A0)+,24(A1)
		MOVE.L (A0)+,30(A1)
		MOVE.L (A0)+,36(A1)
		MOVE.L (A0)+,42(A1)
		MOVE.L (A0)+,48(A1)
		ADDQ #1,vbl_timer
		MOVEM.L (SP)+,D0/A0-A1
		RTE

* Hardware scroll offset table to
* point to hardware scroll vectors!

tab9		DS.L 40

* The Overscan + tile routine!

overscan	clr.b $fffffa19.w
topremove	MOVE.L #PHBL,$68.W
		stop #$2100
		rte

quicky	RTE

PHBL		move.l #quicky,$68.W
		stop #$2100
		move #$2700,sr
		dcb.w 16+39+1,$4e71
		MOVEM.L D0-D7/A0-A5,-(SP)
		clr.b $ffff820a.w
		dcb.w 20,$4e71
		LEA $FFFF8209.W,A0
		move.b #2,$ffff820a.w
.sync		MOVE.B (A0),D0
		BEQ.S .sync
		MOVEQ #$3F,D1
		SUB.B D0,D1
		LSL D1,D0
		DCB.W 54,$4E71
		LEA $FFFF820A.W,A0
		LEA $FFFF8260.W,A1
		MOVEQ	#2,D0
		MOVEQ	#0,D1
		LEA rastdat,A4
HL1		JSR 0
HL2		JSR 0
HL3		JSR 0
HL4		JSR 0
HL5		JSR 0
HL6		JSR 0
HL7		JSR 0
HL8		JSR 0
HL9		JSR 0
		MOVE (A4)+,$FFFF8240.W
		DCB.W 71,$4E71
		MOVE.L log_baseo,A5
		LEA 96*230(A5),A5
		MOVEM.L pal,D2-D7/A3-A4
		MOVE.L tile_ptr,A2
		MOVEM.L D2-D7/A3-A4,$FFFF8240.W

* Main overscan + tileing loop
* now this is efficient use of time!

count		SET 0
countB	SET 30
palcount1	SET 30
palcount2	SET 2
		REPT 32
		MOVEM.W (A2)+,D2-D7
		DCB.W	2,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA 8+((118-count)*230)(A5),A3
		MOVEM.W D5-D7,152(A3)
		MOVEM.W D2-D4,160(A3)
		MOVEM.W D5-D7,168(A3)
		MOVEM.W D2-D4,176(A3)
		MOVEM.W D5-D7,184(A3)
		MOVEM.W D5-D7,152-(32*230)(A3)
		MOVEM.W D2-D4,160-(32*230)(A3)
		MOVEM.W D5-D7,168-(32*230)(A3)
		MOVEM.W D2-D4,176-(32*230)(A3)
		MOVEM.W D5-D7,184-(32*230)(A3)
		MOVEM.W D5-D7,152-(64*230)(A3)
		MOVEM.W D2-D4,160-(64*230)(A3)
		MOVEM.W D5-D7,168-(64*230)(A3)
		MOVE.W D7,188-(64*230)(A3)
		MOVE D4,20(A3)
		MOVE D4,-(32*230)+20(A3)
		MOVE.B D1,(A0) 
		MOVE.B D0,(A0)
		MOVEM.W D2-D4,176-(64*230)(A3)
		MOVEM.W D5-D6,184-(64*230)(A3)
		MOVE.B D0,(A1)      
		NOP
		MOVE.B D1,(A1)
		DCB.W	2,$4E71

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA -32*230(A3),A3 

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA -32*230(A3),A3 

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA -32*230(A3),A3 

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA -32*230(A3),A3 

		IFEQ palcount1
		DCB.W	12,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W 89-48,$4e71
		MOVE.L #$00000010,$FFFF8240.W
		MOVE.L #$07770666,$FFFF8240+4.W
		MOVE.L #$05550444,$FFFF8240+8.W
		MOVE.L #$03330222,$FFFF8240+12.W
		MOVE.L #$01110001,$FFFF8240+16.W
		MOVE.L #$00120023,$FFFF8240+20.W
		MOVE.L #$00340045,$FFFF8240+24.W
		MOVE.L #$00670504,$FFFF8240+28.W
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 11,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W	2,$4E71
		ENDC

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)		
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		LEA -32*230(A3),A3 

		IFEQ countB
botbord	DCB.W 9,$4E71
		MOVE.B D1,(A0)
		MOVE.B D0,(A1)
		MOVE.B D0,(A0)	
		MOVE.B D1,(A1)
		DCB.W 89,$4e71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 11,$4e71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W	2,$4E71
		ENDC

		MOVEM.W D2-D4,144(A3)
		MOVEM.W D5-D7,8(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVEM.W D2-D3,16(A3)
		MOVEM.W D5-D7,24(A3)
		MOVEM.W D2-D4,32(A3)
		MOVEM.W D5-D7,40(A3)
		MOVEM.W D2-D4,48(A3)
		MOVEM.W D5-D7,56(A3)
		MOVEM.W D2-D4,64(A3)
		MOVEM.W D5-D7,72(A3)
		MOVEM.W D2-D4,80(A3)
		MOVEM.W D5-D7,88(A3)
		MOVEM.W D2-D4,96(A3)
		MOVEM.W D5-D7,104(A3)
		MOVEM.W D2-D4,112(A3)
		MOVEM.W D5-D7,120(A3)
		MOVEM.W D2-D4,128(A3)
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		MOVEM.W D5-D7,136(A3)
		MOVEM.W D2-D4,(A3)
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		MOVE D4,20(A3)

		IFEQ palcount2
		DCB.W	11,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W 89-48,$4e71
		MOVE.L #$00000022,$FFFF8240.W
		MOVE.L #$01440355,$FFFF8240+4.W
		MOVE.L #$04770041,$FFFF8240+8.W
		MOVE.L #$00620374,$FFFF8240+12.W
		MOVE.L #$00010102,$FFFF8240+16.W
		MOVE.L #$02030304,$FFFF8240+20.W
		MOVE.L #$04050506,$FFFF8240+24.W
		MOVE.L #$06070700,$FFFF8240+28.W
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 11,$4e71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W	3,$4E71
		ENDC

palcount1	SET palcount1-1
palcount2	SET palcount2-1
countB	SET countB-1
count		SET count+1
		ENDR

lastbit	MOVEQ #9,D2
last_lp	DCB.W	10,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W 89,$4e71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 11,$4e71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		NOP
		DBF D2,last_lp
		CLR.B $FFFFFA1B.W
		MOVE.B #1,$FFFFFA21.W
		MOVE.L #hblb1,$120.W
		MOVE.B #8,$FFFFFA1B.W
		MOVEM.L (SP)+,D0-D7/A0-A5
		RTE

hblb1		MOVE #$010,$FFFF8240.W
		MOVE.L #hblb2,$120.W
		RTE
hblb2		MOVE #$020,$FFFF8240.W
		MOVE.L #hblb3,$120.W
		RTE
hblb3		MOVE #$030,$FFFF8240.W
		MOVE.L #hblb4,$120.W
		RTE
hblb4		MOVE #$040,$FFFF8240.W
		MOVE.L #hblb5,$120.W
		RTE
hblb5		MOVE #$050,$FFFF8240.W
		MOVE.L #hblb6,$120.W
		RTE
hblb6		MOVE #$040,$FFFF8240.W
		MOVE.L #hblb7,$120.W
		RTE
hblb7		MOVE #$030,$FFFF8240.W
		MOVE.L #hblb8,$120.W
		RTE
hblb8		MOVE #$020,$FFFF8240.W
		MOVE.L #hblb9,$120.W
		RTE
hblb9		MOVE #$010,$FFFF8240.W
		MOVE.L #hblb10,$120.W
		RTE

hblb10	MOVE.L D0,-(SP)
		MOVE.L A0,USP
		MOVE #$8240,A0
		MOVEQ #0,D0
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		MOVE.L D0,(A0)+
		CLR.B $FFFFFA1B.W
		MOVE.L USP,A0
		MOVE.L (SP)+,D0
		RTE

pal		DC.L $00000001
		DC.L $00670056
		DC.L $00450034
		DC.L $00230012
		DC.L $01110222
		DC.L $03330444
		DC.L $05550666
		DC.L $07770504

rastdat	DC.W $000
		DC.W $010
		DC.W $020
		DC.W $030
		DC.W $040
		DC.W $050
		DC.W $040
		DC.W $030
		DC.W $020
		DC.W $010
		DC.W $000
		DC.W $000
		DC.W $000

* SET UP JSR VECTORS FOR HARDWARE
* SCROLL (LINE CASES...)

SETUPSCROLL	LEA ROUTS(PC),A0
		LEA ROUT_TAB(PC),A1
		LEA LINE_JMPS,A2
		MOVEQ #28,D2	
.jlp		MOVEQ #8,D1
.ilp		MOVEQ #0,D0
		MOVE.B (A0)+,D0
		ADD D0,D0
		ADD D0,D0
		MOVE.L (A1,D0),(A2)+
		DBF D1,.ilp
		DBF D2,.jlp
		LEA tab9,A0
		LEA LINE_JMPS,A1
		MOVEQ #39,D0
hslp		MOVE.L A1,(A0)+
		LEA 36(A1),A1
		DBF D0,hslp
		RTS

* THE ACTUAL HARDWARE SCROLL ROUTS
* EACH ROUTS WILL GIVE A CERTAIN
* LINE LENGTH AND BY USING DIFFERENT
* COMBINATIONS OF THESE THE SCREEN
* CAN BE SCROLLED!!! 

* Overscan one whole screen line

wholeline	MOVE.W (A4)+,$FFFF8240.W
		NOP
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W 89,$4E71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 11,$4e71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		RTS

* Right border only

rightonly	MOVE.W (A4)+,$FFFF8240.W
		DCB.W	95,$4E71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 16,$4e71
		RTS

* Miss one word off screen line
* e.g line length=158 not 160!

length158	MOVE.W (A4)+,$FFFF8240.W
		DCB.W	93,$4E71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 18,$4e71
		RTS

* Do nothing

nothing	MOVE.W (A4)+,$FFFF8240.W
		DCB.W 115,$4E71
		RTS

* 24 bytes extra per line

length184	MOVE.W (A4)+,$FFFF8240.W
		NOP
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		DCB.W 87,$4E71
		MOVE.B D1,(A0)
		MOVE.B D0,(A0)
		DCB.W 13,$4E71
		MOVE.B D0,(A1)
		NOP
		MOVE.B D1,(A1)
		RTS		

ROUT_TAB	DC.L nothing
		DC.L length158
		DC.L length184
		DC.L rightonly
		DC.L wholeline

ROUTS		
m0		DC.B 0,0,0,0,0,0,0,0,0
m8		DC.B 2,1,1,1,1,1,1,1,1
m16		DC.B 2,1,1,1,1,0,0,0,0
m24		DC.B 2,0,0,0,0,0,0,0,0
m32		DC.B 3,1,1,1,1,1,1,0,0
m40		DC.B 3,1,1,0,0,0,0,0,0
m48		DC.B 2,2,0,0,0,0,0,0,0
m56		DC.B 4,1,1,1,1,1,1,1,0
m64		DC.B 4,1,1,1,0,0,0,0,0
m72		DC.B 2,2,2,0,0,0,0,0,0
m80		DC.B 3,3,1,1,1,1,0,0,0
m88		DC.B 3,3,0,0,0,0,0,0,0
m96		DC.B 2,2,2,2,0,0,0,0,0
m104		DC.B 4,3,1,1,1,1,1,0,0
m112		DC.B 4,3,1,0,0,0,0,0,0
m120		DC.B 3,3,3,1,1,1,1,1,1
m128		DC.B 4,4,1,1,1,1,1,1,0
m136		DC.B 4,4,1,1,0,0,0,0,0
m144		DC.B 2,2,2,2,2,2,0,0,0
m152		DC.B 4,3,3,1,1,1,0,0,0
m160		DC.B 4,2,2,2,2,1,1,1,0
m168		DC.B 2,2,2,2,2,2,2,0,0
m176		DC.B 4,4,3,1,1,1,1,0,0
m184		DC.B 4,4,3,0,0,0,0,0,0
m192		DC.B 4,3,3,3,1,1,1,1,1
m200		DC.B 4,4,4,1,1,1,1,1,0
m208		DC.B 4,4,4,1,0,0,0,0,0
m216		DC.B 3,3,3,3,3,1,1,0,0
m224		DC.B 4,4,4,2,1,1,1,1,1
m232		DC.B 4,4,4,2,1,0,0,0,0
m240		DC.B 3,3,3,3,3,2,1,1,0
 		EVEN

* Clear the 4 64k screens!

cls		LEA screens,A0
		ADD.L #256+(58880*4),A0
		MOVE #(256+(58880*4))/32-1,D7
		MOVEQ #0,D0
		MOVEQ #0,D1
		MOVEQ #0,D2
		MOVEQ #0,D3
		MOVEQ #0,D4
		MOVEQ #0,D5
		MOVEQ #0,D6
		MOVE.L D6,A1
cls_lp	MOVEM.L D0-D6/A1,-(A0)
		DBF D7,cls_lp
		RTS

* Flush keyboard

flush		BTST.B #0,$FFFFFC00.W
		BEQ.S flok
		MOVE.B $FFFFFC02.W,D0
		BRA.S flush
flok		RTS

* Pre-shift tiles

Init_tiles	LEA tiles,A5
		LEA tile1,A6
		MOVE.L A5,A1
		MOVEQ #31,D5
shift_lp	MOVE.L A6,A0
		LEA 496(A6),A2
		MOVEQ #31,D6
cpy_lp	MOVEM.W (A2)+,D0-D3
		MOVEM.W D0-D2,(A1)
		MOVEM.W D0-D2,(32*12)(A1)
		MOVEM.W (A2)+,D0-D3
		MOVEM.W D0-D2,6(A1)
		MOVEM.W D0-D2,(32*12)+6(A1)
		LEA 12(A1),A1
		LEA -32(A2),A2
		DBF D6,cpy_lp
		MOVEQ #31,D6
line_lp	MOVEQ #2,D7
pl_lp		LSR (A0)
		ROXR 8(A0)
		CLR D0
		ROXR D0
		OR D0,(A0)+
		DBF D7,pl_lp 
		LEA 10(A0),A0
		DBF D6,line_lp
		LEA 32*12(A1),A1
		DBF D5,shift_lp
		RTS

* Combine two tiles.

combine_two	MOVEQ #63,D7
		LEA tiles,A0
tile_lp	LEA tile2(PC),A1
		LEA 12*32(A0),A2
		MOVEQ #31,D6
spr1_lp	MOVEQ #1,D4
chn_lp	MOVEM.W (A1)+,D0-D3
		MOVE D0,D5
		OR D1,D5
		OR D2,D5
		NOT D5
		AND D5,(A0)
		OR D0,(A0)+
		AND D5,(A0)
		OR D1,(A0)+
		AND D5,(A0)
		OR D2,(A0)+
		AND D5,(A2)
		OR D0,(A2)+
		AND D5,(A2)
		OR D1,(A2)+
		AND D5,(A2)
		OR D2,(A2)+
		DBF D4,chn_lp
		DBF D6,spr1_lp
		LEA 12*32(A0),A0
moveup	LEA tile2(PC),A3
		MOVEM.L (A3),D0-D3
		MOVEM.L D0-D3,-(SP)
		MOVEQ #30,D5
moveuplp	MOVEM.L 16(A3),D0-D3
		MOVEM.L D0-D3,(A3)
		LEA 16(A3),A3
		DBF D5,moveuplp
		MOVEM.L (SP)+,D0-D3
		MOVEM.L D0-D3,(A3)
		DBF D7,tile_lp
		RTS

* The place where the tile data
* is used for the scroll jump vector
* table after tiles are shifted.

LINE_JMPS
tile1		dc.l	$00000000,$00000000,$00000000,$00000000,$000007FF 
		dc.l	$00000000,$0000FFC0,$00000000,$0C000FFF,$00000000 
		dc.l	$0060FF80,$00000000,$1E001FFF,$00000000,$00F0FF00 
		dc.l	$00000000,$3FFF3FFF,$00000000,$FFF8FF00,$00000000 
		dc.l	$7E007F00,$00FF0000,$01FC0180,$FE000000,$FCFFFFFF 
		dc.l	$00000000,$FEFEFEC0,$01000000,$79F37FFF,$80000000 
		dc.l	$CF7EFF60,$00800000,$33F33FF7,$C0080000,$CFBEDFB0 
		dc.l	$20400000,$17FF1FFF,$E0000000,$FFDEFFD0,$00200000 
		dc.l	$17001F7F,$E0800000,$0FDEFFD0,$00200000,$147F1F7F 
		dc.l	$E0800000,$E71EFFD0,$00200000,$14601D70,$E28F0000 
		dc.l	$3B1E3F50,$C0A00000,$176F1F7F,$E0800000,$DBDEDFD0 
		dc.l	$20200000,$176F1F7F,$E0800000,$DBDEDFD0,$20200000 
		dc.l	$17601F7F,$E0800000,$3BDEFFD0,$00200000,$177F1F7F 
		dc.l	$E0800000,$E7DEFFD0,$00200000,$177F1F7F,$E0800000 
		dc.l	$8FDEFFD0,$00200000,$17601F70,$E08F0000,$DFDEFFD0 
		dc.l	$00200000,$146F1F7F,$E0800000,$6F1E7FD0,$80200000 
		dc.l	$146F1D7F,$E2800000,$B71EBF50,$40A00000,$176F1F7F 
		dc.l	$E0800000,$DBDEDFD0,$20200000,$170F1F0F,$E0F00000 
		dc.l	$E1DEE1D0,$1E200000,$17FF1FFF,$E0000000,$FFDEFFD0 
		dc.l	$00200000,$13F31FFF,$E0000000,$CFBEFFB0,$00400000 
		dc.l	$39F33FF7,$C0080000,$CF66DF78,$20800000,$0CFF0FFF 
		dc.l	$F0000000,$FEC2FEFC,$01000000,$060007FF,$78000000 
		dc.l	$0180FFFC,$00000000,$03FF03FF,$3C000000,$FF00FFF8 
		dc.l	$00000000,$02000200,$1DFF0000,$000000F0,$FF000000 
		dc.l	$00000000,$0FFF0000,$00000060,$FF800000,$00000000 
		dc.l	$07FF0000,$00000000,$FFC00000 
tile2		dc.l	$1D8C03F0,$1FFC0000,$00000000,$00000000,$6DCC03F0 
		dc.l	$67F80000,$00000000,$00000000,$8CD803E0,$8FF80000 
		dc.l	$00010000,$00010000,$0E1801E0,$03F00000,$00060000 
		dc.l	$00060000,$05FC0400,$04D80000,$00180000,$00180000 
		dc.l	$038F0400,$078F0000,$F0600000,$00600000,$060D0000 
		dc.l	$06040000,$5F800000,$03800000,$0C1A0000,$0C0A0000 
		dc.l	$AB000000,$81000000,$18150000,$18150000,$55000000 
		dc.l	$50000000,$70280002,$700A0000,$0B00A000,$A8000000 
		dc.l	$90300005,$90150000,$05035000,$54010000,$D022000A 
		dc.l	$D00A0000,$830FA800,$A8070000,$78328004,$F0170000 
		dc.l	$410C5403,$540F0000,$3827C00A,$F00F0000,$23182807 
		dc.l	$A80F0000,$3833C005,$F8170000,$41185407,$541F0000 
		dc.l	$1818E002,$F80A0000,$A21BA807,$AA1F0000,$9814E001 
		dc.l	$F0050000,$061B5007,$540F0000,$B00EC000,$F0020000 
		dc.l	$0C19A007,$A81F0000,$3003C000,$E0000000,$F0140003 
		dc.l	$00170000,$D0000000,$90000000,$E0320001,$E0330000 
		dc.l	$70000000,$70000000,$407E0000,$407C0000,$30000000 
		dc.l	$10000000,$61F00000,$01C00000,$10000000,$10000000 
		dc.l	$27000100,$23000000,$18000000,$08000000,$3E000000 
		dc.l	$0E000000,$08000000,$08000000,$38000800,$18000000 
		dc.l	$0C000000,$04000000,$7C000000,$70000000,$07070000 
		dc.l	$07010000,$C2004000,$C2000000,$04FF0000,$04DF0000 
		dc.l	$81000000,$01000000,$07F30000,$03F20000,$00E00000 
		dc.l	$00000000,$063B01C0,$07FA0000,$003C0000,$00000000 
		dc.l	$8C1A03E0,$87FA0000,$00070000,$00010000,$7C1E03E0 
		dc.l	$7FFE0000,$00000000,$00000000 
		ds.l 9

parawave	INCBIN PARALLAX.INC\PARAWAVE.DAT
para_end
font32	INCBIN PARALLAX.INC\PARAFONT.DAT
music		INCBIN PARALLAX.INC\PARAMUS.CZI
musbytes	DS.B 20
		SECTION BSS
recorded	DS.B 6144*11
		EVEN
old_mfp	DS.L 3
		DS.L 129
my_stack	DS.W 1
tiles		DS.L 256*32
screens	DS.B 256
		DS.B 58880
		DS.B 58880
		DS.B 58880
		DS.B 58880
		
