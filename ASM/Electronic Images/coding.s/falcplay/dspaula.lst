Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 1



1                        ; DSP N channel Player 56001 source. (very fast)
2                        ; By Martin GRIFFiths, July 1994
3      
4                        no_channels
5         000008                   equ     8
6      
7         00FFFF         IPR       EQU     $FFFF
8         00FFFE         BCR       EQU     $FFFE
9         00FFE0         PBC       EQU     $FFE0
10        00FFE1         PCC       EQU     $FFE1
11        00FFE3         PCDDR     EQU     $FFE3                             ; P
ort C data direction
12        00FFE5         PCD       EQU     $FFE5                             ; P
ort C data register
13        00FFEF         RX        EQU     $FFEF
14        00FFEF         TX        EQU     $FFEF
15        00FFEC         CRA       EQU     $FFEC
16        00FFED         CRB       EQU     $FFED
17        00FFE8         HCR       EQU     $FFE8                             ; h
ost command register
18        00FFE9         HSR       EQU     $FFE9                             ; h
ost status register
19        00FFEB         HRX       EQU     $FFEB
20        00FFEB         HTX       EQU     $FFEB
21     
22                       ; Voice Structure.
23     
24                       stereo_offset
25        000000                   equ     0
26        000001         frequency equ     1                                 ; f
requency fraction for voice. (24bit fraction)
27                       curr_fraction
28        000002                   equ     2                                 ; c
urrent fraction part.
29                       last_sample
30        000003                   equ     3                                 ;
31                                                                           ;
32     
33     
34        001FC0         cbufsize  EQU     $1FC0
35        0007F0         bufsize   EQU     $800-16
36     
37                       ; Sample buffer X: memory address for each voice.
38     
39        X:1000                   org     x:$1000
40        X:1000         chn1buf   ds      bufsize
41        X:17F0         chn2buf   ds      bufsize
42        X:1FE0         chn3buf   ds      bufsize
43        X:27D0         chn4buf   ds      bufsize
44        X:2FC0         chn5buf   ds      bufsize
45        X:37B0         chn6buf   ds      bufsize
46        X:3FA0         chn7buf   ds      bufsize
47        X:4790         chn8buf   ds      bufsize
48        X:4F80         vc1_data  ds      4
49        X:4F84         vc2_data  ds      4
50        X:4F88         vc3_data  ds      4
51        X:4F8C         vc4_data  ds      4
52        X:4F90         vc5_data  ds      4
53        X:4F94         vc6_data  ds      4
54        X:4F98         vc7_data  ds      4
55        X:4F9C         vc8_data  ds      4
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 2



56        X:4FA0         freq_const ds     1
57     
58     
59                       ; Circular buffer for dac output in Y: memory.
60     
61        Y:2000                   org     y:$2000
62        Y:2000         circbuf   ds      cbufsize
63     
64        P:0000                   org     p:$0
65        P:0000 0AF080            jmp     start                             ; -
> start
                 000040
66     
67                       ; DAC xmit FAST interrupt.
68     
69        P:0010                   org     p:$10                             ; s
si transmit data
70                       xmit_int
71        P:0010 08DFEF            movep             y:(r7)+,x:RX            ; o
utput sample word
72     
73                       ; Music routine, host command 2.
74     
75        P:0026                   org     p:$26
76        P:0026 0BF080            jsr     musicplayer_int                   ; h
ost command 2
                 00006E
77     
78        P:0040                   org     p:$40
79        P:0040 08F4BE  start     movep             #0,x:BCR
                 000000
80        P:0042 08F4A0            movep             #1,x:PBC
                 000001
81        P:0044 0AF080            jmp     setup_player
                 0000E5
82     
83                       ; Add a voice to the buffer (NO interpolation)
84                       ; r0 -> sample buffer to apply volume and frequency shi
ft too.
85                       ; r1 -> voice structure for this voice
86                       ; n2 -> no. of sample words to do.
87                       ; r6 -> fill place
88     
89                       add_voice_ni
90        P:0046 200013            clr     a
91        P:0047 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
92        P:0048 51D932            asl     a         x:(r1)+,b0              ;
93        P:0049 220D00            move              r0,b1
94        P:004A 210400            move              a0,x0
95        P:004B 218500            move              a1,x1
96        P:004C 06DA00            do      n2,end_lni
                 000055
97        P:004E 4FE628            add     x,b                   y:(r6),y1
98        P:004F 212E00            move              b0,a
99        P:0050 200003            tst     a
100       P:0051 0AF0AB            jmi     yo
                 000054
101       P:0053 56E000            move              x:(r0),a
102       P:0054 21B070  yo        add     y1,a      b1,r0
103    
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 3



104       P:0055 5E4E00            move                          a,y:(r6)+n6
105    
106                      end_lni
107       P:0056 56E000            move              x:(r0),a
108       P:0057 565100            move              a,x:(r1)-               ; s
tore "last sample"
109       P:0058 516100            move              b0,x:(r1)               ; s
tore current fraction
110       P:0059 00000C            rts
111    
112                      ; Add a voice to the buffer (interpolate)
113                      ; r0 -> sample buffer to apply volume and frequency shi
ft too.
114                      ; r1 -> voice structure for this voice
115                      ; n2 -> no. of sample words to do.
116                      ; r6 -> fill place
117    
118                      add_voice_int
119       P:005A 200013            clr     a
120       P:005B 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
121       P:005C 51D932            asl     a         x:(r1)+,b0              ; c
urrent fraction
122       P:005D 220D00            move              r0,b1
123       P:005E 210400            move              a0,x0
124       P:005F 218500            move              a1,x1
125       P:0060 200013            clr     a
126       P:0061 06DA00            do      n2,end_li
                 000069
127       P:0063 212C28            add     x,b       b0,a1
128       P:0064 47E023            lsr     a         x:(r0),y1
129       P:0065 189800            move              x:(r0)+,a   a,y0
130       P:0066 47E0B6            mac     -y0,y1,a  x:(r0),y1
131       P:0067 4FE6B3            macr    y0,y1,a               y:(r6),y1
132       P:0068 21B070            add     y1,a      b1,r0
133       P:0069 5E4E13            clr     a                     a,y:(r6)+n6
134                      end_li
135       P:006A 44E000            move              x:(r0),x0
136       P:006B 445100            move              x0,x:(r1)-
137       P:006C 516100            move              b0,x:(r1)               ; s
tore current fraction
138       P:006D 00000C            rts
139    
140                      ; The music player interrupt
141    
142                      musicplayer_int
143       P:006E 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
144       P:006F 0AA823            bset    #3,x:HCR
145       P:0070 0AA824            bset    #4,x:HCR
146    
147       P:0071 0AA980  waitcpu   jclr    #0,x:HSR,waitcpu                  ; w
ait for cpu...
                 000071
148       P:0073 084E2B            movep             x:HRX,a                 ; f
etch mix routine
149       P:0074 62F400            move              #>add_voice_ni,r2       ; r
2 -> non-interpolated add voice
                 000046
150       P:0076 63F400            move              #>add_voice_int,r3      ; r
3 -> interpolated add voice
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 4



                 00005A
151       P:0078 200003            tst     a                                 ; 0
  = no interpolation
152       P:0079 032362            tne     x1,a      r3,r2                   ; >
0 = interpolation
153       P:007A 0AA980  wait8fl   jclr    #0,x:HSR,wait8fl                  ; w
ait for 8 voice flag
                 00007A
154       P:007C 084C2B            movep             x:HRX,a1                ; f
etch flag
155       P:007D 219900            move              a1,n1
156       P:007E 22EF00  waite     move              r7,b                    ; c
urrent pos in circular buffer
157       P:007F 0ACD20            jset    #0,b1,waite                       ;
                 00007E
158       P:0081 22C400            move              r6,x0                   ; l
ast position in buffer
159       P:0082 20004C            sub     x0,b                              ; d
ifference
160       P:0083 0AF0A3            jpl     ok
                 000088
161       P:0085 44F400            move              #cbufsize,x0
                 001FC0
162       P:0087 200048            add     x0,b
163       P:0088 22D52A  ok        asr     b         r6,r5                   ; /
2 , R4=r6 (-> fill start)
164       P:0089 21BA00            move              b1,n2                   ; s
tore no of samples to do.
165       P:008A 22B613  clrbuf    clr     a         r5,r6
166       P:008B 76F400            move              #>2,n6                  ; i
nterleaved stereo voices
                 000002
167       P:008D 06DA00            do      n2,end_clearlp
                 000090
168       P:008F 5E5E00            move                          a,y:(r6)+
169       P:0090 5E5E00            move                          a,y:(r6)+
170                      end_clearlp
171    
172                      ; Fetch channels
173    
174       P:0091 64F400            move              #>chn1buf,r4            ;
                 001000
175       P:0093 74F400            move              #>bufsize,n4
                 0007F0
176       P:0095 63F400            move              #>vc1_data,r3           ;
                 004F80
177       P:0097 73F400            move              #>4,n3
                 000004
178    
179       P:0099 06D900            do      n1,getchnlp
                 0000CE
180       P:009B 227100            move              r3,r1
181       P:009C 000000            nop
182       P:009D 44D900            move              x:(r1)+,x0              ; s
kip stereo offset
183       P:009E 0AA980  getchn    jclr    #0,x:HSR,getchn                   ; w
ait...
                 00009E
184       P:00A0 08472B            movep             x:HRX,y1                ; r
eceive volume
185       P:00A1 0AA980  wait0     jclr    #0,x:HSR,wait0                    ; w
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 5



ait...
                 0000A1
186       P:00A3 08452B            movep             x:HRX,x1                ; r
eceive period value (fraction)
187       P:00A4 20AF13            clr     a         x1,b
188       P:00A5 20000B            tst     b
189       P:00A6 0AF0AA            jeq     zeroper
                 0000AD
190       P:00A8 40F000            move              l:freq_const,a10
                 004FA0
191       P:00AA 0618A0            rep     #24
192       P:00AB 018060            div     x1,a
193       P:00AC 200060            add     x1,a
194       P:00AD 210500  zeroper   move              a0,x1
195    
196       P:00AE 45591B            clr     b         x1,x:(r1)+              ; s
tore.
197       P:00AF 51D900            move              x:(r1)+,b0              ; c
urrent fraction
198       P:00B0 234600            move              n2,y0                   ; n
o. of samples to do = curr fracrtion +
199       P:00B1 2000EA            mac     x1,y0,b                           ; f
requency fraction * no. of samples to do.
200       P:00B2 0AA980  wait3     jclr    #0,X:HSR,wait3                    ; -
 wait...
                 0000B2
201       P:00B4 08442B            movep             x:HRX,x0                ;
202       P:00B5 0AA981  wait2     jclr    #1,x:HSR,wait2                    ; w
ait..
                 0000B5
203       P:00B7 08CD2B            movep             b1,x:HRX                ; s
end frequency fraction * no. of samples to do.
204       P:00B8 56F400            move              #>1,a
                 000001
205       P:00BA 46F418            add     a,b       #$8000,y0               ;
                 008000
206       P:00BC 21B813            clr     a         b1,n0
207       P:00BD 55D900            move              x:(r1)+,b1              ;  
"last sample"
208       P:00BE 229000            move              r4,r0
209       P:00BF 06D800            do      n0,end_gc
                 0000C8
210       P:00C1 0AA980  wait4     jclr    #0,X:HSR,wait4                    ; -
 wait...
                 0000C1
211       P:00C3 084C2B            movep             x:HRX,a1                ;
212       P:00C4 555843            eor     x0,a      b1,x:(r0)+
213       P:00C5 218500            move              a1,x1
214       P:00C6 2000E0            mpy     y0,x1,a
215       P:00C7 210513            clr     a         a0,x1
216       P:00C8 2000F9            mpyr    y1,x1,b
217       P:00C9 555800  end_gc    move              b1,x:(r0)+
218       P:00CA 555800            move              b1,x:(r0)+
219       P:00CB 555800            move              b1,x:(r0)+
220    
221                                                                          ;mo
ve   r3,r1
222                                                                          ;mo
ve   r5,a
223                                                                          ;mo
ve   x:(r1)+,y0              ;
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 6



224                                                                          ;ad
d    y0,a    r4,r0           ; r0-> channel buffer
225                                                                          ;mo
ve   a1,r6
226                                                                          ;js
r    (r2)                    ; add voice 1
227    
228       P:00CC 044B13            lua     (r3)+n3,r3
229       P:00CD 044C14            lua     (r4)+n4,r4
230       P:00CE 000000            nop
231                      getchnlp
232    
233       P:00CF 63F400            move              #>chn1buf,r3            ;
                 001000
234       P:00D1 73F400            move              #>bufsize,n3
                 0007F0
235       P:00D3 64F400            move              #>vc1_data,r4
                 004F80
236       P:00D5 74F400            move              #>4,n4
                 000004
237       P:00D7 06D900            do      n1,mixchnlp
                 0000E1
238       P:00D9 229100            move              r4,r1
239       P:00DA 22AE00            move              r5,a
240       P:00DB 46D900            move              x:(r1)+,y0              ;
241       P:00DC 227050            add     y0,a      r3,r0                   ; r
0-> channel buffer
242       P:00DD 219600            move              a1,r6
243       P:00DE 0BE280            jsr     (r2)                              ; a
dd voice 1
244       P:00DF 044B13            lua     (r3)+n3,r3
245       P:00E0 044C14            lua     (r4)+n4,r4
246       P:00E1 000000            nop
247                      mixchnlp
248    
249       P:00E2 0AA803            bclr    #3,x:HCR
250       P:00E3 0AA804            bclr    #4,x:HCR
251       P:00E4 000004            rti
252    
253                      setup_player
254       P:00E5 65F400            move              #>vc1_data,r5           ; v
oice
                 004F80
255       P:00E7 57F413            clr     a         #>1,b                   ; s
et all
                 000001
256       P:00E9 060280            do      #(no_channels/4),initvces
                 0000FA
257       P:00EB 565D00            move              a,x:(r5)+
258       P:00EC 565D00            move              a,x:(r5)+
259       P:00ED 565D00            move              a,x:(r5)+
260       P:00EE 565D00            move              a,x:(r5)+
261    
262       P:00EF 575D00            move              b,x:(r5)+
263       P:00F0 565D00            move              a,x:(r5)+
264       P:00F1 565D00            move              a,x:(r5)+
265       P:00F2 565D00            move              a,x:(r5)+
266    
267       P:00F3 575D00            move              b,x:(r5)+
268       P:00F4 565D00            move              a,x:(r5)+
269       P:00F5 565D00            move              a,x:(r5)+
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 7



270       P:00F6 565D00            move              a,x:(r5)+
271    
272       P:00F7 565D00            move              a,x:(r5)+
273       P:00F8 565D00            move              a,x:(r5)+
274       P:00F9 565D00            move              a,x:(r5)+
275       P:00FA 565D00            move              a,x:(r5)+
276                      initvces
277       P:00FB 70F400            move              #cbufsize,n0            ; s
etup the dac output
                 001FC0
278       P:00FD 66F400            move              #circbuf,r6             ; c
ircular buffer pointers
                 002000
279       P:00FF 05F426            movec             #cbufsize-1,m6          ; a
nd modulos..
                 001FBF
280       P:0101 22D700            move              r6,r7                   ;
281       P:0102 0467A6            movec             m6,m7                   ;
282       P:0103 06D820            rep     n0                                ; a
nd clear the buffer
283       P:0104 5E5E00            move                          a,y:(r6)+   ;
284       P:0105 45F400            move              #>0,x1
                 000000
285       P:0107 0AA980  get_fc    jclr    #0,x:HSR,get_fc                   ;
                 000107
286       P:0109 08442B            movep             x:HRX,x0                ; g
et frequency
287       P:010A 0AA980  get_bs    jclr    #0,x:HSR,get_bs                   ;
                 00010A
288       P:010C 084E2B            movep             x:HRX,a                 ; g
et frequency base rate
289       P:010D 0BF080            jsr     div48
                 00012B
290       P:010F 487000            move              a,l:freq_const
                 004FA0
291       P:0111 0AA822            bset    #2,x:HCR                          ; e
nable host commands
292       P:0112 08F4BF            movep             #$0c00,x:IPR            ; S
et the IPR for HOST COMMANDS
                 000C00
293    
294                      ; Setup DAC output.
295       P:0114 08F4BF            movep             #$3c00,x:IPR            ; S
et the IPR for ssi interrupts, and ENABLE HOST COMMANDS HPL0,HPL1
                 003C00
296       P:0116 08F4AC            movep             #$4100,x:CRA            ; s
et wordlength to 16bits and 2 words per "frame".
                 004100
297       P:0118 08F4AD            movep             #$5800,x:CRB            ; t
ransmit int enable | transmitter enable | enable network mode(word request)
                 005800
298       P:011A 08F4A1            movep             #$1f8,x:PCC             ; t
urn on SSI port(Port C control reg)
                 0001F8
299       P:011C 08F4A3            movep             #0,x:PCDDR              ;
                 000000
300       P:011E 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
301       P:011F 000000            nop
302       P:0120 57F400            move              #$475249,b
                 475249
Motorola DSP56000 Assembler  Version 4.1.1   95-03-28  22:40:28  dspaula.a56
  Page 8



303       P:0122 0AA981  sendgo1   jclr    #1,x:HSR,sendgo1                  ;
                 000122
304       P:0124 08CD2B            movep             b1,x:HRX                ;
305       P:0125 57F400            move              #$464621,b
                 464621
306       P:0127 0AA981  sendgo2   jclr    #1,x:HSR,sendgo2                  ;
                 000127
307       P:0129 08CD2B            movep             b1,x:HRX                ;
308       P:012A 0C012A  forever   jmp     forever
309    
310                      ; 48bit divide routine
311                      ; a = a / x
312    
313       P:012B 21871B  div48     clr     b         a1,y1
314       P:012C 210600            move              a0,y0
315       P:012D 21A730            add     y,a       b1,y1                   ; a
*2
316       P:012E 212600            move              b0,y0
317       P:012F 063080            do      #48,idiv_lp
                 000137
318       P:0131 210639            adc     y,b       a0,y0                   ; b
*2
319       P:0132 21872C            sub     x,b       a1,y1
320       P:0133 0AF0A0            jcc     okya
                 000136
321       P:0135 200028            add     x,b
322       P:0136 21A731  okya      adc     y,a       b1,y1
323       P:0137 212600            move              b0,y0
324                      idiv_lp
325       P:0138 210F00            move              a0,b
326       P:0139 20001F            not     b
327       P:013A 200017            not     a
328       P:013B 21A800            move              b1,a0
329       P:013C 00000C            rts
330    
331                                end

0    Errors
0    Warnings
