              ;----------------------------------------------------------------------
              ;----------------------------------------------------------------------
              ; DSP MOD Player.
              ; 56001 source. (interpolated  with  left/right stereo weighting)
              ; Martin Griffiths, June-August 1993
              ;----------------------------------------------------------------------
              ;----------------------------------------------------------------------

00FFFF        IPR             EQU     $FFFF
00FFFE        BCR             EQU     $FFFE
00FFE0        MYPBC           EQU     $FFE0
00FFE1        PCC             EQU     $FFE1
00FFE3        PCDDR           EQU     $FFE3           ; Port C data direction
00FFE5        PCD             EQU     $FFE5           ; Port C data register
00FFEF        RX              EQU     $FFEF
00FFEF        TX              EQU     $FFEF
00FFEC        CRA             EQU     $FFEC
00FFED        CRB             EQU     $FFED
00FFE9        HSR             EQU     $FFE9
00FFEB        HRX             EQU     $FFEB

              ; Voice Structure.

000000        left_vol        equ 0   ; left volume multiplier.
000001        right_vol       equ 1   ; right volume multiplier.
000002        voice_vol       equ 2   ; volume.
000003        frequency       equ 3   ; frequency fraction for voice. (24bit fraction) 
000004        curr_fraction   equ 4   ; current fraction part. 
000005        add_offset      equ 5   ; no. of samples stepped through(i.e no of samples*frequency fraction)
000006        last_sample     equ 6   ; (for accuracy between sucessive frames)

000000        vc1_data        equ 0
000007        vc2_data        equ 7
00000E        vc3_data        equ 14
000015        vc4_data        equ 21

              ; Sample buffer x: memory address for each voice.

000400        bufsize         EQU 1024
000100        chn1buf         EQU $100+(0*bufsize)
000500        chn2buf         EQU $100+(1*bufsize)
000900        chn3buf         EQU $100+(2*bufsize)
000D00        chn4buf         EQU $100+(3*bufsize)

              ; Circular buffer for dac output in y: memory.

000000        circbuf         EQU $0
001400        cbufsize        EQU $1400

P:0000                org     p:$0
P:0000 0AF080         jmp     start                   ; -> start
P:0001 000040

              ; DSP DAC xmit interrupt.

P:0010                org     p:$10                   ; ssi transmit data
P:0010        xmit_int
P:0010 000000         nop
P:0011 08DFEF         movep   y:(r7)+,x:RX            ; output 

              ; Voice Structure.
              ; 1  left volume multiplier.
              ; 2  right volume multiplier.
              ; 3  volume.
              ; 4  frequency fraction for voice. (24bit fraction) 
              ; 5  no. of samples stepped through(i.e no of samples*frequency fraction)
              ; 6  current fraction part. (for accurracy between sucessive frames)


P:0040                org     p:$40
P:0040 08F4BE start   movep   #0,x:BCR
P:0041 000000
P:0042 08F4A0         movep   #1,x:MYPBC
P:0043 000001
P:0044 200013         clr     a
P:0045 66F400         move    #>vc1_data,r6
P:0046 000000
P:0047 061CA0         rep     #7*4
P:0048 565E00         move    a,x:(r6)+

P:0049 66F400         move    #circbuf,r6
P:004A 000000
P:004B 05F426         movec   #cbufsize-1,m6
P:004C 0013FF
P:004D 22D700         move    r6,r7
P:004E 0467A6         movec   m6,m7
P:004F 70F400         move    #cbufsize,n0
P:0050 001400
P:0051 000000         nop
P:0052 06D820         rep     n0
P:0053 5E5E00         move    a,y:(r6)+

              ; Setup SSI for DAC output.     
              ; First set the IPR for ssi interrupts
P:0054 08F4BF         movep   #$3000,x:IPR            
P:0055 003000
              ; set wordlength to 16bits and 2 words per "frame".
P:0056 08F4AC         movep   #$4100,x:CRA            
P:0057 004100
              ; transmit int enable | transmitter enable | enable network mode(word request)
P:0058 08F4AD         movep   #$5800,x:CRB            
P:0059 005800
              ; Port C control register
P:005A 08F4A1         movep   #$1f8,x:PCC             ; turn on SSI port
P:005B 0001F8
P:005C 08F4A3         movep   #0,x:PCDDR              ; sc0 output
P:005D 000000
P:005E 00FCB8         andi    #$fc,mr                 ; unmask interrupts
P:005F 000000         nop


P:0060 0AA980 loop    jclr    #0,x:HSR,loop           ; wait for cpu...
P:0061 000060
P:0062 08452B         movep   x:HRX,x1                ; fetch dummy.

P:0063 22ED00 waite   move    r7,b1                   ; current pos in circular buffer
P:0064 0ACD20         jset    #0,b1,waite
P:0065 000063

P:0066 22C400         move    r6,x0                   ; last position in buffer 
P:0067 20004C         sub     x0,b                    ; difference 
P:0068 0AF0A3         jpl     ok
P:0069 00006D
P:006A 44F400         move    #cbufsize,x0
P:006B 001400
P:006C 200048         add     x0,b
P:006D 20002A ok      asr     b
P:006E 21FA00         move    b,n2                    ; store no of samples to do.
P:006F 22D500         move    r6,r5                   ; r5=r6 (-> fill start)
P:0070 60F400         move    #chn1buf,r0             ;
P:0071 000100
P:0072 61F400         move    #>vc1_data+2,r1                 ;
P:0073 000002
P:0074 0BF080         jsr     getchannel              ; get channel 1
P:0075 000111
P:0076 60F400         move    #chn2buf,r0             ;
P:0077 000500
P:0078 61F400         move    #>vc2_data+2,r1                 ;
P:0079 000009
P:007A 0BF080         jsr     getchannel              ; get channel 2
P:007B 000111
P:007C 60F400         move    #chn3buf,r0             ;
P:007D 000900
P:007E 61F400         move    #>vc3_data+2,r1         ;
P:007F 000010
P:0080 0BF080         jsr     getchannel              ; get channel 3
P:0081 000111
P:0082 60F400         move    #chn4buf,r0             ;
P:0083 000D00
P:0084 61F400         move    #>vc4_data+2,r1         ;
P:0085 000017
P:0086 0BF080         jsr     getchannel              ; get channel 4
P:0087 000111

P:0088 46F400         move    #>$7fffff,y0            ; 0.99998
P:0089 7FFFFF
P:008A 47F400         move    #>0,y1                  ; 0
P:008B 000000

P:008C 44F000         move    x:vc1_data+voice_vol,x0 ; channel 1
P:008D 000002
P:008E 2000D0         mpy     y0,x0,a                 
P:008F 567000         move    a,x:vc1_data+left_vol   ; left multiplier 
P:0090 000000
P:0091 2000C0         mpy     x0,y1,a
P:0092 567000         move    a,x:vc1_data+right_vol  ; right multiplier
P:0093 000001

P:0094 44F000         move    x:vc2_data+voice_vol,x0 ; channel 2
P:0095 000009
P:0096 2000D0         mpy     y0,x0,a                 ; etc
P:0097 567000         move    a,x:vc2_data+right_vol
P:0098 000008
P:0099 2000C0         mpy     x0,y1,a
P:009A 567000         move    a,x:vc2_data+left_vol
P:009B 000007

P:009C 44F000         move    x:vc3_data+voice_vol,x0 ; channel 3
P:009D 000010
P:009E 2000D0         mpy     y0,x0,a
P:009F 567000         move    a,x:vc3_data+right_vol
P:00A0 00000F
P:00A1 2000C0         mpy     x0,y1,a
P:00A2 567000         move    a,x:vc3_data+left_vol
P:00A3 00000E

P:00A4 44F000         move    x:vc4_data+voice_vol,x0 ; channel 4
P:00A5 000017
P:00A6 2000D0         mpy     y0,x0,a
P:00A7 567000         move    a,x:vc4_data+left_vol
P:00A8 000015
P:00A9 2000C0         mpy     x0,y1,a
P:00AA 567000         move    a,x:vc4_data+right_vol
P:00AB 000016

P:00AC 200013 clrbuf  clr     a
P:00AD 22B600         move    r5,r6
P:00AE 06DA00         do      n2,end_clearlp
P:00AF 0000B1
P:00B0 5E5E00         move    a,y:(r6)+
P:00B1 5E5E00         move    a,y:(r6)+
P:00B2        end_clearlp
P:00B2 60F400         move    #chn1buf,r0
P:00B3 000100
P:00B4 61F400         move    #>vc1_data,r1
P:00B5 000000
P:00B6 0BF080         jsr     add_voice
P:00B7 0000CC
P:00B8 60F400         move    #chn2buf,r0
P:00B9 000500
P:00BA 61F400         move    #>vc2_data,r1
P:00BB 000007
P:00BC 0BF080         jsr     add_voice
P:00BD 0000CC
P:00BE 60F400         move    #chn3buf,r0
P:00BF 000900
P:00C0 61F400         move    #>vc3_data,r1
P:00C1 00000E
P:00C2 0BF080         jsr     add_voice
P:00C3 0000CC
P:00C4 60F400         move    #chn4buf,r0
P:00C5 000D00
P:00C6 61F400         move    #>vc4_data,r1
P:00C7 000015
P:00C8 0BF080         jsr     add_voice
P:00C9 0000CC

              ;wait9  jclr    #1,x:HSR,wait9          ; used for
              ;       movep   b,x:HRX                 ; timing the dsp!

P:00CA 0AF080         jmp     loop                    ; next frame
P:00CB 000060

              ; Add a voice to the buffer
              ; r0 -> sample buffer to apply volume and frequency shift too.
              ; r1 -> voice structure for this voice
              ; n2 -> no. of sample words to do.

P:00CC        add_voice
P:00CC 221400         move    r0,r4
P:00CD 71F400         move    #curr_fraction,n1
P:00CE 000004
P:00CF 000000         nop
P:00D0 044912         lua     (r1)+n1,r2
P:00D1 71F400         move    #frequency,n1
P:00D2 000003
P:00D3 000000         nop
P:00D4 044913         lua     (r1)+n1,r3
P:00D5 57E200         move    x:(r2),b        ; current fraction
P:00D6 44E300         move    x:(r3),x0       ; frequency

P:00D7 71F400         move    #left_vol,n1
P:00D8 000000
P:00D9 000000         nop
P:00DA 044912         lua     (r1)+n1,r2
P:00DB 71F400         move    #right_vol,n1
P:00DC 000001
P:00DD 000000         nop
P:00DE 044913         lua     (r1)+n1,r3

P:00DF 22B600         move    r5,r6
P:00E0 06DA00         do      n2,end_l2
P:00E1 000102
P:00E2 200048         add     x0,b
P:00E3 0AF0A5         jec     wrt_l2
P:00E4 0000E7
P:00E5 0ACD57         bclr    #$17,b1
P:00E6 45D800         move    x:(r0)+,x1      ; increment r0
P:00E7        wrt_l2  
P:00E7 45D800         move    x:(r0)+,x1
P:00E8 47D000         move    x:(r0)-,y1
P:00E9 46E200         move    x:(r2),y0
P:00EA 2000E0         mpy     x1,y0,a 
P:00EB 21C500         move    a,x1
P:00EC 2000B0         mpy     y1,y0,a
P:00ED 21E664         sub     x1,a    b,y0    ; difference;
P:00EE 21C700         move    a,y1
P:00EF 2000B0         mpy     y1,y0,a         ; fraction * difference
P:00F0 200060         add     x1,a            ; add to first sample.
P:00F1 21C500         move    a,x1            ; interpolated sample in x1.
P:00F2 5EE600         move    y:(r6),a
P:00F3 200060         add     x1,a
P:00F4 5E5E00         move    a,y:(r6)+

P:00F5 45D800         move    x:(r0)+,x1
P:00F6 47D000         move    x:(r0)-,y1
P:00F7 46E300         move    x:(r3),y0
P:00F8 2000E0         mpy     x1,y0,a 
P:00F9 21C500         move    a,x1
P:00FA 2000B0         mpy     y1,y0,a
P:00FB 21E664         sub     x1,a    b,y0    ; difference;
P:00FC 21C700         move    a,y1
P:00FD 2000B0         mpy     y1,y0,a         ; fraction * difference
P:00FE 200060         add     x1,a            ; add to first sample.
P:00FF 21C500         move    a,x1            ; interpolated sample in x1.
P:0100 5EE600         move    y:(r6),a
P:0101 200060         add     x1,a
P:0102 5E5E00         move    a,y:(r6)+

P:0103        end_l2
P:0103 71F400         move    #curr_fraction,n1
P:0104 000004
P:0105 000000         nop
P:0106 044912         lua     (r1)+n1,r2
P:0107 71F400         move    #add_offset,n1
P:0108 000005
P:0109 000000         nop
P:010A 044913         lua     (r1)+n1,r3

P:010B 576200         move    b,x:(r2)
P:010C 220F00         move    r0,b
P:010D 228400         move    r4,x0
P:010E 20004C         sub     x0,b
P:010F 576300         move    b,x:(r3)
P:0110 00000C         rts

              ; Fetch a channel.
              ; including volume,frequency data.

P:0111        getchannel
P:0111 0AA980         jclr    #0,x:HSR,getchannel     ; wait...
P:0112 000111
P:0113 0859AB         movep   x:HRX,x:(r1)+           ; receive volume
P:0114 0AA980 wait0   jclr    #0,x:HSR,wait0          ; wait...
P:0115 000114
P:0116 08452B         movep   x:HRX,x1                ; receive frequency (fraction) 
P:0117 455900         move    x1,x:(r1)+              ; store.
P:0118 20001B         clr     b
P:0119 51D900         move    x:(r1)+,b0
P:011A 234400         move    n2,x0                   ; no. of samples to do.
P:011B 2000AA         mac     x1,x0,b                 ; frequency fraction * no. of samples to do.
P:011C 0AA981 wait1   jclr    #1,x:HSR,wait1          ; wait...
P:011D 00011C
P:011E 08D9AB         movep   x:(r1)+,x:HRX           ; send "offset to add"(from last time)
P:011F 0AA981 wait2   jclr    #1,x:HSR,wait2          ; wait..
P:0120 00011F
P:0121 08CF2B         movep   b,x:HRX                 ; send frequency fraction * no. of samples to do. 
P:0122 0AA980 wait3   jclr    #0,x:HSR,wait3          ; wait...
P:0123 000122
P:0124 08442B         movep   x:HRX,x0                ; receive "no. of samples to get".
P:0125 46F400         move    #>$8000,y0      ; $ff0000 mask for sample
P:0126 008000
P:0127 50E100         move    x:(r1),a0
P:0128 06C400         do      x0,end_gc               ; - for x no. of samples
P:0129 00012D
P:012A 0AA980 wait4   jclr    #0,X:HSR,wait4          ; - wait...
P:012B 00012A
P:012C 08452B         movep   x:HRX,x1                ; - receive 3 samples
P:012D 5058E0         mpy     y0,x1,a         a0,x:(r0)+            ; store sample.
P:012E        end_gc
P:012E 505800         move    a0,x:(r0)+
P:012F 506100         move    a0,x:(r1)
P:0130 00000C         rts

                      end     

Symbol Table
        cbufsize 001400
             BCR 00FFFE
      getchannel 000111
            loop 000060
              ok 00006D
          wrt_l2 0000E7
       add_voice 0000CC
      add_offset 000005
           start 000040
        left_vol 000000
         circbuf 000000
              RX 00FFEF
          end_gc 00012E
          end_l2 000103
     end_clearlp 0000B2
         chn4buf 000D00
         chn3buf 000900
         chn2buf 000500
         chn1buf 000100
              TX 00FFEF
     last_sample 000006
          clrbuf 0000AC
             CRB 00FFED
             CRA 00FFEC
             PCD 00FFE5
           PCDDR 00FFE3
             PCC 00FFE1
       frequency 000003
           MYPBC 00FFE0
        xmit_int 000010
        vc4_data 000015
        vc3_data 00000E
        vc2_data 000007
        vc1_data 000000
           wait4 00012A
           wait3 000122
           wait2 00011F
           wait1 00011C
           wait0 000114
           waite 000063
   curr_fraction 000004
         bufsize 000400
       voice_vol 000002
             IPR 00FFFF
             HRX 00FFEB
       right_vol 000001
             HSR 00FFE9
errors=0
