;----------------------------------------------------------------------
;----------------------------------------------------------------------
; DSP 4 channel Player.
; 56001 source. (very fast)
; By Martin Griffiths, August 1993
;----------------------------------------------------------------------
;----------------------------------------------------------------------

IPR		EQU	$FFFF
BCR		EQU	$FFFE
MYPBC		EQU	$FFE0
PCC		EQU	$FFE1
PCDDR		EQU	$FFE3		; Port C data direction
PCD		EQU	$FFE5		; Port C data register
RX		EQU	$FFEF
TX		EQU	$FFEF
CRA		EQU	$FFEC
CRB		EQU	$FFED
HCR		EQU	$FFE8		; host command register
HSR		EQU	$FFE9		; host status register
HRX		EQU	$FFEB

; Voice Structure.

frequency       equ 0   ; frequency fraction for voice. (24bit fraction) 
curr_fraction   equ 1   ; current fraction part. 
last_sample	equ 2   ; 

vc1_data	equ 0
vc2_data	equ 3
vc3_data	equ 6
vc4_data	equ 9

; Sample buffer x: memory address for each voice.

bufsize		EQU 1024
chn1buf		EQU $100+(0*bufsize)
chn2buf		EQU $100+(1*bufsize)
chn3buf		EQU $100+(2*bufsize)
chn4buf		EQU $100+(3*bufsize)

; Circular buffer for dac output in y: memory.

circbuf 	EQU $0
cbufsize	EQU $1800

	org	p:$0
	jmp	start			; -> start

; DAC xmit interrupt.

	org	p:$10			; ssi transmit data
xmit_int
	nop
	movep	y:(r7)+,x:RX		; output sample word

; Music routine, host command.

	org	p:$26
	jsr	musicplayer_int		; host command 2
	
	org	p:$40
start	movep	#0,x:BCR
	movep	#1,x:MYPBC
	jsr	setup_player
	bset	#2,x:HCR		; enable host commands	
	bset	#10,x:IPR
	bset	#11,x:IPR		; HPL0 and HPL1 (enable host commands)

forever	nop
	jmp 	forever

musicplayer_int
	andi	#$fc-4-8,mr		; unmask interrupts
	move	#>add_voice_ni,r2	; r2 -> non-interpolated add voice
	move	#>add_voice_int,r3	; r3 -> interpolated add voice
waitcpu	jclr	#0,x:HSR,waitcpu	; wait for cpu...
	movep	x:HRX,a			; fetch mix routine
	tst	a			; 0  = no interpolation
	tne	x1,a	r3,r2		; >0 = interpolation
waite	move	r7,b			; current pos in circular buffer
	jset	#0,b1,waite		;
	move	r6,x0			; last position in buffer 
	sub	x0,b			; difference 
	jpl	ok
	move	#cbufsize,x0
	add 	x0,b
ok	asr	b	r6,r4		; /2 , R4=r6 (-> fill start)
	move	b1,n2			; store no of samples to do.
	move	#chn1buf,r0		;
	move	#>vc1_data,r1			;
	jsr	getchannel		; get channel 1
	move	#chn2buf,r0		;
	move	#>vc2_data,r1			;
	jsr	getchannel		; get channel 2
	move	#chn3buf,r0		;
	move	#>vc3_data,r1		;
	jsr	getchannel		; get channel 3
	move	#chn4buf,r0		;
	move	#>vc4_data,r1		;
	jsr	getchannel		; get channel 4
clrbuf	
	clr	a	r4,r6
	move	#2,n6			; interleaved stereo voices 
	do	n2,end_clearlp
	move	a,y:(r6)+
	move	a,y:(r6)+
end_clearlp
	move	#>chn1buf,r0		
	move	#>vc1_data,r1
	jsr	(r2)			; add voice 1
	move	#>chn2buf,r0	
	move	y:(R4)+,x0
	move	#>vc2_data,r1
	jsr	(r2)			; add voice 2
	move	#>chn3buf,r0
	move	#>vc3_data,r1
	jsr	(r2)			; add voice 3
	move	#>chn4buf,r0	
	move	y:(R4)-,x0
	move	#>vc4_data,r1
	jsr	(r2)		; add voice 4

wait_E	jclr	#1,x:HSR,wait_E		; wait..
	movep	b,x:HRX			; tell cpu "finished"!
	
	rti

; Add a voice to the buffer (NO interpolation)
; r0 -> sample buffer to apply volume and frequency shift too.
; r1 -> voice structure for this voice
; n2 -> no. of sample words to do.

add_voice_ni
	clr	a	R4,R6
	clr	b			; clear b , skip "last sample"
	move	x:(r1)+,a0		; frequency word
	asl	a	x:(r1)+,b0	;
	move	r0,b1 	
	move	a0,x0
	move	a1,x1
	do	n2,end_lni
	add	x,b	x:(r0),a	y:(r6),y1	
	add	y1,a	b1,r0
	move	a,y:(r6)+n6	
end_lni
	move	x:(r0),a		
	move	a,x:(r1)-		; store "last sample"
	move	b0,x:(r1)		; store current fraction
	rts

; Add a voice to the buffer (interpolate)
; r0 -> sample buffer to apply volume and frequency shift too.
; r1 -> voice structure for this voice
; n2 -> no. of sample words to do.

add_voice_int
	clr	a	R4,r6
	clr	b
	move	x:(r1)+,a0		; frequency word
	asl	a	x:(r1)+,b0	; current fraction
	move	r0,b1 	
	move	a0,x0
	move	a1,x1
	do	n2,end_li
	move	b0,a
	lsr	a		x:(r0)+,y1
	add	x,b		a1,y0
	move	y1,a
	mac	-y0,y1,a	x:(r0),y1
	mac	y0,y1,a		y:(r6),y1	
	add	y1,a		b1,r0
	move	a,y:(r6)+n6	
end_li
	move	x:(r0),x0
	move	x0,x:(r1)-
	move	b0,x:(r1)		; store current fraction
	rts


; Fetch a channel, including volume,frequency data.

getchannel
	jclr	#0,x:HSR,getchannel	; wait...
	movep	x:HRX,y1		; receive volume
	move	#0.5,x1
	mpy	x1,y1,a
	move	a,y1
wait0	jclr	#0,x:HSR,wait0		; wait...
	movep	x:HRX,x1		; receive frequency (fraction) 
	clr	b	x1,x:(r1)+	; store.
	move	x:(r1)+,b0		; current fraction
	move	n2,x0			; no. of samples to do = curr fracrtion +
	mac	x1,x0,b  		; frequency fraction * no. of samples to do.
wait2	jclr	#1,x:HSR,wait2		; wait..
	movep	b1,x:HRX		; send frequency fraction * no. of samples to do. 
	move	#>1,a
	add	a,b
	move	x:(r1)+,y0
	move	y0,x:(r0)+		; store "last sample"
	move	#>$8000,y0		; 
	do	b1,end_gc		; - for x no. of samples
wait4   jclr    #0,X:HSR,wait4          ; - wait...
	movep   x:HRX,x1                ; - receive 3 samples
	mpy     y0,x1,a        
	move	a0,x1
	mpy	y1,x1,b	
	move	b,x:(r0)+
end_gc	move	b,x:(r0)+
nonetoget
	rts

setup_player
	clr	a			; set all
	move	#>vc1_data,r6		; voice
	rep	#3*4			; variables
	move	a,x:(r6)+		; to zero
	move 	#cbufsize,n0		; setup the dac output 
	move	#circbuf,r6		; circular buffer pointers 
	movec	#cbufsize-1,m6		; and modulos.. 
	move	r6,r7			; 
	movec	m6,m7			; 
	rep	n0			; and clear the buffer
	move	a,y:(r6)+		;
; Setup DAC output.	
	movep	#$3000,x:IPR		; Set the IPR for ssi interrupts
	movep	#$4100,x:CRA		; set wordlength to 16bits and 2 words per "frame".
	movep	#$5800,x:CRB		; transmit int enable | transmitter enable | enable network mode(word request)
	movep	#$1f8,x:PCC		; turn on SSI port(Port C control reg)
	movep	#0,x:PCDDR		; 
	andi	#$fc-4-8,mr		; unmask interrupts
	rts

	end	