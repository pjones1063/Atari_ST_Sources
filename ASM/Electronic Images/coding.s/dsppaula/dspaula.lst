Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 1



1                        ;------------------------------------------------------
----------------
2                        ; DSP 4 channel Player.
3                        ; 56001 source. (very fast)
4                        ; By Martin Griffiths, August 1993
5                        ; uses $6000-$8000 in both X and Y memory...
6                        ;------------------------------------------------------
----------------
7      
8                        no_channels
9         000008                   equ     8
10     
11        00FFFF         IPR       EQU     $FFFF
12        00FFFE         BCR       EQU     $FFFE
13        00FFE0         PBC       EQU     $FFE0
14        00FFE1         PCC       EQU     $FFE1
15        00FFE3         PCDDR     EQU     $FFE3                             ; P
ort C data direction
16        00FFE5         PCD       EQU     $FFE5                             ; P
ort C data register
17        00FFEF         RX        EQU     $FFEF
18        00FFEF         TX        EQU     $FFEF
19        00FFEC         CRA       EQU     $FFEC
20        00FFED         CRB       EQU     $FFED
21        00FFE8         HCR       EQU     $FFE8                             ; h
ost command register
22        00FFE9         HSR       EQU     $FFE9                             ; h
ost status register
23        00FFEB         HRX       EQU     $FFEB
24        00FFEB         HTX       EQU     $FFEB
25     
26                       ; Voice Structure.
27     
28                       stereo_offset
29        000000                   equ     0
30        000001         frequency equ     1                                 ; f
requency fraction for voice. (24bit fraction)
31                       curr_fraction
32        000002                   equ     2                                 ; c
urrent fraction part.
33                       last_sample
34        000003                   equ     3                                 ;
35                                                                           ;
36     
37     
38        001FC0         cbufsize  EQU     $1FC0
39        0007F0         bufsize   EQU     $800-16
40     
41                       ; Sample buffer X: memory address for each voice.
42     
43        X:1000                   org     x:$1000
44        X:1000         chn1buf   ds      bufsize
45        X:17F0         chn2buf   ds      bufsize
46        X:1FE0         chn3buf   ds      bufsize
47        X:27D0         chn4buf   ds      bufsize
48        X:2FC0         chn5buf   ds      bufsize
49        X:37B0         chn6buf   ds      bufsize
50        X:3FA0         chn7buf   ds      bufsize
51        X:4790         chn8buf   ds      bufsize
52        X:4F80         vc1_data  ds      4
53        X:4F84         vc2_data  ds      4
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 2



54        X:4F88         vc3_data  ds      4
55        X:4F8C         vc4_data  ds      4
56        X:4F90         vc5_data  ds      4
57        X:4F94         vc6_data  ds      4
58        X:4F98         vc7_data  ds      4
59        X:4F9C         vc8_data  ds      4
60        X:4FA0         freq_const ds     1
61                       vces_8_flag
62        X:4FA1                   ds      1
63        X:4FA2         save_x    ds      1                                 ;
64        X:4FA3         save_y    ds      1                                 ;
65        X:4FA4         save_a2   ds      1                                 ; A
rea to
66        X:4FA5         save_a1   ds      1                                 ; s
ave registers
67        X:4FA6         save_a0   ds      1                                 ;
68        X:4FA7         save_b2   ds      1                                 ;
69        X:4FA8         save_b1   ds      1                                 ;
70        X:4FA9         save_b0   ds      1                                 ;
71        X:4FAA         save_r0   ds      1                                 ;
72        X:4FAB         save_r1   ds      1                                 ;
73        X:4FAC         save_r2   ds      1                                 ;
74        X:4FAD         save_r3   ds      1                                 ;
75        X:4FAE         save_r4   ds      1                                 ;
76        X:4FAF         save_r5   ds      1                                 ;
77        X:4FB0         save_r6   ds      1                                 ;
78        X:4FB1         save_n0   ds      1                                 ;
79        X:4FB2         save_n1   ds      1                                 ;
80        X:4FB3         save_n2   ds      1                                 ;
81        X:4FB4         save_n3   ds      1                                 ;
82        X:4FB5         save_n4   ds      1                                 ;
83        X:4FB6         save_n5   ds      1                                 ;
84        X:4FB7         save_n6   ds      1
85     
86     
87                       ; Circular buffer for dac output in Y: memory.
88     
89        Y:1000                   org     y:$1000
90        Y:1000         circbuf   ds      cbufsize
91     
92        P:0000                   org     p:$0
93        P:0000 0AF080            jmp     start                             ; -
> start
                 000040
94     
95                       ; DAC xmit FAST interrupt.
96     
97        P:0010                   org     p:$10                             ; s
si transmit data
98                       xmit_int
99        P:0010 08DFEF            movep             y:(r7)+,x:RX            ; o
utput sample word
100    
101                      ; Music routine, host command 2.
102    
103       P:0026                   org     p:$26
104       P:0026 0BF080            jsr     musicplayer_int                   ; h
ost command 2
                 000069
105    
106       P:0040                   org     p:$40
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 3



107       P:0040 08F4BE  start     movep             #0,x:BCR
                 000000
108       P:0042 08F4A0            movep             #1,x:PBC
                 000001
109       P:0044 0AF080            jmp     setup_player
                 000129
110    
111                      ; Add a voice to the buffer (NO interpolation)
112                      ; r0 -> sample buffer to apply volume and frequency shi
ft too.
113                      ; r1 -> voice structure for this voice
114                      ; n2 -> no. of sample words to do.
115                      ; r6 -> fill place
116    
117                      add_voice_ni
118       P:0046 200013            clr     a
119       P:0047 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
120       P:0048 51D932            asl     a         x:(r1)+,b0              ;
121       P:0049 220D00            move              r0,b1
122       P:004A 210400            move              a0,x0
123       P:004B 218500            move              a1,x1
124       P:004C 06DA00            do      n2,end_lni
                 000050
125       P:004E C9C028            add     x,b       x:(r0),a    y:(r6),y1
126       P:004F 21B070            add     y1,a      b1,r0
127       P:0050 5E4E00            move                          a,y:(r6)+n6
128                      end_lni
129       P:0051 56E000            move              x:(r0),a
130       P:0052 565100            move              a,x:(r1)-               ; s
tore "last sample"
131       P:0053 516100            move              b0,x:(r1)               ; s
tore current fraction
132       P:0054 00000C            rts
133    
134                      ; Add a voice to the buffer (interpolate)
135                      ; r0 -> sample buffer to apply volume and frequency shi
ft too.
136                      ; r1 -> voice structure for this voice
137                      ; n2 -> no. of sample words to do.
138                      ; r6 -> fill place
139    
140                      add_voice_int
141       P:0055 200013            clr     a
142       P:0056 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
143       P:0057 51D932            asl     a         x:(r1)+,b0              ; c
urrent fraction
144       P:0058 220D00            move              r0,b1
145       P:0059 210400            move              a0,x0
146       P:005A 218500            move              a1,x1
147       P:005B 200013            clr     a
148       P:005C 06DA00            do      n2,end_li
                 000064
149       P:005E 212C28            add     x,b       b0,a1
150       P:005F 47E023            lsr     a         x:(r0),y1
151       P:0060 189800            move              x:(r0)+,a   a,y0
152       P:0061 47E0B6            mac     -y0,y1,a  x:(r0),y1
153       P:0062 4FE6B2            mac     y0,y1,a               y:(r6),y1
154       P:0063 21B070            add     y1,a      b1,r0
155       P:0064 5E4E13            clr     a                     a,y:(r6)+n6
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 4



156                      end_li
157       P:0065 44E000            move              x:(r0),x0
158       P:0066 445100            move              x0,x:(r1)-
159       P:0067 516100            move              b0,x:(r1)               ; s
tore current fraction
160       P:0068 00000C            rts
161    
162                      ; The music player interrupt
163    
164                      musicplayer_int
165       P:0069 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
166       P:006A 427000            move              x,l:save_x
                 004FA2
167       P:006C 437000            move              y,l:save_y
                 004FA3
168       P:006E 527000            move              a2,x:save_a2
                 004FA4
**** 169 [dspaula.a56 164]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
169       P:0070 5B7000            move                          b2,y:save_b2
                 004FA7
170       P:0072 547000            move              a1,x:save_a1
                 004FA5
**** 171 [dspaula.a56 166]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
171       P:0074 5D7000            move                          b1,y:save_b1
                 004FA8
172       P:0076 507000            move              a0,x:save_a0
                 004FA6
**** 173 [dspaula.a56 168]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
173       P:0078 597000            move                          b0,y:save_b0
                 004FA9
174       P:007A 607000            move              r0,x:save_r0
                 004FAA
**** 175 [dspaula.a56 170]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
175       P:007C 787000            move                          n0,y:save_n0
                 004FB1
176       P:007E 617000            move              r1,x:save_r1
                 004FAB
**** 177 [dspaula.a56 172]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
177       P:0080 797000            move                          n1,y:save_n1
                 004FB2
178       P:0082 627000            move              r2,x:save_r2
                 004FAC
**** 179 [dspaula.a56 174]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
179       P:0084 7A7000            move                          n2,y:save_n2
                 004FB3
180       P:0086 637000            move              r3,x:save_r3
                 004FAD
**** 181 [dspaula.a56 176]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
181       P:0088 7B7000            move                          n3,y:save_n3
                 004FB4
182       P:008A 647000            move              r4,x:save_r4
                 004FAE
**** 183 [dspaula.a56 178]: WARNING --- Absolute address involves incompatible m
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 5



emory spaces (X data move field)
183       P:008C 7C7000            move                          n4,y:save_n4
                 004FB5
184       P:008E 657000            move              r5,x:save_r5
                 004FAF
**** 185 [dspaula.a56 180]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
185       P:0090 7D7000            move                          n5,y:save_n5
                 004FB6
186    
187       P:0092 0AA980  waitcpu   jclr    #0,x:HSR,waitcpu                  ; w
ait for cpu...
                 000092
188       P:0094 084E2B            movep             x:HRX,a                 ; f
etch mix routine
189       P:0095 62F400            move              #>add_voice_ni,r2       ; r
2 -> non-interpolated add voice
                 000046
190       P:0097 63F400            move              #>add_voice_int,r3      ; r
3 -> interpolated add voice
                 000055
191       P:0099 200003            tst     a                                 ; 0
  = no interpolation
192       P:009A 032362            tne     x1,a      r3,r2                   ; >
0 = interpolation
193       P:009B 0AA980  wait8fl   jclr    #0,x:HSR,wait8fl                  ; w
ait for 8 voice flag
                 00009B
194       P:009D 084C2B            movep             x:HRX,a1                ; f
etch flag
195       P:009E 219900            move              a1,n1
196       P:009F 22EF00  waite     move              r7,b                    ; c
urrent pos in circular buffer
197       P:00A0 0ACD20            jset    #0,b1,waite                       ;
                 00009F
198       P:00A2 22C400            move              r6,x0                   ; l
ast position in buffer
199       P:00A3 20004C            sub     x0,b                              ; d
ifference
200       P:00A4 0AF0A3            jpl     ok
                 0000A9
201       P:00A6 44F400            move              #cbufsize,x0
                 001FC0
202       P:00A8 200048            add     x0,b
203       P:00A9 22D52A  ok        asr     b         r6,r5                   ; /
2 , R4=r6 (-> fill start)
204       P:00AA 21BA00            move              b1,n2                   ; s
tore no of samples to do.
205    
206                      ; Fetch channels
207    
208       P:00AB 64F400            move              #>chn1buf,r4            ;
                 001000
209       P:00AD 74F400            move              #>bufsize,n4
                 0007F0
210       P:00AF 61F400            move              #>vc1_data,r1           ;
                 004F80
211    
212       P:00B1 06D900            do      n1,getchnlp
                 0000DD
213       P:00B3 44D900            move              x:(r1)+,x0              ; s
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 6



kip stereo offset
214       P:00B4 229000            move              r4,r0
215       P:00B5 044C14            lua     (r4)+n4,r4
216       P:00B6 0AA980  getchn    jclr    #0,x:HSR,getchn                   ; w
ait...
                 0000B6
217       P:00B8 08472B            movep             x:HRX,y1                ; r
eceive volume
218       P:00B9 0AA980  wait0     jclr    #0,x:HSR,wait0                    ; w
ait...
                 0000B9
219       P:00BB 08452B            movep             x:HRX,x1                ; r
eceive period value (fraction)
220       P:00BC 20AF13            clr     a         x1,b
221       P:00BD 20000B            tst     b
222       P:00BE 0AF0AA            jeq     zeroper
                 0000C5
223       P:00C0 40F000            move              l:freq_const,a10
                 004FA0
224       P:00C2 0618A0            rep     #24
225       P:00C3 018060            div     x1,a
226       P:00C4 200060            add     x1,a
227       P:00C5 210500  zeroper   move              a0,x1
228    
229       P:00C6 45591B            clr     b         x1,x:(r1)+              ; s
tore.
230       P:00C7 51D900            move              x:(r1)+,b0              ; c
urrent fraction
231       P:00C8 234400            move              n2,x0                   ; n
o. of samples to do = curr fracrtion +
232       P:00C9 2000AA            mac     x1,x0,b                           ; f
requency fraction * no. of samples to do.
233       P:00CA 0AA981  wait2     jclr    #1,x:HSR,wait2                    ; w
ait..
                 0000CA
234       P:00CC 08CD2B            movep             b1,x:HRX                ; s
end frequency fraction * no. of samples to do.
235       P:00CD 56F400            move              #>1,a
                 000001
236       P:00CF 46F418            add     a,b       #$8000,y0               ;
                 008000
237       P:00D1 45D900            move              x:(r1)+,x1
238       P:00D2 455800            move              x1,x:(r0)+              ; s
tore "last sample"
239       P:00D3 06CD00            do      b1,end_gc                         ; -
 for x no. of samples
                 0000DB
240       P:00D5 0AA980  wait4     jclr    #0,X:HSR,wait4                    ; -
 wait...
                 0000D5
241       P:00D7 08452B            movep             x:HRX,x1                ;
242       P:00D8 2000E0            mpy     y0,x1,a
243       P:00D9 210500            move              a0,x1
244       P:00DA 2000F8            mpy     y1,x1,b
245       P:00DB 575800            move              b,x:(r0)+
246       P:00DC 575800  end_gc    move              b,x:(r0)+
247       P:00DD 575800            move              b,x:(r0)+
248                      getchnlp
249    
250       P:00DE 22B613  clrbuf    clr     a         r5,r6
251       P:00DF 76F400            move              #>2,n6                  ; i
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 7



nterleaved stereo voices
                 000002
252       P:00E1 06DA00            do      n2,end_clearlp
                 0000E4
253       P:00E3 5E5E00            move                          a,y:(r6)+
254       P:00E4 5E5E00            move                          a,y:(r6)+
255                      end_clearlp
256       P:00E5 63F400            move              #>chn1buf,r3            ;
                 001000
257       P:00E7 73F400            move              #>bufsize,n3
                 0007F0
258       P:00E9 64F400            move              #>vc1_data,r4
                 004F80
259       P:00EB 74F400            move              #>4,n4
                 000004
260       P:00ED 06D900            do      n1,mixchnlp
                 0000F6
261       P:00EF 229100            move              r4,r1
262       P:00F0 22AE00            move              r5,a
263       P:00F1 46D900            move              x:(r1)+,y0              ;
264       P:00F2 227050            add     y0,a      r3,r0                   ; r
0-> channel buffer
265       P:00F3 219600            move              a1,r6
266       P:00F4 0BE280            jsr     (r2)                              ; a
dd voice 1
267       P:00F5 044B13            lua     (r3)+n3,r3
268       P:00F6 044C14            lua     (r4)+n4,r4
269                      mixchnlp
270    
271       P:00F7 0AA980  wait_E1   jclr    #0,x:HSR,wait_E1                  ; w
ait..
                 0000F7
272       P:00F9 084E2B            movep             x:HRX,a                 ;
273       P:00FA 200003            tst     a
274       P:00FB 0AF0AA            jeq     nowait
                 000100
275       P:00FD 0AA981  wait_E2   jclr    #1,x:HSR,wait_E2                  ; w
ait..
                 0000FD
276       P:00FF 08CF2B            movep             b,x:HRX                 ; t
ell cpu "finished"!
277                      nowait
278       P:0100 42F000            move              l:save_x,x
                 004FA2
279       P:0102 43F000            move              l:save_y,y
                 004FA3
280       P:0104 52F000            move              x:save_a2,a2
                 004FA4
**** 281 [dspaula.a56 276]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
281       P:0106 5BF000            move                          y:save_b2,b2
                 004FA7
282       P:0108 54F000            move              x:save_a1,a1
                 004FA5
**** 283 [dspaula.a56 278]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
283       P:010A 5DF000            move                          y:save_b1,b1
                 004FA8
284       P:010C 50F000            move              x:save_a0,a0
                 004FA6
**** 285 [dspaula.a56 280]: WARNING --- Absolute address involves incompatible m
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 8



emory spaces (X data move field)
285       P:010E 59F000            move                          y:save_b0,b0
                 004FA9
286       P:0110 60F000            move              x:save_r0,r0
                 004FAA
**** 287 [dspaula.a56 282]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
287       P:0112 78F000            move                          y:save_n0,n0
                 004FB1
288       P:0114 61F000            move              x:save_r1,r1
                 004FAB
**** 289 [dspaula.a56 284]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
289       P:0116 79F000            move                          y:save_n1,n1
                 004FB2
290       P:0118 62F000            move              x:save_r2,r2
                 004FAC
**** 291 [dspaula.a56 286]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
291       P:011A 7AF000            move                          y:save_n2,n2
                 004FB3
292       P:011C 63F000            move              x:save_r3,r3
                 004FAD
**** 293 [dspaula.a56 288]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
293       P:011E 7BF000            move                          y:save_n3,n3
                 004FB4
294       P:0120 64F000            move              x:save_r4,r4
                 004FAE
**** 295 [dspaula.a56 290]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
295       P:0122 7CF000            move                          y:save_n4,n4
                 004FB5
296       P:0124 65F000            move              x:save_r5,r5
                 004FAF
**** 297 [dspaula.a56 292]: WARNING --- Absolute address involves incompatible m
emory spaces (X data move field)
297       P:0126 7DF000            move                          y:save_n5,n5
                 004FB6
298       P:0128 000004            rti
299    
300                      setup_player
301       P:0129 65F400            move              #>vc1_data,r5           ; v
oice
                 004F80
302       P:012B 57F413            clr     a         #>1,b                   ; s
et all
                 000001
303       P:012D 060280            do      #(no_channels/4),initvces
                 00013E
304       P:012F 565D00            move              a,x:(r5)+
305       P:0130 565D00            move              a,x:(r5)+
306       P:0131 565D00            move              a,x:(r5)+
307       P:0132 565D00            move              a,x:(r5)+
308    
309       P:0133 575D00            move              b,x:(r5)+
310       P:0134 565D00            move              a,x:(r5)+
311       P:0135 565D00            move              a,x:(r5)+
312       P:0136 565D00            move              a,x:(r5)+
313    
314       P:0137 575D00            move              b,x:(r5)+
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 9



315       P:0138 565D00            move              a,x:(r5)+
316       P:0139 565D00            move              a,x:(r5)+
317       P:013A 565D00            move              a,x:(r5)+
318    
319       P:013B 565D00            move              a,x:(r5)+
320       P:013C 565D00            move              a,x:(r5)+
321       P:013D 565D00            move              a,x:(r5)+
322       P:013E 565D00            move              a,x:(r5)+
323                      initvces
324       P:013F 70F400            move              #cbufsize,n0            ; s
etup the dac output
                 001FC0
325       P:0141 66F400            move              #circbuf,r6             ; c
ircular buffer pointers
                 001000
326       P:0143 05F426            movec             #cbufsize-1,m6          ; a
nd modulos..
                 001FBF
327       P:0145 22D700            move              r6,r7                   ;
328       P:0146 0467A6            movec             m6,m7                   ;
329       P:0147 06D820            rep     n0                                ; a
nd clear the buffer
330       P:0148 5E5E00            move                          a,y:(r6)+   ;
331       P:0149 45F400            move              #>0,x1
                 000000
332       P:014B 0AA980  get_fc    jclr    #0,x:HSR,get_fc                   ;
                 00014B
333       P:014D 08442B            movep             x:HRX,x0                ; g
et frequency
334       P:014E 56F400            move              #>3546895,a
                 361F0F
335       P:0150 0BF080            jsr     div48
                 00016E
336       P:0152 487000            move              a,l:freq_const
                 004FA0
337       P:0154 0AA822            bset    #2,x:HCR                          ; e
nable host commands
338       P:0155 08F4BF            movep             #$0c00,x:IPR            ; S
et the IPR for HOST COMMANDS
                 000C00
339    
340                      ; Setup DAC output.
341       P:0157 08F4BF            movep             #$3c00,x:IPR            ; S
et the IPR for ssi interrupts, and ENABLE HOST COMMANDS HPL0,HPL1
                 003C00
342       P:0159 08F4AC            movep             #$4100,x:CRA            ; s
et wordlength to 16bits and 2 words per "frame".
                 004100
343       P:015B 08F4AD            movep             #$5800,x:CRB            ; t
ransmit int enable | transmitter enable | enable network mode(word request)
                 005800
344       P:015D 08F4A1            movep             #$1f8,x:PCC             ; t
urn on SSI port(Port C control reg)
                 0001F8
345       P:015F 08F4A3            movep             #0,x:PCDDR              ;
                 000000
346       P:0161 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
347       P:0162 000000            nop
348       P:0163 57F400            move              #$475249,b
                 475249
Motorola DSP56000 Assembler  Version 4.1.1   94-07-02  02:41:28  dspaula.a56
  Page 10



349       P:0165 0AA981  sendgo1   jclr    #1,x:HSR,sendgo1                  ;
                 000165
350       P:0167 08CD2B            movep             b1,x:HRX                ;
351       P:0168 57F400            move              #$464621,b
                 464621
352       P:016A 0AA981  sendgo2   jclr    #1,x:HSR,sendgo2                  ;
                 00016A
353       P:016C 08CD2B            movep             b1,x:HRX                ;
354       P:016D 0C016D  forever   jmp     forever
355    
356                      ; 48bit divide routine
357                      ; a = a / x
358    
359       P:016E 21871B  div48     clr     b         a1,y1
360       P:016F 210600            move              a0,y0
361       P:0170 21A730            add     y,a       b1,y1                   ; a
*2
362       P:0171 212600            move              b0,y0
363       P:0172 063080            do      #48,idiv_lp
                 00017A
364       P:0174 210639            adc     y,b       a0,y0                   ; b
*2
365       P:0175 21872C            sub     x,b       a1,y1
366       P:0176 0AF0A0            jcc     okya
                 000179
367       P:0178 200028            add     x,b
368       P:0179 21A731  okya      adc     y,a       b1,y1
369       P:017A 212600            move              b0,y0
370                      idiv_lp
371       P:017B 210F00            move              a0,b
372       P:017C 20001F            not     b
373       P:017D 200017            not     a
374       P:017E 21A800            move              b1,a0
375       P:017F 00000C            rts
376    
377                                end

0    Errors
18   Warnings
