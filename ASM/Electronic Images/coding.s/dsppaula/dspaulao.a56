;----------------------------------------------------------------------
; DSP 4 channel Player.
; 56001 source. (very fast)
; By Martin Griffiths, August 1993
; uses $6000-$8000 in both X and Y memory...
;----------------------------------------------------------------------

no_channels	equ	8

IPR		EQU	$FFFF
BCR		EQU	$FFFE
PBC		EQU	$FFE0
PCC		EQU	$FFE1
PCDDR		EQU	$FFE3		; Port C data direction
PCD		EQU	$FFE5		; Port C data register
RX		EQU	$FFEF
TX		EQU	$FFEF
CRA		EQU	$FFEC
CRB		EQU	$FFED
HCR		EQU	$FFE8		; host command register
HSR		EQU	$FFE9		; host status register
HRX		EQU	$FFEB
HTX		EQU	$FFEB

; Voice Structure.

stereo_offset	equ 0
frequency       equ 1   ; frequency fraction for voice. (24bit fraction) 
curr_fraction   equ 2   ; current fraction part. 
last_sample	equ 3   ; 
			; 


cbufsize	EQU $1FC0
bufsize		EQU $800-16

; Sample buffer X: memory address for each voice.

		org x:$1000
chn1buf		ds bufsize
chn2buf		ds bufsize
chn3buf		ds bufsize
chn4buf		ds bufsize
chn5buf		ds bufsize
chn6buf		ds bufsize
chn7buf		ds bufsize
chn8buf		ds bufsize
vc1_data	ds 4
vc2_data	ds 4
vc3_data	ds 4
vc4_data	ds 4
vc5_data	ds 4
vc6_data	ds 4
vc7_data	ds 4
vc8_data	ds 4
freq_const	ds 1
vces_8_flag	ds 1
save_x 		ds 1		;
save_y	 	ds 1		;
save_a2		ds 1		; Area to
save_a1		ds 1		; save registers
save_a0		ds 1		;
save_b2		ds 1		;
save_b1		ds 1		;
save_b0		ds 1		;
save_r0		ds 1		;
save_r1		ds 1		;
save_r2		ds 1		;
save_r3		ds 1		;	
save_r4		ds 1		;
save_r5		ds 1		;
save_r6		ds 1		;
save_n0		ds 1		;
save_n1		ds 1		;
save_n2		ds 1		;
save_n3		ds 1		;
save_n4		ds 1		;
save_n5		ds 1		;
save_n6		ds 1		;;


; Circular buffer for dac output in Y: memory.

		org y:$1000
circbuf 	ds cbufsize

	org	p:$0
	jmp	start			; -> start

; DAC xmit FAST interrupt.

	org	p:$10			; ssi transmit data
xmit_int
	movep	y:(r7)+,x:RX		; output sample word

; Music routine, host command 2.

	org	p:$26
	jsr	musicplayer_int		; host command 2
	
	org	p:$40
start	movep	#0,x:BCR
	movep	#1,x:PBC
	jmp	setup_player

; Add a voice to the buffer (NO interpolation)
; r0 -> sample buffer to apply volume and frequency shift too.
; r1 -> voice structure for this voice
; n2 -> no. of sample words to do.
; r6 -> fill place

add_voice_ni
	clr	a	
	clr	b	x:(r1)+,a0	; frequency word
	asl	a	x:(r1)+,b0	;
	move	r0,b1 	
	move	a0,x0
	move	a1,x1
	do	n2,end_lni
	add	x,b	x:(r0),a	y:(r6),y1	
	add	y1,a	b1,r0
	move	a,y:(r6)+n6	
end_lni
	move	x:(r0),a		
	move	a,x:(r1)-		; store "last sample"
	move	b0,x:(r1)		; store current fraction
	rts

; Add a voice to the buffer (interpolate)
; r0 -> sample buffer to apply volume and frequency shift too.
; r1 -> voice structure for this voice
; n2 -> no. of sample words to do.
; r6 -> fill place

add_voice_int
	clr	a	
	clr	b	x:(r1)+,a0	; frequency word
	asl	a	x:(r1)+,b0	; current fraction
	move	r0,b1 	
	move	a0,x0
	move	a1,x1
	clr 	a
	do	n2,end_li
	add	x,b		b0,a1	
	lsr	a		x:(r0),y1
	move	x:(r0)+,a	a,y0		
	mac	-y0,y1,a	x:(r0),y1
	mac	y0,y1,a		y:(r6),y1
	add	y1,a		b1,r0
	clr	a		a,y:(r6)+n6	
end_li
	move	x:(r0),x0
	move	x0,x:(r1)-
	move	b0,x:(r1)	; store current fraction
	rts

; The music player interrupt

musicplayer_int
	andi	#$f0,mr		; unmask interrupts
	move	x,l:save_x
	move	y,l:save_y
	move	a2,x:save_a2
	move	b2,y:save_b2
	move	a1,x:save_a1
	move	b1,y:save_b1
	move	a0,x:save_a0
	move	b0,y:save_b0
	move	r0,x:save_r0
	move	n0,y:save_n0
	move	r1,x:save_r1
	move	n1,y:save_n1
	move	r2,x:save_r2
	move	n2,y:save_n2
	move	r3,x:save_r3
	move	n3,y:save_n3
	move	r4,x:save_r4
	move	n4,y:save_n4
	move	r5,x:save_r5
	move	n5,y:save_n5

waitcpu	jclr	#0,x:HSR,waitcpu	; wait for cpu...
	movep	x:HRX,a			; fetch mix routine
	move	#>add_voice_ni,r2	; r2 -> non-interpolated add voice
	move	#>add_voice_int,r3	; r3 -> interpolated add voice
	tst	a			; 0  = no interpolation
	tne	x1,a	r3,r2		; >0 = interpolation
wait8fl	jclr	#0,x:HSR,wait8fl	; wait for 8 voice flag
	movep	x:HRX,a1		; fetch flag
	move	a1,n1
waite	move	r7,b			; current pos in circular buffer
	jset	#0,b1,waite		;
	move	r6,x0			; last position in buffer 
	sub	x0,b			; difference 
	jpl	ok
	move	#cbufsize,x0
	add 	x0,b	
ok	asr	b	r6,r5		; /2 , R4=r6 (-> fill start)
	move	b1,n2			; store no of samples to do.

; Fetch channels

	move	#>chn1buf,r4		;
	move	#>bufsize,n4
	move	#>vc1_data,r1			;

	do	n1,getchnlp
	move	x:(r1)+,x0		; skip stereo offset
	move	r4,r0
	lua	(r4)+n4,r4
getchn	jclr	#0,x:HSR,getchn		; wait...
	movep	x:HRX,y1		; receive volume
wait0	jclr	#0,x:HSR,wait0		; wait...
	movep	x:HRX,x1		; receive period value (fraction) 
	clr	a	x1,b
	tst	b
	jeq	zeroper
	move	l:freq_const,a10 
	rep	#24
	div	x1,a
	add	x1,a
zeroper	move	a0,x1

	clr	b	x1,x:(r1)+	; store.
	move	x:(r1)+,b0		; current fraction
	move	n2,x0			; no. of samples to do = curr fracrtion +
	mac	x1,x0,b  		; frequency fraction * no. of samples to do.
wait2	jclr	#1,x:HSR,wait2		; wait..
	movep	b1,x:HRX		; send frequency fraction * no. of samples to do. 
	move	#>1,a
	add	a,b	#$8000,y0	; 
	move	x:(r1)+,x1
	move	x1,x:(r0)+		; store "last sample"
	do	b1,end_gc		; - for x no. of samples
wait4   jclr    #0,X:HSR,wait4          ; - wait...
	movep   x:HRX,x1                ; 
	mpy     y0,x1,a        
	move	a0,x1
	mpy	y1,x1,b	
	move	b,x:(r0)+
end_gc	move	b,x:(r0)+
	move	b,x:(r0)+
getchnlp

clrbuf	clr	a	r5,r6
	move	#>2,n6			; interleaved stereo voices 
	do	n2,end_clearlp
	move	a,y:(r6)+
	move	a,y:(r6)+
end_clearlp
	move	#>chn1buf,r3		;
	move	#>bufsize,n3
	move	#>vc1_data,r4
	move	#>4,n4
	do	n1,mixchnlp
	move	r4,r1
	move	r5,a
	move	x:(r1)+,y0		; 
	add	y0,a	r3,r0		; r0-> channel buffer
	move	a1,r6
	jsr	(r2)			; add voice 1
	lua	(r3)+n3,r3	
	lua	(r4)+n4,r4	
mixchnlp

wait_E1	jclr	#0,x:HSR,wait_E1	; wait..
	movep	x:HRX,a			; 
	tst	a
	jeq	nowait
wait_E2	jclr	#1,x:HSR,wait_E2	; wait..
	movep	b,x:HRX			; tell cpu "finished"!
nowait	
	move	l:save_x,x
	move	l:save_y,y
	move	x:save_a2,a2
	move	y:save_b2,b2
	move	x:save_a1,a1
	move	y:save_b1,b1
	move	x:save_a0,a0
	move	y:save_b0,b0
	move	x:save_r0,r0
	move	y:save_n0,n0
	move	x:save_r1,r1
	move	y:save_n1,n1
	move	x:save_r2,r2
	move	y:save_n2,n2
	move	x:save_r3,r3
	move	y:save_n3,n3
	move	x:save_r4,r4
	move	y:save_n4,n4
	move	x:save_r5,r5
	move	y:save_n5,n5
	rti

setup_player
	move	#>vc1_data,r5		; voice
	clr	a	#>1,b		; set all
	do	#(no_channels/4),initvces
	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		

	move	b,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		

	move	b,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		

	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		
	move	a,x:(r5)+		
initvces
	move 	#cbufsize,n0		; setup the dac output 
	move	#circbuf,r6		; circular buffer pointers 
	movec	#cbufsize-1,m6		; and modulos.. 
	move	r6,r7			; 
	movec	m6,m7			; 
	rep	n0			; and clear the buffer
	move	a,y:(r6)+		;
	move	#>0,x1
get_fc	jclr	#0,x:HSR,get_fc		; 
	movep	x:HRX,x0		; get frequency
	move	#>3546895,a	
	jsr	div48
	move	a,l:freq_const 
	bset	#2,x:HCR		; enable host commands	
	movep	#$0c00,x:IPR		; Set the IPR for HOST COMMANDS 

; Setup DAC output.	
	movep	#$3c00,x:IPR		; Set the IPR for ssi interrupts, and ENABLE HOST COMMANDS HPL0,HPL1
	movep	#$4100,x:CRA		; set wordlength to 16bits and 2 words per "frame".
	movep	#$5800,x:CRB		; transmit int enable | transmitter enable | enable network mode(word request)
	movep	#$1f8,x:PCC		; turn on SSI port(Port C control reg)
	movep	#0,x:PCDDR		; 
	andi	#$f0,mr			; unmask interrupts
	nop
	move	#$475249,b
sendgo1	jclr	#1,x:HSR,sendgo1	;
	movep	b1,x:HRX		; 
	move	#$464621,b
sendgo2	jclr	#1,x:HSR,sendgo2	;
	movep	b1,x:HRX		; 
forever	jmp 	forever

; 48bit divide routine
; a = a / x

div48	clr	b	a1,y1
	move	a0,y0
	add	y,a	b1,y1	; a*2	
	move	b0,y0		
	do 	#48,idiv_lp
	adc	y,b	a0,y0	; b*2
	sub	x,b	a1,y1
	jcc	okya
	add	x,b
okya	adc	y,a	b1,y1
	move	b0,y0		 
idiv_lp
	move	a0,b
	not	b
	not	a	
	move	b1,a0
	rts
	
	end	