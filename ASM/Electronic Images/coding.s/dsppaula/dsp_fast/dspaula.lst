Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 1



1                                                                            ;--
--------------------------------------------------------------------
2                        ; DSP 4 channel Player.
3                        ; 56001 source. (very fast)
4                        ; By Martin Griffiths, August 1993
5                        ; uses $6000-$8000 in both X and Y memory...
6                        ;------------------------------------------------------
----------------
7      
8         00FFFF         IPR       EQU     $FFFF
9         00FFFE         BCR       EQU     $FFFE
10        00FFE0         PBC       EQU     $FFE0
11        00FFE1         PCC       EQU     $FFE1
12        00FFE3         PCDDR     EQU     $FFE3                             ; P
ort C data direction
13        00FFE5         PCD       EQU     $FFE5                             ; P
ort C data register
14        00FFEF         RX        EQU     $FFEF                             ; S
SI Receive
15        00FFEF         TX        EQU     $FFEF                             ; S
SI Transmit
16        00FFEE         SSISR     EQU     $FFEE
17        00FFED         CRB       EQU     $FFED
18        00FFEC         CRA       EQU     $FFEC
19        00FFEB         HTX       EQU     $FFEB
20        00FFEB         HRX       EQU     $FFEB
21        00FFE8         HCR       EQU     $FFE8                             ; h
ost command register
22        00FFE9         HSR       EQU     $FFE9                             ; h
ost status register
23     
24                       ; Voice Structure.
25     
26        000000         frequency equ     0                                 ; f
requency fraction for voice. (24bit fraction)
27                       curr_fraction
28        000001                   equ     1                                 ; c
urrent fraction part.
29                       last_sample
30        000002                   equ     2                                 ;
31                                                                           ;
32     
33                       ; Sample buffer X: memory address for each voice.
34     
35        0007F0         bufsize   EQU     $800-16
36        004000         chn1buf   EQU     $4000+(0*bufsize)
37        0047F0         chn2buf   EQU     $4000+(1*bufsize)
38        004FE0         chn3buf   EQU     $4000+(2*bufsize)
39        0057D0         chn4buf   EQU     $4000+(3*bufsize)
40        005FC0         chn5buf   EQU     $4000+(4*bufsize)
41        0067B0         chn6buf   EQU     $4000+(5*bufsize)
42        006FA0         chn7buf   EQU     $4000+(6*bufsize)
43        007790         chn8buf   EQU     $4000+(7*bufsize)
44     
45                       ; Circular buffer for dac output in Y: memory.
46     
47        006000         circbuf   EQU     $6000
48        001FC0         cbufsize  EQU     $1FC0
49     
50                       ; Individual voice data structures in X: memory
51     
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 2



52        007FC0         freq_const equ    $7FC0
53                       vces_8_flag
54        007FC1                   equ     $7FC1
55        007FC2         vc1_data  equ     $7FC2
56        007FC6         vc2_data  equ     $7FC2+4
57        007FCA         vc3_data  equ     $7FC2+8
58        007FCE         vc4_data  equ     $7FC2+12
59        007FD2         vc5_data  equ     $7FC2+16
60        007FD6         vc6_data  equ     $7FC2+20
61        007FDA         vc7_data  equ     $7FC2+24
62        007FDE         vc8_data  equ     $7FC2+28
63     
64        007FF1         save_x    EQU     $7FF1
65        007FF2         save_y    EQU     $7FF2                             ;
66        007FF3         save_a2   EQU     $7FF3                             ; A
rea to
67        007FF4         save_a1   EQU     $7FF4                             ; s
ave registers
68        007FF5         save_a0   EQU     $7FF5                             ;
69        007FF3         save_b2   EQU     $7FF3                             ;
70        007FF4         save_b1   EQU     $7FF4                             ;
71        007FF5         save_b0   EQU     $7FF5                             ;
72        007FF6         save_r0   EQU     $7FF6                             ;
73        007FF6         save_n0   EQU     $7FF6                             ;
74        007FF7         save_r1   EQU     $7FF7                             ;
75        007FF7         save_n1   EQU     $7FF7                             ;
76        007FF8         save_r2   EQU     $7FF8                             ;
77        007FF8         save_n2   EQU     $7FF8                             ;
78        007FF9         save_r3   EQU     $7FF9                             ;
79        007FF9         save_n3   EQU     $7FF9                             ;
80        007FFA         save_r4   EQU     $7FFA                             ;
81        007FFA         save_n4   EQU     $7FFA                             ;
82                       ;save_r5                EQU $7FFB               ;
83                       ;save_n5                EQU $7FFB               ;
84                       ;save_r6                EQU $7FFC               ;
85                       ;save_n6                EQU $7FFC               ;;
86        007FFB         tog       EQU     $7FFB
87     
88        P:0000                   org     p:$0
89        P:0000 0AF080            jmp     start                             ; -
> start
                 000040
90     
91        P:000C                   org     p:$c                              ; s
si receive data
92     
93                       rece_int
94        P:000C 0BF080            jsr     rec
                 0001AA
95     
96                       ; DAC xmit FAST interrupt.
97     
98        P:0010                   org     p:$10                             ; s
si transmit data
99                       xmit_int
100       P:0010 08DFEF            movep             y:(r7)+,x:RX            ; o
utput sample word
101    
102                      ; Music routine, host command 2.
103    
104       P:0026                   org     p:$26
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 3



105       P:0026 0BF080            jsr     musicplayer_int                   ; h
ost command 2
                 000070
106    
107       P:0040                   org     p:$40
108       P:0040 08F4BE  start     movep             #0,x:BCR
                 000000
109       P:0042 08F4A0            movep             #1,x:PBC
                 000001
110       P:0044 0AA822            bset    #2,x:HCR                          ; e
nable host commands
111       P:0045 08F4BF            movep             #$0c00,x:IPR            ; S
et the IPR for HOST COMMANDS
                 000C00
112       P:0047 0BF080            jsr     setup_player
                 000176
113       P:0049 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
114       P:004A 000000            nop
115       P:004B 000000  forever   nop
116       P:004C 0C004B            jmp     forever
117    
118                      ;
119                      ; Music routines.
120                      ;
121    
122                      ; Add a voice to the buffer (NO interpolation)
123                      ; r0 -> sample buffer to apply volume and frequency shi
ft too.
124                      ; r1 -> voice structure for this voice
125                      ; n2 -> no. of sample words to do.
126    
127                      add_voice_ni
128       P:004D 229613            clr     a         R4,R6                   ; r
6 -> fill
129       P:004E 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
130       P:004F 51D932            asl     a         x:(r1)+,b0              ;
131       P:0050 220D00            move              r0,b1
132       P:0051 210400            move              a0,x0
133       P:0052 218500            move              a1,x1
134       P:0053 06DA00            do      n2,end_lni
                 000057
135       P:0055 C9C028            add     x,b       x:(r0),a    y:(r6),y1
136       P:0056 21B070            add     y1,a      b1,r0
137       P:0057 5E4E00            move                          a,y:(r6)+n6
138                      end_lni
139       P:0058 56E000            move              x:(r0),a
140       P:0059 565100            move              a,x:(r1)-               ; s
tore "last sample"
141       P:005A 516100            move              b0,x:(r1)               ; s
tore current fraction
142       P:005B 00000C            rts
143    
144                      ; Add a voice to the buffer (interpolate)
145                      ; r0 -> sample buffer to apply volume and frequency shi
ft too.
146                      ; r1 -> voice structure for this voice
147                      ; n2 -> no. of sample words to do.
148    
149                      add_voice_int
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 4



150       P:005C 229613            clr     a         R4,r6                   ; r
6 -> fill
151       P:005D 50D91B            clr     b         x:(r1)+,a0              ; f
requency word
152       P:005E 51D932            asl     a         x:(r1)+,b0              ; c
urrent fraction
153       P:005F 220D00            move              r0,b1
154       P:0060 210400            move              a0,x0
155       P:0061 218500            move              a1,x1
156       P:0062 200013            clr     a
157       P:0063 06DA00            do      n2,end_li
                 00006B
158       P:0065 212C28            add     x,b       b0,a1
159       P:0066 47E023            lsr     a         x:(r0),y1
160       P:0067 189800            move              x:(r0)+,a   a,y0
161       P:0068 47E0B6            mac     -y0,y1,a  x:(r0),y1
162       P:0069 4FE6B2            mac     y0,y1,a               y:(r6),y1
163       P:006A 21B070            add     y1,a      b1,r0
164       P:006B 5E4E13            clr     a                     a,y:(r6)+n6
165                      end_li
166       P:006C 44E000            move              x:(r0),x0
167       P:006D 445100            move              x0,x:(r1)-
168       P:006E 516100            move              b0,x:(r1)               ; s
tore current fraction
169       P:006F 00000C            rts
170    
171                      ; The music player interrupt
172    
173                      musicplayer_int
174       P:0070 00F0B8            andi    #$f0,mr                           ; u
nmask interrupts
175       P:0071 427000            move              x,l:save_x
                 007FF1
176       P:0073 437000            move              y,l:save_y
                 007FF2
177       P:0075 527000            move              a2,x:save_a2
                 007FF3
178       P:0077 5B7000            move                          b2,y:save_b2
                 007FF3
179       P:0079 547000            move              a1,x:save_a1
                 007FF4
180       P:007B 5D7000            move                          b1,y:save_b1
                 007FF4
181       P:007D 507000            move              a0,x:save_a0
                 007FF5
182       P:007F 597000            move                          b0,y:save_b0
                 007FF5
183       P:0081 607000            move              r0,x:save_r0
                 007FF6
184       P:0083 787000            move                          n0,y:save_n0
                 007FF6
185       P:0085 617000            move              r1,x:save_r1
                 007FF7
186       P:0087 797000            move                          n1,y:save_n1
                 007FF7
187       P:0089 627000            move              r2,x:save_r2
                 007FF8
188       P:008B 7A7000            move                          n2,y:save_n2
                 007FF8
189       P:008D 637000            move              r3,x:save_r3
                 007FF9
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 5



190       P:008F 7B7000            move                          n3,y:save_n3
                 007FF9
191       P:0091 647000            move              r4,x:save_r4
                 007FFA
192       P:0093 7C7000            move                          n4,y:save_n4
                 007FFA
193                                                                          ;mo
ve   r5,x:save_r5
194                                                                          ;mo
ve   n5,y:save_n5
195    
196       P:0095 62F400            move              #>add_voice_ni,r2       ; r
2 -> non-interpolated add voice
                 00004D
197       P:0097 63F400            move              #>add_voice_int,r3      ; r
3 -> interpolated add voice
                 00005C
198       P:0099 0AA980  waitcpu   jclr    #0,x:HSR,waitcpu                  ; w
ait for cpu...
                 000099
199       P:009B 084E2B            movep             x:HRX,a                 ; f
etch mix routine
200       P:009C 200003            tst     a                                 ; 0
  = no interpolation
201       P:009D 032362            tne     x1,a      r3,r2                   ; >
0 = interpolation
202       P:009E 0AA980  wait8fl   jclr    #0,x:HSR,wait8fl                  ; w
ait for 8 voice flag
                 00009E
203       P:00A0 084E2B            movep             x:HRX,a                 ; f
etch flag
204       P:00A1 5E7000            move                          a,y:vces_8_flag
                 007FC1
205       P:00A3 22EF00  waite     move              r7,b                    ; c
urrent pos in circular buffer
206       P:00A4 0ACD20            jset    #0,b1,waite                       ;
                 0000A3
207       P:00A6 22C400            move              r6,x0                   ; l
ast position in buffer
208       P:00A7 20004C            sub     x0,b                              ; d
ifference
209       P:00A8 0AF0A3            jpl     ok
                 0000AD
210       P:00AA 44F400            move              #cbufsize,x0
                 001FC0
211       P:00AC 200048            add     x0,b
212       P:00AD 22D42A  ok        asr     b         r6,r4                   ; /
2 , R4=r6 (-> fill start)
213       P:00AE 21BA00            move              b1,n2                   ; s
tore no of samples to do.
214       P:00AF 60F400            move              #chn1buf,r0             ;
                 004000
215       P:00B1 61F400            move              #>vc1_data,r1           ;
                 007FC2
216       P:00B3 0BF080            jsr     getchannel                        ; g
et channel 1
                 000149
217       P:00B5 60F400            move              #chn2buf,r0             ;
                 0047F0
218       P:00B7 61F400            move              #>vc2_data,r1           ;
                 007FC6
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 6



219       P:00B9 0BF080            jsr     getchannel                        ; g
et channel 2
                 000149
220       P:00BB 60F400            move              #chn3buf,r0             ;
                 004FE0
221       P:00BD 61F400            move              #>vc3_data,r1           ;
                 007FCA
222       P:00BF 0BF080            jsr     getchannel                        ; g
et channel 3
                 000149
223       P:00C1 60F400            move              #chn4buf,r0             ;
                 0057D0
224       P:00C3 61F400            move              #>vc4_data,r1           ;
                 007FCE
225       P:00C5 0BF080            jsr     getchannel                        ; g
et channel 4
                 000149
226    
227       P:00C7 5EF000            move                          y:vces_8_flag,a
                 007FC1
228       P:00C9 200003            tst     a
229       P:00CA 0AF0AA            jeq     not8_1
                 0000E4
230    
231       P:00CC 60F400            move              #chn5buf,r0             ;
                 005FC0
232       P:00CE 61F400            move              #>vc5_data,r1           ;
                 007FD2
233       P:00D0 0BF080            jsr     getchannel                        ; g
et channel 1
                 000149
234       P:00D2 60F400            move              #chn6buf,r0             ;
                 0067B0
235       P:00D4 61F400            move              #>vc6_data,r1           ;
                 007FD6
236       P:00D6 0BF080            jsr     getchannel                        ; g
et channel 2
                 000149
237       P:00D8 60F400            move              #chn7buf,r0             ;
                 006FA0
238       P:00DA 61F400            move              #>vc7_data,r1           ;
                 007FDA
239       P:00DC 0BF080            jsr     getchannel                        ; g
et channel 3
                 000149
240       P:00DE 60F400            move              #chn8buf,r0             ;
                 007790
241       P:00E0 61F400            move              #>vc8_data,r1           ;
                 007FDE
242       P:00E2 0BF080            jsr     getchannel                        ; g
et channel 4
                 000149
243                      not8_1
244    
245                      clrbuf
246       P:00E4 229613            clr     a         r4,r6
247       P:00E5 3E0200            move              #2,n6                   ; i
nterleaved stereo voices
248       P:00E6 06DA00            do      n2,end_clearlp
                 0000E9
249       P:00E8 5E5E00            move                          a,y:(r6)+
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 7



250       P:00E9 5E5E00            move                          a,y:(r6)+
251                      end_clearlp
252       P:00EA 60F400            move              #>chn1buf,r0
                 004000
253       P:00EC 61F400            move              #>vc1_data,r1
                 007FC2
254       P:00EE 0BE280            jsr     (r2)                              ; a
dd voice 1
255       P:00EF 60F400            move              #>chn2buf,r0
                 0047F0
256       P:00F1 4CDC00            move                          y:(R4)+,x0
257       P:00F2 61F400            move              #>vc2_data,r1
                 007FC6
258       P:00F4 0BE280            jsr     (r2)                              ; a
dd voice 2
259       P:00F5 60F400            move              #>chn3buf,r0
                 004FE0
260       P:00F7 61F400            move              #>vc3_data,r1
                 007FCA
261       P:00F9 0BE280            jsr     (r2)                              ; a
dd voice 3
262       P:00FA 60F400            move              #>chn4buf,r0
                 0057D0
263       P:00FC 4CD400            move                          y:(R4)-,x0
264       P:00FD 61F400            move              #>vc4_data,r1
                 007FCE
265       P:00FF 0BE280            jsr     (r2)                              ; a
dd voice 4
266    
267       P:0100 5EF000            move                          y:vces_8_flag,a
                 007FC1
268       P:0102 200003            tst     a
269       P:0103 0AF0AA            jeq     not8_2
                 00011B
270    
271       P:0105 60F400            move              #>chn5buf,r0
                 005FC0
272       P:0107 61F400            move              #>vc5_data,r1
                 007FD2
273       P:0109 0BE280            jsr     (r2)                              ; a
dd voice 5
274       P:010A 60F400            move              #>chn6buf,r0
                 0067B0
275       P:010C 4CDC00            move                          y:(R4)+,x0
276       P:010D 61F400            move              #>vc6_data,r1
                 007FD6
277       P:010F 0BE280            jsr     (r2)                              ; a
dd voice 6
278       P:0110 60F400            move              #>chn7buf,r0
                 006FA0
279       P:0112 61F400            move              #>vc7_data,r1
                 007FDA
280       P:0114 0BE280            jsr     (r2)                              ; a
dd voice 7
281       P:0115 60F400            move              #>chn8buf,r0
                 007790
282       P:0117 4CD400            move                          y:(R4)-,x0
283       P:0118 61F400            move              #>vc8_data,r1
                 007FDE
284       P:011A 0BE280            jsr     (r2)                              ; a
dd voice 8
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 8



285                      not8_2
286    
287       P:011B 0AA980  wait_E1   jclr    #0,x:HSR,wait_E1                  ; w
ait..
                 00011B
288       P:011D 084E2B            movep             x:HRX,a                 ;
289       P:011E 200003            tst     a
290       P:011F 0AF0AA            jeq     nowait
                 000124
291       P:0121 0AA981  wait_E2   jclr    #1,x:HSR,wait_E2                  ; w
ait..
                 000121
292       P:0123 08CF2B            movep             b,x:HRX                 ; t
ell cpu "finished"!
293                      nowait
294       P:0124 42F000            move              l:save_x,x
                 007FF1
295       P:0126 43F000            move              l:save_y,y
                 007FF2
296       P:0128 52F000            move              x:save_a2,a2
                 007FF3
297       P:012A 5BF000            move                          y:save_b2,b2
                 007FF3
298       P:012C 54F000            move              x:save_a1,a1
                 007FF4
299       P:012E 5DF000            move                          y:save_b1,b1
                 007FF4
300       P:0130 50F000            move              x:save_a0,a0
                 007FF5
301       P:0132 59F000            move                          y:save_b0,b0
                 007FF5
302       P:0134 60F000            move              x:save_r0,r0
                 007FF6
303       P:0136 78F000            move                          y:save_n0,n0
                 007FF6
304       P:0138 61F000            move              x:save_r1,r1
                 007FF7
305       P:013A 79F000            move                          y:save_n1,n1
                 007FF7
306       P:013C 62F000            move              x:save_r2,r2
                 007FF8
307       P:013E 7AF000            move                          y:save_n2,n2
                 007FF8
308       P:0140 63F000            move              x:save_r3,r3
                 007FF9
309       P:0142 7BF000            move                          y:save_n3,n3
                 007FF9
310       P:0144 64F000            move              x:save_r4,r4
                 007FFA
311       P:0146 7CF000            move                          y:save_n4,n4
                 007FFA
312                                                                          ;mo
ve   x:save_r5,r5
313                                                                          ;mo
ve   y:save_n5,n5
314       P:0148 000004            rti
315    
316    
317                      ; Fetch a channel, including volume,frequency data.
318    
319                      getchannel
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 9



320       P:0149 0AA980            jclr    #0,x:HSR,getchannel               ; w
ait...
                 000149
321       P:014B 08472B            movep             x:HRX,y1                ; r
eceive volume
322       P:014C 0AA980  wait0     jclr    #0,x:HSR,wait0                    ; w
ait...
                 00014C
323       P:014E 08452B            movep             x:HRX,x1                ; r
eceive period value (fraction)
324       P:014F 20AF13            clr     a         x1,b
325       P:0150 20000B            tst     b
326       P:0151 0AF0AA            jeq     zeroper
                 000158
327       P:0153 40F000            move              l:freq_const,a10
                 007FC0
328       P:0155 0618A0            rep     #24
329       P:0156 018060            div     x1,a
330       P:0157 200060            add     x1,a
331       P:0158 210500  zeroper   move              a0,x1
332    
333       P:0159 45591B            clr     b         x1,x:(r1)+              ; s
tore.
334       P:015A 51D900            move              x:(r1)+,b0              ; c
urrent fraction
335       P:015B 234400            move              n2,x0                   ; n
o. of samples to do = curr fracrtion +
336       P:015C 2000AA            mac     x1,x0,b                           ; f
requency fraction * no. of samples to do.
337       P:015D 0AA981  wait2     jclr    #1,x:HSR,wait2                    ; w
ait..
                 00015D
338       P:015F 08CD2B            movep             b1,x:HRX                ; s
end frequency fraction * no. of samples to do.
339       P:0160 56F400            move              #>1,a
                 000001
340       P:0162 46F418            add     a,b       #$8000,y0               ;
                 008000
341       P:0164 65F400            move              #>tog,r5
                 007FFB
342       P:0166 45D900            move              x:(r1)+,x1
343       P:0167 455800            move              x1,x:(r0)+              ; s
tore "last sample"
344       P:0168 06F481            do      #500,end_gc                       ; -
 for x no. of samples
                 000172
345       P:016A 56E500  wait4     move              x:(r5),a                ; -
 wait...
346       P:016B 200003            tst     a
347       P:016C 0EA16A            jeq     wait4
348       P:016D 0A6500            bclr    #0,x:(r5)
349       P:016E 4DE500            move                          y:(r5),x1
350       P:016F 2000E0            mpy     y0,x1,a
351       P:0170 210500            move              a0,x1
352       P:0171 2000F8            mpy     y1,x1,b
353       P:0172 575800            move              b,x:(r0)+
354                      end_gc
355       P:0173 000000            nop
356       P:0174 000000            nop
357       P:0175 00000C            rts
358    
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 10



359                      setup_player
360       P:0176 200013            clr     a                                 ; s
et all
361       P:0177 66F400            move              #>vc1_data,r6           ; v
oice
                 007FC2
362       P:0179 0620A0            rep     #8*4                              ; v
ariables
363       P:017A 565E00            move              a,x:(r6)+               ; t
o zero
364       P:017B 70F400            move              #cbufsize,n0            ; s
etup the dac output
                 001FC0
365       P:017D 66F400            move              #circbuf,r6             ; c
ircular buffer pointers
                 006000
366       P:017F 05F426            movec             #cbufsize-1,m6          ; a
nd modulos..
                 001FBF
367       P:0181 22D700            move              r6,r7                   ;
368       P:0182 0467A6            movec             m6,m7                   ;
369       P:0183 06D800            do      n0,iclear_lp                      ; a
nd clear the buffer
                 000185
370       P:0185 5E5E00            move                          a,y:(r6)+   ;
371                      iclear_lp
372       P:0186 45DF00            move              x:(r7)+,x1
373       P:0187 56F400            move              #>$123456,a
                 123456
374       P:0189 0AA981  send_go   jclr    #1,x:HSR,send_go                  ;
                 000189
375       P:018B 08CE2B            movep             a,x:HRX                 ;
376       P:018C 0AA980  get_fc    jclr    #0,x:HSR,get_fc                   ;
                 00018C
377       P:018E 45F400            move              #>0,x1
                 000000
378       P:0190 08442B            movep             x:HRX,x0                ; g
et frequency
379       P:0191 56F400            move              #>3546895,a
                 361F0F
380       P:0193 0BF080            jsr     div48
                 0001AE
381       P:0195 547000            move              a1,x:freq_const
                 007FC0
382       P:0197 587000            move                          a0,y:freq_const
                 007FC0
383                      ; Setup DAC output.
384       P:0199 200013            clr     a
385       P:019A 567000            move              a,x:tog
                 007FFB
386       P:019C 5E7000            move                          a,y:tog
                 007FFB
387    
388       P:019E 08F4BF            movep             #$3c00,x:IPR            ; S
et the IPR for ssi interrupts, and ENABLE HOST COMMANDS HPL0,HPL1
                 003C00
389       P:01A0 08F4AC            movep             #$4100,x:CRA            ; s
et wordlength to 16bits and 2 words per "frame".
                 004100
390                      ;       movep   #$F800,x:CRB            ; transmit int 
enable | transmitter enable | enable network mode(word request)
Motorola DSP56000 Assembler  Version 4.1.1   94-01-03  01:11:56  dspaula.a56
  Page 11



391                      ;                                       ; | receiver en
able.
392       P:01A2 08F4AD            movep             #$F000,x:CRB
                 00F000
393       P:01A4 0BAE24            btst    #4,X:SSISR                        ; r
ead SSI SR to clear TUE bit
394       P:01A5 08F4A1            movep             #$1f8,x:PCC             ; t
urn on SSI port(Port C control reg)
                 0001F8
395       P:01A7 08F4A3            movep             #0,x:PCDDR              ;
                 000000
396       P:01A9 00000C            rts
397    
398       P:01AA 0865EF  rec       movep             x:RX,y:(r5)             ; g
et sample word
399       P:01AB 0A7020            bset    #0,x:tog
                 007FFB
400       P:01AD 000004            rti
401    
402    
403                      ; 48bit divide routine
404                      ; a = a / x
405    
406       P:01AE 21871B  div48     clr     b         a1,y1
407       P:01AF 210600            move              a0,y0
408       P:01B0 21A730            add     y,a       b1,y1                   ; a
*2
409       P:01B1 212600            move              b0,y0
410       P:01B2 063080            do      #48,idiv_lp
                 0001BA
411       P:01B4 210639            adc     y,b       a0,y0                   ; b
*2
412       P:01B5 21872C            sub     x,b       a1,y1
413       P:01B6 0AF0A0            jcc     okya
                 0001B9
414       P:01B8 200028            add     x,b
415       P:01B9 21A731  okya      adc     y,a       b1,y1
416       P:01BA 212600            move              b0,y0
417                      idiv_lp
418       P:01BB 210F00            move              a0,b
419       P:01BC 20001F            not     b
420       P:01BD 21A817            not     a         b1,a0
421       P:01BE 00000C            rts
422    
423                                end

0    Errors
0    Warnings
