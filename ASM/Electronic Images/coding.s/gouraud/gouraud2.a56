;----------------------------------------------------------------------
;----------------------------------------------------------------------
; Gouraud dsp subroutine.(moire shaded :))
; By Martin Griffiths, August 1993
;----------------------------------------------------------------------
;----------------------------------------------------------------------

IPR		EQU	$ffff
BCR		EQU	$fffe
MYPBC		EQU	$ffe0
PCC		EQU	$ffe1
PCDDR		EQU	$ffe3
PCD		EQU	$ffe5
RX		EQU	$FFEF
TX		EQU	$FFEF
CRA		EQU	$FFEC
CRB		EQU	$FFED
HSR		EQU	$ffe9
HRX		EQU	$ffeb

gradtab		EQU	$100

	org	p:$0
	jmp	start

	org	p:$40
start

	movep	#0,x:BCR
	movep	#1,x:MYPBC
	andi	#$fc,mr

loop	jclr	#0,x:HSR,loop		; wait for cpu...
	movep	x:HRX,x1		; fetch dummy.

	jsr	make_gradtab

x1s	equ $1000
x2s	equ $1800

; Gouraud poly routine.
; r0-r2/n0-n2 a,b,x,y trashed.

gouraud_tc
	move	#>gradtab,r2
get_gdy	jclr	#0,x:HSR,get_gdy		
	movep	x:HRX,n0		; DY for gouraud poly
	move 	#>x1s,r0
	jsr 	do_side			; scan convert left
	move 	#>x2s,r0
	jsr 	do_side			; scan convert right
	move 	#>x1s,r0
	move 	#>x2s,r1
	move	x:(r0)+,x0		; x1
	move	x:(r1)+,b		; x2
	do	n0,gsen_draw
sen_x1	jclr	#1,x:HSR,sen_x1
	movep	x0,x:HRX		; send x1
	sub	x0,b	#0,x1		; dx
	tcs	x1,b			; x1>x2 then set dx=0
gotdx	move	b,n2
sen_dx	jclr	#1,x:HSR,sen_dx
	movep	n2,x:HRX		; send dx
	move	x:(r0)+,a		; i1 (24bit signed)
	tst	b	x:(r1)+,b	; i2 (24bit signed)
	jeq	egourl_lp
	sub	a,b	 x:(r2+n2),y1	; Di , get 1/dx
	move	b,x1	 
	mpy	y1,x1,b	 #>$2000,y1	; Di * 1/dx
	move	b,x1
	mpy	y1,x1,b	  a,x1		; 11 places right
	mpy	y1,x1,a	  b1,x1		; 11 places right	
	clr	b	  b0,x0
	do	n2,egourl_lp
	add	a,b
sen_g	jclr	#1,x:HSR,sen_g
	movep	b,x:HRX
	add	x,a	#0,b1
egourl_lp
	move	x:(r0)+,x0		; x1
	move	x:(r1)+,b		; x2
gsen_draw
	jmp 	gouraud_tc

; Scan convert a gouraud poly side.
; r0 -> space for scanconvert co-ord/intensity list.

do_side	move	n0,a			; poly DY
gsidelp		
lgdy	jclr	#0,x:HSR,lgdy		
	movep	x:HRX,n2		; dy
	move	a,n1			; save count in n1
	move	x:(r2+n2),x1		; get 1/dy
lgdx	jclr	#0,x:HSR,lgdx		
	movep	x:HRX,x0		; dx
	mpy	x1,x0,a			; dx/dy
	move	a0,y0
	move	a1,y1
lgdi	jclr	#0,x:HSR,lgdi		
	movep	x:HRX,x0		; di
	mpy	x1,x0,b			; di/dy
	move	b0,x0
	move	b1,x1
lgx1	jclr	#0,x:HSR,lgx1		
	movep	x:HRX,a			; x1
lgi1	jclr	#0,x:HSR,lgi1		
	movep	x:HRX,b			; i1
	do	n2,gleftdo
	add	y,a	a,x:(r0)+	; store x
	add	x,b	b,x:(r0)+	; store y
gleftdo	
	move	n1,a			; restore DY count
	move	n2,x0			
	sub	x0,a			; DY = DY - dy
	jgt	gsidelp	
	rts

; Make gradient table for 1/x calculations.

make_gradtab
	move	#>gradtab,r0
	clr	a
	move	a,x:(r0)+
	move	#>1,r1
	do	#640,make_tab_lp
	move	#>1,a
	move	r1,y0
	and	#$fe,ccr
	rep 	#24
	div	y0,a
	add	y0,a		(r1)+
	move	a0,x:(r0)+	
make_tab_lp
	rts
	

	end	