; Perform the inverse DCT on one block of coefficients.
; Also range-limits in case of noise during transformation
;
; r0 = pointer to block (in X memory), 8x8 DSP words.
; x0 = number of DCT blocks

j_rev_dct:

		move r0,r5		; start of block

		move #64,n5		; offset to next DCT
		do x0,enddctloop

; Pass 1: process rows.
; Note results are scaled up by sqrt(8) compared to a true IDCT;
; furthermore, we scale the results by 2**PASS1_BITS.

		move r0,r4	; r4 = saved source row
		do #8,endrowsloop

; Due to quantization, we will usually find that many of the input
; coefficients are zero, especially the AC terms.  We can exploit this
; by short-circuiting the IDCT calculation for any row in which all
; the AC terms are zero.  In that case each output is equal to the
; DC coefficient (with scale factor as needed).
; With typical images and quantization tables, half or more of the
; row DCT calculations can be simplified this way.

		move r0,r2
		move #2,n0
		move x:(r2)+,x1			; fetch dc component
		clr a		x:(r2)+,x0	; fetch first

		rep #7
		or x0,a		x:(r2)+,x0	; fetch next
		jne jrdacnz1
; AC terms all zero
; x1 has DC component, and a is 0

		move x1,a0
		rep #pass1_bits
		asl a
		rep #8
		move a0,x:(r0)+

		jmp jrdnextrow

; AC terms not all zero, so process
jrdacnz1

; Even part: reverse the even part of the forward DCT.
; The rotator is sqrt(2)*c(-6).

		move r0,r1
		move #6,n1
		move x:(r0+n0),a
		move x:(r1+n1),x0	a,y1

		add x0,a
		move #FIX_0_541196100,x1 a,y0

		mpy y0,x1,a
	; NO shift, do it after the MAC
		tfr a,b			#-FIX_1_847759065,x1
		mac x0,x1,a		#5,n2
		asr a			#FIX_0_765366865,x1
		mac y1,x1,b		a,l:tmp00
		asr b			#4,n0
		move b,l:tmp01

		move x:(r0),a
		tfr a,b			x:(r0+n0),y1
		add y1,a		#FIX_1_0,x0
		sub y1,b		a,x1
		mpy x0,x1,a		b,x1
		asr a			r0,r2
		mpy x0,x1,b		#1,n0
		asr b			r0,r3
		move b,l:tmp03


		tfr a,b			l:tmp01,x
		add x,a			#7,n3
		sub x,b			a,l:tmp10
		move b,l:tmp13

		move l:tmp03,a
		tfr a,b			l:tmp00,x
		add x,a			#3,n1
		sub x,b			a,l:tmp11
		move b,l:tmp12
    
; Odd part per figure 8; the matrix is unitary and hence its
; transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.

; r0-r3, n0-n3 set up above by pmv

		move x:(r3+n3),a
		move x:(r0+n0),x0
		add x0,a	#FIX_1_175875602,y1
		move x:(r2+n2),b
		move x:(r1+n1),x1
		add x1,b	a,l:tmpd4
		move x:(r3+n3),a
		add x1,a	b,l:tmpd5
		move x:(r2+n2),b
		add x0,b	a,l:tmpd6
		add b,a		b,l:tmpd7
		move a1,y0
		mpy y0,y1,a
		asr a		#FIX_3_072711026,y0
		move a,l:z5

		mpy y0,x1,a
		asr a		#FIX_1_501321110,y1

		mpy y1,x0,b	a,l:tmpd2
		asr b		#FIX_0_298631336,y0

		move x:(r3+n3),x1
		mpy y0,x1,a	b,l:tmpd3
		asr a		#FIX_2_053119869,y1

		move x:(r2+n2),x0
		mpy y1,x0,b	a,l:tmpd0
		asr b		#-FIX_0_899976223,y0

		move l:tmpd4,a
		move a1,x1
		mpy y0,x1,a	b,l:tmpd1
		asr a		#-FIX_2_562915447,y1

		move l:tmpd5,b
		move b1,x0
		mpy y1,x0,b	a,l:tmpd4
		asr b		#-FIX_1_961570560,y0

		move l:tmpd6,a
		move a1,x1
		mpy y0,x1,a	b,l:tmpd5
		asr a		#-FIX_0_390180644,y1
		move l:z5,b
		add b,a

		move l:tmpd7,b
		move b1,x0
		mpy y1,x0,b	a,l:tmpd6
		asr b
		move l:z5,a
		add a,b
		move b,l:tmpd7

		move l:tmpd0,a
		move l:tmpd4,b
		add b,a
		move l:tmpd6,b
		add b,a
		move a,l:tmpd0

		move l:tmpd1,a
		move l:tmpd5,b
		add b,a
		move l:tmpd7,b
		add b,a
		move a,l:tmpd1

		move l:tmpd2,a
		move l:tmpd5,b
		add b,a
		move l:tmpd6,b
		add b,a
		move a,l:tmpd2

		move l:tmpd3,a
		move l:tmpd4,b
		add b,a		#>pass1_round,x0
		move l:tmpd7,b
		add b,a		#0,x1
		move a,l:tmpd3

; Final output stage: inputs are tmpd0-d3, tmp0..tmp3
; Writeback done to r1 (set = r0 later) so r0 can be inc by pmv)
; x = rounding constant

		move l:tmp10,a
		move l:tmpd3,b
		add b,a
		add x,a
		rep #pass1_shift
		asr a
		move a0,x:(r1)
		move l:tmp10,a
		sub b,a		#7,n1
		add x,a		l:tmpd2,b
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)

		move l:tmp11,a
		add b,a
		add x,a		#1,n1
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)
		move l:tmp11,a
		sub b,a		#6,n1
		add x,a		l:tmpd1,b
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)

		move l:tmp12,a
		add b,a
		add x,a		#2,n1
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)
		move l:tmp12,a
		sub b,a		#5,n1
		add x,a		l:tmpd0,b
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)

		move l:tmp13,a
		add b,a		#8,n0
		add x,a		#3,n1
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)
		move l:tmp13,a
		sub b,a		#4,n1
		add x,a		(r0)+n0
		rep #pass1_shift
		asr a
		move a0,x:(r1+n1)

; pointer advanced to next row by pmv


jrdnextrow

; play it safe here for now
		nop
		nop
		nop
endrowsloop



; Pass 2: process columns.
; Note that we must descale the results by a factor of 8 == 2**3,
; and also undo the PASS1_BITS scaling.

		move r4,r0
		do #8,endcolsloop

; Columns of zeroes could be exploited in the same way as we did with rows.
; However, the row calculation has created many nonzero AC terms, so the
; simplification applies rarely
; - not worth it when the DSP does the rest so fast!


; Even part: reverse the even part of the forward DCT.
; The rotator is sqrt(2)*c(-6).

		move r0,r1
		move #$10,n0
		move #$30,n1
		move x:(r0+n0),a
		move x:(r1+n1),x0	a,y1

		add x0,a
		move #FIX_0_541196100,x1 a,y0

		mpy y0,x1,a
	; NO shift, do it after the MAC
		tfr a,b			#-FIX_1_847759065,x1
		mac x0,x1,a		#$28,n2
		asr a			#FIX_0_765366865,x1
		mac y1,x1,b		a,l:tmp00
		asr b			#$20,n0
		move b,l:tmp01

		move x:(r0),a
		tfr a,b			x:(r0+n0),y1
		add y1,a		#FIX_1_0,x0
		sub y1,b		a,x1
		mpy x0,x1,a		b,x1
		asr a			r0,r2
		mpy x0,x1,b		#$8,n0
		asr b			r0,r3
		move b,l:tmp03


		tfr a,b			l:tmp01,x
		add x,a			#$38,n3
		sub x,b			a,l:tmp10
		move b,l:tmp13

		move l:tmp03,a
		tfr a,b			l:tmp00,x
		add x,a			#$18,n1
		sub x,b			a,l:tmp11
		move b,l:tmp12

; Odd part per figure 8; the matrix is unitary and hence its
; transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.

; r0-r3, n0-n3 set up above by pmv

		move x:(r3+n3),a
		move x:(r0+n0),x0
		add x0,a	#FIX_1_175875602,y1
		move x:(r2+n2),b
		move x:(r1+n1),x1
		add x1,b	a,l:tmpd4
		move x:(r3+n3),a
		add x1,a	b,l:tmpd5
		move x:(r2+n2),b
		add x0,b	a,l:tmpd6
		add b,a		b,l:tmpd7
		move a1,y0
		mpy y0,y1,a
		asr a		#FIX_3_072711026,y0
		move a,l:z5

		mpy y0,x1,a
		asr a		#FIX_1_501321110,y1

		mpy y1,x0,b	a,l:tmpd2
		asr b		#FIX_0_298631336,y0

		move x:(r3+n3),x1
		mpy y0,x1,a	b,l:tmpd3
		asr a		#FIX_2_053119869,y1

		move x:(r2+n2),x0
		mpy y1,x0,b	a,l:tmpd0
		asr b		#-FIX_0_899976223,y0

		move l:tmpd4,a
		move a1,x1
		mpy y0,x1,a	b,l:tmpd1
		asr a		#-FIX_2_562915447,y1

		move l:tmpd5,b
		move b1,x0
		mpy y1,x0,b	a,l:tmpd4
		asr b		#-FIX_1_961570560,y0

		move l:tmpd6,a
		move a1,x1
		mpy y0,x1,a	b,l:tmpd5
		asr a		#-FIX_0_390180644,y1
		move l:z5,b
		add b,a

		move l:tmpd7,b
		move b1,x0
		mpy y1,x0,b	a,l:tmpd6
		asr b
		move l:z5,a
		add a,b
		move b,l:tmpd7

		move l:tmpd0,a
		move l:tmpd4,b
		add b,a
		move l:tmpd6,b
		add b,a
		move a,l:tmpd0

		move l:tmpd1,a
		move l:tmpd5,b
		add b,a
		move l:tmpd7,b
		add b,a
		move a,l:tmpd1

		move l:tmpd2,a
		move l:tmpd5,b
		add b,a		#>$80,y0
		move l:tmpd6,b
		add b,a		#>$ff,y1
		move a,l:tmpd2

		move l:tmpd3,a
		move l:tmpd4,b
		add b,a		#>pass2_round,x0
		move l:tmpd7,b
		add b,a		#0,x1
		move a,l:tmpd3

; Final output stage: inputs are tmpd0-d3, tmp0..tmp3
; Writeback done to r1 (set = r0 later) so r0 can be inc by pmv)
; x = 1 for rounding constant

		move l:tmp10,a
		move l:tmpd3,b
		add b,a
		add x,a
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1)
		move l:tmp10,a
		sub b,a		#$38,n1
		add x,a		l:tmpd2,b
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)

		move l:tmp11,a
		add b,a
		add x,a		#$8,n1
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)
		move l:tmp11,a
		sub b,a		#$30,n1
		add x,a		l:tmpd1,b
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)

		move l:tmp12,a
		add b,a
		add x,a		#$10,n1
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)
		move l:tmp12,a
		sub b,a		#$28,n1
		add x,a		l:tmpd0,b
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)

		move l:tmp13,a
		add b,a		#1,n0
		add x,a		#$18,n1
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)
		move l:tmp13,a
		sub b,a		#$20,n1
		add x,a		(r0)+n0
;		rep #pass2_shift
;		asl a
		add y0,a
		tmi x1,a
		cmp y1,a
		tcc y1,a
		move a1,x:(r1+n1)

; pointer advanced to next row by pmv

endcolsloop:
		nop
		move (r5)+n5	; next coeff block
		move r5,r0
enddctloop:
		nop
		rts
