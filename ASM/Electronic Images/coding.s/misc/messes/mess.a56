 ;----------------------------------------------------------------------
; DSP 4 channel Player.
; 56001 source. (very fast)
; By Martin Griffiths, August 1993
; uses $6000-$8000 in both X and Y memory...
;----------------------------------------------------------------------

IPR		EQU	$FFFF
BCR		EQU	$FFFE
PBC		EQU	$FFE0
PCC		EQU	$FFE1
PCDDR		EQU	$FFE3		; Port C data direction
PCD		EQU	$FFE5		; Port C data register
RX		EQU	$FFEF		; SSI Receive
TX		EQU	$FFEF		; SSI Transmit
SSISR		EQU	$FFEE
CRB		EQU	$FFED
CRA		EQU	$FFEC
HTX		EQU	$FFEB
HRX		EQU	$FFEB
HCR		EQU	$FFE8		; host command register
HSR		EQU	$FFE9		; host status register


tog		EQU $7FFB

	org	p:$0
	jmp	start			; -> start
	
	org	p:$c			; ssi receive data

rece_int
	jsr	rec

	org	p:$10			; ssi transmit data
	jsr	xmit

	org	p:$40
start	movep	#0,x:BCR
	movep	#1,x:PBC
	bset	#2,x:HCR		; enable host commands	
	movep	#$0c00,x:IPR		; Set the IPR for HOST COMMANDS 
	jsr	setup_player
	andi	#$f0,mr			; unmask interrupts

	nop

	move	#>tog,r5
wait4   nop
	nop
	jmp wait4
	rts

setup_player
; Setup DAC output.	
	clr	a
	move	a,x:tog
	move	a,y:tog
	
	movep	#$3c00,x:IPR		; Set the IPR for ssi interrupts, and ENABLE HOST COMMANDS HPL0,HPL1
	movep	#$4700,x:CRA		; set wordlength to 16bits and 8 words per "frame".
;	movep	#$F800,x:CRB		; transmit int enable | transmitter enable | enable network mode(word request)
;					; | receiver enable.       
	movep	#$F800,x:CRB		
	btst	#4,X:SSISR		; read SSI SR to clear TUE bit
	movep	#$1f8,x:PCC		; turn on SSI port(Port C control reg)
	movep	#0,x:PCDDR		; 
	rts

rec	movep	x:RX,y:(r5)		; get sample word
	rti

xmit
	movep	y:(r5),x:RX		; output sample word
	rti
	
	end	
