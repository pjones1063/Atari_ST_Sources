' Exemple de r‚cup‚ration de fichiers *.IGN couleur cr‚‚s avec EIKONA.
' Ce listing est librement copiable, vous pouvez en r‚cup‚rer les routines
' et les utiliser dans vos programmes personnels.
'
'       B.MARICHAL      02/93
'
RESERVE 32000
OPTION BASE 0
'
max_mtf_count&=200
new_mtf_count&=0
'
DIM stock1&(16),stock2&(16),colrs&(256)
DIM wind&(4),new_mtf%(200)
IF @init_trees=0        ! initialiser les diff‚rents arbres d'objets
  END                   ! en cas d'erreur, arreter le programme
ENDIF
'
~GRAF_MOUSE(0,0)        ! curseur = flŠche
~WIND_GET(0,4,wind&(0),wind&(1),wind&(2),wind&(3))
SUB wind&(0),1          ! modifier les dimensions du fond de l'‚cran...
SUB wind&(1),1
ADD wind&(2),2
ADD wind&(3),2
OB_X(newdesk%,0)=wind&(0)
OB_Y(newdesk%,0)=wind&(1)
OB_W(newdesk%,0)=wind&(2)
OB_H(newdesk%,0)=wind&(3)
'
~WIND_SET(0,14,(SHR(newdesk%,16) AND &HFFFF),(newdesk% AND &HFFFF),0,0)
~FORM_DIAL(3,0,0,0,0,wind&(0),wind&(1),wind&(2),wind&(3))
'                       ! le nouveau bureau est install‚ et dessin‚
MENU menu_str$()        ! activer le menu
'
REPEAT
  IF (event=0) THEN
    event=EVNT_MULTI(18,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,mx&,my&,mk&,bid&,bid&,nk&)
  ENDIF
  IF ((event AND 16)<>0)                ! ‚vŠnement 'message' ?
    IF (MENU(1)=10)                     ! clic dans le menu ???
      SELECT (MENU(5))                  ! oui, effectuer les actions requises
      CASE 23                           ! pourquoi ??? et ben parce que, na !
        ~FORM_ALERT(2,alerte$)
      CASE 32                           ! idem...
        end=1
      ENDSELECT
      MENU OFF                          ! d‚s‚lectionner le titre de menu
    ENDIF
    event=event AND (NOT 16)
  ELSE
    IF ((event AND 2)<>0)               ! ‚vŠnement 'clic' ??
      i&=OBJC_FIND(newdesk%,0,1,mx&,my&)! oui, chercher un objet
      IF (i&>0)                         ! trouv‚ ??
        ~GRAF_MKSTATE(mx&,my&,mk&,bid&) ! oui, tester le boutons gauche
        IF (mk&<>0)                     ! actif ??
          oldx&=@getx(newdesk%,i&)      ! oui, d‚placer l'icone
          oldy&=@gety(newdesk%,i&)
          ~GRAF_DRAGBOX(OB_W(newdesk%,i&),OB_H(newdesk%,i&),oldx&,oldy&,wind&(0),wind&(1),wind&(2),wind&(3),newx&,newy&)
          setx(newdesk%,i&,newx&)       ! fixer les coords
          sety(newdesk%,i&,newy&)
          ~FORM_DIAL(3,0,0,0,0,oldx&,oldy&,OB_W(newdesk%,i&),OB_H(newdesk%,i&))
          '                             ! redessiner...
          ~FORM_DIAL(3,0,0,0,0,newx&,newy&,OB_W(newdesk%,i&),OB_H(newdesk%,i&))
        ELSE                            ! redessiner ici aussi
          OB_STATE(newdesk%,i&)=OB_STATE(newdesk%,i&) XOR 1
          ~FORM_DIAL(3,0,0,0,0,@getx(newdesk%,i&),@gety(newdesk%,i&),OB_W(newdesk%,i&),OB_H(newdesk%,i&))
        ENDIF                           ! simple clic -> s‚lectionner icone
      ELSE
        ~GEMDOS(2,7)                    ! objet non trouv‚ : driIIing !
      ENDIF
      event=event AND (NOT 2)
    ENDIF
  ENDIF
UNTIL end=1
'
MENU KILL                               ! enlever le menu
rsrcc_free
~WIND_SET(0,14,0,0,0,0)                 ! remettre l'ancien bureau
END
'
FUNCTION getx(tree%,obj&)
  LOCAL x&,y&
  ~OBJC_OFFSET(tree%,obj&,x&,y&)
  RETURN x&
ENDFUNC
'
FUNCTION gety(tree%,obj&)
  LOCAL x&,y&
  ~OBJC_OFFSET(tree%,obj&,x&,y&)
  RETURN y&
ENDFUNC
'
PROCEDURE setx(tree%,obj&,x&)
  LOCAL oldx&
  oldx&=@getx(tree%,obj&)
  OB_X(tree%,obj&)=OB_X(tree%,obj&)+(x&-oldx&)
RETURN
PROCEDURE sety(tree%,obj&,y&)
  LOCAL oldy&
  oldy&=@gety(tree%,obj&)
  OB_Y(tree%,obj&)=OB_Y(tree%,obj&)+(y&-oldy&)
RETURN
'
FUNCTION rsrcc_obfix(tree%,obj&,nbpl&)
  '
  LOCAL np&,cicnp%,good_cicnp%,i&,j&,k&,l&,pix&,mtf_w&,mtf_h&,wsrc%,wdst%
  LOCAL colptr%,regw&,regl%
  '
  ~RSRC_OBFIX(tree%,obj&)               ! faire le rsrc_obfix classique
  '
  IF OB_TYPE(tree%,obj&)=33             ! si l'objet est une icone couleur...
    cicnp%=LONG{OB_SPEC(tree%,obj&)+34} ! calculer pointeur sur la liste de CICONs
    np&=0                               ! initialiser le nombre de plans id‚al … 0
    WHILE cicnp%<>0                     ! tant qu'il y a des CICONs
      IF ((WORD{cicnp%+0}>np&) AND (WORD{cicnp%+0}<=nbpl&))     ! Si ce CICON est meilleur que les autres
        np&=WORD{cicnp%+0}              ! m‚moriser son nombre de plans
        good_cicnp%=cicnp%              ! et son adresse
      ENDIF
      cicnp%=LONG{cicnp%+18}            ! et avancer d'un CICON dans la liste
    WEND
    '
    IF np&=0                            ! si aucun CICON valable n'a ‚t‚ trouv‚,
      LONG{OB_SPEC(tree%,obj&)+34}=0    ! dissimuler la liste des CICONs
    ELSE
      LONG{OB_SPEC(tree%,obj&)+34}=good_cicnp%  ! sinon, mettre le CICON trouv‚ en 1er dans la liste
      LONG{good_cicnp%+18}=0                    ! et cacher le reste de la liste
      '
      IF (np&<>nbpl&)                           ! Si le motif n'est pas adapt‚ au mode vid‚o actuel
        mtf_w&=WORD{OB_SPEC(tree%,obj&)+22}     ! enregistrer largeur du motif
        mtf_h&=WORD{OB_SPEC(tree%,obj&)+24}     ! enregistrer hauteur du motif
        '
        FOR mtf&=0 TO 1                         ! pour chacun des motifs de l'icone
          SELECT mtf&
          CASE 0
            wsrc%=LONG{good_cicnp%+2}           ! pointeur source sur le motif normal
          CASE 1
            wsrc%=LONG{good_cicnp%+10}          ! pointeur source sur le motif s‚lectionn‚
          ENDSELECT
          '
          IF wsrc%<>0                           ! s'il y a un motif
            IF new_mtf_count&>=max_mtf_count&   ! et qu'il ne reste pas une place dans le tableau
              RETURN 0                          ! retourner un code d'erreur
            ENDIF
            new_mtf%(new_mtf_count&)=MALLOC(nbpl&*INT((mtf_w&+15)/16)*mtf_h&*2)
            wdst%=new_mtf%(new_mtf_count&)      ! sinon, allouer
            IF wdst%=0                          ! s'il y a eu erreur
              RETURN 0                          ! retourner un code d'erreur
            ELSE
              '
              SELECT mtf&
              CASE 0
                LONG{good_cicnp%+2}=wdst%       ! actualiser les donn‚es du CICON
                WORD{good_cicnp%}=nbpl&
              CASE 1
                LONG{good_cicnp%+10}=wdst%
              ENDSELECT
            ENDIF
            '
            INC new_mtf_count&                  ! Actualiser le nombre d'entr‚es dans le tableau
            '
            IF (nbpl&=16)
              FOR regw&=0 TO 255
                regl%=LPEEK(&HFFFF9800+regw&*4)
                hi%=CARD(SWAP(regl%))
                hi%=SHL(OR(AND(SHR(hi%,3),&X1111100000),AND(hi%,&X11111)),6)
                lo%=AND(CARD(regl%),&X11111)
                tc_color%=OR(hi%,lo%)
                colrs&(regw&)=INT{V:tc_color%+2}
              NEXT regw&
            ENDIF
            '
            '
            FOR j&=0 TO mtf_h&-1                ! pour chaque ligne
              '
              FOR i&=0 TO INT((mtf_w&+15)/16)-1 ! pour chaque mot de la ligne
                '
                FOR k&=0 TO np&-1         ! lire np& plans de bits
                  stock1&(k&)=WORD{wsrc%} ! les stocker dans un tableau
                  ADD wsrc%,2
                NEXT k&
                '
                colptr%=V:stock2&(0)
                FOR pix&=0 TO 15                ! pour 16 pixels
                  '
                  regw&=0
                  FOR k&=np&-1 TO 0 STEP -1     ! pour les np& plans pris … l'envers
                    regw&=SHL&(regw&,1)           ! pr‚d‚caler la valeur du registre
                    IF (stock1&(k&) AND &H8000)<>0
                      regw&=regw& OR 1            ! si le bit est … 1, modifier reg&
                    ENDIF
                    stock1&(k&)=SHL&(stock1&(k&),1) !d‚caler l'‚l‚ment du tableau
                  NEXT k&
                  '
                  IF regw&=NOT (SHL&(&HFFFF,np&))           ! si le registre est la couleur noire
                    regw&=NOT (SHL&(&HFFFF,MIN(nbpl&,8)))   ! modifier pour avoir encore la couleur noire dans la nouvelle r‚s.
                  ENDIF
                  '
                  IF (nbpl&<>16)
                    FOR k&=0 TO nbpl&-1                   ! pour nbpl& plans de bits
                      stock2&(k&)=SHL&(stock2&(k&),1)     ! pr‚d‚caler l'‚l‚ment de tableau destination
                      IF (regw& AND 1)<>0                  ! si 1er bit … 1
                        stock2&(k&)=stock2&(k&) OR 1      ! modifier l'‚l‚ment
                      ENDIF
                      regw&=SHR&(regw&,1)                   ! d‚caler le registre
                    NEXT k&
                  ELSE
                    INT{colptr%}=colrs&(regw&)
                    colptr%=colptr%+2
                  ENDIF
                NEXT pix&
                '
                FOR l&=0 TO nbpl&-1             ! pour les nbpl& nouveaux plans de bits
                  CARD{wdst%}=stock2&(l&)       ! ‚crire les plans
                  ADD wdst%,2
                NEXT l&
                '
              NEXT i&
            NEXT j&
          ENDIF
        NEXT mtf&
      ENDIF
    ENDIF
  ENDIF
  RETURN 1
ENDFUNC
'
PROCEDURE rsrcc_free
  IF (new_mtf_count&)
    REPEAT
      DEC new_mtf_count&
      ~MFREE(new_mtf%(new_mtf_count&))
    UNTIL new_mtf_count&=0
  ENDIF
RETURN
'
FUNCTION init_trees
  '
  LOCAL nbpl&
  '
  CONTRL(0)=102
  CONTRL(1)=0
  CONTRL(3)=1
  INTIN(0)=1
  VDISYS                ! ex‚cuter fonction vq_extnd
  nbpl&=INTOUT(4)       ! r‚cup‚rer le nombre de plans actuel
  '
  ' >>>>>>>>>>> Chaine d'alerte <<<<<<<<<<<<
  '
  alerte$="[0][ Programme de d‚monstration  |d'utilisation  des  fichiers|*.IGN cr‚‚s avec EIKONA| Vous  pouvez  d‚placer  et|s‚lectionner les ic“nes...][DEMO3.GFA|   OK   ]"
  '
  '
  ' >>>>>>>>> D‚finition du menu <<<<<<<<<<<
  '
  DIM menu_str$(13)
  '
  menu_data:
  '
  DATA "","  A propos de cet exemple...  ","------------------------------",1,2,3,4,5,6,
  DATA " Fichiers","  Quitter  ",
  DATA "*"
  '
  RESTORE menu_data
  '
  i&=0
  READ a$
  WHILE a$<>"*"
    menu_str$(i&)=a$
    INC i&
    READ a$
  WEND
  '
  '
  ' >>>>>>>>>>>> D‚finition de l'iconblock la 1Šre icone <<<<<<<<<<<<<<
  '
  DIM leop_d&(64),leop_m&(64),leop_cicb&(19)
  DIM leop1pn_d&(64),leop1pn_m&(64),leop1ps_d&(64),leop1ps_m&(64)
  DIM leop2pn_d&(128),leop2pn_m&(64),leop2ps_d&(128),leop2ps_m&(64)
  DIM leop4pn_d&(256),leop4pn_m&(64),leop4ps_d&(256),leop4ps_m&(64)
  DIM cicn_leop_1p&(11),cicn_leop_2p&(11),cicn_leop_4p&(11)
  '
  ' et oui, tooOUUut ‡a !!!
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop_d_pl&=1
  leop_m_pl&=1
  '
  leop_w&=&H20
  leop_h&=&H20
  leop_d_size&=&H40
  leop_m_size&=&H40
  '
  leop_d:
  DATA &h0000, &h0000, &h0000, &h0FE0
  DATA &h08BA, &h11C0, &h04FE, &h2000
  DATA &h1CFE, &h1FE0, &h0E7C, &h0010
  DATA &h1FFF, &hFC10, &h0FFF, &hFFE0
  DATA &h13FF, &hFF80, &h007F, &hFF80
  DATA &h003F, &hCFC0, &h007F, &h1FC0
  DATA &h0070, &h3DC0, &h01F0, &h7BE0
  DATA &h02F0, &hBDE0, &h00A8, &h2950
  DATA &h0000, &h0000, &h0000, &h0FE0
  DATA &h08BA, &h11C0, &h04FE, &h2000
  DATA &h1CFE, &h1FE0, &h0E7C, &h0010
  DATA &h1FFF, &hFC10, &h0FFF, &hFFE0
  DATA &h13FF, &hFF80, &h007F, &hFF80
  DATA &h003F, &hCFC0, &h007F, &h1FC0
  DATA &h0070, &h3DC0, &h01F0, &h7BE0
  DATA &h02F0, &hBDE0, &h00A8, &h2950
  '
  leop_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop_d                ! remplir les tableaux du moyif monochrome
  '
  FOR i&=0 TO leop_d_size&-1
    READ a$
    WORD{V:leop_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop_m
  '
  FOR i&=0 TO leop_m_size&-1
    READ a$
    WORD{V:leop_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop1pn_d_pl&=1
  leop1pn_m_pl&=1
  '
  leop1pn_w&=&H20
  leop1pn_h&=&H20
  leop1pn_d_size&=&H40
  leop1pn_m_size&=&H40
  '
  leop1pn_d:
  DATA &h0000, &h0000, &h0000, &h0FE0
  DATA &h08BA, &h11C0, &h04FE, &h2000
  DATA &h1CFE, &h1FE0, &h0E7C, &h0010
  DATA &h1FFF, &hFC10, &h0FFF, &hFFE0
  DATA &h13FF, &hFF80, &h007F, &hFF80
  DATA &h003F, &hCFC0, &h007F, &h1FC0
  DATA &h0070, &h3DC0, &h01F0, &h7BE0
  DATA &h02F0, &hBDE0, &h00A8, &h2950
  DATA &h0000, &h0000, &h0000, &h0FE0
  DATA &h08BA, &h11C0, &h04FE, &h2000
  DATA &h1CFE, &h1FE0, &h0E7C, &h0010
  DATA &h1FFF, &hFC10, &h0FFF, &hFFE0
  DATA &h13FF, &hFF80, &h007F, &hFF80
  DATA &h003F, &hCFC0, &h007F, &h1FC0
  DATA &h0070, &h3DC0, &h01F0, &h7BE0
  DATA &h02F0, &hBDE0, &h00A8, &h2950
  '
  leop1pn_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop1pn_d             ! remplir les tableaux du motif 1 plan normal
  '
  FOR i&=0 TO leop1pn_d_size&-1
    READ a$
    WORD{V:leop1pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop1pn_m
  '
  FOR i&=0 TO leop1pn_m_size&-1
    READ a$
    WORD{V:leop1pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop1ps_d_pl&=1
  leop1ps_m_pl&=1
  '
  leop1ps_w&=&H20
  leop1ps_h&=&H20
  leop1ps_d_size&=&H40
  leop1ps_m_size&=&H40
  '
  leop1ps_d:
  DATA &h0000, &h0000, &h0000, &h01FC
  DATA &h02E8, &h0238, &h0358, &h0400
  DATA &h03F8, &h03E0, &h01F0, &h0010
  DATA &h67FF, &hF010, &h3FFF, &hFFE0
  DATA &h7FFF, &hFE00, &h39FF, &hFE00
  DATA &h50FF, &h3F00, &h01FC, &h7F00
  DATA &h01C0, &hF700, &h07C1, &hEF80
  DATA &h0BC2, &hF780, &h02A0, &hA540
  DATA &h0000, &h0000, &h0000, &h01FC
  DATA &h02E8, &h0238, &h0358, &h0400
  DATA &h03F8, &h03E0, &h01F0, &h0010
  DATA &h67FF, &hF010, &h3FFF, &hFFE0
  DATA &h7FFF, &hFE00, &h39FF, &hFE00
  DATA &h50FF, &h3F00, &h01FC, &h7F00
  DATA &h01C0, &hF700, &h07C1, &hEF80
  DATA &h0BC2, &hF780, &h02A0, &hA540
  '
  leop1ps_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop1ps_d             ! remplir les tableaux du motif 1 plan s‚lect.
  '
  FOR i&=0 TO leop1ps_d_size&-1
    READ a$
    WORD{V:leop1ps_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop1ps_m
  '
  FOR i&=0 TO leop1ps_m_size&-1
    READ a$
    WORD{V:leop1ps_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop2pn_d_pl&=2
  leop2pn_m_pl&=1
  '
  leop2pn_w&=&H20
  leop2pn_h&=&H20
  leop2pn_d_size&=&H80
  leop2pn_m_size&=&H40
  '
  leop2pn_d:
  DATA &h1FFF, &h0000, &hFFF8, &h0000, &h7FFF, &h0000, &hFFFE, &h0FE0
  DATA &h7FFF, &h08BA, &hFFFE, &h11C0, &hFFFF, &h04FE, &hFFFF, &h2000
  DATA &hFFFF, &h1CFE, &hFFFF, &h1FE0, &hFFFF, &h0E7C, &hFFFF, &h0010
  DATA &hFFFF, &h1FFF, &hFFFF, &hFC10, &hFFFF, &h0FFF, &hFFFF, &hFFE0
  DATA &hFFFF, &h13FF, &hFFFF, &hFF80, &hFFFF, &h007F, &hFFFF, &hFF80
  DATA &hFFFF, &h003F, &hFFFF, &hCFC0, &hFFFF, &h007F, &hFFFF, &h1FC0
  DATA &hFFFF, &h0070, &hFFFF, &h3DC0, &hFFFF, &h01F0, &hFFFF, &h7BE0
  DATA &hFFFF, &h02F0, &hFFFF, &hBDE0, &hFFFF, &h00A8, &hFFFF, &h2950
  DATA &hFFFF, &h0000, &hFFFF, &h0000, &hFFFF, &h0000, &hFFFF, &h0FE0
  DATA &hFFFF, &h08BA, &hFFFF, &h11C0, &hFFFF, &h04FE, &hFFFF, &h2000
  DATA &hFFFF, &h1CFE, &hFFFF, &h1FE0, &hFFFF, &h0E7C, &hFFFF, &h0010
  DATA &hFFFF, &h1FFF, &hFFFF, &hFC10, &hFFFF, &h0FFF, &hFFFF, &hFFE0
  DATA &hFFFF, &h13FF, &hFFFF, &hFF80, &hFFFF, &h007F, &hFFFF, &hFF80
  DATA &hFFFF, &h003F, &hFFFF, &hCFC0, &hFFFF, &h007F, &hFFFF, &h1FC0
  DATA &hFFFF, &h0070, &hFFFF, &h3DC0, &h7FFF, &h01F0, &hFFFE, &h7BE0
  DATA &h7FFF, &h02F0, &hFFFE, &hBDE0, &h1FFF, &h00A8, &hFFF8, &h2950
  '
  leop2pn_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop2pn_d             ! remplir les tableaux du motif 2 plans normal
  '
  FOR i&=0 TO leop2pn_d_size&-1
    READ a$
    WORD{V:leop2pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop2pn_m
  '
  FOR i&=0 TO leop2pn_m_size&-1
    READ a$
    WORD{V:leop2pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop2ps_d_pl&=2
  leop2ps_m_pl&=1
  '
  leop2ps_w&=&H20
  leop2ps_h&=&H20
  leop2ps_d_size&=&H80
  leop2ps_m_size&=&H40
  '
  leop2ps_d:
  DATA &h0000, &h1FFF, &h0000, &hFFF8, &h0000, &h7FFF, &h01FC, &hFFFE
  DATA &h02E8, &h7FFF, &h0238, &hFFFE, &h03F8, &hFF5F, &h0400, &hFFFF
  DATA &h03F8, &hFFFF, &h03E0, &hFFFF, &h01F0, &hFFFF, &h0010, &hFFFF
  DATA &h67FF, &hFFFF, &hF010, &hFFFF, &h3FFF, &hFFFF, &hFFE0, &hFFFF
  DATA &h7FFF, &hFFFF, &hFE00, &hFFFF, &h39FF, &hFFFF, &hFE00, &hFFFF
  DATA &h50FF, &hFFFF, &h3F00, &hFFFF, &h01FC, &hFFFF, &h7F00, &hFFFF
  DATA &h01C0, &hFFFF, &hF700, &hFFFF, &h07C1, &hFFFF, &hEF80, &hFFFF
  DATA &h0BC2, &hFFFF, &hF780, &hFFFF, &h02A0, &hFFFF, &hA540, &hFFFF
  DATA &h0000, &hFFFF, &h0000, &hFFFF, &h0000, &hFFFF, &h01FC, &hFFFF
  DATA &h02E8, &hFFFF, &h0238, &hFFFF, &h03F8, &hFF5F, &h0400, &hFFFF
  DATA &h03F8, &hFFFF, &h03E0, &hFFFF, &h01F0, &hFFFF, &h0010, &hFFFF
  DATA &h67FF, &hFFFF, &hF010, &hFFFF, &h3FFF, &hFFFF, &hFFE0, &hFFFF
  DATA &h7FFF, &hFFFF, &hFE00, &hFFFF, &h39FF, &hFFFF, &hFE00, &hFFFF
  DATA &h50FF, &hFFFF, &h3F00, &hFFFF, &h01FC, &hFFFF, &h7F00, &hFFFF
  DATA &h01C0, &hFFFF, &hF700, &hFFFF, &h07C1, &h7FFF, &hEF80, &hFFFE
  DATA &h0BC2, &h7FFF, &hF780, &hFFFE, &h02A0, &h1FFF, &hA540, &hFFF8
  '
  leop2ps_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop2ps_d             ! remplir les tableaux du motif 2 plans s‚lect.
  '
  FOR i&=0 TO leop2ps_d_size&-1
    READ a$
    WORD{V:leop2ps_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop2ps_m
  '
  FOR i&=0 TO leop2ps_m_size&-1
    READ a$
    WORD{V:leop2ps_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop4pn_d_pl&=4
  leop4pn_m_pl&=1
  '
  leop4pn_w&=&H20
  leop4pn_h&=&H20
  leop4pn_d_size&=&H100
  leop4pn_m_size&=&H40
  '
  leop4pn_d:
  DATA &h1FFF, &h0000, &h0000, &h0000, &hFFF8, &h0000, &h0000, &h0000, &h7FFF, &h0000, &h0000, &h0000, &hFFFE, &h0FE0, &h0000, &h0000
  DATA &h7FFF, &h08BA, &h0000, &h0000, &hFFFE, &h11C0, &h0000, &h0000, &hFFFF, &h04FE, &h0000, &h0000, &hFFFF, &h2000, &h0000, &h0000
  DATA &hFFFF, &h1CFE, &h0000, &h0000, &hFFFF, &h1FE0, &h0000, &h0000, &hFFFF, &h0E38, &h0000, &h0044, &hFFFF, &h0010, &h0000, &h0000
  DATA &hFFFF, &h1FD7, &h0000, &h0028, &hFFFF, &hFC10, &h0000, &h0000, &hFFFF, &h0FEF, &h0000, &h0010, &hFFFF, &hFFE0, &h0000, &h0000
  DATA &hFFFF, &h13BF, &h0040, &h0000, &hFFFF, &hFF80, &h0000, &h0000, &hFFFF, &h003F, &h0000, &h0040, &hFFFF, &hFF80, &h0000, &h0000
  DATA &hFFFF, &h001F, &h0000, &h0020, &hFFFF, &hC7C0, &h0800, &h0000, &hFFFF, &h007F, &h0000, &h0000, &hFFFF, &h1BC0, &h0000, &h0400
  DATA &hFFFF, &h0070, &h0000, &h0000, &hFFFF, &h3DC0, &h0000, &h0000, &hFFFF, &h01F0, &h0000, &h0000, &hFFFF, &h7BE0, &h0000, &h0000
  DATA &hFFFF, &h02F0, &h0000, &h0000, &hFFFF, &hBDE0, &h0000, &h0000, &hFFFF, &h00A8, &h0000, &h0000, &hFFFF, &h2950, &h0000, &h0000
  DATA &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h0FE0, &h0000, &h0000
  DATA &hFFFF, &h08BA, &h0000, &h0000, &hFFFF, &h11C0, &h0000, &h0000, &hFFFF, &h04FE, &h0000, &h0000, &hFFFF, &h2000, &h0000, &h0000
  DATA &hFFFF, &h1CFE, &h0000, &h0000, &hFFFF, &h1FE0, &h0000, &h0000, &hFFFF, &h0E38, &h0000, &h0044, &hFFFF, &h0010, &h0000, &h0000
  DATA &hFFFF, &h1FD7, &h0000, &h0028, &hFFFF, &hFC10, &h0000, &h0000, &hFFFF, &h0FEF, &h0000, &h0010, &hFFFF, &hFFE0, &h0000, &h0000
  DATA &hFFFF, &h13BF, &h0040, &h0000, &hFFFF, &hFF80, &h0000, &h0000, &hFFFF, &h003F, &h0000, &h0040, &hFFFF, &hFF80, &h0000, &h0000
  DATA &hFFFF, &h001F, &h0000, &h0020, &hFFFF, &hC7C0, &h0800, &h0000, &hFFFF, &h007F, &h0000, &h0000, &hFFFF, &h1BC0, &h0000, &h0400
  DATA &hFFFF, &h0070, &h0000, &h0000, &hFFFF, &h3DC0, &h0000, &h0000, &h7FFF, &h01F0, &h0000, &h0000, &hFFFE, &h7BE0, &h0000, &h0000
  DATA &h7FFF, &h02F0, &h0000, &h0000, &hFFFE, &hBDE0, &h0000, &h0000, &h1FFF, &h00A8, &h0000, &h0000, &hFFF8, &h2950, &h0000, &h0000
  '
  leop4pn_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop4pn_d             ! etc, etc, ...
  '
  FOR i&=0 TO leop4pn_d_size&-1
    READ a$
    WORD{V:leop4pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop4pn_m
  '
  FOR i&=0 TO leop4pn_m_size&-1
    READ a$
    WORD{V:leop4pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  leop4ps_d_pl&=4
  leop4ps_m_pl&=1
  '
  leop4ps_w&=&H20
  leop4ps_h&=&H20
  leop4ps_d_size&=&H100
  leop4ps_m_size&=&H40
  '
  leop4ps_d:
  DATA &h1FFF, &h0000, &h0000, &h0000, &hFFF8, &h0000, &h0000, &h0000, &h7FFF, &h0000, &h0000, &h0000, &hFFFE, &h01FC, &h0000, &h0000
  DATA &h7FFF, &h02E8, &h0000, &h0000, &hFFFE, &h0238, &h0000, &h0000, &hFFFF, &h0358, &h0000, &h0000, &hFFFF, &h0400, &h0000, &h0000
  DATA &hFFFF, &h03F8, &h0000, &h0000, &hFFFF, &h03E0, &h0000, &h0000, &hFFFF, &h00E0, &h0000, &h0110, &hFFFF, &h0010, &h0000, &h0000
  DATA &hFFFF, &h675F, &h0000, &h00A0, &hFFFF, &hF010, &h0000, &h0000, &hFFFF, &h3FBF, &h0000, &h0040, &hFFFF, &hFFE0, &h0000, &h0000
  DATA &hFFFF, &h7EFF, &h0100, &h0000, &hFFFF, &hFE00, &h0000, &h0000, &hFFFF, &h38FF, &h0000, &h0100, &hFFFF, &hFE00, &h0000, &h0000
  DATA &hFFFF, &h507F, &h0000, &h0080, &hFFFF, &h1F00, &h2000, &h0000, &hFFFF, &h01FC, &h0000, &h0000, &hFFFF, &h6F00, &h0000, &h1000
  DATA &hFFFF, &h01C0, &h0000, &h0000, &hFFFF, &hF700, &h0000, &h0000, &hFFFF, &h07C1, &h0000, &h0000, &hFFFF, &hEF80, &h0000, &h0000
  DATA &hFFFF, &h0BC2, &h0000, &h0000, &hFFFF, &hF780, &h0000, &h0000, &hFFFF, &h02A0, &h0000, &h0000, &hFFFF, &hA540, &h0000, &h0000
  DATA &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h0000, &h0000, &h0000, &hFFFF, &h01FC, &h0000, &h0000
  DATA &hFFFF, &h02E8, &h0000, &h0000, &hFFFF, &h0238, &h0000, &h0000, &hFFFF, &h0358, &h0000, &h0000, &hFFFF, &h0400, &h0000, &h0000
  DATA &hFFFF, &h03F8, &h0000, &h0000, &hFFFF, &h03E0, &h0000, &h0000, &hFFFF, &h00E0, &h0000, &h0110, &hFFFF, &h0010, &h0000, &h0000
  DATA &hFFFF, &h675F, &h0000, &h00A0, &hFFFF, &hF010, &h0000, &h0000, &hFFFF, &h3FBF, &h0000, &h0040, &hFFFF, &hFFE0, &h0000, &h0000
  DATA &hFFFF, &h7EFF, &h0100, &h0000, &hFFFF, &hFE00, &h0000, &h0000, &hFFFF, &h38FF, &h0000, &h0100, &hFFFF, &hFE00, &h0000, &h0000
  DATA &hFFFF, &h507F, &h0000, &h0080, &hFFFF, &h1F00, &h2000, &h0000, &hFFFF, &h01FC, &h0000, &h0000, &hFFFF, &h6F00, &h0000, &h1000
  DATA &hFFFF, &h01C0, &h0000, &h0000, &hFFFF, &hF700, &h0000, &h0000, &h7FFF, &h07C1, &h0000, &h0000, &hFFFE, &hEF80, &h0000, &h0000
  DATA &h7FFF, &h0BC2, &h0000, &h0000, &hFFFE, &hF780, &h0000, &h0000, &h1FFF, &h02A0, &h0000, &h0000, &hFFF8, &hA540, &h0000, &h0000
  '
  leop4ps_m:
  DATA &h1FFF, &hFFF8, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &hFFFF, &hFFFF
  DATA &hFFFF, &hFFFF, &h7FFF, &hFFFE
  DATA &h7FFF, &hFFFE, &h1FFF, &hFFF8
  '
  RESTORE leop4ps_d
  '
  FOR i&=0 TO leop4ps_d_size&-1
    READ a$
    WORD{V:leop4ps_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE leop4ps_m
  '
  FOR i&=0 TO leop4ps_m_size&-1
    READ a$
    WORD{V:leop4ps_m&(i&)}=VAL(a$)
  NEXT i&
  '
  '
  DIM leop_str|(13)     ! fixer le texte de l'icone en m‚moire
  leop_str$="L‚opards"
  cptr%=*leop_str$
  i&=WORD{cptr%+4}
  cptr%=LONG{cptr%}
  FOR j&=0 TO i&-1
    leop_str|(j&)=BYTE{cptr%}
    INC cptr%
  NEXT j&
  '
  '
  LONG{V:leop_cicb&(0)}=V:leop_m&(0)    ! init. du CICONBLK
  LONG{V:leop_cicb&(2)}=V:leop_d&(0)
  LONG{V:leop_cicb&(4)}=V:leop_str|(0)
  leop_cicb&(6)=&H1000
  leop_cicb&(7)=0
  leop_cicb&(8)=0
  leop_cicb&(9)=22
  leop_cicb&(10)=0
  leop_cicb&(11)=leop_w&
  leop_cicb&(12)=leop_h&
  leop_cicb&(13)=0
  leop_cicb&(14)=32
  leop_cicb&(15)=74
  leop_cicb&(16)=8
  LONG{V:leop_cicb&(17)}=V:cicn_leop_1p&(0)     ! pointeur sur le 1er CICON
  '
  cicn_leop_1p&(0)=leop1pn_d_pl&                ! init du 1er CICON
  LONG{V:cicn_leop_1p&(1)}=V:leop1pn_d&(0)
  LONG{V:cicn_leop_1p&(3)}=V:leop1pn_m&(0)
  LONG{V:cicn_leop_1p&(5)}=V:leop1ps_d&(0)
  LONG{V:cicn_leop_1p&(7)}=V:leop1ps_m&(0)
  LONG{V:cicn_leop_1p&(9)}=V:cicn_leop_2p&(0)
  '
  cicn_leop_2p&(0)=leop2pn_d_pl&                ! init du 2nd CICON
  LONG{V:cicn_leop_2p&(1)}=V:leop2pn_d&(0)
  LONG{V:cicn_leop_2p&(3)}=V:leop2pn_m&(0)
  LONG{V:cicn_leop_2p&(5)}=V:leop2ps_d&(0)
  LONG{V:cicn_leop_2p&(7)}=V:leop2ps_m&(0)
  LONG{V:cicn_leop_2p&(9)}=V:cicn_leop_4p&(0)
  '
  cicn_leop_4p&(0)=leop4pn_d_pl&                ! init du dernier CICON
  LONG{V:cicn_leop_4p&(1)}=V:leop4pn_d&(0)
  LONG{V:cicn_leop_4p&(3)}=V:leop4pn_m&(0)
  LONG{V:cicn_leop_4p&(5)}=V:leop4ps_d&(0)
  LONG{V:cicn_leop_4p&(7)}=V:leop4ps_m&(0)
  LONG{V:cicn_leop_4p&(9)}=0
  '
  '
  ' >>>>>>>>>>>> D‚finition de l'iconblock la 2nde icone <<<<<<<<<<<<<<
  '
  DIM logo_d&(64),logo_m&(64),logo_cicb&(19)
  DIM logo1pn_d&(64),logo1pn_m&(64),logo1ps_d&(64),logo1ps_m&(64)
  DIM logo2pn_d&(128),logo2pn_m&(64),logo2ps_d&(128),logo2ps_m&(64)
  DIM logo4pn_d&(256),logo4pn_m&(64),logo4ps_d&(256),logo4ps_m&(64)
  DIM cicn_logo_1p&(11),cicn_logo_2p&(11),cicn_logo_4p&(11)
  '
  ' Et c'est r'parti, tralala...
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  logo_d_pl&=1
  logo_m_pl&=1
  '
  logo_w&=&H20
  logo_h&=&H20
  logo_d_size&=&H40
  logo_m_size&=&H40
  '
  logo_d:
  DATA &h0001, &h0000, &h0002, &h8000
  DATA &h0004, &h4000, &h0008, &h2000
  DATA &h0010, &h1000, &h0020, &h0800
  DATA &h0040, &h0400, &h0080, &h0200
  DATA &h0100, &h0100, &h0200, &h0080
  DATA &h0480, &h0040, &h0940, &h0020
  DATA &h1220, &h0010, &h2438, &h0008
  DATA &h4845, &hBF04, &h90B3, &hC082
  DATA &h49F9, &h8041, &h24B1, &h3022
  DATA &h12C1, &hC814, &h097E, &h7F8F
  DATA &h0482, &h3007, &h0201, &h0007
  DATA &h0100, &h8007, &h0080, &h6007
  DATA &h0040, &h1FE7, &h0020, &h021F
  DATA &h0010, &h0407, &h0008, &h0800
  DATA &h0004, &h1000, &h0002, &h2000
  DATA &h0001, &h4000, &h0000, &h8000
  '
  logo_m:
  DATA &h0000, &h0000, &h0001, &h0000
  DATA &h0003, &h8000, &h0007, &hC000
  DATA &h000F, &hE000, &h001F, &hF000
  DATA &h003F, &hF800, &h007F, &hFC00
  DATA &h00FF, &hFE00, &h01FF, &hFF00
  DATA &h037F, &hFF80, &h06BF, &hFFC0
  DATA &h0DDF, &hFFE0, &h1BC7, &hFFF0
  DATA &h37BA, &h40F8, &h6F4C, &h3F7C
  DATA &h3606, &h7FBE, &h1B4E, &hCFDC
  DATA &h0D3E, &h37E8, &h0681, &h8070
  DATA &h037D, &hCFF8, &h01FE, &hFFF8
  DATA &h00FF, &h7FF8, &h007F, &h9FF8
  DATA &h003F, &hE018, &h001F, &hFC00
  DATA &h000F, &hF800, &h0007, &hF000
  DATA &h0003, &hE000, &h0001, &hC000
  DATA &h0000, &h8000, &h0000, &h0000
  '
  RESTORE logo_d
  '
  FOR i&=0 TO logo_d_size&-1
    READ a$
    WORD{V:logo_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE logo_m
  '
  FOR i&=0 TO logo_m_size&-1
    READ a$
    WORD{V:logo_m&(i&)}=VAL(a$)
  NEXT i&
  '
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  logo1pn_d_pl&=1
  logo1pn_m_pl&=1
  '
  logo1pn_w&=&H20
  logo1pn_h&=&H20
  logo1pn_d_size&=&H40
  logo1pn_m_size&=&H40
  '
  logo1pn_d:
  DATA &h0001, &h0000, &h0002, &h8000
  DATA &h0004, &h4000, &h0008, &h2000
  DATA &h0010, &h1000, &h0020, &h0800
  DATA &h0040, &h0400, &h0080, &h0200
  DATA &h0100, &h0100, &h0200, &h0080
  DATA &h0480, &h0040, &h0940, &h0020
  DATA &h1220, &h0010, &h2438, &h0008
  DATA &h4845, &hBF04, &h90B3, &hC082
  DATA &h49F9, &h8041, &h24B1, &h3022
  DATA &h12C1, &hC814, &h097E, &h7F8F
  DATA &h0482, &h3007, &h0201, &h0007
  DATA &h0100, &h8007, &h0080, &h6007
  DATA &h0040, &h1FE7, &h0020, &h021F
  DATA &h0010, &h0407, &h0008, &h0800
  DATA &h0004, &h1000, &h0002, &h2000
  DATA &h0001, &h4000, &h0000, &h8000
  '
  logo1pn_m:
  DATA &h0000, &h0000, &h0001, &h0000
  DATA &h0003, &h8000, &h0007, &hC000
  DATA &h000F, &hE000, &h001F, &hF000
  DATA &h003F, &hF800, &h007F, &hFC00
  DATA &h00FF, &hFE00, &h01FF, &hFF00
  DATA &h037F, &hFF80, &h06BF, &hFFC0
  DATA &h0DDF, &hFFE0, &h1BC7, &hFFF0
  DATA &h37BA, &h40F8, &h6F4C, &h3F7C
  DATA &h3606, &h7FBE, &h1B4E, &hCFDC
  DATA &h0D3E, &h37E8, &h0681, &h8070
  DATA &h037D, &hCFF8, &h01FE, &hFFF8
  DATA &h00FF, &h7FF8, &h007F, &h9FF8
  DATA &h003F, &hE018, &h001F, &hFC00
  DATA &h000F, &hF800, &h0007, &hF000
  DATA &h0003, &hE000, &h0001, &hC000
  DATA &h0000, &h8000, &h0000, &h0000
  '
  RESTORE logo1pn_d
  '
  FOR i&=0 TO logo1pn_d_size&-1
    READ a$
    WORD{V:logo1pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE logo1pn_m
  '
  FOR i&=0 TO logo1pn_m_size&-1
    READ a$
    WORD{V:logo1pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  logo2pn_d_pl&=2
  logo2pn_m_pl&=1
  '
  logo2pn_w&=&H20
  logo2pn_h&=&H20
  logo2pn_d_size&=&H80
  logo2pn_m_size&=&H40
  '
  logo2pn_d:
  DATA &h0001, &h0001, &h0000, &h0000, &h0003, &h0002, &h8000, &h8000
  DATA &h0007, &h0004, &hC000, &h4000, &h000F, &h0008, &hE000, &h2000
  DATA &h001F, &h0010, &hF000, &h1000, &h003F, &h0020, &hF800, &h0800
  DATA &h007F, &h0040, &hFC00, &h0400, &h00FF, &h0080, &hFE00, &h0200
  DATA &h01FF, &h0100, &hFF00, &h0100, &h03FF, &h0200, &hFF80, &h0080
  DATA &h07FF, &h0480, &hFFC0, &h0040, &h0F7F, &h09C0, &hFFE0, &h0020
  DATA &h1E3F, &h13E0, &hFFF0, &h0010, &h3C3F, &h27F8, &hFFF8, &h0008
  DATA &h7847, &h4FC5, &hFFFC, &hBF04, &hF0B3, &h9FB3, &hC0FE, &hC082
  DATA &h79F9, &h4FF9, &h807F, &h8041, &h3CB1, &h27B1, &h303E, &h3022
  DATA &h1EC1, &h13C1, &hF81C, &hC814, &h0F7E, &h09FE, &h7F8F, &h7F8F
  DATA &h07FE, &h0482, &h3007, &h3007, &h03FF, &h0201, &h0007, &h0007
  DATA &h01FF, &h0100, &h8007, &h8007, &h00FF, &h0080, &hE007, &h6007
  DATA &h007F, &h0040, &hFFE7, &h1FE7, &h003F, &h0020, &hFE1F, &h021F
  DATA &h001F, &h0010, &hFC07, &h0407, &h000F, &h0008, &hF800, &h0800
  DATA &h0007, &h0004, &hF000, &h1000, &h0003, &h0002, &hE000, &h2000
  DATA &h0001, &h0001, &hC000, &h4000, &h0000, &h0000, &h8000, &h8000
  '
  logo2pn_m:
  DATA &h0000, &h0000, &h0001, &h0000
  DATA &h0003, &h8000, &h0007, &hC000
  DATA &h000F, &hE000, &h001F, &hF000
  DATA &h003F, &hF800, &h007F, &hFC00
  DATA &h00FF, &hFE00, &h01FF, &hFF00
  DATA &h037F, &hFF80, &h06BF, &hFFC0
  DATA &h0DDF, &hFFE0, &h1BC7, &hFFF0
  DATA &h37BA, &h40F8, &h6F4C, &h3F7C
  DATA &h3606, &h7FBE, &h1B4E, &hCFDC
  DATA &h0D3E, &h37E8, &h0681, &h8070
  DATA &h037D, &hCFF8, &h01FE, &hFFF8
  DATA &h00FF, &h7FF8, &h007F, &h9FF8
  DATA &h003F, &hE018, &h001F, &hFC00
  DATA &h000F, &hF800, &h0007, &hF000
  DATA &h0003, &hE000, &h0001, &hC000
  DATA &h0000, &h8000, &h0000, &h0000
  '
  RESTORE logo2pn_d
  '
  FOR i&=0 TO logo2pn_d_size&-1
    READ a$
    WORD{V:logo2pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE logo2pn_m
  '
  FOR i&=0 TO logo2pn_m_size&-1
    READ a$
    WORD{V:logo2pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  '
  ' Fichier de d‚finition d'ic“ne EIKONA
  '
  logo4pn_d_pl&=4
  logo4pn_m_pl&=1
  '
  logo4pn_w&=&H20
  logo4pn_h&=&H20
  logo4pn_d_size&=&H100
  logo4pn_m_size&=&H40
  '
  logo4pn_d:
  DATA &h0001, &h0001, &h0001, &h0001, &h0000, &h0000, &h0000, &h0000, &h0003, &h0002, &h0002, &h0002, &h8000, &h8000, &h8000, &h8000
  DATA &h0007, &h0004, &h0004, &h0004, &hC000, &h4000, &hC000, &h4000, &h000F, &h0008, &h0009, &h0008, &hA000, &h2000, &hE000, &h2000
  DATA &h001F, &h0010, &h0013, &h0010, &h1000, &h3000, &hF000, &h1000, &h003E, &h0020, &h0027, &h0020, &h0800, &h7800, &hE800, &h0800
  DATA &h007C, &h0040, &h004F, &h0040, &h0C00, &hFC00, &hC400, &h0400, &h00F8, &h0081, &h009F, &h0080, &h1E00, &hFE00, &h8200, &h0600
  DATA &h01F0, &h0103, &h013F, &h0100, &h3D00, &hFF00, &h0100, &h0F00, &h03E0, &h0207, &h027E, &h0200, &h7880, &hFF80, &h0180, &h1F80
  DATA &h07C0, &h048F, &h04FC, &h0480, &hF040, &hFF40, &h03C0, &h3FC0, &h0F41, &h095F, &h0978, &h0940, &hE060, &hFE20, &h07E0, &h7FE0
  DATA &h1E23, &h123F, &h1230, &h1220, &hC0F0, &hFC10, &h0FD0, &hFFF0, &h3C3F, &h243F, &h2438, &h2439, &h81F8, &hF818, &h1F98, &hFFE8
  DATA &h7847, &h4847, &h4845, &h4847, &hBEF4, &hFE34, &hBE34, &hDFCC, &hF0B3, &h90B3, &h90B3, &h90B3, &hC0E6, &hC0E6, &hC0E6, &hC09E
  DATA &h79F9, &h49F9, &h79F9, &h49F9, &h804F, &h804F, &h804F, &h807F, &h24B1, &h24B1, &h3CB1, &h24B1, &h303E, &h303E, &h303E, &h303E
  DATA &h12C1, &h1EC1, &h1EC1, &h12C1, &hF81C, &hC81C, &hF81C, &hF81C, &h097E, &h0F7E, &h097E, &h097E, &h7F8B, &h7F8B, &h7F8B, &h7F8F
  DATA &h07C2, &h07FE, &h048E, &h04FE, &h3003, &h3003, &h3003, &h3007, &h0381, &h03F9, &h021F, &h03FF, &h0003, &h0003, &h0003, &h0007
  DATA &h0103, &h01F0, &h013F, &h01FF, &h8003, &h8003, &h8003, &h8007, &h0087, &h00E0, &h00FE, &h00FF, &hC003, &h4003, &h4003, &hE007
  DATA &h004F, &h0040, &h007C, &h007F, &hDF23, &hDF23, &hDF23, &h3FC7, &h003F, &h0021, &h0039, &h003E, &h9E13, &h9E13, &h9E13, &h7E0F
  DATA &h001F, &h0013, &h0013, &h001C, &h3C07, &h3C07, &h3C07, &hFC03, &h000E, &h000E, &h000E, &h0009, &h7800, &h7800, &h7800, &hF800
  DATA &h0004, &h0004, &h0004, &h0007, &hF000, &hF000, &hF000, &hF000, &h0003, &h0003, &h0003, &h0003, &hE000, &hE000, &hE000, &hE000
  DATA &h0001, &h0001, &h0001, &h0001, &hC000, &hC000, &hC000, &hC000, &h0000, &h0000, &h0000, &h0000, &h8000, &h8000, &h8000, &h8000
  '
  logo4pn_m:
  DATA &h0000, &h0000, &h0001, &h0000
  DATA &h0003, &h8000, &h0007, &hC000
  DATA &h000F, &hE000, &h001F, &hF000
  DATA &h003F, &hF800, &h007F, &hFC00
  DATA &h00FF, &hFE00, &h01FF, &hFF00
  DATA &h03FF, &hFF80, &h07FF, &hFFC0
  DATA &h0FFF, &hFFE0, &h1FFF, &hFFF0
  DATA &h3FFF, &hFFF8, &h7FFF, &hFFFC
  DATA &h3FFF, &hFFFE, &h1FFF, &hFFFC
  DATA &h0FFF, &hFFF8, &h07FF, &hFFFC
  DATA &h03FF, &hFFFC, &h01FF, &hFFFC
  DATA &h00FF, &hFFFC, &h007F, &hFFFC
  DATA &h003F, &hFFFC, &h001F, &hFC1C
  DATA &h000F, &hF804, &h0007, &hF000
  DATA &h0003, &hE000, &h0001, &hC000
  DATA &h0000, &h8000, &h0000, &h0000
  '
  RESTORE logo4pn_d
  '
  FOR i&=0 TO logo4pn_d_size&-1
    READ a$
    WORD{V:logo4pn_d&(i&)}=VAL(a$)
  NEXT i&
  '
  RESTORE logo4pn_m
  '
  FOR i&=0 TO logo4pn_m_size&-1
    READ a$
    WORD{V:logo4pn_m&(i&)}=VAL(a$)
  NEXT i&
  '
  '
  DIM logo_str|(13)
  logo_str$="EIKONA Logo"
  cptr%=*logo_str$
  i&=WORD{cptr%+4}
  cptr%=LONG{cptr%}
  FOR j&=0 TO i&-1
    logo_str|(j&)=BYTE{cptr%}
    INC cptr%
  NEXT j&
  '
  '
  LONG{V:logo_cicb&(0)}=V:logo_m&(0)
  LONG{V:logo_cicb&(2)}=V:logo_d&(0)
  LONG{V:logo_cicb&(4)}=V:logo_str|(0)
  logo_cicb&(6)=&H1000
  logo_cicb&(7)=0
  logo_cicb&(8)=0
  logo_cicb&(9)=22
  logo_cicb&(10)=0
  logo_cicb&(11)=logo_w&
  logo_cicb&(12)=logo_h&
  logo_cicb&(13)=0
  logo_cicb&(14)=32
  logo_cicb&(15)=74
  logo_cicb&(16)=8
  LONG{V:logo_cicb&(17)}=V:cicn_logo_1p&(0)
  '
  '
  cicn_logo_1p&(0)=logo1pn_d_pl&
  LONG{V:cicn_logo_1p&(1)}=V:logo1pn_d&(0)
  LONG{V:cicn_logo_1p&(3)}=V:logo1pn_m&(0)
  LONG{V:cicn_logo_1p&(5)}=0
  LONG{V:cicn_logo_1p&(7)}=0
  LONG{V:cicn_logo_1p&(9)}=V:cicn_logo_2p&(0)
  '
  cicn_logo_2p&(0)=logo2pn_d_pl&
  LONG{V:cicn_logo_2p&(1)}=V:logo2pn_d&(0)
  LONG{V:cicn_logo_2p&(3)}=V:logo2pn_m&(0)
  LONG{V:cicn_logo_2p&(5)}=0
  LONG{V:cicn_logo_2p&(7)}=0
  LONG{V:cicn_logo_2p&(9)}=V:cicn_logo_4p&(0)
  '
  cicn_logo_4p&(0)=logo4pn_d_pl&
  LONG{V:cicn_logo_4p&(1)}=V:logo4pn_d&(0)
  LONG{V:cicn_logo_4p&(3)}=V:logo4pn_m&(0)
  LONG{V:cicn_logo_4p&(5)}=0
  LONG{V:cicn_logo_4p&(7)}=0
  LONG{V:cicn_logo_4p&(9)}=0
  '
  '
  ' >>>>>>>>>>>>>> D‚finition de l'arbre d'objets du fond <<<<<<<<<<<<<<<<<<<<
  '
  DIM desk_tab&(3*12),obspec%(3),cicn_leop1p(12)
  '
  obspec%(0)=&HFE11C3           ! init des obspecs (0) = fond gris‚
  obspec%(1)=V:leop_cicb&(0)    ! (1) = pointeur sur le 1er CICONBLK
  obspec%(2)=V:logo_cicb&(0)    ! (2) = pointeur sur le 2nd CICONBLK
  '
  desk_data:                    ! arbre d'objets contenant les 2 icones
  '
  DATA &hffff, &h0001, &h0002, &h0014, &h0000, &h0000, &h12345678, &h0000, &h0000, &h0000, &h0000
  DATA &h0002, &hffff, &hffff, &h0021, &h0000, &h0000, &h12345678, &h0005, &h0002, &h4a00, &h2800
  DATA &h0000, &hffff, &hffff, &h0021, &h0000, &h0000, &h12345678, &h0010, &h0002, &h4a00, &h2800
  '
  '
  RESTORE desk_data     ! Remplissage du tableau d'objets
  '
  FOR i&=0 TO 2
    FOR j&=0 TO 11
      READ a$
      IF (j&=6) THEN
        LONG{V:desk_tab&(12*i&+j&)}=obspec%(i&)
        j&=7
      ELSE
        WORD{V:desk_tab&(12*i&+j&)}=VAL(a$)
      ENDIF
    NEXT j&
    '
    IF @rsrcc_obfix(V:desk_tab&(0),i&,nbpl&)=0
      ~FORM_ALERT(1,"[1][ |Erreur d'allocation !!  ][ Fin ]")
      RETURN 0
    ENDIF
  NEXT i&
  '
  newdesk%=V:desk_tab&(0)
  '
  RETURN 1
ENDFUNC
