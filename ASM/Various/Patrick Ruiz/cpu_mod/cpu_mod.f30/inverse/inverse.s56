;****************************************************************
;* R‚alise une inversion progressive des voies gauche et droite *
;****************************************************************
;Valeur d'inversion ‚crite par le CPU dans le port HOST.
; Avec:
;Valeur d'inversion:	 0 =< i < 1
;Voie gauche brute:	-1 =< G < 1
;Voie droite brute:	-1 =< D < 1
;Voie gauche mix‚e:	=(1-i)G+iD=G-iG+iD
;Voie droite mix‚e:	=(1-i)D+iG=D-iD+iG

NombreVoies	EQU	1

; Pas de INCLUDE 'D:\MC56001\SYSTEM.S56' possible ...
;-------------------------------------------------------------------------------
PA_CR		EQU	$FFFE	; Port A Control Register =$000000
PB_CR		EQU	$FFE0	; Port B Control Register =$000001
PC_CR		EQU	$FFE1	; Port C Control Register =$0001FF
HST_CR		EQU	$FFE8	; HoST Control Register
HST_SR		EQU	$FFE9	; HoST Status Register
HST_RD		EQU	$FFEB	; HoST Receive Data
HST_TD		EQU	$FFEB	; HoST Transmit Data
SSI_CRA 	EQU	$FFEC	; SSI Control Register A
SSI_CRB 	EQU	$FFED	; SSI Control Register B
SSI_SR		EQU	$FFEE	; SSI Status Register
SSI_TSR 	EQU	$FFEE	; SSI Time Slot Register
SSI_RD		EQU	$FFEF	; SSI Receive Data
SSI_TD		EQU	$FFEF	; SSI Transmit Data
IPR		EQU	$FFFF	; Interrupt Priority Register

INT_RESET	EQU	$0000
INT_STACK	EQU	$0002
INT_TRACE	EQU	$0004
INT_SWI 	EQU	$0006
INT_SSI_RD	EQU	$000C
INT_SSI_RDE	EQU	$000E	; with Exception status
INT_SSI_TD	EQU	$0010
INT_SSI_TDE	EQU	$0012	; with Exception status
INT_HST_RD	EQU	$0020
INT_HST_TD	EQU	$0022
INT_HST_UC	EQU	$0024	; HoST User Commands
INT_ILLEGAL	EQU	$003E
;-------------------------------------------------------------------------------
	ORG	P:$0000
	JMP	<Init
	ORG	P:INT_SSI_RD
	JSR	<LireSSI
	NOP
	NOP
	NOP
	JSR	<EcrireSSI
	NOP
	NOP
	NOP
	ORG	P:INT_HST_RD
	MOVEP	X:<<HST_RD,Y:(R5)
	MOVEP	Y:(R5),X:<<HST_TD ;pour une lecture par un autre prog.
	ORG	P:$0040
LireSSI
	BTST	#3,X:<<SSI_SR
	JCC	<_RD
	BCLR	#0,R3 ;Gauche !!!
	BSET	#0,X:<LireTamponReception
	JCS	<_X
_RD	MOVEP	X:<<SSI_RD,X:(R3)+
_X	RTI

EcrireSSI
	BTST	#2,X:<<SSI_SR
	JCC	<_TD
	BSET	#1,R7 ;Droit !!!
	BSET	#0,Y:<EcrireTamponTransmiss
	JCS	<_X
_TD	MOVEP	Y:(R7)+,X:<<SSI_TD
_X	RTI

Init	MOVEC	#$0300,SR
	MOVEC	#$0002,OMR
	MOVEP	#$000001,X:<<HST_CR
	MOVEP	#$004100,X:<<SSI_CRA
	MOVEP	#$00F800,X:<<SSI_CRB
	MOVEP	#$000000,X:<<PA_CR
	MOVEP	#$000001,X:<<PB_CR
	MOVEP	#$0001FF,X:<<PC_CR
	MOVEP	#$002400,X:<<IPR ;SSI en IPL1 et HST en IPL0
	MOVE	#<TamponReception,R3 ;R‚ception IN
	MOVEC	#(2+2)*NombreVoies-1,M3
	MOVE	#<TamponReception+2*NombreVoies,R2 ;R‚ception OUT
	MOVEC	M3,M2
	MOVE	R3,R7 ;Transmission OUT
	MOVEC	M3,M7
	MOVE	R2,R6 ;Transmission IN
	MOVEC	M3,M6
	MOVE	#<InversionVoie0,R5
	MOVEC	#$0000,SR
AttenteR
	JCLR	#0,X:<LireTamponReception,AttenteR
	MOVE	X:(R2)+,A	Y:(R5),Y0	;G et i
	MOVE	X:(R2)+,B	A,Y1		;D et G
	BCLR	#0,X:<LireTamponReception
	MOVE	A,X0
	MAC	-Y0,Y1,A	B,Y1		;-iG et D
	MAC	+Y0,Y1,A			;+iD
	MAC	-Y0,Y1,B	X0,Y1		;-iD et G
	MAC	+Y0,Y1,B			;+iG
AttenteT
	JCLR	#0,Y:<EcrireTamponTransmiss,AttenteT
	MOVE	A,Y:(R6)+
	MOVE	B,Y:(R6)+
	BCLR	#0,Y:<EcrireTamponTransmiss
	JMP	<AttenteR

	ORG	X:$0000
TamponReception 	BSC	(2+2)*NombreVoies,0 ;FIFO 2+2 mots
LireTamponReception	DC	0 ; ... quand SSI_SRb3=1
	ORG	Y:$0000
TamponTransmiss 	BSC	(2+2)*NombreVoies,0 ;FIFO 2+2 mots
EcrireTamponTransmiss	DC	0 ; ... quand SSI_SRb2=1
InversionVoie0		DC	0 ; .000:0% … .999:100%
 END
