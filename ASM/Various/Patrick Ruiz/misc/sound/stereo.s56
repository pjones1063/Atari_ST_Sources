M_BCR	EQU	$FFFE	; Port A Bus Control Register
M_PBC	EQU	$FFE0	; Port B Control Register
M_PBDDR	EQU	$FFE2	; Port B Data Direction Register
M_PBD	EQU	$FFE4	; Port B Data Register
M_PCC	EQU	$FFE1	; Port C Control Register
M_PCDDR	EQU	$FFE3	; Port C Data Direction Register
M_PCD	EQU	$FFE5	; Port C Data Register
M_HCR	EQU	$FFE8	; Host Control Register
M_HSR	EQU	$FFE9	; Host Status Register
M_HRX	EQU	$FFEB	; Host Receive Data Register
M_HTX	EQU	$FFEB	; Host Transmit Data Register
M_HRIE	EQU	0	; Host Receive Interrupt Enable
B_HRIE	EQU	$01	;
M_HTIE	EQU	1	; Host Transmit Interrupt Enable
B_HTIE	EQU	$02	;
M_HCIE	EQU	2	; Host Command Interrupt Enable
B_HCIE	EQU	$04	;
M_HF2	EQU	3	; Host Flag 2
B_HF2	EQU	$08	;
M_HF3	EQU	4	; Host Flag 3
B_HF3	EQU	$10	;
M_HRDF	EQU	0	; Host Receive Data Full
B_HRDF	EQU	$01	;
M_HTDE	EQU	1	; Host Transmit Data Empty
B_HTDE	EQU	$02	;
M_HCP	EQU	2	; Host Command Pending
B_HCP	EQU	$04	;
M_HF	EQU	$18	; Host Flag Mask
B_HF	EQU	$18	;
M_HF0	EQU	3	; Host Flag 0
B_HF0	EQU	$08	;
M_HF1	EQU	4	; Host Flag 1
B_HF1	EQU	$10	;
M_DMA	EQU	7	; DMA Status
B_DMA	EQU	$80	;
M_RX	EQU	$FFEF	; Serial Receive Data Register
M_TX	EQU	$FFEF	; Serial Transmit Data Register
M_CRA	EQU	$FFEC	; SSI Control Register A
M_CRB	EQU	$FFED	; SSI Control Register B
M_SR	EQU	$FFEE	; SSI Status Register
M_TSR	EQU	$FFEE	; SSI Time Slot Register
M_PM	EQU	$00FF	; Prescale Modulus Select Mask
B_PM	EQU	$00FF	;
M_DC	EQU	$1F00	; Frame Rate Divider Control Mask
B_DC	EQU	$1F00	;
M_WL	EQU	$6000	; Word Length Control Mask
B_WL	EQU	$6000	;
M_WL0	EQU	13	; Word Length Control 0
B_WL0	EQU	$2000	;
M_WL1	EQU	14	; Word Length Control 1
B_WL1	EQU	$4000	;
M_PSR	EQU	15	; Prescaler Range
B_PSR	EQU	$8000	;
M_OF	EQU	$3	; Serial Output Flag Mask
B_OF	EQU	$0003	;
M_OF0	EQU	0	; Serial Output Flag 0
B_OF0	EQU	$0001	;
M_OF1	EQU	1	; Serial Output Flag 1
B_OF1	EQU	$0002	;
M_SCD	EQU	$1C	; Serial Control Direction Mask
B_SCD	EQU	$001C	;
M_SCD0	EQU	2	; Serial Control 0 Direction
B_SCD0	EQU	$0004	;
M_SCD1	EQU	3	; Serial Control 1 Direction
B_SCD1	EQU	$0008	;
M_SCD2	EQU	4	; Serial Control 2 Direction
B_SCD2	EQU	$0010	;
M_SCKD	EQU	5	; Clock Source Direction
B_SCKD	EQU	$0020	;
M_FSL	EQU	8	; Frame Sync Length
B_FSL	EQU	$0100	;
M_SYN	EQU	9	; Sync/Async Control
B_SYN	EQU	$0200	;
M_GCK	EQU	10	; Gated Clock Control
B_GCK	EQU	$0400	;
M_MOD	EQU	11	; Mode Select
B_MOD	EQU	$0800	;
M_STE	EQU	12	; SSI Transmit Enable
B_STE	EQU	$1000	;
M_SRE	EQU	13	; SSI Receive Enable
B_SRE	EQU	$2000	;
M_STIE	EQU	14	; SSI Transmit Interrupt Enable
B_STIE	EQU	$4000	;
M_SRIE	EQU	15	; SSI Receive Interrupt Enable
B_SRIE	EQU	$8000	;
M_IF	EQU	$3	; Serial Input Flag Mask
B_IF	EQU	$03	;
M_IF0	EQU	0	; Serial Input Flag 0
B_IF0	EQU	$01	;
M_IF1	EQU	1	; Serial Input Flag 1
B_IF1	EQU	$02	;
M_TFS	EQU	2	; Transmit Frame Sync
B_TFS	EQU	$04	;
M_RFS	EQU	3	; Receive Frame Sync
B_RFS	EQU	$08	;
M_TUE	EQU	4	; Transmitter Underrun Error
B_TUE	EQU	$10	;
M_ROE	EQU	5	; Receiver Overrun Error
B_ROE	EQU	$20	;
M_TDE	EQU	6	; Transmit Data Register Empty
B_TDE	EQU	$40	;
M_RDF	EQU	7	; Receive Data Register Full
B_RDF	EQU	$80	;
M_IPR	EQU	$FFFF	; Interrupt Priority Register
M_IAL	EQU	$7	; IRQA Mode Mask
B_IAL	EQU	$0007	;
M_IAL0	EQU	0	; IRQA Mode Interrupt Priority Level (low)
B_IAL0	EQU	$0001	;
M_IAL1	EQU	1	; IRQA Mode Interrupt Priority Level (high)
B_IAL1	EQU	$0002	;
M_IAL2	EQU	2	; IRQA Mode Trigger Mode
B_IAL2	EQU	$0004	;
M_IBL	EQU	$38	; IRQB Mode Mask
B_IBL	EQU	$0038	;
M_IBL0	EQU	3	; IRQB Mode Interrupt Priority Level (low)
B_IBL0	EQU	$0008	;
M_IBL1	EQU	4	; IRQB Mode Interrupt Priority Level (high)
B_IBL1	EQU	$0010	;
M_IBL2	EQU	5	; IRQB Mode Trigger Mode
B_IBL2	EQU	$0020	;
M_HPL	EQU	$C00	; Host Interrupt Priority Level Mask
B_HPL	EQU	$0C00	;
M_HPL0	EQU	10	; Host Interrupt Priority Level Mask (low)
B_HPL0	EQU	$0400	;
M_HPL1	EQU	11	; Host Interrupt Priority Level Mask (high)
B_HPL1	EQU	$0800	;
M_SSL	EQU	$3000	; SSI Interrupt Priority Level Mask
B_SSL	EQU	$3000	;
M_SSL0	EQU	12	; SSI Interrupt Priority Level Mask (low)
B_SSL0	EQU	$1000	;
M_SSL1	EQU	13	; SSI Interrupt Priority Level Mask (high)
B_SSL1	EQU	$2000	;
I_RESET	EQU	$0000	; hardware _RESET
I_STACK	EQU	$0002	; stack error
I_TRACE	EQU	$0004	; trace
I_SWI	EQU	$0006	; SWI
I_IRQA	EQU	$0008	; _IRQA
I_IRQB	EQU	$000A	; _IRQB
I_SSIRD	EQU	$000C	; SSI receive data
I_SSIRDE	EQU	$000E	; SSI receive data with exception status
I_SSITD	EQU	$0010	; SSI transmit data
I_SSITDE	EQU	$0012	; SSI transmit data with exception status
I_SCIRD	EQU	$0014	; SCI receive data
I_SCIRDE	EQU	$0016	; SCI receive data with exception status
I_SCITD	EQU	$0018	; SCI transmit data
I_SCIIL	EQU	$001A	; SCI idle line
I_SCITM	EQU	$001C	; SCI timer
I_RESH	equ	$1e	; ???
I_HSTRD	EQU	$0020	; host receive data
I_HSTTD	EQU	$0022	; host transmit data
I_HSTC	EQU	$0024	; host command
I_HSTUC0	EQU	$0026	; host user command 0
I_HSTUC1	EQU	$0028	; ---- ---- ------- 1
I_HSTUC2	EQU	$002A	; etc...
I_HSTUC3	EQU	$002C	;
I_HSTUC4	EQU	$002C	;
I_HSTUC5	EQU	$0030	;
I_HSTUC6	EQU	$0032	;
I_HSTUC7	EQU	$0034	;
I_HSTUC8	EQU	$0036	;
I_HSTUC9	EQU	$0038	;
I_HSTUC10	EQU	$003A	;
I_HSTUC11	EQU	$003C	;
I_ILLEGAL	EQU	$003E	; Illegal instruction

ReadHost	MACRO	dest
	jclr	#M_HRDF,x:<<M_HSR,*
	movep	x:<<M_HRX,dest
	ENDM

	himem	x:$3fff,y:$3fff,p:$7fff
	OPT	W

R_S_D	ident	1,0	;Correction de la fausse st‚r‚o...

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BuffSiz	equ	4096	;1024 mots de r‚ception st‚r‚o
Delay	equ	32	;D‚lai de st‚r‚o (32 couples, environ 38cm … 25Khz)
Ampl	equ	0.45	;45% du signal initial...

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	org	x:0
Buffers	dsm	BuffSiz
	baddr	m,2
Offsets	dc	((-2*Delay)&-2)+1
	dc	((-2*Delay)&-2)-1
	baddr	m,8
X_Fir	dc	-901,0.40*1
	dc	-1200,0.16*1
	dc	-451,0.49*1
	dc	-600,0.14*1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;; Drivers d'interruption ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	org	p:$0			;
	jmp	<P_begin			;

	org	p:I_SSIRD			;
	movep	x:<<M_RX,x:(r3)+		;Reception SSI du DMA
	nop				;
	movep	x:<<M_SR,x:(r3)+		;Reception en overrun
	movep	x:<<M_RX,x:(r3)+

	jsr	>Trans_Stereo		;
	movep	x:<<M_SR,y:(r7)+		;
	jsr	<Trans_Stereo		;

	org	p:I_HSTUC0			;
	jsr	>Set_Stereo		;Enhanced Stereo
	jsr	>Set_Mono			;Enhanced Mono
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;; Pr‚paration de la SSI ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	org	p:$40
P_begin	movep	#1,x:<<M_PBC		;Host enable
	movep	#B_HCIE,x:<<M_HCR		;Host Command
	movep	#B_SSL|B_HPL0,x:<<M_IPR	;SSI en IPL3, Host en IPL1
	movep	#$4100,x:<<M_CRA		;SSI en 2 mots/frame, 16 bits
	movep	#$0800,x:<<M_CRB		;SSI off
	movep	#$01f8,x:<<M_PCC		;Port C en SSI
	movep	#$0008,x:<<M_PCDDR		;Idem

	movem	p:I_HSTUC4,b0		;
	movem	b0,p:I_HSTUC5		;
	move	#<Set_50,b0		;
	movem	b0,p:1+I_HSTUC5		;

	move	#Buffers+16,r3		;r‚ception un peu en avance
	move	#Buffers,r7		;sur l'‚mission.
	move	#BuffSiz-1,m3		;
	move	m3,m7			;Installe buffers & modulo.
	andi	#$f3,mr			;En Stereo, pas de scaling...

	move	#X_Fir,r6			;
	move	#<8-1,m6			;4 coefficients

	move	#-1,m0			;R0,M0,N0 pour divers travaux
	
	clr	a			;
	.loop	#BuffSiz/2			;
	move	a,l:(r3)+			;Plouf, init les buffers
	move	a,l:(r3)+			;
	.endl				;
	move	#1.0-Ampl,x0		;Amplitude du d‚lai.
	move	#Ampl,x1			;-> x0=part dominante, x1=feedback st‚r‚o
	
	andi	#%11110000,mr		;Vroom, autorise tout le monde.
	movep	#$f800,x:<<M_CRB		;Lance la SSI

	jmp	<*			;Attendre que ‡a se passe !

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Trans_Stereo
	jset	#M_TFS,x:<<M_SR,_right 	;Frame Sync ?
_left	move	x:(r7+n7),y0		;
	mpy	x1,y0,a	x:(r7)+,y0		;b=feedback droit
	macr	x0,y0,a	x:Offsets+1,n7	; +dominant gauche
	movep	a,x:<<M_TX			;
	rti
_right	move	x:(r7+n7),y0		;
	mpy	x1,y0,a	x:(r7)+,y0		;b=feedback gauche
	macr	x0,y0,a	x:Offsets,n7	; +dominant droit
	movep	a,x:<<M_TX			;
	rti

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Trans_Mono	move	x:(r6)+,n7			;Delai et coefficient du
	move	x:(r6)+,y1			;feedback.
	move	x:(r7),y0			;R‚cupere signal (mono!)
	mpy	y1,y0,a	x:(r7+n7),y0	;
	add	y0,a	y:(r7+n7),y0	;Que l'on bidouille, avec un
	macr	-y1,y0,a	x:(r6)+,n7		;plusieurs feedback entrelac‚s.
	move	x:(r6)+,y1			;
	move	x:(r7+n7),y0		;
	macr	y1,y0,a			;
	
	move	a,y:(r7)+			;Scaling Down ==>> a/2
	movep	a,x:<<M_TX			;Car on a arrive … un intervale
	rti				;environ [-2,2[

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IT_Stereo	jsr	<Trans_Stereo		;
IT_Mono	jsr	<Trans_Mono		;

Set_Stereo	move	#<Trans_Stereo,b0
	andi	#$f3,mr
	movem	b0,p:<I_SSITD+1
	movem	p:IT_Stereo,b0
	movem	b0,p:<I_SSITD+3
	ReadHost	n0
	move	#<Set_Adr,r0
	nop
	movem	p:(r0+n0),r0
	nop
	jmp	(r0)
Set_Adr	dc	Set_030
	dc	Set_12
	dc	Set_25
	dc	Set_50
Set_12	move	#>((-Delay/2)&-2)+1,b1
	move	#>((-Delay/2)&-2)-1,b0
	jmp	<Set_it
Set_25	move	#>((-Delay)&-2)+1,b1
	move	#>((-Delay)&-2)-1,b0
	jmp	<Set_it
Set_030	
Set_50	move	#>((-Delay*2)&-2)+1,b1
	move	#>((-Delay*2)&-2)-1,b0
Set_it	move	b1,x:Offsets
	move	b0,x:Offsets+1
	rti

Set_Mono	move	#<Trans_Mono,b0
	ori	#$04,mr
	movem	b0,p:<I_SSITD+1
	movem	p:IT_Mono,b0
	movem	b0,p:<I_SSITD+3
	rti
