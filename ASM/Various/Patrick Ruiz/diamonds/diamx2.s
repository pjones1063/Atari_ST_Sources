; comme DIAMONDS mais en 320x240x4 (160x120 cellules)
; V0.20

 INCLUDE D:\MC68030.882\DEVPAC.HIS\GEMBIB\GEMBIB.GS

	TOS_APP

BOG=0 ;… 0

CPU_GEN=$600 ;18
CPU_SPH=$604 ;1
CPU_AFF=$608 ;27
CPU_ATT=$60C ;3
CNT=$610

	IFEQ BOG
 ;Sauver la palette
	PL #PAL_O
	PW #16
	PW #0
	PW #94
	TRAP #14
	ADDA #10,SP

 ;Passer en 320x240x4 VGA
	PW #%100010010
	PW #3
	PL #-1
	PL #-1
	PW #5
	TRAP #14
	ADDA #14,SP
	MOVE D0,REZ_O

 ;Mettre la palette
	PL #PAL
	PW #16
	PW #0
	PW #93
	TRAP #14
	ADDA #10,SP

	SCRN_WVBL

	ENDC

	PROG_SUPERMODE #0
	MOVE.L D0,PAD

	LEA TAB_T,A0
	LEA TAB_1,A1
	LEA TAB_2,A2
	MOVE.L A1,(A0)+
	MOVE.L A2,(A0)

	LEA ECR_M+4,A0
	MOVE.L A0,D0
	ANDI.B #%11111100,D0
	IFEQ BOG
	MOVE.L D0,-(SP)
	MOVE #-1,-(SP)
	BSR STROBOS
	ADDQ #6,SP
	ENDC
	MOVE.L D0,ECR_T

 ;Initialiser les compteurs de puissance
	CLR.L CPU_GEN
	CLR.L CPU_SPH
	CLR.L CPU_AFF
	CLR.L CPU_ATT

DIAMONDS:
 ;~~~ ---> TAB
	MOVEA.L TAB_T,A3
.1	MOVEA.L A3,A4
	ADDA #160+2+1,A3
	MOVE #160/2-1,D3 ;COL.
	MOVE #120-1,D4 ;LIGN.
	MOVE #$F0F,D5 ;MASQUE
.HZ	MOVE #17,-(SP)
	TRAP #14
	ADDQ #2,SP
	LSR.L #3,D0 ;ALLONS SAVOIR
	AND D5,D0
	MOVE D0,(A3)+
	DBRA D3,.HZ
	MOVE #160/2-1,D3
	ADDQ #2,A3
	DBRA D4,.HZ
;LIGN. -1 ET 120
	MOVEA.L A4,A3
	ADDQ #1,A3
	MOVE.L #(160+2)*120,D0
	MOVE #160-1,D3
.L_1	MOVE.B (A3,D0.L),(A3)+
	DBRA D3,.L_1
	MOVEA.L A4,A3
	ADDA.L #(160+2)*(120+1)+1,A3
	MOVE #160-1,D3
	NEG.L D0
.L120	MOVE.B (A3,D0.L),(A3)+
	DBRA D3,.L120
 ;COL. -1 ET 160
	MOVEA.L A4,A3
	ADDA #160+2,A3
	MOVE #120-1,D4
.C_1	MOVE.B 160(A3),(A3)
	ADDA #160+2,A3
	DBRA D4,.C_1
	MOVEA.L A4,A3
	ADDA #(160+2)+160+1,A3
	MOVE #120-1,D4
.C160	MOVE.B -160(A3),(A3)
	ADDA #160+2,A3
	DBRA D4,.C160
 ;et les 4 coins
	MOVE.B ((160+2)*120+160,A4),(A4)
	MOVE.B	 ((160+2)*120+1,A4),(160+1,A4)
	MOVE.B	   ((160+2)+160,A4),((160+2)*(120+1),A4)
	MOVE.B	     ((160+2)+1,A4),((160+2)*(120+1)+160+1,A4)
	BRA AFF

GEN: ; CRISTAL 
	MOVE.L tim_cnt,CNT
	MOVEA.L TAB_T+4(PC),A0 ;A0=TAB SRCE
	MOVEA.L TAB_T(PC),A1   ;A1=TAB DEST
	LEA ((160+2)+1,A0),A2  ;A2=PTR SRCE
	LEA ((160+2)+1,A1),A3  ;A3=PTR DEST
	MOVE  #160-1,D0	       ;D0=COL.
	MOVEQ #120-1,D1	       ;D1=LIGN.
	MOVEQ #-1,D2	       ;D2=OFFSET G
	MOVEQ #1,D3	       ;D3=OFFSET D
	MOVEA #-(160+2),A4     ;A4=OFFSET H
	MOVEA #(160+2),A5      ;A5=OFFSET B
.NP	MOVE.B (A2)+,D4        ;D4=COUL PIXEL
	MOVE.B D4,D5	       ;D5=COUL NOUV PIXEL
	ADDQ #1,D5
	ANDI.B #$F,D5
	CMP.B -1(A2,D2),D5
	BEQ.S .SQ ;SAUT QUANTIQUE!
	CMP.B -1(A2,D3),D5
	BEQ.S .SQ
	CMP.B -1(A2,A4),D5
	BEQ.S .SQ
	CMP.B -1(A2,A5),D5
	BEQ.S .SQ
	MOVE.B D4,D5 ;RIEN DE NEUF
.SQ	MOVE.B D5,(A3)+
	DBRA D0,.NP
	ADDQ #2,A2
	ADDQ #2,A3
	MOVE #160-1,D0
	DBRA D1,.NP

	MOVE.L tim_cnt,D0
	SUB.L CNT,D0
	CMP.L CPU_GEN,D0
	BLS.S SPH
	MOVE.L D0,CPU_GEN

SPH: ; REPORT SPHERIQUE
	MOVE.L tim_cnt,CNT
;LIGN. -1 ET 120
	LEA (1,A1),A0 ;A1=TAB ... AUTRES=BROUILLON
	MOVE.L #(160+2)*120,D0
	MOVEQ #(160/4)-1,D1
.L_1	MOVE.L (A0,D0.L),(A0)+
	DBRA D1,.L_1
	LEA ((160+2)*(120+1),A1),A0
	MOVEQ #(160/4)-1,D1
	NEG.L D0
.L120	MOVE.L (A0,D0.L),(A0)+
	DBRA D1,.L120
 ;COL. -1 ET 160
	LEA (160+2,A1),A0
	MOVEQ #120-1,D1
.C_1	MOVE.B 160(A0),(A0)
	ADDA #160+2,A0
	DBRA D1,.C_1
	LEA (160+2+160+1,A1),A0
	MOVEQ #120-1,D1
.C160	MOVE.B -160(A0),(A0)
	ADDA #160+2,A0
	DBRA D1,.C160
 ;et les 4 coins
	MOVE.B ((160+2)*120+160,A1),(A1)
	MOVE.B	 ((160+2)*120+1,A1),(160+1,A1)
	MOVE.B	   ((160+2)+160,A1),((160+2)*(120+1),A1)
	MOVE.B	     ((160+2)+1,A1),((160+2)*(120+1)+160+1,A1)

	MOVE.L tim_cnt,D0
	SUB.L CNT,D0
	CMP.L CPU_SPH,D0
	BLS.S AFF
	MOVE.L D0,CPU_SPH

AFF: ;TAB ---> ECR
	MOVE.L tim_cnt,CNT
	MOVEA.L TAB_T(PC),A0
	ADDA #160+2+1,A0     ;A0=SRCE
	MOVEA.L ECR_T(PC),A1 ;A1=DEST
	MOVEQ #160/8-1,D0    ;D0=COL.
	MOVEQ #120-1,D1	     ;D1=LIGN.
			     ;D4/D5/D6/D7=PLANS
.2	MOVEQ #16,D2	     ;D2=OFFSET EN BIT DANS LA DESTINATION
.1	BTST #0,(A0)
	SNE D3
	BFINS D3,D4{D2:2}
	BTST #1,(A0)
	SNE D3
	BFINS D3,D5{D2:2}
	BTST #2,(A0)
	SNE D3
	BFINS D3,D6{D2:2}
	BTST #3,(A0)+
	SNE D3
	BFINS D3,D7{D2:2}
	ADDQ #2,D2
	CMPI #32,D2
	BLO .1
	MOVEM D4-D7,(A1)
	MOVEM D4-D7,(A1,160)
	ADDQ #8,A1
	DBRA D0,.2
	ADDQ #2,A0
	MOVEQ #160/8-1,D0
	ADDA #160,A1
	DBRA D1,.2

	MOVE.L tim_cnt,D0
	SUB.L CNT,D0
	CMP.L CPU_AFF,D0
	BLS.S BASC
	MOVE.L D0,CPU_AFF

BASC: ;NORMAL <|> MIROIR
	MOVE.L tim_cnt,CNT
	IFEQ BOG
	MOVE #1,-(SP)
	BSR STROBOS
	ADDQ #2,SP
	ENDC
	MOVE.L D0,ECR_T
	LEA TAB_T,A0
	MOVE.L (A0),D0
	MOVE.L 4(A0),D1
	MOVE.L D0,4(A0)
	MOVE.L D1,(A0)

ATTENTE:
	CONS_GINSTATE #2
	MOVE D0,D1
	MOVE.L tim_cnt,D0
	SUB.L CNT,D0
	CMP.L CPU_ATT,D0
	BLS.S .1
	MOVE.L D0,CPU_ATT
.1	TST D1
	BEQ GEN
	CONS_IN #2
	CMPI.B #127,D0
	BEQ DIAMONDS
	CMPI.B #27,D0
	BNE ATTENTE

EPILOGUE:
	MOVE #0,-(SP)
	BSR.S STROBOS
	ADDQ #2,SP
	PROG_SUPERMODE PAD
 ;Remettre le mode
	PW REZ_O(PC)
	PW #3
	PL #-1
	PL #-1
	PW #5
	TRAP #14
	ADDA #14,SP
 ;Et la palette
	PL #PAL_O
	PW #16
	PW #0
	PW #93
	TRAP #14
	ADDA #10,SP
	BRA FIN

STROBOS INCBIN STROBOS2.B

 D_

PAL	DC.L $000000,$400000,$600000,$800000
	DC.L $A00000,$C00000,$E00000,$E06040
	DC.L $E08040,$E0A040,$C0A040,$A0A040
	DC.L $E0E000,$E0E060,$E0E0A0,$E0E0E0

 M_
REZ_O	DS.W 1
PAL_O	DS.L 16

ECR_T	DS.L 1	 ;ECRAN DE TRAVAIL
TAB_T	DS.L 1+1 ;TABLEAU DE TRAVAIL

	EVEN
	DS.B 1	 ;"r‚aligner" les TAB
TAB_1	DS.B (160+2)*(120+2)
TAB_2	DS.B (160+2)*(120+2)

	EVEN
ECR_M	DS.B (320*240)/2+4

 END
