*********************
* $0087-0008 inverse mode
*********************
*********************
* Backup source code
*********************
*
*
*
		jmp	start
		OPT	O+
		OPT	W-
		OPT	C-

in_demo_txt	dc.b	'DEMO MODE',0

FALSE		equ	0
TRUE		equ	1

DEBUG		equ	0

MAX_DICON	equ	200-18

old_fall	dc.b	0
the_priority	dc.b	0

		even
bombout		dc.l	100
allow_climb	dc.w	0
activate_demo	dc.w	0
demo_mode	dc.w	0
demo_timerA	dc.w	0
started_demo	dc.w	0
demo_room	dc.w	1
found_room	dc.w	0
founded_room	dc.w	1
limit_line	dc.w	160
icon_mode	dc.w	0
pick_icon	dc.w	0
tpick		dc.w	0
rnd_fruit	dc.w	0
flash_item	dc.w	0
allow_CA	dc.w	0
tman_dir	dc.w	0
held_icon	dc.w	0
a_stk		dc.l	0
force_old	dc.l	0
force_old2	dc.l	0
in_sel_magic	dc.w	0
save_spp	dc.l	0
want_old_data	dc.l	0
current_track	dc.w	-1

mem		equ	$80000

neo_total_pic	equ	3
system_blk	equ	mem+$68600-($7d00*(neo_total_pic))
kill_pos	equ	system_blk+$7d00+$5a00
play
		clr.b	brick_not
		dc.w	$a000
		move.l	4(a0),a1
		clr.w	2(a1)
		move.w	#1,6(a1)
		dc.w	$a009
		move.w	#15,col1

		clr.b	priority
		clr.b	old_prior
		clr.w	icon_no
		clr.w	char_active
		bsr	clear_room_id

		jsr	config_ms
		move.l	sp,a_stk
		bsr	main_pg
		move.b	#3,raster
		jsr	flip_screen
		bra.s	do_freeze
repeat		move.b	#3,raster
		jsr	flip_screen
do_freeze	clr.b	vbl_counter
		clr.b	which_obj
		move.b	man_fall,old_fall
		move.l	manx,old_man_x

*		sub.l	#1,bombout
*		cmp.l	#0,bombout
*		beq	terminateProg



		tst.b	keybrd
		bne	no_fool_quit
*		move.w	#$ff,-(sp)
*		move.w	#6,-(sp)
*		trap	#1
*		addq.l	#4,sp
*		move.w 	rawKeys,d0
		
		clr.l	d0
		move.b	lastkeypressed,d0
		clr.b	lastkeypressed
		add.l	#standard,d0
		move.l	d0,a0
		move.b	(a0),d0
		move.b	d0,keybrd

		lea	keyStatus+102,a0
		tst.b	(a0)
		beq.s	nclean_up
terminateProg	jmp	clean_up
nclean_up




		cmp.w	#0,in_play
		ble	no_fool_quit
		cmp.b	#250,d0
		beq.s	fool_quit
		tst.w	freeze_mode
		beq	no_fool_quit
		cmp.b	#'U',d0
		bne.s	do_freeze2
		clr.w	freeze_mode
		bra	no_fool_quit
do_freeze2	clr.b	keybrd
		jmp	do_freeze

lastZ		dc.b	0
lastX		dc.b	0
lastM		dc.b	0
lastK		dc.b	0
lastL		dc.b	0

		even

fool_quit	clr.w	freeze_mode
		move.l	#1000,man_dead
		clr.l	lives
		move.b	#101,dead_counter
		clr.w	dim_type
		move.w	#500,light_on
		move.w	#1,flip_mode
no_fool_quit
		lea	keystatus+44,a0
		lea	lastZ,a1
		move.b	(a0),d2
		move.b	(a1),d1
		cmp.b	d2,d1
		beq.s	processedZ
		tst.b	d2
		beq.s	pressingZ
		bset	#2,tjoy_byte
		bra.s	processedZ
pressingZ	bclr	#2,tjoy_byte
ProcessedZ	move.b	d2,(a1)

		lea	keystatus+45,a0
		lea	lastX,a1
		move.b	(a0),d2
		move.b	(a1),d1
		cmp.b	d2,d1
		beq.s	processedX
		tst.b	d2
		beq.s	pressingX
		bset	#3,tjoy_byte
		bra.s	processedX
pressingX	bclr	#3,tjoy_byte
ProcessedX	move.b	d2,(a1)

		lea	keystatus+38,a0
		lea	lastL,a1
		move.b	(a0),d2
		move.b	(a1),d1
		cmp.b	d2,d1
		beq.s	processedL
		tst.b	d2
		beq.s	pressingL
		bset	#7,tjoy_byte
		bra.s	processedZ
pressingL	bclr	#7,tjoy_byte
ProcessedL	move.b	d2,(a1)

		lea	keystatus+37,a0
		lea	lastK,a1
		move.b	(a0),d2
		move.b	(a1),d1
		cmp.b	d2,d1
		beq.s	processedK
		tst.b	d2
		beq.s	pressingK
		bset	#0,tjoy_byte
		bra.s	processedK
pressingK	bclr	#0,tjoy_byte
ProcessedK	move.b	d2,(a1)

		lea	keystatus+50,a0
		lea	lastM,a1
		move.b	(a0),d2
		move.b	(a1),d1
		cmp.b	d2,d1
		beq.s	processedM
		tst.b	d2
		beq.s	pressingM
		bset	#1,tjoy_byte
		bra.s	processedM
pressingM	bclr	#1,tjoy_byte
ProcessedM	move.b	d2,(a1)

		move.w	#17,-(sp)
		trap	#14
		addq.l	#2,sp
		move.b	d0,rndb

		clr.l	bar1
		clr.w	man_yoff
re_draw		clr.b	box_me
		clr.w	done_box
		move.b	priority,d0
		cmp.b	old_prior,d0
		beq.s	prior_same
		move.b	d0,old_prior
		move.b	#2,un_click

		move.w	#1599,d0
		move.l	old_screen,a0
		add.l	#$7d00,a0
		move.l	#$70300+mem,a1
bottom_line	move.l	-(a1),-(a0)
		dbra	d0,bottom_line
		
		bsr	droom_selector
		bsr	icon_selector
		bsr	main_selector
		bsr	wrap_round_dr
		bsr	draw_make
		jsr	play_menu
		jsr	main_game_draw
		bsr	clear_room
prior_same	lea	the_helps,a0
		move.b	priority,d0
find_help	cmp.b	#255,(a0)
		beq	redraw_screen
		cmp.b	(a0),d0
		beq	get_help_then
		addq.l	#2,a0
		bra.s	find_help

the_helps	dc.b	0,1
		dc.b	1,2
		dc.b	2,3
		dc.b	4,4
		dc.b	3,5
		dc.b	6,6
		dc.b	16,7
		dc.b	13,8
		dc.b	9,9
		dc.b	10,10
		dc.b	5,11
		dc.b	-1
		
get_help_then	clr.w	d0
		move.b	1(a0),d0
		move.w	d0,help_no
		cmp.b	#251,keybrd
		bne.s	redraw_screen
		move.w	in_play,-(sp)
		move.w	#1,in_play
		jsr	mode1
		jsr	display_help
		move.l	#$78000-$7d00+mem,a0
		move.w	#(8000*2)-1,d0
clr_scr_help	clr.l	(a0)+
		dbra	d0,clr_scr_help
		jsr	mode1
		move.w	#0,-(sp)
		move.l	#$78000+mem,-(sp)
		move.l	#$78000+mem,-(sp)
		move.w	#5,-(sp)
		trap	#14
		add.l	#12,sp
		move.w	(sp)+,in_play
		clr.b	keybrd
		bra	repeat
redraw_screen
		move.w	#165,d0
		move.l	old_screen,a1
		add.l	#$7d00,a1
		move.l	#$70300-48+mem,a0
trans		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#96,a0
		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#96,a0
		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#96,a0
		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#96,a0
		dbra	d0,trans
		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#96,a0
		movem.l	(a0)+,d1-d7/a2-a6
		movem.l	d1-d7/a2-a6,-(a1)
		sub.l	#32+48,a0
		movem.l	(a0)+,d1-d7/a2
		movem.l	d1-d7/a2,-(a1)



		IFNE	DEBUG



		move.l	old_screen,a0
		
		
		move.w	#100,d1
XXclr_magic_x	move.w	#6,d0
XXclr_magic	clr.l	(a0)+
		clr.l	(a0)+
		dbra	d0,XXclr_magic
		add.l	#13*8,a0
		dbra	d1,XXclr_magic_x




		move.w	#11,col1
		move.l	#$00000000,d0
		clr.l	d2
		*move.b	rawKeys,d2
		move.b	packetScanCode,d2
		*move.b	lastPacketS,d2
		move.l	d2,a0
		clr.l	w_mode1
		jsr	print_number
		
		move.l	#$00000010,d0
		clr.l	d2
		move.b	packetBuffer,d2
		move.l	d2,a0
		clr.l	w_mode1
		jsr	print_number	

		move.l	#$00000020,d0
		clr.l	d2
		move.b	packetBuffer+1,d2
		move.l	d2,a0
		clr.l	w_mode1
		jsr	print_number

		move.l	#$00000030,d0
		clr.l	d2
		move.b	packetBuffer+2,d2
		move.l	d2,a0
		clr.l	w_mode1
		jsr	print_number

		move.l	#$00000040,d0
		clr.l	d2
		move.b	packetBuffer+3,d2
		move.l	d2,a0
		clr.l	w_mode1
		jsr	print_number	
	
		ENDC

		move.b	priority,d0
		cmp.b	old_prior,d0
		bne	re_draw

		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		tst.b	un_click
		beq.s	ms_click_skip
		move.b	#248,ms_click
		bra.s	ms_click_skip
		tst.b	un_click
		beq.s	ms_click_skip
		cmp.b	#248,ms_click
		bne.s	let_go_then
		tst.b	set_by_me
		bne.s	let_go_then
		bra.s	ms_click_skip
let_go_then	move.b	#248,ms_click
		move.b	#1,set_by_me
ms_click_skip
		cmp.b	#19,priority
		blt.s	no_esc
		move.b	keybrd,d0
		cmp.b	#1,d0
		bne.s	no_esc
		tst.w	inter_level
		bne.s	no_esc
		tst.w	the_end_flag
		bne.s	no_esc
		cmp.w	#0,in_play
		bgt.s	yes_in_play
		clr.w	in_play
		move.b	#9,priority
		jsr	config_ms
		clr.b	stop_icon
		move.w	save_edit,edit_room
		move.w	#1,allow_CA
		bra	re_draw
yes_in_play	tst.l	man_dead
		bne.s	no_esc
		jsr	init_ydead
no_esc		tst.w	in_play
		bne	no_editor
		bsr	main_screen
		move.b	priority,d0
		cmp.b	old_prior,d0
		bne	re_draw
		bsr	room_selector
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	save_rooms
		bsr	load_rooms
		bsr	name_a_room
		bsr	main_editor

		cmp.b	#2,priority
		beq.s	show_18_then
		cmp.b	#4,priority
		beq.s	show_18_then
		cmp.b	#6,priority
		beq.s	show_18_then
		cmp.b	#10,priority
		beq.s	show_18_then
		cmp.b	#9,priority
		bne.s	no_show_18
		tst.w	allow_CA
		bne.s	no_show_18
show_18_then	bsr	show_18_icons
no_show_18

		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	icon_main
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	all_screens
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	do_clear_room
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	wrap_round
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		bsr	do_make
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		jsr	cont_play_menu2
no_editor	bsr	poke_extras
		jsr	pannel_candle
		move.b	old_prior,d0
		cmp.b	priority,d0
		bne	re_draw
		
no_more		
		tst.w	in_play
		beq.s	not_game
		jsr	move_man
		bra.s	the_game
not_game	lea	do_kill,a0
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)
		clr.w	sprite_pass
		clr.b	killer_good
		jsr	main_control
		move.w	#1,sprite_pass
		move.b	#1,killer_good
		jsr	main_control
		bsr	an_error1
		cmp.b	#1,box_me
		bne.s	alread_box
		bsr	box_it
alread_box	bsr	solid_window
		jsr	cont_play_menu
		move.b	priority,d0
		cmp.b	old_prior,d0
		bne	re_draw
the_game	
		bsr	do_magic_ma
		bsr	flash_magic
		bsr	no_show_magic4
		move.w	#15,col1

		clr.l	d0
		move.w	mx,d0
		move.l	d0,user_test
		move.w	my,d0
		move.l	d0,user_test2

		move.w	#15,col1
no_user		tst.w	in_play
		bne	no_find_me
		move.w	#399,d7
find_me_then	bsr	find_a_start
		dbra	d7,find_me_then
no_find_me	cmp.b	#2,un_click
		bne.s	pause
		move.b	#1,un_click
pause		move.b	raster,d1
		move.b	#1,d1
least_once
		cmp.b	vbl_counter,d1
		bge.s	least_once
		move.w	old_screen+2,d0
		lsr.w	#8,d0
		move.b	d0,$ffff8203
		move.b	#1,flip_mode
		cmp.b	#1,priority
		beq.s	see_gate
		cmp.b	#5,priority
		bne.s	pause2
see_gate	move.b	the_priority,d0
		cmp.b	priority,d0
		bne.s	pause2
		tst.b	touched_edit
		beq.s	pause2
		bsr	see_to_gate
		clr.b	touched_edit
pause2		tst.b	flip_mode
		bne.s	pause2
		move.b	priority,the_priority
		bra	repeat

init_numbers	move.l	#99999,d0
		move.l	d0,ototal_keys
		move.l	d0,opotion1
		move.l	d0,opotion2
		move.l	d0,opotion3
		move.l	d0,opotion4
		move.l	d0,olives
		move.l	d0,ogold_coins
		clr.l	want_old_data
		move.w	#8,d7
show_scores	move.w	d7,-(sp)
		jsr	display_score
		move.w	(sp)+,d7
		dbra	d7,show_scores
no_old_data	rts

okeybrd		dc.b	0
		even

flash_magic	cmp.b	#20,priority
		blt.s	no_show_magic
		tst.w	magic_option
		bmi.s	no_show_magic
		move.l	#system_blk+$3eb8,spdata
		lea	magic_block,a0
		move.w	magic_option,d0
		lsl.w	#2,d0
		move.l	0(a0,d0.w),xxx
		addq.w	#1,magic_blink
		move.w	magic_blink,d0
		andi.w	#7,d0
		cmpi.w	#3,d0
		blt.s	no_show_magic
		moveq.l	#9,d7
		jsr	ssprite
		add.w	#16,xxx
		addq.l	#8,spdata
		moveq.l	#9,d7
		jmp	ssprite
no_show_magic	rts

magic_option	dc.w	0
magic_blink	dc.w	0
show_magic	dc.w	0
magic_block	dc.w	211,188	;cross
		dc.w	228,188	;candle
		dc.w	194,188	;fire
		dc.w	228,179	;fall
		dc.w	194,179	;ice
		dc.w	211,179	;eye

no_show_magic3	tst.w	show_magic
		bne.s	no_show_magic4
		move.w	#50,show_magic
no_show_magic4	tst.w	show_magic
		beq	no_mshow
		cmp.b	#20,priority
		blt	no_mshow
		subq.w	#1,show_magic
		move.l	#system_blk+$7d00+117*160,a0
		move.l	old_screen,a1
		add.l	#$20+160*162,a1
		move.w	#10,d7
loop_magic	REPT	24
		move.l	(a0)+,(a1)+
		ENDR
		add.l	#64,a0
		add.l	#64,a1
		dbra	d7,loop_magic
		rts
no_mshow	clr.w	show_magic
		rts

no_show_magic2	clr.b	keybrd
		rts
do_magic_ma

yes_magnet

		cmp.b	#20,priority
		blt	no_show_magic2
		move.b	keybrd,okeybrd
		clr.b	keybrd
		cmp.b	#4,okeybrd
		bne.s	no_select_magic
		tst.w	in_sel_magic
		bne.s	no_select_magic
		bsr	draw_magic_sc
		clr.b	okeybrd

no_select_magic
		bra	redraw_magic

options_valid	ds.b	4
		ds.b	6
		dc.w	0


draw_magic_sc	clr.l	d0
		add.b	got_ice,d0
		add.b	got_cross,d0
		add.b	got_eye,d0
		add.b	got_fire,d0
		add.b	got_candle,d0
		add.b	got_armour,d0
		add.l	potion1,d0
		add.l	potion2,d0
		add.l	potion3,d0
		add.l	potion4,d0
		tst.l	d0
		beq	no_show_magic3
		addq.w	#1,in_sel_magic
		addq.w	#1,light_on

		lea	options_valid,a0
		clr.l	(a0)
		clr.l	4(a0)
		clr.l	8(a0)
		tst.l	potion1
		beq.s	no_set_opt1
		move.b	#1,(a0)
no_set_opt1	tst.l	potion2
		beq.s	no_set_opt2
		move.b	#1,1(a0)
no_set_opt2	tst.l	potion3
		beq.s	no_set_opt3
		move.b	#1,2(a0)
no_set_opt3	tst.l	potion4
		beq.s	no_set_opt4
		move.b	#1,3(a0)
no_set_opt4	addq.l	#4,a0
		move.l	got_cross,(a0)+
		move.l	got_ice,(a0)
		cmp.b	#20,priority
		blt	no_res_mag
		tst.l	man_dead
		bne	no_res_mag
		move.w	manx,the_pow_manx
		cmp.w	#1,min_buffer
		beq	no_res_mag
		move.w	#1,min_buffer
		move.l	old_screen,a0
		add.l	#$288,a0
		cmp.w	#(320/2),manx
		bgt.s	no_hi_order
		add.l	#72,a0
no_hi_order	move.w	#143+8,d1
clr_magic_x	move.w	#8,d0
clr_magic	clr.l	(a0)+
		clr.l	(a0)+
		dbra	d0,clr_magic
		add.l	#11*8,a0
		dbra	d1,clr_magic_x
		move.l	#draw2,a4
		cmp.w	#(320/2),manx
		bgt.s	draw_r_side
		move.l	#draw2_2,a4
draw_r_side
		move.l	#$00100004,a5
		move.l	a5,-(sp)
		move.l	#$009f0004,a6
		jsr	(a4)
		move.l	#$009f009b,a5
		jsr	(a4)
		move.l	#$0010009b,a6
		jsr	(a4)
		move.l	(sp)+,a5
		jsr	(a4)
		move.w	#11,col1
		lea	pow_mag_txt,a0
		move.l	#$00140007,d0
		cmp.w	#(320/2),manx
		bgt.s	no_adjust_txt
		add.l	#$00900000,d0
no_adjust_txt	jsr	print_text
		
		sub.l	a6,a6
		cmp.w	#(320/2),manx
		bgt.s	no_flip_pow
		add.l	#$48,a6
no_flip_pow
		move.b	#50,d0
		move.l	old_screen,a1
		add.l	#$10+16*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#51,d0
		move.l	old_screen,a1
		add.l	#$10+26*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#52,d0
		move.l	old_screen,a1
		add.l	#$10+36*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#49,d0
		move.l	old_screen,a1
		add.l	#$10+46*160,a1
		add.l	a6,a1
		bsr	display_1_icon


		move.b	#58,d0
		move.l	old_screen,a1
		add.l	#$10+87*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#57,d0
		move.l	old_screen,a1
		add.l	#$10+77*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#55,d0
		move.l	old_screen,a1
		add.l	#$10+126*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#56,d0
		move.l	old_screen,a1
		add.l	#$10+106*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#54,d0
		move.l	old_screen,a1
		add.l	#$10+96*160,a1
		add.l	a6,a1
		bsr	display_1_icon
		move.b	#53,d0
		move.l	old_screen,a1
		add.l	#$10+116*160,a1
		add.l	a6,a1
		bsr	display_1_icon

	
		move.l	old_screen,a0
		add.l	#$288,a0
		lea	magic_buffer,a1
		cmp.w	#(320/2),manx
		bgt.s	no_hi_order2
		add.l	#72,a0
no_hi_order2	move.w	#143+8,d1
clr_magic_x2	move.w	#8,d0
clr_magic2	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,clr_magic2
		add.l	#11*8,a0
		dbra	d1,clr_magic_x2

no_res_mag	rts

min_buffer	dc.w	0

draw2_2		add.l	#$900000,a5
		add.l	#$900000,a6
		bsr	draw2
		sub.l	#$900000,a5
		sub.l	#$900000,a6
		rts

mk1		equ	$9999
mk2		equ	$6666

redraw_magic	tst.w	in_sel_magic
		beq.s	no_res_mag
		cmp.b	#20,priority
		blt.s	no_res_mag
		tst.l	man_dead
		bne.s	no_res_mag
		move.b	tjoy_byte,d0
		and.b	#%10000000,d0
		tst.b	d0
		bne.s	does_mag2
do_keys_notj	cmp.b	#4,okeybrd
		bne.s	no_potions_pres
does_mag2	move.l	cur_pos_sel,d0
		subq.w	#4,d0
		tst.w	d0
		bmi.s	bad_magic
		move.b	tjoy_byte,d1
		and.b	#%10000000,d1
		tst.b	d1
		beq.s	bad_magic
		cmp.w	magic_option,d0
		bne.s	nremove_magic
		move.w	#-1,d0
nremove_magic	move.w	d0,magic_option
bad_magic	clr.w	in_sel_magic
		subq.w	#1,light_on
		and.b	#%1111,tjoy_byte
		cmp.b	#4,okeybrd
		beq.s	no_done_mag
		cmp.l	#4,cur_pos_sel
		bge.s	no_potions_pres
		move.b	#251,keybrd
		move.l	cur_pos_sel,d0
		add.b	d0,keybrd
		bra.s	no_done_mag
no_potions_pres
no_done_mag
forced_keys	move.l	old_screen,a1
		add.l	#$288,a1
		lea	magic_buffer,a0
		lea	draw,a3
		cmp.w	#(320/2),the_pow_manx
		bgt.s	no_hi_order3
		add.l	#72,a1
		lea	draw_sel2,a3
no_hi_order3	move.w	#143+8,d1
clr_magic_x3	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#11*8,a1
		dbra	d1,clr_magic_x3
no_bright_red	lea	options_valid,a2
		lea	mask_options,a4
		clr.w	d1
		clr.w	d2
mask_out_all	tst.b	0(a2,d1.w)
		bne	no_mask_all
		move.l	0(a4,d2.w),a1
		add.l	old_screen,a1
		cmp.w	#(320/2),the_pow_manx
		bgt.s	no_set_hi_mk
		add.l	#72,a1
no_set_hi_mk	move.l	#mk1,d4
		move.l	#mk2,d5
		move.l	#112,d6
		move.w	#4,d0
mask_out_ln	and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		add.l	d6,a1
		and.l	d5,(a1)+
		and.l	d5,(a1)+		
		and.l	d5,(a1)+
		and.l	d5,(a1)+		
		and.l	d5,(a1)+
		and.l	d5,(a1)+		
		and.l	d5,(a1)+
		and.l	d5,(a1)+
		and.l	d5,(a1)+
		and.l	d5,(a1)+
		and.l	d5,(a1)+
		and.l	d5,(a1)+
		add.l	d6,a1
		dbra	d0,mask_out_ln
no_mask_all	addq.w	#1,d1
		addq.w	#4,d2
		cmp.w	#10,d1
		bne	mask_out_all


		move.l	cur_pos_sel,d0
		lea	options_valid,a0
		tst.b	0(a0,d0.l)
		bne.s	option_set
		clr.l	d0
find_free_opt	tst.b	0(a0,d0.l)
		bne.s	option_set
		addq.l	#1,d0
		bra.s	find_free_opt
option_set	move.l	d0,cur_pos_sel
		mulu	#20,d0
		lea	list_box,a4
		add.l	d0,a4
		move.l	(a4)+,a5
		move.l	(a4)+,a6
		jsr	(a3)
		move.l	(a4)+,a5
		jsr	(a3)
		move.l	(a4)+,a6
		jsr	(a3)
		move.l	(a4)+,a5
		jsr	(a3)
		lea	options_valid,a0
		move.b	tjoy_byte,d0
		and.b	#%000001,d0
		tst.b	d0
		beq.s	no_sel_uppos
find_free_opt1	subq.l	#1,cur_pos_sel
		tst.l	cur_pos_sel
		bpl.s	no_sel_uppos
		move.l	#9,cur_pos_sel
no_sel_uppos	move.l	cur_pos_sel,d1
		tst.b	0(a0,d1.l)
		beq.s	find_free_opt1
		move.b	tjoy_byte,d0
		and.b	#%000010,d0
		tst.b	d0
		beq.s	no_sel_dpos
find_free_opt2	addq.l	#1,cur_pos_sel
		cmp.l	#10,cur_pos_sel
		bne.s	no_sel_dpos
		clr.l	cur_pos_sel
no_sel_dpos	move.l	cur_pos_sel,d1
		tst.b	0(a0,d1.l)
		beq.s	find_free_opt2
		tst.w	freeze_mode
		beq.s	no_froze
		jmp	freezing
no_froze	addq.b	#1,flamer_del
		move.b	flamer_del,d0
		and.b	#1,d0
		tst.b	d0
		bne.s	pal_flame
		addq.b	#1,flamer
pal_flame	move.l	#system_blk+$7d00*2+$51e0,a0
		clr.l	d0
		move.b	flamer,d0
		and.b	#3,d0
		lsl.w	#3,d0
		add.l	d0,a0
		move.l	old_screen,a1
		add.l	#$500*11+$10-160,a1
		cmp.w	#(320/2),the_pow_manx
		bgt.s	no_set_hi_mk33
		add.l	#72,a1
no_set_hi_mk33	move.l	(a0),(a1)
		move.l	4(a0),4(a1)
		move.l	160(a0),160(a1)
		move.l	164(a0),164(a1)
		move.l	320(a0),320(a1)
		move.l	324(a0),324(a1)
		rts

flamer		dc.b	0
flamer_del	dc.b	0

draw_sel2	add.l	#$900000,a5
		add.l	#$900000,a6
		bsr	draw
		sub.l	#$900000,a5
		sub.l	#$900000,a6
		rts

cur_pos_sel	dc.l	0
mask_options	dc.l	(20*8*14)+24
		dc.l	(20*8*24)+24
		dc.l	(20*8*34)+24
		dc.l	(20*8*44)+24

		dc.l	(20*8*77)+24
		dc.l	(20*8*87)+24
		dc.l	(20*8*97)+24
		dc.l	(20*8*107)+24
		dc.l	(20*8*117)+24
		dc.l	(20*8*127)+24

list_box	dc.l	$1c000f,$90000f,$900019,$1c0019,$1c000f
		dc.l	$1c0019,$900019,$900023,$1c0023,$1c0019
		dc.l	$1c0023,$900023,$90002d,$1c002d,$1c0023
		dc.l	$1c002d,$90002d,$900037,$1c0037,$1c002d

		dc.l	$1c004b,$90004b,$900055,$1c0055,$1c004b
		dc.l	$1c0055,$900055,$90005f,$1c005f,$1c0055
		dc.l	$1c005f,$90005f,$900069,$1c0069,$1c005f
		dc.l	$1c0069,$900069,$900073,$1c0073,$1c0069
		dc.l	$1c0073,$900073,$90007d,$1c007d,$1c0073
		dc.l	$1c007d,$90007d,$900087,$1c0087,$1c007d

pow_mag_txt	dc.b	'        POTIONS',255,252,9,'      REPAIR SURFACE',255
		dc.b	'      MAGIC VISION',255
		dc.b	'      CREATE SURFACE',255
		dc.b	'      INVULUABILITY',255,252,11
		dc.b	255,'        POWERS',255,252,9
		dc.b	'      DISPELL UNDEAD',255
		dc.b	'      LIGHT ROOMS',255
		dc.b	'      FIRE BOLT',255
		dc.b	'      BREAK FALL',255
		dc.b	'      CREATE ICE',255
		dc.b	'      MAGIC VISION',255,252,1,255
		dc.b	'PRESS SPACE BAR TO EXIT',0

		even

the_pow_manx	dc.l	0
waves_offs	dc.l	0
waves_offs2	dc.l	0
waves_offs3	dc.l	16

poke_extras	lea	system_blk+$7d00*2+$53c0,a0
		add.l	waves_offs,a0
		lea	system_blk+$7d00*2+$520,a1
		bsr	copy_2_lines
		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		beq.s	more_3_pokes1
		add.l	#8,waves_offs
		cmp.l	#8*4,waves_offs
		blt.s	more_3_pokes1
		clr.l	waves_offs
more_3_pokes1	lea	system_blk+$7d00*2+$51e0,a0
		add.l	waves_offs2,a0
		lea	system_blk+$7d00*2+$a90,a1
		bsr	copy_3_lines
		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		beq.s	more_3_pokes2
		add.l	#8,waves_offs2
		cmp.l	#8*4,waves_offs2
		blt.s	more_3_pokes2
		clr.l	waves_offs2
more_3_pokes2	lea	system_blk+$7d00*2+$a98,a1
		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		beq.s	skip_pokie
		add.l	#8,waves_offs3
		cmp.l	#8*4,waves_offs3
		blt.s	skip_pokie
		clr.l	waves_offs3
skip_pokie	lea	system_blk+$7d00*2+$51e0,a0
		add.l	waves_offs3,a0
		bsr	copy_3_lines

more_3_pokes3	rts

copy_3_lines	move.l	320(a0),320(a1)
		move.l	324(a0),324(a1)
copy_2_lines	move.l	(a0),(a1)
		move.l	4(a0),4(a1)
		move.l	160(a0),160(a1)
		move.l	164(a0),164(a1)
		rts


all_screens	cmp.b	#5,priority
		beq	no_wrap
		cmp.b	#1,priority
		bne	on_1st_screen
		bsr	made_me_ok
		bra	allocate_space

made_me_ok	cmp.w	#100,edit_room
		ble.s	no_wrapabc
		move.w	#1,exit_hl
no_wrapabc	
*		tst.w	game_play_mode
*		beq.s	no_side_edit
*		bsr	make_sides
no_side_edit	move.w	my,d0
		cmp.w	#306,mx
		blt.s	no_wrap
		cmp.w	#179,d0
		blt.s	no_wrap
		cmp.w	#186,d0
		bgt.s	no_wrap
		move.l	#SPHARD,w_mode1
		move.l	#$004b0020,d0
		move.l	#$013100b2,d1
		move.l	#$00090007,d2
		jsr	sprite
		move.l	#SPXOR,w_mode1
		cmp.b	#248,ms_click
		beq.s	no_wrap
		move.b	#10,priority

no_wrap		cmp.w	#16,mx
		blt.s	active_failed
		cmp.w	#303,mx
		bgt.s	active_failed
		cmp.w	#189,my
		blt.s	active_failed
		cmp.w	#196,my
		bgt.s	active_failed
		cmp.b	#248,ms_click
		beq.s	active_failed
		move.w	mx,d0
		sub.w	#16,d0
		lsr.w	#4,d0
		move.w	d0,char_active
		
active_failed	move.l	#$00000020,d0
		move.l	#$001600ba,d1
		move.l	#$0005000e,d2
		move.w	char_active,d3
		lsl.w	#4,d3
		swap	d1
		add.w	d3,d1
		swap	d1
		jsr	sprite
task2		bra	task3

soffset		dc.l	0

main_room_edit	cmp.b	#5,priority
		beq.s	cheat_plot
		cmp.b	#1,priority
		bne	task3end
		cmp.b	#1,the_priority
		bne	task3end
		cmp.w	#159,my
		bgt	task3end
		bra.s	do_plot_true
cheat_plot	cmp.b	#5,the_priority
		bne	task3end
		cmp.w	#$b0,mx
		blt	task3end
		cmp.w	#$12f,mx
		bgt	task3end
		cmp.w	#$70,my
		blt	task3end
		cmp.w	#$a6-8,my
		bgt	task3end
do_plot_true	cmp.b	#248,ms_click
		beq	task3end
		clr.l	d0
		move.w	mx,d0
		move.w	my,d1
		lsr.w	#4,d0
		move.w	d0,d2
		swap	d2
		lsr.w	#3,d1
		move.w	d1,d6
		move.w	d1,d2
		lsl.w	#3,d0
		mulu	#$500,d1
		add.w	d1,d0
		move.l	d0,soffset
		move.l	#mem+$68600,a1
		add.l	d0,a1
		cmp.b	#249,ms_click
		beq.s	delete_char
		move.w	icon_no,d0
		add.w	char_active,d0
		bsr	is_char_ok
		bne	task3end
		bra.s	send_char
delete_char	clr.w	d0
send_char	cmp.b	#5,priority
		beq	task3b
		bsr	calc_re_plot
		beq.s	no_plot_1_icon
		bsr	display_1_icon
no_plot_1_icon	move.b	#1,touched_edit
		movem.l	d0-d2,-(sp)
		bsr	make_xy_pl
		move.b	d4,0(a0,d0.w)
		move.l	a0,a1
		movem.l	(sp)+,d0-d2
		movem.l	d0-d2,-(sp)
		bsr	_re_plot
		movem.l	(sp)+,d0-d2
		bsr	make_xy_pl
		
		cmp.b	#17,d4
		bne.s	no_bottom_g
		move.b	#18,20(a1,d0.w)
no_bottom_g	cmp.b	#18,d4
		bne.s	no_top_g
		sub.l	#20,a1
		move.b	#17,0(a1,d0.w)
no_top_g
		bra	task3end

calc_re_plot	movem.l	d0-d2/a0,-(sp)
		move.b	d0,d4
		clr.l	d0
		move.w	d2,d0
		mulu	#22,d0
		swap	d2
		add.w	d2,d0
		add.w	#45,d0
		lea	syst_buf,a0
		move.b	0(a0,d0.w),d7
		movem.l	(sp)+,d0-d2/a0
		cmp.b	d4,d7
		rts

_re_plot	movem.l	d0-d2/a0,-(sp)
		move.b	d0,d4
		clr.l	d0
		move.w	d2,d0
		mulu	#22,d0
		swap	d2
		add.w	d2,d0
		add.w	#45,d0
		lea	syst_buf,a0
		move.b	d4,0(a0,d0.w)
		movem.l	(sp)+,d0-d2/a0
		rts

task3b		movem.l	d0-d1/a0,-(sp)
		move.w	mx,d1
		move.w	d1,d6
		lsr.w	#4,d6
		swap	d6
		sub.w	#$b0,d1
		lsr.w	#4,d1
		move.w	my,d2
		move.w	d2,d6
		lsr.w	#3,d6
		sub.w	#$70,d2
		lsr.w	#3,d2
		lsl.w	#3,d2
		add.w	d2,d1
		lea	user_play,a0
		move.b	0(a0,d1.w),d7
		move.b	d0,0(a0,d1.w)

		movem.l	(sp)+,d0-d1/a0
		move.l	d6,d2
		cmp.b	d7,d0
		beq.s	no_display_chea
	
		bsr	display_1_icon
no_display_chea	move.b	d0,d4
		clr.l	d0
		move.w	d2,d0
		mulu	#22,d0
		swap	d2
		add.w	d2,d0
		add.w	#45,d0
		lea	syst_buf,a0
		move.b	d4,0(a0,d0.w)
task3end	rts

task3		cmp.w	#5,mx
		blt	no_arr_left
		cmp.w	#13,mx
		bgt	no_arr_left
		cmp.w	#190,my
		blt	no_arr_left
		cmp.w	#196,my
		bgt	no_arr_left
		move.l	#SPHARD,w_mode1
		move.l	#$00700019,d0
		move.l	#$000500be,d1
		move.l	#$00090007,d2
		jsr	sprite
		cmp.b	#250,ms_click
		bne.s	chk_rig_cl_sc
		IFEQ	DEBUG
		cmp.w	#MAX_DICON,icon_no
		beq.s	alreadmax
		ENDC
		addq.w	#1,icon_no
		move.b	#2,un_click
alreadmax	bra	show_18_icons

chk_rig_cl_sc	cmp.b	#249,ms_click
		bne	no_arr_right
		IFEQ	DEBUG
		cmp.w	#MAX_DICON-17,icon_no
		blt.s	add17
		move.w	#MAX_DICON,icon_no
		bra.s	range1ok
		ENDC
add17		add.w	#17,icon_no
range1ok	move.b	#2,un_click
		bra	show_18_icons
	
no_arr_left	cmp.w	#306,mx
		blt	show_18_icons
		cmp.w	#314,mx
		bgt	show_18_icons
		cmp.w	#190,my
		blt	show_18_icons
		cmp.w	#196,my
		bgt	show_18_icons
		move.l	#SPHARD,w_mode1
		move.l	#$0740019,d0
		move.l	#$013200be,d1
		move.l	#$00090007,d2
		jsr	sprite
		cmp.b	#250,ms_click
		bne.s	chk_rig_cr_sc
		IFEQ	DEBUG
		tst.w	icon_no
		beq.s	alreadmin
		ENDC
		subq.w	#1,icon_no
		move.b	#2,un_click
alreadmin	bra	show_18_icons

chk_rig_cr_sc	cmp.b	#249,ms_click
		bne	show_18_icons
		IFEQ	DEBUG
		cmp.w	#17,icon_no
		bgt	sub17
		clr.w	icon_no
		bra.s	range2ok
		ENDC
sub17		sub.w	#17,icon_no
range2ok	move.b	#2,un_click
		
no_arr_right	bra	show_18_icons


on_1st_screen	rts

is_char_ok	clr.w	d3
		cmp.b	#12,d0
		beq.s	do_valid_star
		cmp.b	#13,d0
		beq	do_valid_here
		cmp.b	#43,d0
		beq	do_valid_end
		cmp.b	#17,d0
		beq	do_valid_gate1
		cmp.b	#18,d0
		beq	do_valid_gate2
		cmp.b	#22,d0
		beq.s	do_valid_grave
		cmp.b	#11,d0
		beq.s	do_valid_crown
char_valid	tst.w	d3
		rts

do_valid_star	cmp.w	#101,edit_room
		bge.s	char_invalid
		tst.b	d6
		beq.s	char_invalid
*		tst.w	game_play_mode
*		beq.s	stars_here
*		cmp.b	#19,d6
*		beq.s	char_invalid
stars_here	bsr	remove_sitem
		bra.s	char_valid

do_valid_crown	cmp.w	#101,edit_room
		bge.s	char_invalid
*		tst.w	game_play_mode
*		beq.s	char_invalid
*		bra.s	char_valid
char_invalid	addq.w	#1,d3
		tst.w	d3
		rts

do_valid_grave	tst.b	d6
		beq.s	char_invalid
*		tst.w	game_play_mode
*		beq.s	char_valid
*		cmp.b	#19,d6
*		beq.s	char_invalid
		bra.s	char_valid

make_xy_pl	move.b	d0,d4
		clr.l	d0
		move.w	d2,d0
		mulu	#20,d0
		swap	d2
		add.w	d2,d0
		clr.l	d1
		move.w	edit_room,d1
		subq.w	#1,d1
		mulu	#400,d1
		add.l	#room,d1
		move.l	d1,a0
		rts

do_valid_here	tst.w	d6 
		beq.s	char_invalid
		tst.w	game_play_mode
		beq.s	yes_walk_game
*		cmp.w	#19,d6
*		beq.s	char_invalid
yes_walk_game	bsr	remove_sitem
		bra	char_valid

do_valid_end	bra	char_valid
*		cmp.w	#101,edit_room
*		bge	char_valid
*		tst.w	game_play_mode
*		beq	char_valid
*		bra.s	char_invalid

do_valid_gate1	cmp.w	#16,no_of_gates
		bge.s	char_invalid
		bra	put_gate_on2
*		tst.w	game_play_mode
*		beq	put_gate_on2
*		cmp.b	#1,d6
*		ble	char_invalid
*		cmp.b	#17,d6
*		bge	char_invalid
*		addq.w	#1,no_of_gates
*		move.b	#2,un_click
*		move.b	#248,ms_click
*		bra	char_valid

no_of_gates	dc.w	0

do_valid_gate2	cmp.w	#16,no_of_gates
		bge	char_invalid
*		tst.w	game_play_mode
*		beq.s	put_gate_on1
*		cmp.b	#2,d6
*		ble	char_invalid
*		cmp.b	#18,d6
*		bge	char_invalid
*		addq.w	#1,no_of_gates
*		move.b	#2,un_click
*		move.b	#248,ms_click
*		bra	char_valid

put_gate_on1	tst.b	d6
		beq	char_invalid
		addq.w	#1,no_of_gates
		move.b	#2,un_click
		move.b	#248,ms_click
		bra	char_valid

put_gate_on2	cmp.b	#19,d6
		beq	char_invalid
		addq.w	#1,no_of_gates
		move.b	#2,un_click
		move.b	#248,ms_click
		bra	char_valid
		
init_ipos	lea	syst_buf+45,a3
		move.w	edit_room,d1
		subq.w	#1,d1
		mulu	#400,d1
		add.l	#room,d1
		move.l	d1,a2
		clr.w	d2
		clr.w	d5
		rts

see_to_gate	movem.l	d0-d7/a0-a2,-(sp)
		bsr	init_ipos
		clr.w	d6
		clr.w	d7
		clr.w	no_of_gates
sort_out_gate	
no_fear_gr1	cmp.b	#17,0(a2,d2.w)
		bne.s	no_fear_g1
		move.b	#17,d0
		bsr	unblack_it
		cmp.b	#18,20(a2,d2.w)
		beq.s	no_fear_g2pl
		subq.w	#1,no_of_gates
		bsr	black_it
		bra.s	no_fear_g1
no_fear_g2pl	add.w	#20,d2
		move.b	#18,d0
		addq.w	#1,no_of_gates
		bsr	unblack_it
		sub.w	#20,d2
		bra.s	no_fear_g2
no_fear_g1
		cmp.b	#18,0(a2,d2.w)
		bne.s	no_fear_g2
		move.b	#18,d0
		bsr	unblack_it
		sub.w	#20,d2
		cmp.b	#17,0(a2,d2.w)
		beq.s	no_fear_g2bpl
		add.w	#20,d2
		bsr	black_it
		subq.w	#1,no_of_gates
		bra.s	no_fear_g2
no_fear_g2bpl	move.b	#17,d0
		bsr	unblack_it
		add.w	#20,d2
		addq.w	#1,no_of_gates
no_fear_g2	move.b	0(a2,d2.w),0(a3,d6.w)
		addq.w	#1,d7
		addq.w	#1,d6
		cmp.w	#20,d7
		bne.s	no_rest_d7
		clr.w	d7
		addq.w	#2,d6
no_rest_d7	addq.w	#1,d2
		cmp.w	#400,d2
		blt	sort_out_gate
		movem.l	(sp)+,d0-d7/a0-a2
		bra	char_valid

remove_sitem	movem.l	d0-d7/a0-a2,-(sp)
		bsr	init_ipos
		clr.w	d6
		clr.w	d7
find_item_sp	cmp.b	0(a2,d2.w),d0
		bne.s	dont_remove
		bsr	black_it
dont_remove	addq.w	#1,d2
		addq.w	#1,d6
		addq.w	#1,d7
		cmp.w	#20,d7
		bne.s	no_d6_rest
		addq.w	#2,d6
		clr.w	d7
no_d6_rest	cmp.w	#400,d2
		blt	find_item_sp
		movem.l	(sp)+,a0-a2/d0-d7
		rts

black_it	move.l	#system_blk+$7d00*2,a0
		clr.b	0(a2,d2.w)
		clr.b	0(a3,d6.w)
do_unblack	move.l	#mem+$68600,a1
		clr.l	d4
		move.w	d2,d4
		divs	#20,d4
		move.w	d4,d5
		mulu	#$500,d5
		clr.w	d4
		swap	d4
		lsl.w	#3,d4
		add.l	d4,d5
		add.l	d5,a1
		bra	bound_sprite

unblack_it	
		move.l	#system_blk+$7d00*2+17*8,a0
		cmp.b	#17,d0
		beq.s	do_unblack
		addq.l	#8,a0
		bra.s	do_unblack


main_screen	tst.b	priority
		bne	not_1st_screen
		bsr	wow_control

main_selector	cmp.b	#1,priority
		bne.s	not_1st_screen

no_pal_adjust	move.l	#mem+$6ea00,a0
		move.w	#639,d0
clrsmall	clr.l	(a0)+
		dbra	d0,clrsmall

		move.l	#system_blk+($7d00*2)+$6d60-160,a0
		move.l	#mem+$6f360-160,a1
		move.w	#999+40,d0
copy_sc2	move.l	(a0)+,(a1)+
		dbra	d0,copy_sc2
		bsr	show_18_icons
		bsr	show_room
		bsr	copy_O_to_W
		bra	print_room_name
not_1st_screen	rts




main_editor	cmp.b	#1,priority
		bne.s	not_range

		cmp.w	#178,my
		blt.s	not_range
		cmp.w	#184,my
		bgt.s	not_range

		lea	menu_opt,a0
		move.w	#7,d3
		move.w	mx,d4

check_window	move.w	(a0)+,d0
		move.w	(a0)+,d1
		move.w	d1,d2
		sub.w	d0,d2
		addq.l	#1,d2
		cmp.w	d0,d4
		blt.s	not_range
		cmp.w	d1,d4
		ble.s	highlight_box
		dbra	d3,check_window
not_range	rts

highlight_box	swap	d2
		move.w	#7,d2
		move.w	d0,d1
		swap	d1
		move.w	#178,d1
		move.l	#$00150010,d0
		move.l	#SPXOR,w_mode1
		jsr	sprite
		not.b	d3
		add.b	#10,d3
		cmp.b	#9,d3
		beq.s	no_confirm_ok
		cmp.b	#6,d3
		bgt.s	kipie
no_confirm_ok	cmp.b	#248,ms_click
		beq.s	not_range
		bra.s	set_val
kipie		cmp.b	#251,ms_click
		bne.s	not_range
set_val		move.b	d3,priority
		move.b	#100,xcursor
		cmp.b	#4,d3
		bne.s	no_2_sel
		move.b	#3,priority
no_2_sel	cmp.b	#3,d3
		bne.s	no_reset_icon
		move.b	#4,priority
		clr.b	which_icon
no_reset_icon	rts

xo		equ	8

menu_opt	dc.w	15-xo,44-xo
		dc.w	51-xo,80-xo
		dc.w	87-xo,116-xo
		dc.w	123-xo,152-xo
		dc.w	159-xo,194-xo
		dc.w	201-xo,230-xo
		dc.w	237-xo,266-xo
		dc.w	273-xo,302-xo

		even
touched_edit	dc.b	0
		even


room_selector	cmp.b	#2,priority
		bne	not_choosing
		move.w	#15,col1
		move.l	#$000700b2,d1
		bsr	show_option
		bsr	display_CA

		cmp.w	#16,mx
		ble.s	no_room2
		cmp.w	#16+16*ROOM_MAX-2,mx
		bgt.s	no_room2
		cmp.w	#24,my
		ble.s	no_room2
		cmp.w	#24+8*ROOM_MAX-2,my
		bgt.s	no_room2
		move.w	mx,d0
		sub.w	#16,d0
		lsr.w	#4,d0
		addq.w	#1,d0
		move.w	my,d1
		sub.w	#24,d1
		lsr.w	#3,d1
		mulu	#ROOM_MAX,d1
		add.w	d1,d0
		move.w	d0,f_room
		cmp.b	#249,ms_click
		bne.s	no_room2
		move.w	d0,start_room
no_room2


no_room
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$c5,d0
*		blt.s	no_chn_gmode1
*		cmp.w	#$c5+$67,d0
*		bgt.s	no_chn_gmode1
*		cmp.w	#$6d,d1
*		blt.s	no_chn_gmode1
*		cmp.w	#$6d+9,d1
*		bgt.s	no_chn_gmode1
*		cmp.b	#251,ms_click
*		bne.s	no_chn_gmode2
*		clr.w	game_play_mode
*		bsr	init_system
*		bra.s	no_chn_gmode2
*
*no_chn_gmode1	cmp.w	#$c5,d0
*		blt.s	no_chn_gmode2
*		cmp.w	#$c5+$43,d0
*		bgt.s	no_chn_gmode2
*		cmp.w	#$77,d1
*		blt.s	no_chn_gmode2
*		cmp.w	#$77+9,d1
*		bgt.s	no_chn_gmode2
*		cmp.b	#251,ms_click
*		bne.s	no_chn_gmode2
*		move.w	#1,game_play_mode
*		bsr	init_system
*no_chn_gmode2	tst.w	game_play_mode
*		bne	gtype_two
*		move.l	#$00870008,d0
*		move.l	#$00c5006d,d1
*		move.l	#$00480009,d2
*		move.w	#7,col1
*		jsr	sprite
*		move.l	#$010d006d,d1
*		move.l	#$001f0009,d2
*		jsr	sprite
*		bra	skip_Gtype
*
*init_system	lea	txt_col,a0
*		lea	rooms_here_id,a1
*		move.w	#99,d0
*set_col		move.w	d0,d1
*		and.w	#7,d1
*		move.b	d1,(a0)+
*		clr.b	(a1)+
*		dbra	d0,set_col
*
*		lea	names,a0
*		move.w	#499,d0
*clr_names	clr.l	(a0)+
*		dbra	d0,clr_names
*
*		lea	path_def,a0
*		lea	room,a1
*		move.w	#2499,d0
*clr_path_def	clr.l	(a0)+
*		clr.l	(a0)+
*		clr.l	(a0)+
*		clr.l	(a0)+
*		clr.l	(a1)+
*		clr.l	(a1)+
*		clr.l	(a1)+
*		clr.l	(a1)+
*		dbra	d0,clr_path_def
*
*		move.w	#1999,d0
*		lea	sprite_buf,a0
*		lea	save_pos,a1
*clr_sprite_buf	clr.l	(a0)+
*		clr.l	(a0)+
*		clr.l	(a1)+
*		clr.l	(a1)+
*		dbra	d0,clr_sprite_buf
*		lea	false_switches,a0
*		lea	true_switches,a1
*		move.w	#1059,d0
*clr_switch_bit	clr.l	(a0)+
*		clr.l	(a1)+
*		dbra	d0,clr_switch_bit
*		bra	print_room_name
*
*gtype_two	move.l	#$00870008,d0
*		move.l	#$00c50077,d1
*		move.l	#$00430009,d2
*		bsr	sprite
*
skip_Gtype	clr.w	no_way_out
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$c0,d0
		blt.s	no_game_mode
		cmp.w	#$130,d0
		bgt.s	no_game_mode
		cmp.w	#$50,d1
		blt.s	no_game_mode
		cmp.w	#$88,d1
		bgt.s	no_game_mode
		move.b	#2,un_click
		addq.w	#1,no_way_out




no_game_mode	move.w	edit_room,o_edit_room
		move.w	f_room,t_room
		move.w	f_room,edit_room

		move.w	mx,d0
		move.w	my,d1
		cmp.w	#18,d0
		blt.s	no_secret_sel
		cmp.w	#16+16*(4+DEBUG),d0
		bgt.s	no_secret_sel
		cmp.w	#136-7,d1
		blt.s	no_secret_sel
		cmp.w	#136,d1
		bgt.s	no_secret_sel
		sub.w	#18,d0
		lsr.w	#4,d0
		add.w	#101,d0
		move.w	d0,edit_room
		sub.w	#101,d0
		lsl.w	#4,d0
		add.w	#21,d0
		move.w	d0,d1
		swap	d1
		move.w	#136-7,d1
		move.l	#$00800010,d0
		move.l	#$00070007,d2
		bsr	sprite

no_secret_sel	move.w	#11,col1
		move.l	#$00b80036,d0
		sub.l	a0,a0
		move.w	t_room,a0
		jsr	print_number
		move.w	#15,col1

show_room_no	tst.w	no_way_out
		bne.s	no_room222
		cmp.b	#249,ms_click
		ble.s	no_room222
		move.b	#1,priority
		bra	show_room

		even
no_way_out	dc.w	0
t_room		dc.w	1
f_room		dc.w	1
o_edit_room	dc.w	0

no_room222	clr.l	d0
		move.w	start_room,d0
		bsr	block_plot
		move.l	#$00a00020,d0
		move.l	#$00110009,d2
		clr.l	w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		bsr	sprite

		clr.l	d0
		move.w	f_room,d0
		bsr	block_plot
		move.l	#$00800018,d0
		move.l	#$00100008,d2
		bsr	sprite

		move.w	edit_room,d0
		cmp.w	o_edit_room,d0
		beq.s	not_choosing
		bra	print_room_name

block_plot	subq.w	#1,d0
		divu	#ROOM_MAX,d0
		move.w	d0,d1
		lsl.w	#3,d1
		add.w	#24,d1
		swap	d0
		lsl.w	#4,d0
		add.w	#16,d0
		swap	d0
		move.w	d1,d0
		move.l	d0,d1		

not_choosing	rts


droom_selector	cmp.b	#2,priority
		bne.s	not_choosing
		cmp.w	#100,edit_room
		bgt.s	no_way_fool_me
		move.w	edit_room,f_room
no_way_fool_me	bsr	small_cls
		bsr	clear_room_id

		move.l	#system_blk+$f10,a2
		move.l	old_screen,a3
		move.w	#19,d0
		move.w	d0,d1
		bsr	print_block

		move.l	#system_blk+$f00,a2
		move.l	old_screen,a3
		add.l	#$f08,a3
		move.w	#ROOM_MAX-1,d0
		move.w	d0,d1
		bsr	print_block

		move.l	#system_blk+$f20,a2
		move.l	old_screen,a3
		add.l	#$508+$a00+ROOM_MAX*$500,a3
		move.w	#ROOM_MAX-1,d0
		clr.w	d1
		bsr	print_block

		move.l	#system_blk+$f28,a2
		move.l	old_screen,a3
		add.l	#$f00+8+ROOM_MAX*$8,a3
		clr.w	d0
		move.w	#ROOM_MAX-1,d1
		bsr	print_block

		move.l	#system_blk+$f08,a2
		move.l	old_screen,a3
		add.l	#$508,a3
		move.w	#13,d0
		clr.w	d1
		bsr	print_block

		move.l	old_screen,a3
		add.l	#$508-160,a3
		move.w	#27,d0
clr_line_wd	clr.l	(a3)+
		dbra	d0,clr_line_wd

		move.l	old_screen,a3
		add.l	#$f60,a3
		move.w	#3,d0
		move.w	#4,d1
		bsr	print_block

		move.l	#$00c00018,a5
		move.l	#$01000018,a6
		bsr	draw
		move.l	#$01000040,a5
		bsr	draw
		move.l	#$00c00040,a6
		bsr	draw
		move.l	#$00c00018,a5
		bsr	draw

		move.w	#3,col1
		move.l	#$00cc0020,d0
		lea	editing_room,a0
		jsr	print_text

		move.l	#$00180008,d0
		lea	room_info,a0
		move.w	#2,col1
		jsr	print_text

		move.l	#system_blk+$f08,a2
		move.l	old_screen,a3
		add.l	#$4608,a3
		clr.w	d1
		move.w	#5,d0
		bsr	print_block

		move.l	#$00180071,d0
		lea	room_sect,a0
		move.w	#10,col1
		jsr	print_text

		move.l	old_screen,a3
		add.l	#$4608+160*8,a3
		move.w	#11,d0
clr_line_wd2	clr.l	(a3)+
		dbra	d0,clr_line_wd2

		
		move.l	#system_blk+$f00,a2
		move.l	old_screen,a3
		add.l	#$5008,a3
		move.w	#4,d0
		clr.w	d1
		bsr	print_block

		move.l	#system_blk+$f20,a2
		move.l	old_screen,a3
		add.l	#$5508,a3
		move.w	#3+DEBUG,d0
		clr.w	d1
		bsr	print_block

		addq.l	#8,a2
		move.l	old_screen,a3
		add.l	#$5008+8*(4+DEBUG),a3
		clr.w	d0
		clr.w	d1
		bsr	print_block

*		move.l	#system_blk+$f08,a2
*		move.l	old_screen,a3
*		add.l	#$3260,a3
*		move.w	#6,d0
*		move.w	d0,d1
* 		bsr	print_block
*
*		move.l	#$00c00050,a5
*		move.l	#$01300050,a6
*		bsr	draw
*		move.l	#$01300088,a5
*		bsr	draw
*		move.l	#$00c00088,a6
*		bsr	draw
*		move.l	#$00c00050,a5
*		bsr	draw
*
*		move.w	#11,col1
*		move.l	#$00c6005a,d0
*		lea	game_type,a0
*		jsr	print_text
		bsr	print_room_name

		bra	copy_O_to_W

room_info	dc.b	'SELECT A ROOM THAT YOU WISH TO EDIT',0
room_sect	dc.b	'SECRET ROOMS:',0
game_type	dc.b	'    GAME TYPE',255,255,252,7
		dc.b	'LEVEL AND LADDERS',255
		dc.b	'ADVENTURING',0


editing_room	dc.b	'EDITING',255
		dc.b	'ROOM',0

print_block	move.w	d0,d2
		move.l	a3,a4
ddec_block	move.l	a2,a0
		move.l	a4,a1
		bsr	bound_sprite
		addq.l	#8,a4
		dbra	d2,ddec_block
		add.l	#8*160,a3
		dbra	d1,print_block
		rts



bound_sprite	movem.l	a0-a2,-(sp)
		move.l	#156,a2
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	a2,a0
		add.l	a2,a1
		move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		movem.l	(sp)+,a0-a2
		rts

small_cls	move.w	#$1b57,d0
small_cls2	move.l	old_screen,a0
blank_small	clr.l	(a0)+
		dbra	d0,blank_small
		rts

create_cls	move.w	#$18ff,d0
		move.l	old_screen,a0
create_clr	clr.l	(a0)+
		dbra	d0,create_clr
		rts

copy_O_to_W	move.w	#$1f3f,d0
		move.l	old_screen,a0
		move.l	#mem+$68600,a1
copy_OW		move.l	(a0)+,(a1)+
		dbra	d0,copy_OW
		rts		

show_option	move.l	#SPXOR,w_mode1
		move.l	#$00150010,d0
		move.l	#$00050007,d2
		jmp	sprite

display_1_icon	movem.l	d0-d1/a0-a1,-(sp)
		cmp.b	#20,priority
		blt.s	no_supa_fruit
		cmp.b	#62,d0
		bne.s	no_supa_fruit
		move.l	fruit_char,a0
		bra.s	display_1_then

no_supa_fruit	clr.l	d1
		move.b	d0,d1
		clr.l	d0
		divu	#20,d1
		move.w	d1,d0
		mulu	#$500,d0
		move.l	d0,a0
		swap	d1
		lsl.w	#3,d1
		add.w	d1,a0
		add.l	#system_blk+$7d00*2,a0
display_1_then	bsr	bound_sprite
		movem.l	(sp)+,d0-d1/a0-a1
		rts

copy_1_icon	move.l	#mem+$68600+2696,a0
show_1_icon	bsr	copy_a_icon
		bra	bound_sprite
update_1_icon	bsr	copy_a_icon
		move.l	a1,a0
		move.l	#mem+$68600+2696,a1
		bra	bound_sprite
copy_a_icon	move.w	icon_no,d0
		add.w	char_active,d0
		clr.l	d1
		move.b	d0,d1
		clr.l	d0
		divs	#20,d1
		move.w	d1,d0
		mulu	#$500,d0
		move.l	d0,a1
		swap	d1
		lsl.w	#3,d1
		add.w	d1,a1
		add.l	#system_blk+$7d00*2,a1
		rts

show_18_icons	move.w	icon_no,d0
		move.w	#17,d1
		move.l	#$6fc28+mem,a1
dump_icons	bsr	display_1_icon
		addq.b	#1,d0
		addq.l	#8,a1
		dbra	d1,dump_icons
		rts

show_part	move.w	#19,d4
		move.w	#19,d5
		sub.l	a4,a4
		clr.w	d6
		move.w	edit_room,d7
		rts


show_room	bsr	small_cls
show_room2	bsr	clear_room_id
		bsr	show_part
		bsr	new_room
new_spid
		bsr	show_my_id
		bsr	split_screens
		bra	restore_bottom

show_my_id	clr.w	permit_id
		bsr	calc_baddy
		lea	act_buf,a1
		lea	true_pos,a2
		clr.w	toggle_maj
		move.w	#9,d0
trans_baddy	move.l	2(a0),(a2)+
		cmp.b	#15,(a0)
		bne.s	no_hold_maj
		addq.w	#1,toggle_maj
no_hold_maj	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,trans_baddy
		lea	switch_move,a0
		clr.l	(a0)+
		clr.l	(a0)+
		clr.w	(a0)+
		lea	switch_buf,a0
		move.w	#9,d0
cpy_the_idsa	move.l	(a5)+,(a0)+
		dbra	d0,cpy_the_idsa

		lea	act_buf,a0
		lea	switch_buf,a1
		move.w	#9,d0
next_not_move	cmp.b	#34,(a0)
		bne.s	get_a_way
		move.l	(a1),d1
*		move.w	#%1111100000,d1
		move.w	#9,d2
		lea	switch_move,a2
test_bits_s	lsr.w	#1,d1
		btst	#0,d1
		beq.s	no_set_sw_mo
		move.b	#1,(a2)
no_set_sw_mo	addq.l	#1,a2
		dbra	d2,test_bits_s
get_a_way	add.l	#16,a0
		addq.l	#4,a1
		dbra	d0,next_not_move
		rts

switch_move	ds.b	10

true_pos	ds.l	10*4

draw_the_CA	dc.l	0
the_room_is	dc.l	-1
permit_id	dc.l	-1
	
save_the_id	move.w	the_room_is,d0
		tst.w	d0
		bmi.s	first_time_room
		tst.w	permit_id
		bmi.s	first_time_room
		subq.w	#1,d0
		mulu	#160,d0
		lea	act_buf,a0
		lea	sprite_buf,a1
		add.l	d0,a1
		move.w	#9,d0
all_10		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,all_10
		move.w	the_room_is,d0
		subq.w	#1,d0
		mulu	#40,d0
		lea	switch_buf,a0
		lea	true_switches,a1
		add.l	d0,a1
		move.w	#9,d0
all_10_2	move.l	(a0)+,(a1)+
		dbra	d0,all_10_2
first_time_room	move.w	edit_room,the_room_is
		move.w	#-1,permit_id
		rts

calc_baddy	move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		lea	sprite_buf,a0
		add.l	d0,a0
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#40,d0
		lea	true_switches,a5
		add.l	d0,a5
		rts

clr_true_buf	bsr	calc_baddy
		lea	act_buf,a1
		move.l	a0,a2
		sub.l	#sprite_buf,a2
		add.l	#save_pos,a2
		move.w	#39,d0
clr_tbuf	clr.l	(a0)+
		clr.l	(a1)+
		clr.l	(a2)+
		dbra	d0,clr_tbuf
		rts

save_act_buf	lea	act_buf,a1
		bsr	calc_baddy
		move.w	#39,d0
copy_act_buf	move.l	(a1)+,(a0)+
		dbra	d0,copy_act_buf
		lea	switch_buf,a6
		move.w	#9,d0
cpy_act_buf	move.l	(a6)+,(a5)+
		dbra	d0,cpy_act_buf
		rts

clr_baddy	lea	act_buf,a0
		move.w	#39,d0
remove_baddy	clr.l	(a0)+
		dbra	d0,remove_baddy
		lea	switch_buf,a6
		move.w	#9,d0
clr_switchses	clr.l	(a6)+
		dbra	d0,clr_switchses
		rts

		even
t_light_on	dc.w	0

allocate_space	move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#400,d0
		add.l	#room,d0
		move.l	d0,a0
		lea	syst_buf+45,a1
		lea	astrib+45,a2
		move.w	#19,d0
rows_space	move.w	#19,d1
rows_space2	move.b	(a0)+,(a1)+
		clr.b	(a2)+
		dbra	d1,rows_space2
		addq.l	#2,a1
		addq.l	#2,a2
		dbra	d0,rows_space
		rts


new_room	lea	swapped_defs,a1
		lea	real_refs,a0
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		clr.w	held_icon
		clr.l	edges_mades
		move.w	edit_room,d0
		subq.b	#1,d0
		and.l	#3,d0
		move.w	d0,rnd_fruit
		lsl.w	#3,d0
		add.l	#system_blk+$3700+$7d00,d0
		move.l	d0,fruit_char
		clr.w	d0
		move.w	d0,goodies
		clr.w	d0
		cmp.w	#1,magic_option
		bne.s	show_lig
		addq.w	#1,d0
show_lig	move.w	d0,t_light_on
		clr.l	d0
		move.w	d7,d0
		subq.w	#1,d0
		mulu	#400,d0
		and.l	#$ffff,d6
		add.l	d6,d0
		add.l	#room,d0
		move.l	d0,a2
		clr.w	d1
		move.l	old_screen,a3
		lea	astrib+45,a4
		move.w	d5,d3
showx		move.w	d4,d2
		move.l	a3,a1
dump_scrn	clr.w	d0
		move.b	0(a2,d1.w),d0
		cmp.b	#14,d0
		beq.s	add_goodies
		cmp.b	#212,d0
		beq.s	add_goodies
		cmp.b	#15,d0
		bne.s	no_goodies
add_goodies	addq.w	#1,goodies
no_goodies	cmp.b	#19,priority
		blt	no_special_rids
		tst.w	spell_seec
		bne.s	no_brk_icestk
		cmp.w	#20,d0
		bgt.s	no_specials_ids
		move.l	d0,-(sp)
		lea	special_ID_rm,a6
		move.b	0(a6,d0.w),d0
		bra	clean_room_stk
no_specials_ids	move.l	d0,-(sp)
		cmpi.w	#47,d0
		bne.s	no_brk_ice
		move.b	#46,d0
		bra.s	clean_room_stk
no_brk_icestk	move.l	d0,-(sp)
		cmpi.w	#13,d0
		bne.s	no_brk_ice
		move.b	#22,d0
no_brk_ice	cmpi.w	#61,d0
		bne.s	no_sun
		move.w	#9999,t_light_on
		clr.b	d0
no_sun		cmpi.w	#48,d0
		bne.s	no_hold_ic
		clr.b	d0
		move.w	#1,held_icon
no_hold_ic	cmpi.w	#42,d0
		bne.s	no_spikies
		clr.b	d0
no_spikies

clean_room_stk
		cmp.w	#225,d0
		bne.s	chk_lights
		or.b	#%00001111,(a4)
		addq.w	#1,t_light_on
chk_lights	addq.l	#1,a4

		cmpi.w	#58,d0
		beq.s	set_light_on
		cmpi.w	#59,d0
		beq.s	set_light_on
		cmpi.w	#226,d0
		bne.s	no_light_on
set_light_on	addq.w	#1,t_light_on
no_light_on	cmpi.w	#12,d0
		bne.s	draw_blk
		clr.w	d0
draw_blk	bsr	display_1_icon
		bra.s	over_rm_id

		even

fruit_char	dc.l	0
save_d0s	dc.w	0

no_special_rids	move.w	#1,t_light_on
		bsr	display_1_icon
		move.l	d0,-(sp)
over_rm_id	move.l	(sp)+,d0

		addq.w	#1,d1
		addq.l	#8,a1
		dbra	d2,dump_scrn
		move.w	#19,a6
		sub.w	d4,a6
		add.w	a6,d1
		add.l	#$500,a3
		addq.l	#2,a4
		dbra	d3,showx
		bsr	allocate_space
		cmpi.w	#105,edit_room
		beq	draw_wow_wow
		rts

		even
edges_mades	dc.l	0
special_ID_rm	dc.b	0,1,1,0,1,0,0,0,1,1,10,11
		dc.b	12,22,14,14,16,17,18,19,0

restore_bottom	move.w	#959+40,d0
		move.l	old_screen,a0
		add.l	#$7d00,a0
		move.l	#mem+$70300,a1
bottom_lines	move.l	-(a1),-(a0)
		dbra	d0,bottom_lines
		tst.w	draw_the_CA
		beq.s	no_CA_d
		bsr	display_CA
no_CA_d		bra	copy_O_to_W

save_rooms	cmp.b	#7,priority
		bne	no_save
		bsr	block_window
		move.l	#$001c002e,d0
		move.l	#$002a0021,d2
		bsr	sprite
		bsr	display_CA

		move.l	#$00c100b2,d1
		bsr	show_option
		jsr	flip_screen
		bsr	do_swap_bufs

		clr.w	-(sp)
		move.l	#file_data2,-(sp)
		move.w	#$3c,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.w	d0
		bmi	disk_error
		move.w	d0,d7

		move.l	#header,-(sp)
		move.l	#size,-(sp)
		move.w	d7,-(sp)
		move.w	#$40,-(sp)
		trap	#1
		add.l	#12,sp
		bmi	disk_error

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		bmi	disk_error

		bsr	do_swap_bufs

save_char	move.w	#$2,-(sp)
		move.l	#char_def_name,-(sp)
		move.w	#$3d,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.w	d0
		bmi	disk_error
		move.w	d0,d7
		
		move.l	#system_blk+$7d00*2,-(sp)
		move.l	#$4200,-(sp)
		move.w	d7,-(sp)
		move.w	#$40,-(sp)
		trap	#1
		add.l	#12,sp
		tst.w	d0
		bmi	disk_error

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		tst.w	d0
		bmi	disk_error

		move.b	#1,priority
		move.w	#15,col1
no_save		rts

do_swap_bufs	move.w	#4199,d0
		lea	save_pos,a0
		lea	sprite_buf,a1
		
swap_bufs	move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		dbra	d0,swap_bufs

		lea	false_switches,a0
		lea	true_switches,a1
		move.w	#1059,d0
swap_bufs2	move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		dbra	d0,swap_bufs2
		eor.w	#1,swap_states
		rts

swap_states	dc.w	0

load_rooms	cmp.b	#8,priority
		bne	no_load
		bsr	block_window
		move.l	#$0046002e,d0
		move.l	#$002a0021,d2
		bsr	sprite
		move.l	#$00e500b2,d1
		bsr	show_option
		bsr	display_CA
		jsr	flip_screen

loading		bsr	load_char_id
		clr.w	-(sp)
		move.l	#file_data,-(sp)
		move.w	#$3d,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.w	d0
		bmi	disk_error2
		move.w	d0,d7

		move.l	#header,-(sp)
		move.l	#size,-(sp)
		move.w	d7,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		bmi	disk_error2

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		bmi	disk_error2
		bsr	false_id

		tst.b	first_time
		beq.s	no_load
		bsr	first_time_room
		move.b	#1,priority
		move.w	#15,col1
		bra	show_room
no_load		rts

disk_error	tst.b	first_time
		bne.s	no_faileled
		jmp	failed_that
no_faileled	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	popup
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		move.l	#$0070002e,d0
		move.l	#$00580044,d1
		move.l	#$000d0028,d2
		bsr	sprite
		lea	derror1,a0
		move.w	#11,col1
		move.l	#$7a004e-6,d0
		jsr	print_text
		move.l	#$7a005e-8,d0
		lea	what_next_err,a0
		jsr	print_text
		move.l	#$7d005e+4,d0
		lea	what_nxt_err,a0
		jsr	print_text

		move.l	(sp)+,old_screen

		move.b	#16,priority
		tst.w	swap_states
		bne	do_swap_bufs
no_error1	rts

esc_to_abort	dc.b	'ESC TO ABORT',0
		even

an_error1	cmp.b	#16,priority
		bne	an_error12


		bsr	display_CA

		move.l	#$00c100b2,d1
		bsr	show_option
		
		bsr	box_it
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$5e+4,d1
		blt	no_format
		cmp.w	#$5e+4+9,d1
		bgt	no_format
		cmp.w	#$7f+9,d0
		blt	no_format
		cmp.w	#$7f+9+(6*11)+2,d0
		bgt	no_format
		move.l	#$00870008,d0
		move.l	#$00880061,d1
		move.l	#$00430009,d2
		bsr	sprite
		cmp.b	#251,ms_click
		bne	no_format

		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.l	#$00eb0067,d0
		move.l	#$007a0053,d1
		move.l	#$0055000b,d2
		bsr	sprite
		lea	formatting,a0
		move.w	#10,col1
		move.l	#$7a0048,d0
		jsr	print_text
		move.w	#9,col1
		move.l	#$830062,d0
		lea	esc_to_abort,a0
		jsr	print_text
		move.l	(sp)+,old_screen
		move.b	#18,priority
		move.b	#18,old_prior
		bra	box_it3


no_format	cmp.w	#$5e-8,d1
		blt	no_error1
		cmp.w	#$5e+9-8,d1
		bgt	no_error1
		cmp.w	#$7f,d0
		blt.s	no_em1
		cmp.w	#$a3,d0
		bgt.s	no_em1

		move.l	#$00870008,d0
		move.l	#$007f005d-8,d1
		move.l	#$00250009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	no_error1
		move.b	#7,priority
		rts

no_em1		cmp.w	#$b1,d0
		blt	no_error1
		cmp.w	#$b1+$24,d0
		bgt	no_error1
		move.l	#$00870008,d0
		move.l	#$00af005d-8,d1
		move.l	#$00250009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	no_error1
		move.b	#1,priority
		rts

derror1		dc.b	'DISK WRITE ERROR',252,7,0
what_next_err	dc.b	' RE-TRY  CANCEL',0
what_nxt_err	dc.b	'  FORMAT DISK',0
formatting	dc.b	'FORMATING DISK',0
		even

disk_error2	tst.b	first_time
		bne.s	jimmy
		jmp	vbad_error
jimmy		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	popup
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		move.l	#$0070002e,d0
		move.l	#$00580044,d1
		move.l	#$000d0028,d2
		bsr	sprite
		lea	derror12,a0
		move.w	#11,col1
		move.l	#$7a004e,d0
		jsr	print_text
		move.l	#$7a005e,d0
		lea	what_next_err2,a0
		jsr	print_text
		move.l	(sp)+,old_screen

		move.b	#17,priority
		tst.w	swap_states
		bne	do_swap_bufs
no_error12	rts

an_error12	cmp.b	#17,priority
		bne	format_error


		bsr	display_CA

		move.l	#$00e500b2,d1
		bsr	show_option
		bsr	box_it
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$5e,d1
		blt	no_error1
		cmp.w	#$5e+9,d1
		bgt	no_error12
		cmp.w	#$7f+18,d0
		blt	no_em12
		cmp.w	#$a3+18,d0
		bgt	no_em12

		move.l	#$00870008,d0
		move.l	#$0091005d,d1
		move.l	#$00250009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	no_error12
		move.b	#8,priority
no_em12
		rts

disk_error13
no_em13		cmp.b	#13,priority
		bne.s	no_em12
		bsr	display_CA

		move.w	#15,col1
		move.l	#$00c100b2,d1
		bsr	show_option
		bsr	box_it

		move.w	mx,d0
		move.w	my,d1
		cmp.w	#151,d0
		blt.s	no_em12
		cmp.w	#188,d0
		bgt.s	no_em12
		cmp.w	#94,d1
		blt.s	no_em12
		cmp.w	#103,d1
		bgt.s	no_em12
		move.l	#$00870008,d0
		move.l	#$0097005e,d1
		move.l	#$00250009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq.s	no_em12
		move.b	#1,priority
		move.b	#248,ms_click
		move.b	#2,un_click
		rts

format_error	cmp.b	#18,priority
		bne	no_em13

		move.l	#magic_buffer,a6

		clr.w 	d7		
loop		clr.w 	d0		
		bsr	format
		move.w	d0,d5
		movem.l	d0-d2,-(sp)
		move.w	#$ff,-(sp)
		move.w	#6,-(sp)
		trap	#1
		move.b	d0,d6
		addq.l	#4,sp
		movem.l	(sp)+,d0-d2
		cmp.b	#1,d6
		beq	escaped

		tst.w	d5
		bne	disk_error3
		addq.w	#1,d7
		move.w	d7,current_track
		cmp.w	#80,d7
		bne	loop

		move.w	#2400,d0
		movea.l	a6,a5
loop1		clr.l	(a5)+
		dbra	d0,loop1

		clr.w	d0
		clr.w	d1
		bsr	write
		tst.w 	d0
		bne	disk_error3

		clr.w	-(a7)
		move.w	#2,-(a7)
		move.l	#$1000001,-(a7)
		move.l	a6,-(a7)
		move.w	#18,-(a7)
		trap	#14
		adda.l	#14,a7

		move.b	#10,24(a6)
		move.b	#$d0,19(a6)
		move.b	#$2,20(a6)

		clr.w	d0
		clr.w	d1
		bsr	write
		tst.w	d0
		bne	disk_error3

disk_errorzz	move.b	#7,priority
		move.w	#-1,current_track
		rts
		jmp	save_rooms

escaped		move.b	#1,priority
		move.w	#-1,current_track
		rts

write		move.w	#10,-(a7)
		move.w	D0,-(a7)
		move.w	D1,-(a7)
		move.w	#1,-(a7)
		clr.w	-(a7)
		clr.l	-(a7)
		move.l	a6,-(a7)
		move.w	#9,-(a7)
		trap	#14
		adda.l	#20,A7
		rts

format		move.w	#$e5e5,-(a7)
		move.l	#$87654321,-(a7)
		move.w	#1,-(A7)
		move.w	d0,-(a7)
		move.w 	d7,-(a7)
		move.w	#10,-(a7)
		clr.w	-(a7)
		clr.l 	-(a7)
		move.l	a6,-(a7)
		move.w	#10,-(a7)
		trap	#14
		adda.l	#26,a7
		rts

derror12	dc.b	'DISK READ ERROR',252,7,0
what_next_err2	dc.b	'    RE-TRY',0

		even

disk_error3	move.w	#-1,current_track
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.l	#$0070002e,d0
		move.l	#$00580044,d1
		move.l	#$000d0028,d2

		bsr	sprite
		lea	bad_formatting,a0
		move.w	#11,col1
		move.l	#$7a004c,d0
		jsr	print_text
		move.l	(sp)+,old_screen
		move.b	#13,priority
		move.b	#13,old_prior
		bsr	box_it3
		jmp	disk_error13

bad_formatting	dc.b	'FORMATTING ERROR',254,252,7
		dc.b	'     CANCEL',0
		even
false_id	lea	save_pos,a0
		lea	sprite_buf,a1
		lea	false_switches,a3
		lea	true_switches,a2
		bra.s	do_id_ok

true_id		bsr	true_id2
		bra	show_my_id

true_id2	lea	save_pos,a1
		lea	sprite_buf,a0
		lea	false_switches,a2
		lea	true_switches,a3

do_id_ok	move.w	#1049,d0
copy_to_bufs	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		dbra	d0,copy_to_bufs
		move.w	#1059,d0
copy_old_switch	move.l	(a2)+,(a3)+
		dbra	d0,copy_old_switch
		bra	show_my_id

load_char_id	move.w	#$2,-(sp)
		pea	char_def_name
		move.w	#$3d,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.w	d0
		bmi	disk_error2
		move.w	d0,d7
		
		move.l	#system_blk+$7d00*2,-(sp)
		move.l	#$4200,-(sp)
		move.w	d7,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		tst.w	d0
		bmi	disk_error2

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		tst.w	d0
		bmi	disk_error2
		rts

popup2		move.l	#system_blk+$f48,a2
		move.l	old_screen,a3
		add.l	#$2828-$500,a3
		move.w	#9,d0
		move.w	#7,d1
		bsr	print_block
		clr.l	w_mode1
		move.l	#$00510041-8,d1
		move.l	#$009e002e+16,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		rts

fast_popup	move.l	#$00500040,d1
		tst.w	king_kong
		beq.s	do_tinter
		lea	king_icon,a5
		bra.s	fa_tinter
do_tinter	lea	inter_icon,a5
fa_tinter	move.w	#5,d5
scence2		move.w	#9,d6
scence1		move.b	(a5)+,d0
		movem.l	d5-d6/a5,-(sp)
		jsr	put_element
		jsr	poke_new_icon
		movem.l	(sp)+,d5-d6/a5
		add.l	#$00100000,d1
		dbra	d6,scence1
		swap	d1
		move.w	#$0050,d1
		swap	d1
		addq.w	#8,d1
		dbra	d5,scence2



		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen

		move.l	#$00550048,d0
		tst.w	king_kong
		beq.s	no_kingy
		move.w	#15,d7
		move.l	#system_blk+$7d00+$6900,spdata
		move.l	#$00a00058,xxx
		jsr	ssprite
		lea	kingdone,a0
		jsr	print_text
		bra.s	a_kinky	
no_kingy	lea	welldone,a0
		jsr	print_text

		move.w	edit_room,d0
		mulu	#100,d0
		add.l	d0,gold_coins
		move.l	d0,a0
		move.l	#$00b80048,d0
		jsr	print_number

a_kinky		move.l	(sp)+,old_screen

		move.l	$44e,-(sp)
		move.l	#mem+$68600,$44e
		move.l	#$500040,a5
		move.l	#$ef0040,a6
		bsr	draw2
		move.l	#$ef006f,a5
		bsr	draw2
		move.l	#$50006f,a6
		bsr	draw2
		move.l	#$500040,a5
		bsr	draw2
		move.l	(sp)+,$44e
		move.w	#$64,recarx
		move.w	#$67,recary
		move.w	#500,light_on
		bsr	zap_pop
		jmp	init_man

inter_icon	dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	1,221,221,221,16,221,17,221,221,1
		dc.b	1,22,222,222,222,222,18,222,43,1
		dc.b	1,1,1,1,1,1,1,1,1,1

king_icon	dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	221,221,221,221,221,221,221,221,221,221
		dc.b	1,221,221,221,221,221,221,221,221,1
		dc.b	1,22,222,222,222,221,222,222,43,1
		dc.b	1,1,1,1,1,1,1,1,1,1


kingdone	dc.b	252,11,'     YOU ARE A HERO!',0

welldone	dc.b	252,10,'BONUS',252,11,' LEVEL ',252,5,'X',252,11
		dc.b	' 100',252,5,' =',252,11,0

		even
popup		move.l	#system_blk+$f48,a2
		move.l	old_screen,a3
		add.l	#$2828,a3
		move.w	#9,d0
		move.w	#5,d1
		bsr	print_block
		clr.l	w_mode1
		move.l	#$00510041,d1
		move.l	#$009e002e,d2
		bsr	sprite
zap_pop		move.l	#syst_buf+182+44,a0
		move.l	#astrib+182+44,a1
		move.w	#5,d0
clr_popx	move.w	#9,d1
clr_pop		move.b	(a0),d5
		cmp.b	#24,d5
		beq.s	poke_offsea
		cmp.b	#58,d5
		beq.s	poke_offsea
		cmp.b	#59,d5
		beq.s	poke_offsea
		cmp.b	#225,d5
		beq.s	poke_offsea
		cmp.b	#226,d5
		beq.s	poke_offsea
		addq.l	#1,a0
		bra.s	no_poke_offsea
poke_offsea	clr.b	(a0)+
no_poke_offsea	and.b	#%01111111,(a1)+
		dbra	d1,clr_pop
		add.l	#12,a0
		add.l	#10,a1
		dbra	d0,clr_popx
		rts

block_window	lea	do_kill,a0
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)
		clr.w	sprite_pass
		clr.b	killer_good
		jsr	main_control
		move.w	#1,sprite_pass
		move.b	#1,killer_good
		jsr	main_control

		bsr	popup
		move.l	#SPXOR,w_mode1
		move.l	#$006e0050,d0
		lea	words_wait,a0
		move.w	#10,col1
		jsr	print_text
		move.w	#15,col1
		move.l	#$00aa0048,d1
		rts

words_wait	dc.b	'PLEASE',255
		dc.b	'WAIT...',0

file_data	dc.b	'ROOM_ID.DAT',0
file_data2	dc.b	'ROOM_ID.dat',0
char_def_name	dc.b	'CHARDEF.DAT',0

icon_selector	cmp.b	#3,priority
		bne	no_mk_icon

		clr.b	sub_priority
i_pan		move.l	#system_blk+$fa00+$5500,a0
		move.l	old_screen,a1
		add.l	#$6400,a1
		move.w	#1599,d0
icon_pannel	move.l	(a0)+,(a1)+
		dbra	d0,icon_pannel
		bsr	show_hl_num

		bsr	copy_O_to_W
		bra	green_box

i_pan2		clr.b	sub_priority
		move.l	#system_blk+$fa00+$5500,a0
		move.l	#mem+$68600+$6400,a1
		move.w	#1599,d0
i_pannel	move.l	(a0)+,(a1)+
		dbra	d0,i_pannel
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	show_hl_num
		move.l	(sp)+,old_screen

no_mk_icon	rts

green_box	clr.w	d1
		move.b	which_icon,d1
		mulu	#12,d1
		add.w	#101,d1
		swap	d1
		move.w	#187,d1
		move.l	#$00420020,d0
		move.l	#$0009000a,d2
		jmp	sprite

show_hl_num	bsr	calc_baddy
		clr.w	d3
		move.w	#9,d4
		move.l	#$001c004f,d0
		move.l	#$00050005,d2
		clr.w	d6
show_num_hl	tst.b	(a0)
		beq.s	no_used_icon
		cmp.b	#210,(a0)
		beq.s	no_used_icon
		addq.w	#1,d6			
		move.w	d3,d1
		mulu	#12,d1
		add.w	#103,d1
		swap	d1
		move.w	#190,d1
		clr.l	w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		bsr	sprite
no_used_icon	add.l	#16,a0
		addq.b	#1,d3
		add.l	#$00050000,d0
		dbra	d4,show_num_hl
		move.w	d6,total_sprites
		rts

total_sprites	dc.w	0
rec_len		dc.w	1,5
rec_val		dc.b	0

		even

icon_main	clr.w	flash_item
		cmp.b	#3,priority
		bne	no_mk_icon
		cmpi.b	#4,sub_priority
		beq.s	do_the_record
		tst.b	sub_priority
		bne	sel_sub2a
		bra	over_record
do_the_record	
		move.l	#$008f00a3,d1
		bsr	show_option
		bsr	calc_baddy
		clr.w	d1
		move.b	which_icon,d1
		lsl.w	#4,d1
		tst.b	0(a0,d1.w)
		beq	under_record
		cmp.b	#160,0(a0,d1.w)
		beq	under_record
		tst.w	rec_len
		bne.s	no_new_rec
		clr.l	rec_ptr
		bsr	true_id
		move.w	#1,held_icon
no_new_rec	cmp.b	#10,rec_val
		bne.s	no_fwd_rec
		cmp.w	#64,rec_len
		beq.s	cant_fwd
		addq.w	#1,rec_len
cant_fwd	cmp.l	#16*64,rec_ptr
		bne.s	fwd_do
		move.l	#-16,rec_ptr
fwd_do		add.l	#16,rec_ptr
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		clr.l	d1
		move.b	which_icon,d1
		lsl.l	#4,d1
		add.l	#save_pos,d0
		add.l	d1,d0
		lea	act_buf,a1
		move.l	d0,a0
		add.l	d1,a1
		lea	rec_buf,a2
		add.l	rec_ptr,a2
		move.l	(a1),(a2)+
		move.l	(a1)+,(a0)+
		move.l	(a1),(a2)+
		move.l	(a1)+,(a0)+
		move.l	(a1),(a2)+
		move.l	(a1)+,(a0)+
		move.l	(a1),(a2)+
		move.l	(a1)+,(a0)+

no_fwd_rec	clr.l	d7
		cmp.b	#11,rec_val
		bne	no_bak_rec
		cmp.w	#1,rec_len
		ble.s	cant_bak
		subq.w	#1,rec_len

		tst.l	rec_ptr
		bne.s	back_do
		move.l	#16*65,rec_ptr
back_do		subi.l	#16,rec_ptr
cant_bak
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		clr.l	d1
		move.b	which_icon,d1
		lsl.l	#4,d1
		add.l	#save_pos,d0
		add.l	d1,d0
		lea	act_buf,a1
		move.l	d0,a0
		add.l	d1,a1
		lea	rec_buf,a2
		add.l	rec_ptr,a2
		move.l	(a2),(a1)+
		move.l	(a2)+,(a0)+
		move.l	(a2),(a1)+
		move.l	(a2)+,(a0)+
		move.l	(a2),(a1)+
		move.l	(a2)+,(a0)+
		move.l	(a2),(a1)+
		move.l	(a2)+,(a0)+

no_bak_rec	clr.b	rec_val
		move.l	#$900090,d0
		move.l	#$f900b3,d1
		move.l	rec_len,d2
		bsr	sprite
under_record	bsr	true_id
		move.w	#1,held_icon
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$10e,d0
		blt	over_record
		cmp.w	#$10e+$19,d0
		bgt.s	over_record
		cmp.w	#$bd,d1
		blt.s	over_record
		move.w	#7,col1
		move.l	#$00870008,d0
		move.l	#$010d00bc,d1
		move.l	#$001a0009,d2
		bsr	sprite
		move.w	#15,col1
		cmp.b	#248,ms_click
		beq.s	over_record
		clr.b	ms_click
		clr.b	sub_priority
		clr.l	w_mode1
		move.l	#$00870008,d0
		move.l	#$010d00bc,d1
		move.l	#$001a0009,d2
		move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		bsr	sprite
		move.l	(sp)+,old_screen
		move.l	#SPXOR,w_mode1
over_record	move.w	my,d0
		cmp.w	#187,d0
		blt.s	draw_box
		cmp.w	#196,d0
		bgt.s	draw_box
		move.w	#101,d0
		move.w	#111,d1
		clr.w	d2
		move.w	mx,d3
next_window	cmp.w	d0,d3
		blt.s	draw_box
		cmp.w	d1,d3
		blt.s	found_it
		add.w	#12,d1
		add.w	#12,d0
		addq.w	#1,d2
		cmp.w	#10,d2
		bne.s	next_window
		bra.s	draw_box
found_it	cmp.b	#248,ms_click
		beq.s	draw_box
		cmp.b	which_icon,d2
		beq.s	no_rec_reset
		clr.w	rec_len
		move.b	#10,rec_val
no_rec_reset	move.b	d2,which_icon
		cmp.b	#249,ms_click
		bne.s	draw_box
		addq.w	#1,flash_item

draw_box	bsr	green_box

sel_sub2a	lea	arrow_icon,a0
		lea	arrow_icon,a6

		move.b	icon_page_no,d3
		mulu	#10,d3
		add.w	pick_icon,d3
		addq.b	#1,d3
		cmp.b	#4,sub_priority
		beq.s	no_sel_all

		move.w	#9,d0
		cmp.b	#9,d3
		beq.s	no_sel_all3
		cmp.b	#16,d3
		beq.s	no_sel_all3
		cmp.b	#49,d3
		bne.s	no_sel_all

		lea	arrow_icon2,a0
		lea	arrow_icon2,a6
		move.w	#8,d0
		moveq.l	#8,d6
		bra.s	no_sel_all2
no_sel_all	move.w	#10,d0
no_sel_all3	clr.l	d6
no_sel_all2	move.w	mx,d1
		move.w	my,d2
check_dir	move.l	(a0),d3
		move.w	0(a0),d4
		cmp.w	d4,d1
		blt	next_cord
		move.w	2(a0),d4
		cmp.w	d4,d2
		blt	next_cord
		move.w	4(a0),d4
		cmp.w	d4,d1
		bgt	next_cord
		move.w	6(a0),d4
		cmp.w	d4,d2
		bgt	next_cord

		cmpi.b	#4,sub_priority
		beq.s	allowed_path
		cmp.b	#1,d0
		ble	sel_sub
		
allowed_path	cmp.b	#1,d0
		ble.s	valid_path_plot
		cmp.b	#2,choose_path
		bne	sel_sub
valid_path_plot	sub.l	a6,a0
		move.w	a0,d0
		lea	path_max,a1
		lsr.w	#3,d0
		move.w	d0,d5
		addq.b	#1,d5
		move.b	d5,p_value
		clr.l	d7
		move.b	0(a1,d0.w),d7
		move.l	d7,p_max
		lsl.w	#2,d0
		lea	path_check,a1
		move.l	0(a1,d0.w),d7
		move.l	d7,pr_control
		lea	path_adjust,a1
		move.l	0(a1,d0.w),d7
		move.l	d7,pa_control
		move.w	a0,d0
		lsr.w	#1,d0
		move.w	d0,a0
		add.l	#fill_arrow,a0
		add.l	d6,a0
		clr.l	d0
		clr.l	d2
		move.b	(a0)+,d0
		swap	d0
		move.b	(a0)+,d0
		move.b	(a0)+,d2
		swap	d2
		move.b	(a0),d2
		move.l	d3,d1
		move.l	#SPHARD,w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		cmp.b	#4,sub_priority
		bne.s	not_recordin
		cmp.b	#248,ms_click
		beq	sel_sub
		move.b	p_value,rec_val
		bra	sel_sub
not_recordin	tst.b	choose_path
		beq	sel_sub

		cmp.b	#248,ms_click
		beq	sel_sub
		move.l	old_screen,a0
		move.l	#SPHARD,w_mode1
		move.l	#mem+$68600,old_screen
		bsr	sprite
		move.l	a0,old_screen
		bsr	show_room2
		sub.l	d0,d0
		move.l	#$000900a4,d1
		move.l	#$00550020,d2
		clr.l	w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	#$000900a4,a5
		move.l	#$005e00a4,a6
		bsr	draw2
		move.l	#$005e00c4,a5
		bsr	draw2
		move.l	#$000900c4,a6
		bsr	draw2
		move.l	#$000900a4,a5
		bsr	draw2
		move.w	#7,col1
		move.l	#$000f00a7,d0
		lea	confirm_txt,a0
		jsr	print_text

		move.b	#5,choose_path
		cmp.b	#9,p_value
		bne.s	hard_cop_val
		clr.l	w_mode1
		move.l	#$00e800a3,d1
		move.l	#$00480022,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	#$00e800a3,a5
		move.l	#$013000a3,a6
		bsr	draw2
		move.l	#$013000c5,a5
		bsr	draw2
		move.l	#$00e800c5,a6
		bsr	draw2
		move.l	#$00e800a3,a5
		bsr	draw2
		bsr	draw_path_sel
		bsr	select_cpath
		bra	icon_main
hard_cop_val	bsr	copy_O_to_W
		bra	icon_main

confirm_txt	dc.b	'CONFIRM',255,252,11
		dc.b	'FREE POINT',255,252,7
		dc.b	'QUIT',252,15,0

next_cord	addq.l	#8,a0
		dbra	d0,check_dir
		tst.b	sub_priority
		bne	sel_sub

		cmp.w	#163,my
		blt	no_mk_icon
		cmp.w	#169,my
		bgt	no_mk_icon

		lea	menu_opt2,a0
		move.w	#4,d3
		move.w	mx,d4

c_win2		move.w	(a0)+,d0
		move.w	(a0)+,d1
		move.w	d1,d2
		sub.w	d0,d2
		addq.l	#1,d2
		cmp.w	d0,d4
		blt	no_mk_icon
		cmp.w	d1,d4
		ble	highlight_box2
		dbra	d3,c_win2
		rts

draw		dc.w	$a000
		clr.w	24(a0)
		move.w	#$ffff,26(a0)
d1a		move.l	#$000400a0,(a0)
		move.l	a5,38(a0)
		move.l	a6,42(a0)
		clr.w	28(a0)
		clr.w	30(a0)
		move.w	#$ffff,34(a0)
		clr.w	36(a0)
		move.w	#$ffff,32(a0)
		dc.w	$a003
		rts

draw2		dc.w	$a000
		move.w	#$ffff,24(a0)
		clr.w	26(a0)
		bra.s	d1a

main_pg		jsr	reset_game
main_pg2	bsr	cls
		bsr	clear_room_id
		jsr	config_ms
draw_wow	clr.w	inter_level
		
no_pal_just	move.l	#24160+system_blk,a0
		move.l	old_screen,a1
		move.w	#639,d0
tit_dl		move.l	(a0)+,$a00(a1)
		clr.l	(a1)+
		dbra	d0,tit_dl

		move.l	#system_blk+$1400+$48,a2
		move.l	old_screen,a3
		add.l	#$1400,a3
		move.l	a3,-(sp)
		move.w	#19,d0
		move.w	#20,d1
		bsr	print_block

		move.l	#system_blk+$1400+$40,a2
		move.l	(sp)+,a3
		clr.w	d1
		bsr	print_block

		move.l	#system_blk+$7d00*2+$50,a2
		move.l	old_screen,a3
		add.l	#$1e08,a3
		move.w	#17,d0
		move.w	d0,d1
		bsr	print_block

		move.l	#system_blk+$7d00*2,a2
		move.l	old_screen,a3
		add.l	#$2310,a3
		move.w	#15,d0
		move.w	d0,d1
		bsr	print_block

		move.l	#SPXOR,w_mode1

		clr.w	got_hi
		bsr	is_it_hi
		tst.w	got_hi
		bne.s	no_spacebar
		bsr	space_txt
no_spacebar

		move.w	#7,col1
		move.l	#$008a0040,d0
		lea	wow_man_txt,a0
		jsr	print_text

		move.l	#$00620050,d0
		lea	hi_sc_txt,a0
		jsr	print_text
		move.l	#$00220056,d0
		lea	dotters,a0
		jsr	print_text
		lea	help_info,a0
		move.l	#$00600000,d0
		jsr	print_text

		move.l	#$00480064,d0
		lea	high_names,a0
		jsr	print_text

		move.l	#$00c80064,d0
		lea	hi_sc,a1
		move.w	#4,d1
prt_hsc		move.l	(a1)+,a0
		jsr	print_number
		add.w	#10,d0
		dbra	d1,prt_hsc

		move.w	#9,col1
		move.l	#$004a009c,d0
		lea	last_score,a0
		jsr	print_text
		move.w	#5,col1
		move.l	#$00c8009c,d0
		move.l	the_last_score,a0
		jsr	print_number


		move.w	#15,col1
		bsr	copy_O_to_W
		bra	wow_control

space_txt	move.w	#1,col1
		clr.l	w_mode1
		clr.l	d0
		move.l	#$002600ae,d1
		move.l	#$00e80009,d2
		bsr	sprite
		move.l	#$002300ae,d0
		lea	space_barie,a0
		move.l	#SPXOR,w_mode1
		jmp	print_text

is_it_hi	move.w	#$5a,input_x
		clr.w	pos_x_pos
		lea	hi_sc,a0
		move.w	#4,d0
		move.w	#$64,input_y
reached_top_5	move.l	(a0)+,d1
		cmp.l	the_new_high,d1
		blt.s	goto_hi
		add.w	#10,input_y
		dbra	d0,reached_top_5
		rts

goto_hi		lea	hi_sc+16,a0
		lea	names_list+16,a2
		move.l	a0,a1
		addq.l	#4,a1
reached_it	move.l	(a0),(a1)
		move.l	(a2),a3
		move.l	4(a2),a4
		move.w	#19,d3
dump_names	move.b	(a3)+,(a4)+
		dbra	d3,dump_names
		subq.l	#4,a0
		subq.l	#4,a1
		subq.l	#4,a2
		dbra	d0,reached_it
		move.w	#18,d3
		move.l	4(a2),a4
		move.l	a4,input_buffer
		addq.l	#1,input_buffer
blank_names	move.b	#$20,(a4)+
		dbra	d3,blank_names

		move.l	the_new_high,(a1)
		addq.w	#1,got_hi
		move.l	#$002600ae,d0
		lea	hi_score_txt,a0
		jmp	print_text

print_in_name	move.l	#$005a0000,d0
		or.w	input_y,d0
		move.l	input_buffer,a0
		move.w	#9,col1
		jmp	print_text

wow_man_txt	dc.b	'EDIT GAME',0

help_info	dc.b	252,11,'',0

hi_sc_txt	dc.b	252,11,'TODAYS RICHEST PEOPLE',255,252,4,0
dotters		dc.b	'',0

high_names	dc.b	252,7,'1.',252,9
na1		dc.b	' MR LOADSAMONEYBAG  ',255
		dc.b	252,7,'2.',252,9
na2		dc.b	' PENNY SKINFLINT    ',255
		dc.b	252,7,'3.',252,9
na3		dc.b	' THE GOLD HUNTER    ',255
		dc.b	252,7,'4.',252,9
na4		dc.b	' ARTHUR DALEY       ',255
		dc.b	252,7,'5.',252,9
na5		dc.b	' A VERY POOR PERSON ',255
		dc.b	252,5,0
		dc.b	252,7,'5.',252,9
na6		dc.b	'I WANT CHEAT ALRIGHT',255
		dc.b	252,5,0
mister_return	dc.b	'MISTER NO NAME      ',0

last_score	dc.b	'LAST GOLD COLLECTION',0
		even

names_list	dc.l	na1,na2,na3,na4,na5,na6
input_x		dc.w	$5a
input_y		dc.w	$64
input_buffer	dc.l	0
pos_x_pos	dc.w	0
input_flash	dc.w	0
got_hi		dc.w	0
the_last_score	dc.l	0
the_new_high	dc.l	0
current_start	dc.l	0
ocurrent_start	dc.l	0
current_room	dc.w	1
current_count	dc.w	0
ocurrent_count	dc.w	0
the_edit_room	dc.w	1

find_a_start	lea	room,a0
		move.l	current_start,d0
		cmpi.b	#13,0(a0,d0.l)
		bne.s	no_ere_here
		move.w	current_room,the_edit_room
		move.w	current_count,ocurrent_count
		move.l	current_start,ocurrent_start
no_ere_here	addq.l	#1,current_start
		addq.w	#1,current_count
		cmp.w	#400,current_count
		bne.s	no_found_sere
		clr.w	current_count
		addq.w	#1,current_room
		cmp.w	#101,current_room
		bne.s	no_found_sere
		clr.l	current_start
		move.w	#1,current_room
no_found_sere	rts

*start_room_ere	move.w	the_edit_room,current_room
*		move.w	ocurrent_count,current_count
*		move.l	ocurrent_start,current_start
*		move.w	#-1,the_edit_room
*		move.w	#100,d2
*each_room	move.w	#399,d1
*each_elem	bsr	find_a_start
*		tst.w	the_edit_room
*		bpl.s	ok_im_found
*		dbra	d1,each_elem
*		dbra	d2,each_room
*		move.w	#105,the_edit_room
*no_wow		
*ok_im_found	rts


hi_sc		dc.l	500000
		dc.l	100000
		dc.l	50000
		dc.l	20000
		dc.l	0
		dc.l	-10000

space_barie	dc.b	'PRESS THE SPACE BAR OR FIRE BUTTON TO PLAY',0
hi_score_txt	dc.b	252,1,'  YOU ARE RICH. PLEASE ENTER YOUR NAME',0
		even
save_edit	dc.w	0
in_play		dc.w	0


input_name	move.l	input_buffer,a0
		clr.b	19(a0)
		clr.l	d0
		cmp.b	#249,ms_click
		bne.s	no_return_mx
		move.b	#3,keybrd
		move.b	#248,ms_click
no_return_mx
		move.w	mx,d0
		move.w	my,d1
		move.w	input_y,d2
		cmpi.w	#$5a,d0
		blt.s	no_move_cx
		cmpi.w	#$5a+18*6-2,d0
		bgt.s	no_move_cx
		cmp.w	d2,d1
		blt.s	no_move_cx
		add.w	#9,d2
		cmp.w	d2,d1
		bgt.s	no_move_cx
		cmp.b	#248,ms_click
		beq.s	no_move_cx
		sub.w	#$5a,d0
		divu	#6,d0
		move.w	d0,pos_x_pos
		mulu	#6,d0
		add.w	#$5a,d0
		move.w	d0,input_x
no_move_cx	cmp.b	#5,keybrd
		bne.s	no_cw_input
		tst.w	pos_x_pos
		beq.s	no_cw_input
		subq.w	#6,input_x
		subq.w	#1,pos_x_pos
no_cw_input	cmp.b	#6,keybrd
		bne.s	no_ce_input
		cmp.w	#17,pos_x_pos
		beq.s	no_ce_input
		addq.w	#6,input_x
		addq.w	#1,pos_x_pos
no_ce_input	cmp.b	#3,keybrd
		bne.s	no_quit_hi
		clr.w	got_hi
		clr.l	the_new_high
		move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		bsr	space_txt
		move.l	(sp)+,old_screen
		move.l	input_buffer,a0
		move.l	a0,a1
		clr.w	d0
		move.w	#17,d1
		move.w	d1,d2
all_spacess	or.b	(a0)+,d0
		dbra	d1,all_spacess
		cmp.b	#32,d0
		bne.s	hi_rts
		lea	mister_return,a0
		dbra	d2,copy_mister
copy_mister	move.b	(a0)+,(a1)+
		dbra	d2,copy_mister
hi_rts		bsr	print_in_name
		move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		bsr	print_in_name
		move.l	(sp)+,old_screen
		move.l	input_buffer,a0
		move.b	#255,19(a0)
		rts


no_quit_hi	move.l	input_buffer,a0
		clr.w	d0
		move.b	keybrd,d0
		cmp.b	#7,d0
		bne.s	no_input_ins
		cmp.w	#17,pos_x_pos
		bne.s	no_insin
		move.b	#32,d0
		bra.s	no_input_ins
no_insin	move.l	a0,a1
		add.l	#16,a1
		move.w	#16,d1
		sub.w	pos_x_pos,d1
ins_input	move.b	(a1),1(a1)
		subq.l	#1,a1
		dbra	d1,ins_input
		move.b	#32,1(a1)
no_input_ins	cmp.b	#2,d0
		bne.s	no_bs_input
		move.w	pos_x_pos,d1
		tst.w	d1
		beq.s	goto_bs
		subq.w	#1,pos_x_pos
		subq.w	#1,d1
		subq.w	#$6,input_x
goto_bs		move.b	#32,0(a0,d1.w)
no_bs_input	cmp.b	#8,d0
		bne.s	no_del_input
		move.l	a0,a2
		move.w	pos_x_pos,d2
trans_del	move.b	1(a2,d2.w),0(a2,d2.w)
		addq.w	#1,d2
		cmp.w	#16,d2
		ble.s	trans_del
		move.b	#32,0(a2,d2.w)
no_del_input	cmp.b	#4,d0
		bne.s	valid_inputx
		move.b	#32,d0
valid_inputx	cmp.w	#32,d0
		blt.s	no_inc_posxpos
		cmp.w	#126,d0
		bgt.s	no_inc_posxpos
		move.w	pos_x_pos,d1

		move.b	d0,0(a0,d1.w)
		cmp.w	#17,d1
		beq.s	no_inc_posxpos
		addq.w	#1,pos_x_pos
		addq.w	#$6,input_x
no_inc_posxpos	bsr	print_in_name
		move.l	#system_blk+$7d00+$540,spdata
		move.l	input_x,xxx
		moveq.l	#6,d7
		addq.w	#1,input_flash
		move.w	input_flash,d0
		and.w	#7,d0
		cmp.w	#3,d0
		bgt.s	no_flash_input
		jmp	ssprite
no_flash_input	rts

wow_control	tst.b	priority
		bne.s	no_flash_input
		tst.w	got_hi
		bne	input_name
		cmp.w	#1,main_opt
		beq.s	no_flash_input
		cmp.w	#2,main_opt
		beq.s	no_flash_input
		tst.w	started_demo
		bne	no_inver_plays
		move.w	#7,col1
		move.l	#SPXOR,w_mode1
		move.w	mx,d0
		addq.w	#6,d0
		move.w	my,d1
		cmp.w	#63,d1
		blt.s	no_inver_plays
		cmp.w	#63+9,d1
		bgt.s	no_inver_plays


inver_play2	cmp.w	#119+3+21,d0
		blt.s	inver_play3
		cmp.w	#119+55+3+21,d0
		bgt.s	inver_play3
		move.l	#$0089003f,d1
		move.l	#$00870008,d0
		move.l	#$00370009,d2
		bsr	sprite

		cmp.b	#248,ms_click
		beq.s	inver_play3
		move.b	#1,priority
		move.w	#1999,d0
		move.l	#mem+$68600,a0
clr_bkup	clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		dbra	d0,clr_bkup

		bsr	true_id
		bra	first_time_room



inver_play3	

no_inver_plays	bsr	do_demos
		clr.w	allow_CA

		cmp.b	#249,ms_click
		beq.s	start_game
		cmp.b	#4,keybrd
		bne	no_start_game
start_game	clr.b	keybrd
		move.w	#160,limit_line
		jsr	reset_game
		move.w	edit_room,save_edit
		bsr	assign_secret
		move.w	start_room,edit_room
*		tst.w	game_play_mode
*		beq.s	not_an_advent
*		bsr	start_room_ere
*		move.w	the_edit_room,edit_room
not_an_advent	move.w	edit_room,recar_room
		move.w	#1,in_play
		bsr	first_time_room
		bsr	true_id
		move.b	#50,priority
		move.b	#50,old_prior
		move.w	#959,d0
		move.l	#$68600+mem,a0
		add.l	#$7d00,a0
		move.l	#system_blk+$7d00,a1
dump_bottom	move.l	-(a1),-(a0)
		dbra	d0,dump_bottom
		move.w	#39,d0
clr_bot		clr.l	-(a0)
		dbra	d0,clr_bot
		bra	init_numbers
		rts

no_start_game	tst.w	started_demo
		bne	dont_find_demo
		addq.w	#1,activate_demo
		cmp.w	#106,activate_demo
		blt.s	no_demo_mode
		tst.w	found_room
		beq.s	no_demo_mode
		move.w	#1,demo_mode
		clr.w	activate_demo
no_demo_mode	tst.w	found_room
		bne	dont_find_demo
		addq.w	#1,founded_room
		cmp.w	#101,founded_room
		blt.s	demo_range_ok
		move.w	#1,founded_room
demo_range_ok	move.w	edit_room,-(sp)
		move.w	founded_room,edit_room
*		tst.w	game_play_mode
*		beq.s	easy_version
*		clr.w	d0
*		move.b	rndb,d0
*		and.w	#127,d0
*		cmp.w	#100,d0
*		blt.s	ok_rnd_demo
*		sub.w	#70,d0
*ok_rnd_demo	move.w	d0,founded_room
*		addq.w	#1,founded_room
*		mulu	#400,d0
*		add.l	#room,d0
*		move.l	d0,a0
*		move.l	a0,a1
*		move.l	#399,d0
*is_comp		tst.b	0(a0,d0.w)
*		bne.s	found_comp
*		dbra	d0,is_comp
*		bra.s	noddy_demo
easy_version	bsr	is_it_complete
		bne.s	noddy_demo
found_comp	move.w	founded_room,found_room
noddy_demo	move.w	(sp)+,edit_room
dont_find_demo	rts

do_demos	tst.w	started_demo
		beq.s	no_demos
		addq.w	#1,activate_demo
		cmp.w	#106,activate_demo
		blt.s	no_back_screen
		eor.w	#1,started_demo
		clr.w	activate_demo
		bra	main_pg2
no_back_screen	move.b	sys_not,d0
		and.w	#7,d0
		cmp.w	#3,d0
		bgt	no_demos
		move.w	#5,col1
		move.l	#$009000b4,d0
		lea	in_demo_txt,a0
		bsr	print_text
no_demos	tst.w	demo_mode
		beq	dont_find_demo
		eor.w	#1,started_demo
		move.w	edit_room,-(sp)
		move.w	found_room,edit_room
		move.b	priority,d0
		move.w	d0,-(sp)
		move.b	#20,priority
		bsr	show_room
		move.w	(sp)+,d0
		move.b	d0,priority
		move.l	old_screen,a0
		add.l	#$6400,a0
		move.w	#1599,d0
rem_demos	clr.l	(a0)+
		dbra	d0,rem_demos
		move.w	#1,col1
		move.l	#$002600be,d0
		lea	space_barie,a0
		move.l	#SPXOR,w_mode1
		bsr	print_text
		bsr	draw_wow_tx1
		bsr	copy_o_to_w
		clr.w	demo_mode
		bsr	true_id
		move.w	(sp)+,edit_room
		clr.w	found_room
		rts

draw_wow_tx1	move.w	#8*160,a3
		bra.s	draw_wow_tx2

draw_wow_t	sub.l	a3,a3
draw_wow_tx2	move.l	#24160+system_blk,a0
		move.l	#mem+$68600+$6400-(6*160),a1
		move.l	old_screen,a2
		add.l	#$6400-(6*160),a2
		move.w	#639,d0
		add.l	a3,a1
		add.l	a3,a2
title_t		move.l	(a0)+,d1
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		dbra	d0,title_t
no_CA		rts	

draw_wow_wow	move.l	#$00c00017,d0
		move.l	#$00200051,d1
		move.l	#$0020003f,d2
		bsr	sprite

		move.l	old_screen,a0
		add.l	#$6a40,a0
		move.l	#system_blk+$1400+$38,a1
		move.w	#5,d0
mu_l		move.w	#19,d1
		move.l	(a1)+,d2
		move.l	(a1)+,d3
s_mu		move.l	d2,(a0)+
		move.l	d3,(a0)+
		dbra	d1,s_mu
		add.l	#152,a1
		dbra	d0,mu_l

		bra	draw_wow_t

display_CA	tst.w	allow_CA
		bne	no_CA
here_man	move.l	#$00000020,d0
		move.l	#$001600ba,d1
		move.l	#$0005000e,d2
		move.w	char_active,d3
		lsl.w	#4,d3
		swap	d1
		add.w	d3,d1
		swap	d1
		bra	sprite

assign_secret	move.l	#$01010101,secret_valid
		move.w	#101,edit_room
		bsr	is_it_complete
		sub.b	d6,secret_valid
		addq.w	#1,edit_room
		bsr	is_it_complete
		sub.b	d6,secret_valid+1
		addq.w	#1,edit_room
		bsr	is_it_complete
		sub.b	d6,secret_valid+2
		addq.w	#1,edit_room
		bsr	is_it_complete
		sub.b	d6,secret_valid+3
		rts


is_it_complete	clr.w	d5
		clr.w	d6
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#400,d0
		add.l	#room,d0
		move.l	d0,a0
		move.l	d0,a1
		move.w	#399,d0
*		tst.w	game_play_mode
*		beq.s	valid_design
*		cmp.w	#101,edit_room
*		bgt.s	valid_design
*		addq.w	#1,d6
valid_design	cmp.b	#13,0(a0,d0.w)
		bne.s	bdesign1
		move.w	#1,d5
bdesign1	cmp.b	#43,0(a0,d0.w)
		bne.s	bdesign2
		move.w	#1,d6
bdesign2	dbra	d0,valid_design
		and.w	d5,d6
		eor.w	#1,d6
		tst.w	d6
		rts

ROOM_MAX	equ	10

		even
main_opt	dc.w	0
force_high	dc.b	0
raster		dc.b	3
set_done	dc.b	0
messy		dc.b	0
first_time
first_ever	dc.b	0



		even
pain		dc.l	0
in_hl		dc.w	0
exit_hl		dc.w	0


highlight_box2	swap	d2
		move.w	#7,d2
		move.w	d0,d1
		swap	d1
		move.w	#163,d1
		move.l	#$150010,d0
		move.l	#SPXOR,w_mode1
		bsr	sprite
		not.b	d3
		add.b	#6,d3
		cmp.b	#6,d3
		bge.s	kipie2
		cmp.b	#248,ms_click
		beq	no_mk_icon
		bra.s	set_val2
kipie2		cmp.b	#251,ms_click
		bne	no_mk_icon
set_val2	cmp.b	#4,d3
		bne.s	no_record_mode
		move.b	#4,sub_priority
		move.l	#$10e00bd,d0
		move.w	#7,col1
remove_rexit	lea	path_exit,a0
		move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		bsr	print_text
		move.l	(sp)+,old_screen
		clr.w	rec_len
		clr.l	rec_ptr
		move.b	#10,rec_val
		move.w	#1,held_icon
		bra	true_id

rec_ptr		dc.l	0

no_record_mode	cmp.b	#1,d3
		bne	no_mk_bad
restore_defs	clr.b	force_high
		move.b	#2,un_click
		move.b	#248,ms_click
		bsr	create_cls
		move.b	#1,sub_priority

		sub.l	a5,a5
		move.l	#$013f0000,a6
		bsr	draw
		move.l	#$0000009f,a6
		bsr	draw
		move.l	#$013f009f,a5
		bsr	draw
		move.l	#$013f0000,a6
		bsr	draw
		move.l	#$0000000c,a5
		move.l	#$013f000c,a6
		bsr	draw
		move.l	#$01260000,a5
		move.l	#$0126009f,a6
		bsr	draw
		move.l	#$0000009f,a5
		move.w	#4,d6
seg_dr		bsr	draw
		sub.l	#$1d,a5
		sub.l	#$1d,a6
		dbra	d6,seg_dr
		move.l	#$0093000c,a5
		move.l	#$0093009f,a6
		bsr	draw
		move.w	#3,col1
		move.l	#$000e0003,d0
		move.l	#icon_sel,a0
		bsr	print_text
		move.w	#7,col1
		move.l	#$00e00003,d0
		move.l	#exit_sel,a0
		bsr	print_text
		move.w	#11,col1
		move.l	#$01300014,d0
		move.l	#$0000000e,angle
		lea	page_no_txt,a0
		bsr	print_text
		move.l	#$00060000,angle
		move.w	#15,col1
		bsr	clear_room_id
		move.b	icon_page_no,d0
		and.w	#255,d0
		lsl.w	#2,d0
		move.l	#icon_pages,a0
		move.l	0(a0,d0.w),a0
		jsr	(a0)
		move.l	#system_blk+$fa00+$5500,a0
		move.l	old_screen,a1
		add.l	#$6400,a1
		move.w	#599,d0
dic_pan		move.l	(a0)+,(a1)+
		dbra	d0,dic_pan

		clr.l	w_mode1
		move.l	#$001c00a7,d1
		move.l	#$010b0016,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	#$001c00a7,a5
		move.l	#$012700a7,a6
		bsr	draw2
		move.l	#$012700bd,a5
		bsr	draw2
		move.l	#$001c00bd,a6
		bsr	draw2
		move.l	#$001c00a7,a5
		bsr	draw2
		cmp.b	#4,icon_page_no
		bge.s	no_zpoke
		clr.b	force_z
no_zpoke	move.w	#7,col1
		move.l	#use_icon,a0
		move.l	#$003c00af,d0
		bsr	print_text
		move.b	#32,force_z
		move.w	#15,col1
		move.l	#$000500a3,d1
		bsr	show_option

		bsr	copy_O_to_W
		clr.b	choose_path
		bsr	display_page_no
		bra	show_inv_mode

no_mk_bad	cmp.b	#3,d3
		bne	no_paths
		bsr	icon_selector
		move.b	#3,sub_priority
		clr.b	choose_path
		clr.l	w_mode1
		move.l	#$00e200a2,d1
		move.l	#$005c0024,d2
		bsr	sprite
draw_path_sel	move.l	#SPXOR,w_mode1
		move.l	#$00000008,angle
		move.l	#$013200a5,d0
		lea	path_exit,a0
		move.w	#7,col1
		cmp.b	#1,sub_priority
		beq.s	no_path_exith
		bsr	print_text
no_path_exith	move.l	#$00060000,angle
		move.w	#15,col1
		move.l	#$005c0010,d0
		move.l	#$00f800a5,d1
		move.l	#$00070008,d2
		bsr	sprite
		move.l	#$010800a5,d1
		bsr	sprite
		move.l	#$011800a5,d1
		bsr	sprite
		move.l	#$00630010,d0
		move.l	#$00f800bc,d1
		bsr	sprite
		move.l	#$010800bc,d1
		bsr	sprite
		move.l	#$011800bc,d1
		bsr	sprite

		clr.l	w_mode1
		move.l	#$008000aa,d1
		move.l	#$00400010,d2
		bsr	sprite
		move.l	#$008000aa,a5
		move.l	#$00c000aa,a6
		bsr	draw2
		move.l	#$00c000ba,a5
		bsr	draw2
		move.l	#$008000ba,a6
		bsr	draw2
		move.l	#$008000aa,a5
		bsr	draw2
		move.l	#SPXOR,w_mode1
		move.w	#7,col1
		move.l	#$009000af,d0
		lea	clr_word,a0
		bsr	print_text

		bsr	copy_O_to_W
		bra	sel_sub

clr_word	dc.b	'CLEAR',0

no_paths	cmp.b	#5,d3
		bne.s	no_main_menu
		move.b	#1,priority
empty_slot	rts
no_main_menu	cmp.b	#2,d3
		bne.s	no_remove_item
		cmp.b	#251,ms_click
		bne.s	no_remove_item
remove_tid	bsr	calc_baddy
		lea	save_pos,a1
		add.l	d0,a1
		clr.w	d1
		move.b	which_icon,d1
		lsl.w	#4,d1
		tst.b	0(a0,d1.w)
		beq.s	empty_slot
		cmp.b	#210,0(a0,d1.w)
		beq.s	empty_slot
		clr.b	0(a0,d1.w)
		lea	save_pos,a1
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		add.l	d0,a1
		clr.b	0(a1,d1.w)
		lea	act_buf,a0
		clr.b	0(a0,d1.w)
		bra	i_pan2
		
no_remove_item	rts

icon_sel	dc.b	'CREATING AN ICON, SELECT ONE           '
		dc.b	'        PAGE',0
exit_sel	dc.b	'EXIT',0
page_no_txt	dc.b	'ABCDEFGHIJ',0
use_icon	dc.b	'USE ICON'

force_z		dc.b	32
		dc.b	'    SET ID'
		dc.b	'     EDIT ICON',0
poke_edit	dc.b	6
		even

imode_table	dc.l	$003b00ae
		dc.l	$00310009

		dc.l	$008900ae
		dc.l	$00250009

		dc.l	$00cb00ae
		dc.l	$00370009

icon_pages	dc.l	draw_pg1
		dc.l	draw_pg2
		dc.l	draw_pg3
		dc.l	draw_pg4
		dc.l	user_page
		dc.l	user_page
		dc.l	user_page
		dc.l	user_page
		dc.l	user_page
		dc.l	user_page

imode_x_tabs	dc.w	$3b,$3b+$31
		dc.w	$89,$89+$25
		dc.w	$cb,$cb+$37

do_clr_path	cmp.b	#5,choose_path
		beq.s	allow_clr_p
		cmp.b	#3,sub_priority
		bne	no_clr_path
		bra.s	define_clr
allow_clr_p	cmp.b	#9,p_value
		bne	no_clr_path
define_clr	move.w	mx,d0
		move.w	my,d1
		cmp.w	#$8f,d0
		blt	no_clr_path
		cmp.w	#$8f+$1f,d0
		bgt	no_clr_path
		cmp.w	#$ae,d1
		blt	no_clr_path
		cmp.w	#$ae+9,d1
		bgt	no_clr_path
		move.l	#$00870008,d0
		move.l	#$008f00ae,d1
		move.l	#$001f0009,d2
		move.l	#SPXOR,w_mode1
		move.w	#7,col1
		bsr	sprite
		cmp.b	#251,ms_click
		bne	no_clr_path
		bsr	calc_path
		move.w	#9,d0
cl_al_pa	clr.l	(a0)+
		dbra	d0,cl_al_pa
		clr.w	swap_states
total_spr_same	bsr	do_swap_bufs
twice_rem	bsr	calc_baddy
		lea	act_buf,a1
		move.w	#9,d0
		clr.w	d1
		move.l	path_no,d3
co_sa		tst.b	(a0)
		beq.s	emp_spc
		cmp.b	#160,(a0)
		beq.s	emp_spc
		cmp.w	$8(a0),d3
		bne.s	ok_plot_spc
		clr.b	(a0)
		bra.s	emp_spc
ok_plot_spc	addq.w	#1,d1
emp_spc		move.b	(a0),(a1)
		add.l	#16,a0
		add.l	#16,a1
		dbra	d0,co_sa

		move.l	#mem+$68600+$75b0-160,a0
		move.l	#system_blk+$66b0+$7d00*2-160,a1
		move.w	#12,d1
nas_lin		move.w	#15,d0
redr_nas	move.l	(a1)+,(a0)+
		dbra	d0,redr_nas
		add.l	#96,a0
		add.l	#96,a1
		dbra	d1,nas_lin
		tst.w	swap_states
		beq.s	no_swappin
		bsr	do_swap_bufs
		bra	twice_rem
no_swappin	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.w	#15,col1
		bsr	show_hl_num
		bsr	green_box
		move.l	(sp)+,old_screen
no_clr_path	
count_same_t	rts

sel_switch_dir	clr.w	quities
		cmp.b	#20,choose_path
		bne	do_kill_which
		move.w	mx,d5
		move.w	my,d6
		cmp.w	#144,d5
		blt.s	no_quities
		cmp.w	#182,d5
		bgt.s	no_quities
		cmp.w	#94,d6
		blt.s	no_quities
		cmp.w	#102,d6
		bgt.s	no_quities
		cmp.b	#248,ms_click
		bne	redraw_iconpg
		move.w	#1,quities
no_quities	cmp.w	#88,d6
		blt.s	no_quities2
		cmp.w	#106,d6
		bgt.s	no_quities2
		cmp.w	#112,d5
		blt.s	no_first_sw
		cmp.w	#132,d5
		bgt.s	no_first_sw
		cmp.b	#248,ms_click
		beq.s	no_quities2
		or.b	#1,switch_bit
		bra	no_switch
no_first_sw	cmp.w	#194,d5
		blt.s	no_quities2
		cmp.w	#214,d5
		bgt.s	no_quities2
		cmp.b	#248,ms_click
		beq.s	no_quities2
		move.b	switch_bit,d0
		and.b	#$fe,d0
		move.b	d0,switch_bit
		bra	no_switch
no_quities2	rts

do_kill_which	clr.w	kill_cancel
		cmp.b	#30,choose_path
		bne.s	no_quities2
		move.w	mx,d5
		move.w	my,d6
		cmp.w	#69,d6
		blt	no_yes_no2
		cmp.w	#69+10*5-1,d6
		bgt	no_yes_no2
		cmp.w	#137,d5
		blt	no_yes_no
		cmp.w	#137+6*3,d5
		bge	no_yes_no
		clr.l	d1
		move.w	d6,d1
		sub.w	#69,d1
		divu	#10,d1
		move.w	#%1,d0
		lsl.w	d1,d0
		move.w	d0,d4

		move.l	#$008a0000,d0
		mulu	#10,d1
		add.w	#70,d1
		move.w	d1,d0
		cmp.b	#248,ms_click
		beq	no_yes_no2
		move.b	#248,ms_click
		move.b	#2,un_click
		eor.w	d4,kill_mask
		move.w	kill_mask,d3
		and.w	d4,d3
		tst.w	d3
		beq.s	print_yesyes
		move.w	#11,col1
		lea	maket_yes,a0
		bra.s	print_nono
kill_mask	dc.w	0
print_yesyes	lea	maket_no,a0
		move.w	#10,col1
print_nono	move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		move.l	d0,d1
		move.l	#$0018000a,d2
		clr.l	w_mode1
		movem.l	a0/d0,-(sp)
		bsr	sprite
		movem.l	(sp)+,a0/d0
		move.l	#SPXOR,w_mode1
		bsr	print_text
		move.l	(sp)+,old_screen
no_yes_no	move.w	mx,d5
		move.w	my,d6
		cmp.w	#191,d5
		blt	no_yes_no2
		cmp.w	#191+6*3,d5
		bge	no_yes_no2
		clr.l	d1
		move.w	d6,d1
		sub.w	#69,d1
		divu	#10,d1
		move.w	#%100000,d0
		lsl.w	d1,d0
		move.w	d0,d4

		move.l	#$00c00000,d0
		mulu	#10,d1
		add.w	#70,d1
		move.w	d1,d0
		cmp.b	#248,ms_click
		beq.s	no_yes_no2
		move.b	#248,ms_click
		move.b	#2,un_click
		eor.w	d4,kill_mask
		move.w	kill_mask,d3
		and.w	d4,d3
		tst.w	d3
		beq.s	print_yesyes2
		move.w	#11,col1
		lea	maket_yes,a0
		bra.s	print_nono2
print_yesyes2	lea	maket_no,a0
		move.w	#10,col1
print_nono2	move.l	old_screen,-(sp)
		move.l	#$68600+mem,old_screen
		move.l	d0,d1
		move.l	#$0018000a,d2
		clr.l	w_mode1
		movem.l	a0/d0,-(sp)
		bsr	sprite
		movem.l	(sp)+,a0/d0
		move.l	#SPXOR,w_mode1
		bsr	print_text
		move.l	(sp)+,old_screen

no_yes_no2	cmp.w	#129,d6
		blt	no_quities2
		cmp.w	#138,d6
		bgt	no_quities2
		cmp.w	#113,d5
		blt.s	no_kill_ca
		cmp.w	#156,d5
		bgt.s	no_kill_ca
		cmp.b	#248,ms_click
		bne.s	redraw_iconpg3
		move.w	#1,kill_cancel
no_kill_ca	cmp.w	#167,d5
		blt	no_quities2
		cmp.w	#204,d5
		bgt	no_quities2
		cmp.b	#248,ms_click
		bne	redraw_iconpg
		move.w	#2,kill_cancel
		rts
redraw_iconpg3	bsr	redraw_iconpg

		move.w	edit_room,d7
		subq.w	#1,d7
		mulu	#40,d7
		clr.l	d1
		clr.l	d2
		move.b	which_icon,d2
		lsl.w	#2,d2
		add.l	d2,d7
		lea	true_switches,a0
		lea	false_switches,a1
		clr.l	d0
		move.w	kill_mask,d0
		lsl.w	#1,d0
		move.l	d0,switch_bit
		bra	choosen_style

		even
quities		dc.w	0
switch_bit	dc.b	%000000000	;bit 0 =o/o    12=o/o/u 34=o/o/u 56=o/o/u
		dc.b	%000000000	;bit 01=o/o/u  23=o/o/u 45=o/o/u 67=o/o/u
		dc.b	%000000000	;bit 01=o/o/u  23=o/o/u 45=o/o/u 67=o/o/u
		dc.b	%000000000
		even

sel_sub		bsr	do_clr_path		;find me
		bsr	sel_switch_dir
		bsr	cancel_path
		bsr	control_id_them

		cmp.b	#1,sub_priority
		bne	sel_subB

		bsr	select_t_icon
		bsr	select_exit
		bsr	select_page_no
		bsr	do_sel_imode
		bsr	control_mkdefs
		bsr	show_inv_mode

select_cpath	cmp.b	#3,sub_priority
		beq.s	making_paths
		cmp.b	#5,choose_path
		bne	no_main_menu
path_dummy	cmp.b	#9,p_value
		beq.s	making_paths
		move.l	p_max,d0
		move.l	#public+$a,a0
		bsr	make_alpha
		move.l	pr_control,a0
		jsr	(a0)
		move.l	p_max,d4
		move.l	#public+$a,a2
		bsr	show_alpha
		bsr	true_id
		move.w	#1,held_icon
		bra.s	not_making_path
making_paths
		move.l	#SPHARD,w_mode1
		bsr	sel_path_mk
not_making_path
		move.l	p_max,d0
		addq.b	#1,d0
		sub.b	d5,d0
		move.l	d0,a0
		move.l	#$002c00b1,d0
		move.w	#5,col1
		bsr	print_number
		cmp.b	#9,p_value
		beq.s	no_conditions
		cmp.w	#0,a0
		bne	check_exit_mk
no_conditions	cmp.l	#20,a0
		beq	check_exit_mk
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$e,d0
		blt	check_exit_mk
		cmp.w	#$39,d0
		bgt	check_exit_mk
		cmp.w	#$a6,d1
		blt	check_exit_mk
		cmp.w	#$b0,d1
		bgt	check_exit_mk
		move.w	#7,col1
		move.l	#$00870008,d0
		move.l	#$000e00a6,d1
		move.l	#$002b0009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	check_exit_mk
		lea	public,a4
		move.b	$a(a4),d0
		move.b	$b(a4),d1
		subq.w	#1,d0
		subq.w	#1,d1
		lsl.w	#4,d0
		lsl.w	#3,d1
		move.w	d0,2(a4)
		move.w	d1,4(a4)
		cmp.b	#1,p_value
		bne.s	no_xycr_v
		move.w	#900,4(a4)
		move.b	#1,1(a4)
no_xycr_v	move.l	pa_control,a0
		move.w	#$101,$6(a4)
		cmp.b	#9,p_value
		beq.s	no_jumpao
		jsr	(a0)
		bra.s	no_special_p

no_jumpao	move.l	path_no,d0
		move.w	d0,$8(a4)
		sub.w	#1000,d0
		mulu	#40,d0
		add.l	#path_def,d0
		move.l	d0,a6
		move.w	(a6),$a(a4)
no_special_p	lea	public,a4
		clr.w	d0
		clr.w	d1
		clr.w	d3
		move.b	icon_page_no,d3
		mulu	#10,d3
		add.w	pick_icon,d3
		addq.b	#1,d3
		move.b	d3,(a4)
		cmp.b	#9,p_value
		bne.s	no_xycr

		move.b	$a(a4),d0
		move.b	$b(a4),d1
		subq.w	#1,d0
		subq.w	#1,d1
		lsl.w	#4,d0
		lsl.w	#3,d1
		move.w	d0,2(a4)
		move.w	d1,4(a4)
		
no_xycr		cmp.b	#6,(a4)
		bne.s	no_xycr2
		cmp.w	#5,$8(a4)
		beq.s	no_xycr2

		cmp.b	#3,p_value
		beq.s	cball_off
		cmp.b	#8,p_value
		bne.s	no_xycr2
cball_off	tst.b	$7(a4)
		bpl.s	up_cball
		subq.w	#2,4(a4)
up_cball	subq.w	#6,4(a4)
no_xycr2	move.w	edit_room,d0
		subq.w	#1,d0
		move.w	d0,d7
		mulu	#160,d0
		mulu	#40,d7
		clr.l	d1
		clr.l	d2
		move.b	which_icon,d1
		move.b	d1,d2
		lsl.w	#4,d1
		add.l	d1,d0
		lsl.w	#2,d2
		add.l	d2,d7
		lea	sprite_buf,a0
		lea	save_pos,a2
		lea	true_switches,a5
		lea	false_switches,a6
		move.l	a4,a1
		move.w	#3,d2
		cmp.b	#9,(a1)
		bne.s	no_fpie
		move.b	#-1,$1(a1)
no_fpie		cmp.b	#31,public
		blt.s	no_switch_mode
		cmp.b	#40,public
		bgt.s	no_switch_mode
		move.l	switch_bit,0(a5,d7.l)
		move.l	switch_bit,0(a6,d7.l)
no_switch_mode	cmp.b	#9,p_value
		bne.s	co_ic_ma
		clr.l	$a(a4)
		move.b	#2,$a(a4)

co_ic_ma	move.l	(a1)+,d1
		move.l	d1,0(a0,d0.l)
		move.l	d1,0(a2,d0.l)
		addq.l	#4,a0
		addq.l	#4,a2
		dbra	d2,co_ic_ma
		bsr	show_my_id
		bra	skip_exit

check_exit_mk	move.w	mx,d0
		move.w	my,d1
		cmp.w	#$e,d0
		blt.s	the_sub_end
		cmp.w	#$27,d0
		bgt.s	the_sub_end
		cmp.w	#$ba,d1
		blt.s	the_sub_end
		move.w	#7,col1
		move.l	#$00870008,d0
		move.l	#$000e00ba,d1
		move.l	#$00190009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		bne	skip_exit
the_sub_end	move.w	#15,col1
		rts

what_next_path	dc.b	'SELECT A DIRECTION',255
		dc.b	255,252,7
		dc.b	'      CANCEL',0

make_alpha	move.w	mx,d1
		move.w	my,d2
		cmp.b	#248,ms_click
		beq.s	no_make_alpha
		cmp.w	#160,d2
		bge.s	no_make_alpha
		lsr.w	#4,d1
		lsr.w	#3,d2
		cmp.b	#249,ms_click
		beq.s	delete_alpha

		clr.b	d3
next_free_spc	tst.w	(a0)+
		beq.s	found_path_spc
		addq.b	#1,d3
		cmp.b	d0,d3
		blt.s	next_free_spc
		rts

found_path_spc	subq.l	#2,a0
		addq.b	#1,d1
		addq.b	#1,d2
		move.b	d1,(a0)+
		move.b	d2,(a0)
		move.b	#2,un_click
		move.b	d3,d4
		and.w	#255,d4
no_make_alpha	rts

delete_alpha	addq.b	#1,d1
		addq.b	#1,d2
		clr.w	d4
		move.b	d0,d4
		subq.b	#1,d4
		lsl.b	#1,d4
		clr.b	d7
scan_del_alpha	move.b	0(a0,d4.w),d5
		move.b	1(a0,d4.w),d6
		cmp.b	d5,d1
		bne.s	no_match_alpha
		cmp.b	d6,d2
		bne.s	no_match_alpha
		tst.b	d7
		beq.s	allow_del
		tst.w	d4
		beq.s	allow_del
		tst.w	2(a0,d4.w)
		bne.s	no_match_alpha
allow_del	and.w	#$00ff,d0
		subq.b	#1,d0
		lsl.b	#1,d0
alp_del_scroll	cmp.b	d0,d4
		beq.s	end_while
		move.w	2(a0,d4.w),d1
		move.w	d1,0(a0,d4.w)
		addq.b	#2,d4
		bra.s	alp_del_scroll
end_while	clr.w	0(a0,d0.w)
		move.b	#2,un_click
		clr.w	d4
replast		tst.w	(a0)+
		beq.s	no_more_lst
		addq.b	#1,d4
		bra.s	replast

no_more_lst	
no_dl_lst	rts
		
no_match_alpha	move.b	#1,d7
		subq.w	#2,d4
		cmp.w	#$fffe,d4
		bne	scan_del_alpha
		rts

calc_path	move.l	path_no,d0
		sub.w	#1000,d0
		mulu	#40,d0
		add.l	#path_def,d0
		move.l	d0,a0
		rts

sel_subB
		cmp.b	#3,sub_priority
		bne	sel_sub2
sel_path_mk
path_over1	bsr	sel_path
		bsr	calc_path

		move.l	a0,-(sp)
		move.b	#20,d0
		bsr	make_alpha
		jsr	p_defined
		move.b	#1,bar1
		move.b	#1,bar2
		move.b	#1,bar3
		move.b	#1,bar4
		move.b	#20,d4
		move.l	(sp)+,a2


show_alpha	clr.b	lastalpx
		clr.b	lastalpy
		clr.w	d5
		move.w	d5,d0
		move.l	a2,-(sp)
repica_npath	clr.l	d1
		clr.l	d2
		move.b	0(a2,d0.w),d1
		move.b	1(a2,d0.w),d2
		tst.w	d2
		beq.s	no_path_alpxy
		addq.w	#2,d0
		addq.w	#1,d5
		move.b	d1,lastalpx
		move.b	d2,lastalpy
		cmp.b	d4,d5
		blt.s	repica_npath
no_path_alpxy	move.l	a2,save_ptra2
		move.w	d0,save_ptrd0
		bsr	mark_valid
		move.l	(sp)+,a2

		move.l	#system_blk+$4740,a4
		clr.w	d0
		clr.w	d6
		clr.w	d5
		clr.w	d7
next_path	clr.l	d1
		clr.l	d2
		move.b	0(a2,d0.w),d1
		move.b	1(a2,d0.w),d2
		addq.b	#1,d5
		cmp.b	d4,d5
		bgt	done_path
		tst.b	d1
		beq.s	done_path
		addq.w	#2,d0
		subq.b	#1,d1
		subq.b	#1,d2
		asl.w	#3,d2
		mulu	#160,d2
		asl.w	#3,d1
		add.w	d2,d1
		add.l	old_screen,d1
		move.l	d1,a1
		move.l	a4,a0
		bsr	bound_sprite
		addq.l	#8,a4
		addq.w	#1,d7
		bra	next_path
done_path	tst.w	d7
		beq.s	no_large_last
		cmp.b	#1,p_value
		beq.s	no_large_last
		cmp.b	#2,p_value
		beq.s	no_large_last
		cmp.b	#6,public
		bne.s	do_largeA_T
		cmp.b	#3,p_value
		beq.s	no_large_last
		cmp.b	#8,p_value
		beq.s	no_large_last
do_largeA_T	move.l	old_screen,d0
		add.l	#160*160,d0
		move.w	#7,d7
copy_large	move.l	(a0),(a1)
		move.l	4(a0),4(a1)
		move.l	(a0),160(a1)
		move.l	4(a0),164(a1)
		add.l	#160*2,a1
		add.l	#160,a0
		move.l	a1,d1
		cmp.l	d0,d1
		bge.s	no_large_last
		dbra	d7,copy_large
no_large_last	rts

mark_valid	tst.b	lastalpx
		beq.s	no_way_plotb
		cmp.b	#1,bar1
		bne.s	no_bar1
		jsr	draw_qy
no_bar1		cmp.b	#1,bar2
		bne.s	no_bar2
		jsr	draw_qx
no_bar2		cmp.b	#1,bar3
		bne.s	no_bar3
		jsr	draw_dia1
no_bar3		cmp.b	#1,bar4
		bne.s	no_bar4
		jsr	draw_dia2
no_bar4		clr.l	bar1
no_way_plotb	rts

sel_path	cmp.b	#2,choose_path
		beq.s	no_option_hp
		move.w	#15,col1
		move.l	#$006500a3,d1
		bsr	show_option
no_option_hp	move.b	#4,raster
		move.w	#15,col1
		move.l	#$00a900b0,d0
		move.l	path_no,a0
		move.l	#$00100000,angle
		move.w	#2,col1
		bsr	print_number
		move.l	#$00060000,angle
		clr.l	w_mode1
		move.l	#$00070008,d2
		move.l	#$00e900b0,d1
		bsr	sprite
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		move.w	my,d0
		cmp.w	#$a5,d0
		blt	no_inc_path
		cmp.w	#$ad,d0
		bgt	no_inc_path
		move.w	mx,d0

		cmp.w	#$f8,d0
		blt	no_inc_path
		cmp.w	#$ff,d0
		bgt.s	next_inc2
		move.l	#$00f800a5,d1
		bsr	light_up1
		cmp.b	#248,ms_click
		beq	no_inc_path
		add.l	#100,path_no
		move.b	#2,un_click
		cmp.l	#2000,path_no
		blt	no_inc_path
		sub.l	#1000,path_no
		rts
	
next_inc2	cmp.w	#$108,mx
		blt	no_inc_path
		cmp.w	#$10f,mx
		bgt.s	next_inc3
		move.l	#$010800a5,d1
		bsr	light_up1
		cmp.b	#248,ms_click
		beq	no_inc_path
		move.b	#2,un_click
		move.l	path_no,d0
		add.l	#10,path_no
		divu	#100,d0
		swap	d0
		add.w	#10,d0
		cmp.w	#100,d0
		blt.s	no_inc_path
		sub.l	#100,path_no
		rts

next_inc3	cmp.w	#$118,mx
		blt.s	no_inc_path
		cmp.w	#$11f,mx
		bgt.s	no_inc_path
		move.l	#$011800a5,d1
		bsr	light_up1
		cmp.b	#248,ms_click
		beq.s	no_inc_path
		move.b	#2,un_click
		move.l	path_no,d0
		add.l	#1,path_no
		divu	#10,d0
		swap	d0
		add.w	#1,d0
		cmp.w	#10,d0
		blt.s	no_inc_path
		sub.l	#10,path_no
		rts

no_inc_path	move.w	my,d0
		cmp.w	#$bc,d0
		blt	no_inc_path2
		cmp.w	#$c4,d0
		bgt	no_inc_path2
		move.w	mx,d0

		cmp.w	#$f8,mx
		blt	no_inc_path2
		cmp.w	#$ff,mx
		bgt.s	next_dec2
		move.l	#$00f800bc,d1
		bsr	light_up2
		cmp.b	#248,ms_click
		beq	no_inc_path2
		sub.l	#100,path_no
		move.b	#2,un_click
		cmp.l	#1000,path_no
		bge	no_inc_path2
		add.l	#1000,path_no
		rts
	
next_dec2	cmp.w	#$108,mx
		blt	no_inc_path2
		cmp.w	#$10f,mx
		bgt.s	next_dec3
		move.l	#$010800bc,d1
		bsr	light_up2
		cmp.b	#248,ms_click
		beq	no_inc_path2
		move.b	#2,un_click
		sub.l	#10,path_no
		move.l	path_no,d0
		divs	#100,d0
		swap	d0
		cmp.w	#90,d0
		blt.s	no_inc_path2
		add.l	#100,path_no
		rts

next_dec3	cmp.w	#$118,mx
		blt.s	no_inc_path2
		cmp.w	#$11f,mx
		bgt.s	no_inc_path2
		move.l	#$011800bc,d1
		bsr	light_up2
		cmp.b	#248,ms_click
		beq.s	no_inc_path2
		move.b	#2,un_click
		move.l	path_no,d0
		sub.l	#1,path_no
		divu	#10,d0
		swap	d0
		sub.w	#1,d0
		cmp.w	#$ffff,d0
		bne.s	no_inc_path2
		add.l	#10,path_no
no_inc_path2	cmp.b	#5,choose_path
		beq.s	no_exit_path
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$132,d0
		blt.s	no_exit_path
		cmp.w	#$a5,d1
		blt.s	no_exit_path
		move.l	#$01390008,d0
		move.l	#$013100a4,d1
		move.l	#$00070022,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq.s	no_exit_path
		bsr	icon_selector
		clr.b	sub_priority
no_exit_path	rts


sel_sub2	rts

light_up1	move.l	#$00050020,d0
light_up1b	
		move.l	#SPHARD,w_mode1
		move.l	#$00070008,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		rts

light_up2	move.l	#$000c0022,d0
		bra	light_up1b

path_exit	dc.b	'EXIT',0

		even

menu_opt2	dc.w	9-4,50-4
		dc.w	57-4,98-4
		dc.w	105-4,140-4
		dc.w	147-4,147+41-4
		dc.w	191,220

arrow_icon	dc.w	97,174,103,183
		dc.w	109,174,115,183
arrow_icon2	dc.w	121,173,127,183
		dc.w	133,176,146,182
		dc.w	152,175,160,183
		dc.w	166,175,174,183
		dc.w	180,176,189,182
		dc.w	196,175,206,184
		dc.w	211,174,219,184
		dc.w	229,176,240,182
		dc.w	229,189,240,199

fill_arrow	dc.b	5,32,7,10
		dc.b	12,32,7,10
		dc.b	19,32,7,11
		dc.b	26,32,14,7
		dc.b	40,32,9,9
		dc.b	49,32,9,9
		dc.b	26,39,10,7
		dc.b	84,32,10,9
		dc.b	58,32,8,10
		dc.b	245,8,10,7
		dc.b	254,8,10,7

large_text	movem.l	d0-d1,-(sp)
		
no_s_txt	clr.w	d2
		move.w	edit_room,d2
		subq.w	#1,d2
		mulu	#20,d2
		clr.w	d3
		move.b	d1,d3
		add.w	d3,d2
		move.l	#names,a0
		move.b	d0,0(a0,d2.w)
		clr.l	d2
		clr.l	d3
		move.b	d0,d2
		tst.b	d0
		beq.s	space_char
		cmp.b	#32,d0
		beq	space_bar
		sub.b	#65,d2
		cmp.b	#20,d2
		blt.s	this_line
		move.l	#$00640000,a0
		sub.b	#20,d2
		bra.s	print_text_out

space_char	move.b	#255,d0
this_line	move.l	#$00560000,a0
print_text_out	asl.w	#4,d2
		add.w	d2,a0
		move.b	d1,d3
		asl.w	#3,d3
		move.l	d3,a1		
		add.l	#$6eaa0+mem,a1
		move.w	#13,d4

nx_tel		clr.l	(a1)+
		clr.l	(a1)
		add.l	#156,a1
		dbra	d4,nx_tel
		cmp.b	#255,d0
		beq.s	space_bar

		move.l	#$00a10000,d1
		asl.w	#1,d3
		move.w	d3,d1
		swap	d1
		move.l	a0,d0
		swap	d0
		move.l	#$0010000e,d2
		move.l	#txt_col,a0
		move.w	edit_room,d3
		subq.w	#1,d3
		clr.w	d4
		move.b	0(a0,d3.w),d4
		asl.w	#1,d4
		move.l	#colour_code,a0
		move.w	0(a0,d4.w),d3
		move.w	d3,col1
		move.l	old_screen,a0
		move.l	#mem+$68600,old_screen
		move.l	#SPXOR,w_mode1
		bsr	sprite
		move.l	a0,old_screen
		move.w	#15,col1
space_bar	movem.l	(sp)+,d0-d1
		rts

print_room_name	cmp.w	#105,edit_room
		bne.s	no_prt_err
aknol2		bsr	draw_wow_t
		bra.s	aknol

no_prt_err	move.w	edit_room,d5
		subq.w	#1,d5
		mulu	#20,d5
		lea	names,a6
		clr.b	d1
more_txt_name	move.b	0(a6,d5.w),d0
		move.l	d5,-(sp)
		bsr	large_text
		move.l	(sp)+,d5
		addq.b	#1,d1
		addq.w	#1,d5
		cmp.b	#20,d1
		bne.s	more_txt_name
aknol		move.l	#mem+$68600+$6400,a0
		move.l	old_screen,a1
		add.l	#$6400,a1
		move.w	#159,d0
hard_cop_name	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,hard_cop_name
		rts

col_txt		dc.b	'TEXT COLOUR SELECTION',0
colour_code	dc.w	2,4,5,7,8,9,10,11


name_a_room	cmp.b	#4,priority
		bne	no_naming
		cmp.b	#100,xcursor
		bne	no_reset
		clr.b	flash
		clr.w	xcursor
clrkbuff	move.w	#$ff,-(sp)
		move.w	#6,-(sp)
		trap	#1
		addq.l	#4,sp
		tst.w	d0
		bne.s	clrkbuff
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.w	#3,col1
		move.l	#$00600048,d0
		move.l	#col_txt,a0
		bsr	print_text
		move.l	#colour_code,a0
		move.w	#7,d3
		move.l	#$00420010,d0
		move.l	#$0060005c,d1
		move.l	#$000c0006,d2
show_col	move.w	(a0)+,col1
		bsr	sprite
		add.l	#$00100000,d1
		dbra	d3,show_col
		move.w	#15,col1
		bsr	copy_O_to_W
no_reset	cmp.b	#248,ms_click
		beq.s	no_col_chan
		cmp.w	#91,my
		blt.s	no_col_chan
		cmp.w	#99,my
		bgt.s	no_col_chan
		clr.b	d0
		move.w	#95,d1
		move.w	#95+14,d2
		move.w	mx,d4
scan_col	cmp.w	d1,d4
		blt.s	no_col_chan
		cmp.w	d2,d4
		blt.s	chan_col
		add.w	#16,d1
		add.w	#16,d2
		addq.b	#1,d0
		cmp.b	#8,d0
		bne.s	scan_col
		beq.s	no_col_chan
chan_col	move.l	#txt_col,a0
		move.w	edit_room,d3
		subq.w	#1,d3
		move.b	d0,0(a0,d3.w)
		bsr	print_room_name

no_col_chan	cmp.b	#249,ms_click
		beq	exit_names
		cmp.w	#161,my
		blt.s	no_move_cursor
		cmp.w	#175,my
		bgt.s	no_move_cursor
		cmp.b	#248,ms_click
		beq.s	no_move_cursor
		move.w	mx,d0
		lsr.w	#4,d0
		move.w	d0,xcursor

no_move_cursor	clr.w	d0
		move.b	keybrd,d0
		tst.w	d0
		beq	no_key_IO
		cmp.w	#127,d0
		bgt	no_key_IO
		cmp.w	#64,d0
		blt.s	special_keys
process_key	move.w	xcursor,d1
		bsr	large_text
move_cright	addq.w	#1,xcursor
		cmp.w	#20,xcursor
		blt	no_key_IO
		move.w	#19,xcursor
		bra	no_key_IO
special_keys	cmp.w	#4,d0
		bne.s	check_nextk1
		clr.w	d0
		bra.s	process_key
check_nextk1	cmp.w	#5,d0
		bne.s	check_nextk2
back_space	tst.w	xcursor
		beq	no_key_IO
		subq.w	#1,xcursor
		bra	no_key_IO
check_nextk2	cmp.w	#6,d0
		beq	move_cright
		cmp.w	#2,d0
		bne.s	check_nextk3
		clr.w	d0
		move.w	xcursor,d1
		beq.s	no_sub_allow
		subq.w	#1,d1
		move.w	d1,xcursor
no_sub_allow	bsr	large_text
		bra	no_key_IO
check_nextk3	cmp.w	#3,d0
		bne.s	check_nextk4
exit_names	move.b	#1,priority
		move.b	#248,ms_click
		move.b	#2,un_click
		bra	no_naming
check_nextk4
		cmp.w	#8,d0
		bne.s	check_nextk5
		move.w	xcursor,d7
		cmp.w	#19,d7
		beq.s	equal_txt_19
scroll_txt_left	clr.w	d2
		move.w	edit_room,d2
		subq.w	#1,d2
		mulu	#20,d2
		clr.w	d3
		move.w	xcursor,d3
		add.w	d3,d2
		move.l	#names,a0
		move.b	1(a0,d2.w),d0
		move.w	xcursor,d1
		bsr	large_text
		addq.w	#1,xcursor
		cmp.w	#19,xcursor
		blt.s	scroll_txt_left
equal_txt_19	clr.b	d0
		move.b	#19,d1
		bsr	large_text
		move.w	d7,xcursor

check_nextk5	cmp.w	#7,d0
		bne.s	check_nextk6
		move.w	xcursor,d7
		cmp.w	#19,d7
		beq.s	equal_txt_19b
		move.w	#19,xcursor
scroll_txt_ri	clr.w	d2
		move.w	edit_room,d2
		subq.w	#1,d2
		mulu	#20,d2
		clr.w	d3
		move.w	xcursor,d3
		add.w	d3,d2
		lea	names,a0
		subq.l	#1,a0
		move.b	0(a0,d2.w),d0
		move.w	xcursor,d1
		bsr	large_text
		subq.w	#1,xcursor
		move.w	xcursor,d0
		cmp.w	d7,d0
		bgt.s	scroll_txt_ri
equal_txt_19b	clr.b	d0
		move.w	d7,d1
		bsr	large_text
		move.w	d7,xcursor
check_nextk6


no_key_IO	addq.b	#1,fnot
		move.b	fnot,d0
		and.b	#3,d0
		bne.s	no_flash_not
		addq.b	#1,flash
no_flash_not	bsr	aknol
		move.b	flash,d0
		and.b	#1,d0
		bne.s	no_naming2
		move.l	#system_blk+$3eb0,spdata
		move.l	#$0000000d,d7
		move.w	xcursor,d0
		asl.w	#4,d0
		move.w	d0,xxx
		move.w	#$00a1,yyy
		bsr	ssprite
no_naming2	bra	display_CA
no_naming	rts

solid_window	cmp.b	#1,choose_path
		beq	box_it2
		cmp.b	#4,choose_path
		beq.s	box_it2
		cmp.b	#2,choose_path
		beq	box_it
		cmp.b	#20,choose_path
		beq	box_it
		cmp.b	#30,choose_path
		beq	box_it_sp
		cmp.b	#10,priority
		beq.s	box_it3
		cmp.b	#6,priority
		beq.s	box_it4
		cmp.b	#4,priority
		bne	no_sol_win
		move.l	#$002b00b2,d1
		bsr	show_option
		bsr	box_it
		bra	more_sol

done_it		rts
done_box	dc.w	0

box_it3		clr.w	done_box
		bsr	box_it
		bra	not_wraping

box_it4		tst.w	done_box
		bne.s	done_it
		bsr	box_it
		bra	do_clr_hl

box_it2		tst.w	done_box
		bne.s	done_it
		move.w	#1,done_box
		move.l	#$2828-$500,a0
		move.w	#47+16,d0
		move.l	#mem+$68100+$2828,a1
		bra.s	box_it_more
box_it		tst.w	done_box
		bne.s	done_it
		move.w	#1,done_box
		move.l	#$2828,a0
		move.w	#47,d0
		move.l	#mem+$68600+$2828,a1
box_it_more	add.l	old_screen,a0
make_sol_win	move.w	#4,d1
lines_sol	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		dbra	d1,lines_sol
		add.l	#80,a0
		add.l	#80,a1
		dbra	d0,make_sol_win
		tst.w	quities
		beq.s	no_hl_quti
		move.l	#$00870008,d0
		move.l	#$008f005d,d1
		move.l	#$00260009,d2
		bsr	sprite
no_hl_quti	tst.b	force_high
		beq.s	no_extra_hl
		move.l	#$00870008,d0
		move.l	#$008f0068,d1
		move.l	#$00190009,d2
		move.w	#7,col1
		cmp.b	#2,force_high
		bne.s	in_force
		move.l	#$008f005d,d1
		move.l	#$00260009,d2
in_force	bsr	sprite
		move.w	#15,col1
no_extra_hl	clr.b	force_high
		rts

box_it_sp	move.w	#1,done_box
		move.l	#$2828-$500*4,a0
		move.w	#47+8*8,d0
		move.l	#mem+$68600+$2828-$500*4,a1
		add.l	old_screen,a0
make_sol_winsp	move.w	#4,d1
lines_solsp	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		dbra	d1,lines_solsp
		add.l	#80,a0
		add.l	#80,a1
		dbra	d0,make_sol_winsp
		move.l	#$00870008,d0
		cmp.w	#1,kill_cancel
		bne.s	no_kill_can
		move.l	#$00710081,d1
		move.l	#$002b0009,d2
		bsr	sprite
no_kill_can	cmp.w	#2,kill_cancel
		bne.s	no_kill_can2
		move.l	#$00a70081,d1
		move.l	#$00250009,d2
		bsr	sprite
no_kill_can2	clr.w	kill_cancel
		rts

kill_cancel	dc.w	0

more_sol	lea	txt_col,a0
		move.w	edit_room,d3
		subq.w	#1,d3
		clr.w	d4
		move.b	0(a0,d3.w),d4
		move.l	#$005b005f,d1
		asl.w	#4,d4
		add.w	d4,d1
		swap	d1
		move.l	#$004e0010,d0
		move.l	#$000e0008,d2
		bra	sprite
no_sol_win	rts

clear_room	cmp.b	#6,priority
		bne	no_cls_room
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.w	#7,col1
		move.l	#$007d0046,d0
		lea	clr_texts,a0
		bsr	print_text
		move.w	#15,col1
		bsr	here_man
		bra	copy_O_to_W

clr_texts	dc.b	'BACKUP ROOM',-1
		dc.b	'RESTORE ROOM',-1
		dc.b	'CLEAR ROOM',-1
		dc.b	'DONE',0

clr_hl		dc.b	0

		even
hl_routes	dc.l	no_sol_win
		dc.l	hlro1
		dc.l	hlro2
		dc.l	hlro3
		dc.l	hlro4

hlro1		move.l	#$00870008,d0
		move.l	#$007c0045,d1
		move.l	#$00400009,d2
		bsr	sprite
		move.l	#$00bc0045,d1
		move.l	#$00030009,d2
		bra	sprite

hlro2		move.l	#$00870008,d0
		move.l	#$007c004f,d1
		move.l	#$00490009,d2
		bra	sprite

hlro3		move.l	#$00870008,d0
		move.l	#$007c0059,d1
		move.l	#$003d0009,d2
		bra	sprite

hlro4		move.l	#$00870008,d0
		move.l	#$007c0063,d1
		move.l	#$00190009,d2
		bra	sprite
		
		even
backup_col	dc.b	0
		even

do_clr_hl	clr.l	d0
		move.b	clr_hl,d0
		lsl.w	#2,d0
		lea	hl_routes,a0
		move.l	0(a0,d0.w),a0
		jmp	(a0)

do_clear_room	cmp.b	#6,priority
		bne	no_cls_room
		move.l	#$009700b2,d1
		bsr	show_option
		clr.b	clr_hl
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$7d,d0
		blt	no_cls_room
		cmp.w	#$7d+$4f-12,d0
		bgt	check_2nd
		cmp.w	#$46,d1
		blt	no_cls_room
		cmp.w	#$46+9,d1
		bgt	check_2nd

		move.b	#1,clr_hl
		cmp.b	#248,ms_click
		beq	quit_hlok
		move.w	edit_room,d5
		subq.w	#1,d5
		lea	txt_col,a0
		move.b	0(a0,d5.w),backup_col
		mulu	#20,d5
		lea	names,a6
		lea	name_backup,a5
		move.w	#19,d0
save_ns_hl	move.b	0(a6,d5.w),(a5)+
		addq.w	#1,d5
		dbra	d0,save_ns_hl


		move.w	edit_room,d0
		subq.w	#1,d0
		clr.l	d1
		move.w	d0,d1
		mulu	#400,d1
		move.l	d1,a0
		add.l	#room,a0
		lea	room_backup,a1
		move.w	#99,d0
remy_room	move.l	(a0)+,(a1)+
		dbra	d0,remy_room
		bsr	calc_baddy
		lea	sprite_backup,a1
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		lea	save_pos,a3
		add.l	d0,a3
		move.w	#39,d0
copy_room_bk1	move.l	(a3)+,(a1)+
		dbra	d0,copy_room_bk1
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#40,d0
		lea	switch_backup,a0
		lea	true_switches,a1
		add.l	d0,a1
		move.w	#9,d0
back_ups1	move.l	(a1)+,(a0)+
		dbra	d0,back_ups1
		rts

check_2nd	cmp.w	#$7d+$43+6,d0
		bgt	no_cls_room
		cmp.w	#$46+10*2-9,d1
		blt	no_cls_room
		cmp.w	#$46+10*2,d1
		bgt	check_3rd

		move.b	#2,clr_hl
		cmp.b	#248,ms_click
		beq	quit_hlok
		move.w	edit_room,d5
		subq.w	#1,d5
		lea	txt_col,a0
		move.b	backup_col,0(a0,d5.w)
		mulu	#20,d5
		lea	names,a6
		lea	name_backup,a5
		move.w	#19,d0
rest_ns_hl	move.b	(a5)+,0(a6,d5.w)
		addq.w	#1,d5
		dbra	d0,rest_ns_hl

		move.w	edit_room,d0
		subq.w	#1,d0
		clr.l	d1
		move.w	d0,d1
		mulu	#400,d1
		move.l	d1,a0
		add.l	#room,a0
		lea	room_backup,a1
		move.w	#99,d0
bkmy_room	move.l	(a1)+,(a0)+
		dbra	d0,bkmy_room
		bsr	show_room
		bsr	print_room_name
		bsr	clear_room
		bsr	new_spid
		move.l	#$009700b2,d1
		bsr	show_option
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	display_CA
		move.l	(sp)+,old_screen
		bsr	calc_baddy
		lea	sprite_backup,a1
		lea	act_buf,a2
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#160,d0
		lea	save_pos,a3
		add.l	d0,a3
		move.w	#39,d0
copy_room_bk2	move.l	(a1),(a0)+
		move.l	(a1),(a3)+
		move.l	(a1)+,(a2)+
		dbra	d0,copy_room_bk2
		lea	switch_backup,a0
		lea	true_switches,a1
		lea	false_switches,a2
		lea	switch_buf,a3
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#40,d0
		add.l	d0,a1
		add.l	d0,a2
		add.l	d0,a3
		move.w	#9,d0
reset_switch	move.l	(a0)+,d1
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		move.l	d1,(a3)+
		dbra	d0,reset_switch
		bsr	show_my_id
		bra	display_CA
quit_hlok	rts


check_3rd	cmp.w	#$7d+$3d,d0
		bgt	no_cls_room
		cmp.w	#$46+10*3,d1
		bgt	check_4th

		move.b	#3,clr_hl
		cmp.b	#248,ms_click
		beq.s	quit_hlok

		bsr	small_cls
		bsr	clear_scenery
		bsr	clr_true_buf

		move.w	edit_room,d5
		subq.w	#1,d5
		mulu	#20,d5
		lea	names,a6
		move.w	#19,d0
clr_ns_hl	clr.b	0(a6,d5.w)
		addq.w	#1,d5
		dbra	d0,clr_ns_hl
		bra	print_room_name

		
check_4th	cmp.w	#$7d+$19,d0
		bgt	no_cls_room
		cmp.w	#$46+10*4,d1
		bgt	no_cls_room
		move.b	#4,clr_hl

		cmp.b	#248,ms_click
		beq.s	no_cls_room
		move.b	#1,priority
		move.b	#2,un_click
		move.b	#248,ms_click
		rts

clear_scenery	bsr	clear_room_id
		move.w	edit_room,d0
		subq.w	#1,d0
		clr.l	d1
		move.w	d0,d1
		mulu	#400,d1
		move.l	d1,a0
		add.l	#room,a0
		move.w	#99,d0
clr_room	clr.l	(a0)+
		dbra	d0,clr_room
		bsr	print_room_name
		bsr	clear_room
		bsr	new_spid
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	display_CA
		move.l	#$009700b2,d1
		bsr	show_option
		move.l	(sp)+,old_screen
		bra	display_CA
no_cls_room	rts

wrap_round_dr	cmp.b	#10,priority
		bne	not_wrap_draw
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.w	#5,col1
		move.l	#$00600048,d0
		lea	wrap_txt,a0
		bsr	print_text
		move.l	#SPHARD,w_mode1
		move.w	#15,col1
		lea	colour_code,a0
		move.w	#7,d3
		move.l	#$006a0010,d0
		move.l	#$0060005c,d1
		move.l	#$00080007,d2
		bsr	sprite
		move.l	#$005c0010,d0
		move.l	#$00700054,d1
		move.l	#$00070008,d2
		bsr	sprite
		move.l	#$00630010,d0
		move.l	#$00700064,d1
		bsr	sprite
		move.l	#$00700010,d0
		move.l	#$0080005c,d1
		move.l	#$00080007,d2
		bsr	sprite
		move.w	#7,col1
		move.l	#$0097005c,d0
		lea	exit_wrap_txt,a0
		bsr	print_text
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		bsr	zap_pop
		bsr	display_CA
		bra	copy_O_to_W
not_wrap_draw	rts

wrap_round	cmp.b	#10,priority
		bne	null_wraping2
		clr.w	in_hl
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$5c-1,d1
		blt	not_exit_w
		cmp.w	#$5c+7,d1
		bgt	not_exit_w

		cmp.w	#$c1+12-6,d0
		blt.s	not_exit_wz
		cmp.w	#$c2+32-6,d0
		bgt.s	not_exit_wz
		addq.w	#1,in_hl

		
		cmp.b	#248,ms_click
		beq	null_wraping2

		move.b	#1,priority
		clr.b	activate_wrap
		clr.w	in_hl
		rts

not_exit_wz	cmp.w	#$a8-13-12+6,d0
		blt	not_exit_w
		cmp.w	#$a8+12+8,d0
		bgt	not_exit_w


		cmp.b	#248,ms_click
		beq	null_wraping2
		cmp.w	#100,edit_room
		bgt	null_wraping2
		addq.w	#1,exit_hl
		andi.w	#1,exit_hl
		move.b	#2,un_click
		clr.b	ms_click
		bra	not_exit_w

cause_in	tst.w	exit_hl
		beq	no_user_rmsc
		move.w	edit_room,d7
		move.w	d7,jump_wrap
		bsr	get_mem_add

		cmp.b	#2,activate_wrap
		bne.s	not_scroll_up
		move.l	a0,a1
		add.l	#20,a1
		move.w	#18,d0
cause_upsc	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		dbra	d0,cause_upsc
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
not_scroll_up	cmp.b	#3,activate_wrap
		bne.s	not_scroll_down
		add.l	#360,a0
		move.l	a0,a1
		add.l	#20,a1
		move.w	#18,d0
cause_downsc	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		sub.l	#40,a0
		sub.l	#40,a1
		dbra	d0,cause_downsc
		clr.l	(a1)+
		clr.l	(a1)+
		clr.l	(a1)+
		clr.l	(a1)+
		clr.l	(a1)+
not_scroll_down	cmp.b	#1,activate_wrap
		bne.s	not_scroll_left
		move.l	a0,a1
		addq.l	#1,a1
		move.w	#19,d0
cause_leftsc	move.w	#18,d1
ccause_leftsc	move.b	(a1)+,(a0)+
		dbra	d1,ccause_leftsc
		clr.b	(a0)+
		addq.l	#1,a1
		dbra	d0,cause_leftsc
not_scroll_left	cmp.b	#4,activate_wrap
		bne.s	not_scroll_ri
		add.l	#398,a0
		move.l	a0,a1
		addq.l	#1,a1
		move.w	#19,d0
cause_rightsc	move.w	#18,d1
ccause_rightsc	move.b	(a0),(a1)
		subq.l	#1,a0
		subq.l	#1,a1
		dbra	d1,ccause_rightsc
		clr.b	(a1)
		subq.l	#1,a0
		subq.l	#1,a1
		dbra	d0,cause_rightsc
not_scroll_ri
no_user_rmsc	move.w	jump_wrap,edit_room
		move.b	#2,un_click
		clr.b	ms_click
		bsr	save_the_id
		bsr	show_part
		bsr	new_room
		bsr	box_it
		bsr	new_spid
		bsr	zap_pop
		bsr	here_man
		bsr	display_CA
		bsr	print_room_name
		clr.b	box_me
		rts

pwrap_left	move.w	edit_room,d7
		sub.w	#1,d7
		clr.l	d0
		move.w	d7,d0
		divs	#ROOM_MAX,d0
		swap	d0
		tst.w	d0
		bne.s	display_RW0
		add.w	#ROOM_MAX,d7
display_RW0	move.w	d7,jump_wrap
		rts

pwrap_up	move.w	edit_room,d7
		sub.w	#ROOM_MAX,d7
		bcc	display_RW1
re_type_room	move.w	edit_room,d7
		add.w	#(ROOM_MAX-1)*ROOM_MAX,d7
display_RW1	tst.w	d7
		beq.s	re_type_room
		move.w	d7,jump_wrap
make_sides
no_editin	rts

split_screens	
cause_game2	lea	syst_buf,a0
		move.w	#43,d0
vcopy_ccg2	move.b	#1,(a0)+
		dbra	d0,vcopy_ccg2
		move.w	#19,d0
vcopy_ccg3	move.b	#1,(a0)
		move.b	#1,21(a0)
		add.l	#22,a0
		dbra	d0,vcopy_ccg3
		move.w	#43,d0
vcopy_ccg4	move.b	#1,(a0)+
		dbra	d0,vcopy_ccg4
		rts

*split_screens	tst.w	game_play_mode
*		beq.s	cause_game2
*		cmp.w	#100,edit_room
*		bgt.s	cause_game2
*		bsr	pwrap_left
*		bsr	get_mem_add
*		add.w	#19,a0
*		lea	syst_buf+44,a1
*		move.w	#19,d0
*_dump_sleft	move.b	(a0),(a1)
*		add.l	#20,a0
*		add.l	#22,a1
*		dbra	d0,_dump_sleft
*		bsr	pwrap_right
*		bsr	get_mem_add
*		lea	syst_buf+65,a1
*		move.w	#19,d0
*_dump_sright	move.b	(a0),(a1)
*		add.l	#20,a0
*		add.l	#22,a1
*		dbra	d0,_dump_sright
*
*		bsr	pwrap_up
*		bsr	get_mem_add
*		add.l	#(20*18),a0
*		lea	syst_buf+1,a1
*		move.w	#1,d1
*rcopy_2_sup	move.w	#19,d0
*copy_2_sup	move.b	(a0)+,(a1)+
*		dbra	d0,copy_2_sup
*		addq.l	#2,a1
*		dbra	d1,rcopy_2_sup
*
*		bsr	pwrap_down
*		bsr	get_mem_add
*		lea	syst_buf+(22*22)+1,a1
*		move.w	#1,d1
*rcopy_2_sdown	move.w	#19,d0
*copy_2_sdown	move.b	(a0)+,(a1)+
*		dbra	d0,copy_2_sdown
*		addq.l	#2,a1
*		dbra	d1,rcopy_2_sdown
*
*		move.w	edit_room,d6
*		bsr	pwrap_left
*		move.w	d7,edit_room
*		bsr	pwrap_up
*		bsr	get_mem_add
*		move.b	399(a0),syst_buf
*		move.b	379(a0),syst_buf+22
*
*		bsr	pwrap_down
*		bsr	get_mem_add
*		move.b	19(a0),syst_buf+(22*22)
*		move.b	39(a0),syst_buf+(22*23)
*
*		move.b	d6,edit_room
*		bsr	pwrap_right
*		move.w	d7,edit_room
*		bsr	pwrap_up
*		move.b	360(a0),syst_buf+21
*		move.b	380(a0),syst_buf+43
*
*		bsr	pwrap_down
*		move.b	(a0),syst_buf+(23*22)-1
*		move.b	20(a0),syst_buf+(24*22)-1
*
*		move.w	d6,edit_room
*no_edges_ere	rts

*rsplit_screens	tst.w	game_play_mode
*		beq.s	no_edges_ere
*		bsr	pwrap_left
*		bsr	get_mem_add
*		add.w	#19,a0
*		lea	syst_buf+44,a1
*		move.w	#19,d0
*_dump_sleft2	move.b	(a1),(a0)
*		add.l	#20,a0
*		add.l	#22,a1
*		dbra	d0,_dump_sleft2
*		bsr	pwrap_right
*		bsr	get_mem_add
*		lea	syst_buf+65,a1
*		move.w	#19,d0
*_dump_sright2	move.b	(a1),(a0)
*		add.l	#20,a0
*		add.l	#22,a1
*		dbra	d0,_dump_sright2
*
*		bsr	pwrap_up
*		bsr	get_mem_add
*		add.l	#(20*18),a0
*		lea	syst_buf+1,a1
*		move.w	#1,d1
*rcopy_2_sup2	move.w	#19,d0
*copy_2_sup2	move.b	(a1)+,(a0)+
*		dbra	d0,copy_2_sup2
*		addq.l	#2,a1
*		dbra	d1,rcopy_2_sup2
*
*		bsr	pwrap_down
*		bsr	get_mem_add
*		lea	syst_buf+(22*22)+1,a1
*		move.w	#1,d1
*rcopy_2_sdown2	move.w	#19,d0
*copy_2_sdown2	move.b	(a1)+,(a0)+
*		dbra	d0,copy_2_sdown2
*		addq.l	#2,a1
*		dbra	d1,rcopy_2_sdown2
*
*		move.w	edit_room,d6
*		bsr	pwrap_left
*		move.w	d7,edit_room
*		bsr	pwrap_up
*		bsr	get_mem_add
*		move.b	syst_buf,399(a0)
*		move.b	syst_buf+22,379(a0)
*
*		bsr	pwrap_down
*		bsr	get_mem_add
*		move.b	syst_buf+(22*22),19(a0)
*		move.b	syst_buf+(22*23),39(a0)
*
*		move.b	d6,edit_room
*		bsr	pwrap_right
*		move.w	d7,edit_room
*		bsr	pwrap_up
*		move.b	syst_buf+21,360(a0)
*		move.b	syst_buf+43,380(a0)
*
*		bsr	pwrap_down
*		move.b	syst_buf+(23*22)-1,(a0)
*		move.b	syst_buf+(24*22)-1,20(a0)
*
*		move.w	d6,edit_room
*		rts

get_mem_add	subq.w	#1,d7
		mulu	#400,d7
		move.l	d7,a0
		add.l	#room,a0
		rts

pwrap_down	move.w	edit_room,d7
		add.w	#ROOM_MAX,d7
		cmp.w	#ROOM_MAX*ROOM_MAX,d7
		ble.s	display_RW2
		sub.w	#ROOM_MAX*ROOM_MAX,d7
display_RW2	move.w	d7,jump_wrap
		rts

pwrap_right	move.w	edit_room,d7
		sub.w	#1,d7
		and.l	#$ffff,d7
		divu	#ROOM_MAX,d7
		swap	d7
		cmp.w	#ROOM_MAX-1,d7
		beq.s	wrap_room_count
		move.w	edit_room,d7
		addq.w	#1,d7
		bra.s	display_RW4
wrap_room_count	move.w	edit_room,d7
		sub.w	#ROOM_MAX-1,d7
display_RW4	move.w	#2,d4
		move.w	d7,jump_wrap
		rts

not_exit_w	cmp.w	#$5c,my
		blt.s	not_exit_w1
		cmp.w	#$5c+7,my
		bgt.s	not_exit_w1

		cmp.w	#$60,mx
		blt.s	not_exit_w1
		cmp.w	#$68,mx
		bgt.s	not_exit_w1
		move.b	#1,activate_wrap
		bsr	pwrap_left
		cmp.b	#248,ms_click
		beq.s	not_exit_w1
		bsr	cause_in
not_exit_w1
		cmp.w	#$54,my
		blt.s	not_exit_w2
		cmp.w	#$54+7,my
		bgt.s	not_exit_w2
		cmp.w	#$70,mx
		blt.s	not_exit_w2
		cmp.w	#$78,mx
		bgt.s	not_exit_w2
		move.b	#2,activate_wrap
		bsr	pwrap_up
		cmp.b	#248,ms_click
		beq.s	not_exit_w2
		bsr	cause_in

not_exit_w2
		cmp.w	#$64,my
		blt.s	not_exit_w3
		cmp.w	#$64+8,my
		bgt.s	not_exit_w3
		cmp.w	#$70,mx
		blt.s	not_exit_w3
		cmp.w	#$78,mx
		bgt.s	not_exit_w3
		move.b	#3,activate_wrap
		bsr	pwrap_down
		cmp.b	#248,ms_click
		beq.s	not_exit_w3
		bsr	cause_in
not_exit_w3
		cmp.w	#$5c,my
		blt.s	not_exit_w4
		cmp.w	#$5c+7,my
		bgt.s	not_exit_w4
		cmp.w	#$80,mx
		blt.s	not_exit_w4
		cmp.w	#$88,mx
		bgt.s	not_exit_w4
		move.b	#4,activate_wrap
		bsr	pwrap_right
		cmp.b	#248,ms_click
		beq.s	not_exit_w4
		bsr	cause_in
not_exit_W4	rts

not_wraping	move.l	#SPHARD,w_mode1
		cmp.b	#1,activate_wrap
		bne.s	check2_w
		move.l	#$001a0020,d0
		move.l	#$0060005c,d1
		move.l	#$00080007,d2
		bsr	sprite

check2_w	cmp.b	#2,activate_wrap
		bne.s	check3_w
		move.l	#$00050020,d0
		move.l	#$00700054,d1
		move.l	#$00070008,d2
		bsr	sprite

check3_w	cmp.b	#3,activate_wrap
		bne.s	check4_w
		move.l	#$000c0022,d0
		move.l	#$00700064,d1
		move.l	#$00070008,d2
		bsr	sprite

check4_w	cmp.b	#4,activate_wrap
		bne.s	null_wraping
		move.l	#$00200020,d0
		move.l	#$0080005c,d1
		move.l	#$00080007,d2
		bsr	sprite

null_wraping	clr.b	activate_wrap
		move.l	#SPXOR,w_mode1
		tst.w	exit_hl
		beq.s	no_hl_exit	
		move.l	#$00870008,d0
		move.l	#$0096005b,d1
		move.l	#$00250009,d2
		bsr	sprite
no_hl_exit	tst.w	in_hl
		beq.s	null_wraping2
		move.l	#$00870008,d0
		move.l	#$00c6005b,d1
		move.l	#$00190009,d2
		bsr	sprite
null_wraping2	rts

wrap_txt	dc.b	'SCREEN WRAP SELECTION',0
exit_wrap_txt	dc.b	'SCROLL  EXIT',0

sea_wave	move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		bne.s	skip_wave2
		addq.b	#1,sea_wave1
		clr.l	d0
		move.b	sea_wave1,d0
		and.b	#3,d0
		lsl.b	#3,d0
		add.l	#system_blk+$14dc0,d0
		move.l	d0,a0
		move.l	#mem+$68600,a1
		lea	syst_buf+45,a2
		clr.w	d2
		bra.s	skip_wave
skip_wave2	addq.b	#1,sea_wave2
		clr.l	d0
		move.b	sea_wave2,d0
		and.b	#3,d0
		move.b	#3,d1
		sub.b	d0,d1
		move.b	d1,d0
		lsl.b	#3,d0
		add.l	#system_blk+$14dc0,d0
		move.l	d0,a0
		move.l	#mem+$68b00,a1
		lea	syst_buf+45,a2
		move.w	#22,d2

skip_wave	move.w	#9,d0
s_d_y		move.w	#19,d1
		move.l	a1,a3
s_d_x		move.b	0(a2,d2.w),d3
		cmp.b	#24,d3
		bne.s	n_s
		move.l	(a0),(a3)
		move.l	4(a0),4(a3)
		move.l	160(a0),160(a3)
		move.l	164(a0),164(a3)
n_s		addq.l	#8,a3
		addq.w	#1,d2
		dbra	d1,s_d_x
		add.l	#$a00,a1
		add.w	#24,d2
		dbra	d0,s_d_y

burning		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		bne.s	do_burn2
		addq.w	#1,burnpos
		addq.b	#1,burn1
		clr.l	d0
		move.b	burn1,d0
		and.b	#3,d0
		lsl.b	#3,d0
		move.l	#system_blk+$7d00*2+$51e0,d0
		move.l	d0,a0
		move.l	#mem+$68600,a1
		lea	syst_buf+45,a2
		clr.w	d2
		bra.s	skip_burn
do_burn2	addq.b	#1,burn2
		clr.l	d0
		move.b	burn2,d0
		and.b	#3,d0
		move.b	#3,d1
		sub.b	d0,d1
		move.b	d1,d0
		lsl.b	#3,d0
		move.l	#system_blk+$7d00*2+$51e0,d0
		move.l	d0,a0
		move.l	#mem+$68b00,a1
		lea	syst_buf+45,a2
		move.w	#22,d2

skip_burn	move.l	#d7defs,a4
		move.w	burnpos,d6
		cmp.w	#4,d6
		blt.s	no_overflow_B
		subq.w	#4,burnpos
no_overflow_B	move.w	#9,d0
burn_draw_y	move.w	#19,d1
		move.l	a1,a3
bn_dr_x
		clr.l	d7
		addq.w	#1,d6
		cmp.w	#4,d6
		blt.s	no_worry
		subq.w	#4,d6
no_worry	move.b	0(a4,d6.w),d7
		move.b	0(a2,d2.w),d3
		cmp.b	#58,d3
		beq.s	do_fmes
		cmp.b	#59,d3
		beq.s	do_fmes
		cmp.b	#225,d3
		beq.s	do_fmes
		cmp.b	#226,d3
		bne.s	no_flames
do_fmes		move.l	d7,a5
		add.l	a0,a5
		move.l	(a5),(a3)
		move.l	4(a5),4(a3)
		move.l	160(a5),160(a3)
		move.l	164(a5),164(a3)
		move.l	320(a5),320(a3)
		move.l	324(a5),324(a3)
no_flames	addq.l	#8,a3
		addq.w	#1,d2
		
		dbra	d1,bn_dr_x
		add.l	#$a00,a1
		add.w	#24,d2
		dbra	d0,burn_draw_y
		rts

		even
d7defs		dc.b	0,8,16,24

clear_room_id	bsr	save_the_id
		move.w	#(848/4)-1,d0
		lea	syst_buf,a0
clr_ids		clr.l	(a0)+
		dbra	d0,clr_ids
		
		rts



select_page_no	tst.b	choose_path
		bne	display_page_no
		cmp.w	#$128,mx
		blt	display_page_no
		move.w	#$14,d0
		move.w	#$14+9,d1
		clr.b	d2
		move.w	#9,d3
		move.w	my,d4
find_nxt_slot	cmp.w	d0,d4
		blt	display_page_no
		cmp.w	d1,d4
		ble.s	found_slot_pgno
		addq.b	#1,d2
		add.w	#$e,d0
		add.w	#$e,d1
		dbra	d3,find_nxt_slot
		bra	display_page_no

found_slot_pgno	cmp.b	#248,ms_click
		beq	display_page_no
		cmp.b	icon_page_no,d2
		beq	display_page_no
		move.b	d2,icon_page_no
		move.w	d2,-(sp)
		clr.l	w_mode1
		move.l	#$0001000f,d1
		move.l	#$00680018,d2
		move.w	#4,d3
black_block1	bsr	sprite
		add.w	#$1d,d1
		dbra	d3,black_block1
		move.l	#$0096000f,d1
		move.w	#4,d3
black_block2	bsr	sprite
		add.w	#$1d,d1
		dbra	d3,black_block2
		bsr	clear_room_id
		move.b	icon_page_no,d0
		and.w	#255,d0
		lsl.w	#2,d0
		lea	icon_pages,a0
		move.l	0(a0,d0.w),a0
		move.l	#SPXOR,w_mode1
		jsr	(a0)
		move.w	(sp)+,d2
		move.l	#SPHARD,w_mode1
		move.w	#7,col1
		move.l	#use_icon,a0
		move.l	#$003c00af,d0
		cmp.b	#4,d2
		bge.s	brown_pg
		move.b	#6,poke_edit
		bra.s	print_new_ins

brown_pg	move.b	#7,poke_edit
		bsr	print_text
		bsr	copy_O_to_W
		bra.s	display_page_no

print_new_ins
		clr.l	w_mode1
		move.l	#$007900ac,d1	;wally
		move.l	#$008a000c,d2
		bsr	sprite
		bsr	copy_O_to_w
		cmp.w	#1,icon_mode

		IFEQ	DEBUG
		bne.s	no_imode2_icon
		clr.w	icon_mode
		ENDC

no_imode2_icon	cmp.w	#2,icon_mode
		bne.s	display_page_no		
		clr.w	icon_mode

display_page_no	cmp.b	#20,choose_path
		beq.s	true_display_pg
		cmp.b	#30,choose_path
		beq.s	true_display_pg
		cmp.b	#2,choose_path
		bgt	no_sel_page
true_display_pg	move.l	#SPXOR,w_mode1
		move.w	#15,col1
		clr.w	d0
		move.b	icon_page_no,d0
		move.l	#$01270014,d1
		mulu	#$e,d0
		add.w	d0,d1
		move.l	#$004e004f,d0
		move.l	#$00160007,d2
		bsr	sprite
no_sel_page	rts

set_there_id	bsr	popup2
		lea	text_id_them,a0
		move.l	#$0055003c,d0
		bsr	print_text
		move.l	#$00900069,d0
		lea	done_them_id,a0
		bsr	print_text
		bsr	print_obj_ids
		move.b	#2,un_click
		move.b	#248,ms_click
		bra	copy_O_to_W

print_obj_ids	clr.l	w_mode1
		move.l	#$00db003c,d1
		move.l	#$00120028,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		clr.w	d0
		move.b	icon_page_no,d0
		mulu	#10,d0
		lea	object_id,a0
		add.w	pick_icon,d0
		add.l	d0,a0
		move.b	(a0),d1		;current id value
		move.w	#3,d2		;4 values
		move.b	#1,d3		;mask value
		move.l	#$00db003c,d0
find_out_dids	move.b	d1,d4
		and.b	d3,d4
		tst.b	d4
		beq.s	show_id_no
		move.w	#11,col1
		lea	maket_yes,a0
		bra.s	next_line_ids
show_id_no	move.w	#10,col1
		lea	maket_no,a0
next_line_ids	bsr	print_text
		add.w	#10,d0
		lsl.b	#1,d3
		dbra	d2,find_out_dids
		move.w	#15,col1
		rts

maket_yes	dc.b	'YES',255,0
maket_no	dc.b	'NO ',255,0

text_id_them	dc.b	252,5,'CAN IT KILL YOU ?.....',255
		dc.b	'CAN YOU STAND ON IT ?.',255
		dc.b	'CAN YOU SHOOT IT ?....',255
		dc.b	'DOES CROSS EFFECT IT ?',0
done_them_id	dc.b	252,7,'DONE',252,15,0

bitmap_ids	dc.b	%0001,%0010,%0100,%1000

control_id_them	cmp.b	#1,choose_path
		beq.s	control_tid
		cmp.b	#4,choose_path
		bne	no_chn_id
control_tid	cmp.w	#$db,mx
		blt.s	in_id_done
		cmp.w	#$14+$db,mx
		bgt.s	in_id_done
		clr.l	d0
		move.w	my,d0
		cmp.w	#$3a,d0
		ble.s	in_id_done
		cmp.w	#$3a+10*4,d0
		bge.s	in_id_done
		cmp.b	#248,ms_click
		beq.s	in_id_done
		sub.w	#$3a,d0
		divu	#10,d0
		lea	bitmap_ids,a0
		move.b	0(a0,d0.w),d5

		clr.w	d0
		move.b	icon_page_no,d0
		mulu	#10,d0
		lea	object_id,a0
		add.w	pick_icon,d0
		add.l	d0,a0
		move.b	(a0),d1		;current id value
		eor.b	d5,d1
		move.b	d1,(a0)

		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	print_obj_ids
		move.l	(sp)+,old_screen
		move.b	#2,un_click

in_id_done	cmp.w	#$90,mx
		blt.s	no_chn_id
		cmp.w	#$90+25,mx
		bgt.s	no_chn_id
		cmp.w	#$68,my
		blt.s	no_chn_id
		cmp.w	#$68+9,my
		bgt.s	no_chn_id
		move.b	#1,force_high

		cmp.b	#248,ms_click
		beq.s	no_chn_id
		move.b	#1,d6
		bra.s	skip_d6set
no_chn_id	rts
redraw_iconpg	clr.b	d6
skip_d6set	move.b	#248,ms_click
		move.b	#2,un_click
		clr.b	force_high
		cmp.b	#4,choose_path
		beq.s	start_mode4
		clr.b	choose_path
		bsr	restore_defs
		bsr	display_page_no
		bra	show_inv_mode	

start_mode4	tst.b	d6
		beq	start_mode3
		bsr	start_mode3
		bra	do_the_flashy2

select_exit	cmp.b	#20,choose_path
		beq.s	do_xit
		cmp.b	#30,choose_path
		beq.s	do_xit
		cmp.b	#2,choose_path
		bgt.s	no_chn_id
do_xit

		move.w	mx,d0
		move.w	my,d0
		cmp.w	#$e0,mx
		blt.s	no_chn_id
		cmp.w	#$f8,mx
		bgt	no_chn_id
		cmp.w	#3,my
		blt	no_chn_id
		cmp.w	#$b,my
		bgt	no_chn_id
		move.l	#$00870008,d0
		move.l	#$00df0002,d1
		move.l	#$00190009,d2
		move.l	#SPXOR,w_mode1
		bsr	sprite
		move.l	#SPHARD,w_mode1
		cmp.b	#248,ms_click
		beq	no_chn_id
		addq.l	#4,sp		;clear stack
skip_exit	move.w	#15,col1
		clr.b	sub_priority
		clr.b	choose_path
		bsr	clear_room_id
		move.l	#SPXOR,w_mode1
		bsr	icon_selector
		bsr	show_room2
		bsr	copy_O_to_W
		clr.b	choose_path
		clr.b	p_value
		move.b	#2,un_click
		move.b	#248,ms_click
		bra	icon_main

select_t_icon	tst.b	choose_path
		bne	no_sel_titem
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$e,d1
		blt	no_sel_titem
		cmp.w	#$9f,d1
		bge	no_sel_titem
		cmp.w	#$125,d0
		bgt	no_sel_titem
		cmp.b	#248,ms_click
		beq	no_sel_titem
		sub.w	#$e,d1
		and.l	#$ffff,d1
		divu	#$1d,d1
		and.l	#$ffff,d0
		divu	#$93,d0
		mulu	#5,d0
		add.w	d0,d1
		move.w	d1,d5
		mulu	#16,d1
		move.w	d5,pick_icon
		move.b	icon_page_no,d0
		and.w	#$ff,d0
		move.w	d0,d2
		mulu	#160,d2
		add.l	d2,d1
		move.l	d1,pain
		subq.b	#4,d0
		mulu	#10,d0
		add.w	d5,d0
		move.w	d0,tpick

		move.w	d5,d0

		lsl.w	#4,d0
		lea	table_titem,a0

		move.l	0(a0,d0.w),a5
		move.l	4(a0,d0.w),a6
		bsr	draw3

		move.l	8(a0,d0.w),a5
		bsr	draw3

		move.l	12(a0,d0.w),a6
		bsr	draw3

		move.l	0(a0,d0.w),a5
		bsr	draw3

over_me		move.b	#2,choose_path			;this
		clr.w	d6
		move.b	icon_page_no,d6
		mulu	#10,d6
		add.w	pick_icon,d6
		cmp.w	#30,d6
		blt	no_switch
		cmp.w	#40,d6
		bge	no_switch
		cmp.b	#30,choose_path
		beq	choosen_style
		move.l	#'MOVE',poke_txt
		cmp.w	#33,d6
		beq.s	switch_on_off
		cmp.w	#35,d6
		bne	choosen_style
		move.l	#'KILL',poke_txt
switch_on_off	clr.w	kill_mask
		move.l	#system_blk+$f48,a2
		move.l	old_screen,a3
		add.l	#$2828-$500*4,a3
		move.w	#9,d0
		move.w	#13,d1
		bsr	print_block
		clr.l	w_mode1
		move.l	#$00510041-8*4,d1
		move.l	#$009e002e+8*8,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1


		move.b	#30,choose_path
		move.l	#$005a0028,d0
		lea	enermy_txt,a0
		bsr	print_text
		move.b	#248,ms_click
		bsr	i_pan
		move.l	#$000500a3,d1
		bsr	show_option
		bra	copy_O_to_W

		even
		dc.b	0
enermy_txt	dc.b	252,9,' SELECT ICON(S) TO '
poke_txt	dc.b	'xxxx',255
		dc.b	' WHEN SWITCH IS PULLED',255,255
		dc.b	252,5,'    0...',252,10,'NO',252,5,'   5...',252,10,'NO',255
		dc.b	252,5,'    1...',252,10,'NO',252,5,'   6...',252,10,'NO',255
		dc.b	252,5,'    2...',252,10,'NO',252,5,'   7...',252,10,'NO',255
		dc.b	252,5,'    3...',252,10,'NO',252,5,'   8...',252,10,'NO',255
		dc.b	252,5,'    4...',252,10,'NO',252,5,'   9...',252,10,'NO',255,255,252,7
		dc.b	'    CONFIRM  CANCEL',252,15,0

		even

choosen_style	move.b	#20,choose_path
		bsr	popup
		move.l	#SPXOR,w_mode1
		move.l	#$005a004a,d0
		move.w	#3,col1
		lea	switch_types_t,a0
		bsr	print_text
		move.w	#15,col1
		move.l	#$00c000c8,d0
		move.l	#$00700058,d1
		move.l	#$00140012,d2
		bsr	sprite
		move.l	#$00d300c8,d0
		move.l	#$00c10058,d1
		move.l	#$00140012,d2
		bsr	sprite
		move.b	#248,ms_click
		bsr	i_pan
		move.l	#$000500a3,d1
		bsr	show_option
		bra	copy_O_to_W

		even
switch_types_t	dc.b	'SELECT SWITCH DIRECTION',255
		dc.b	255,252,7
		dc.b	'         CANCEL',0

		even

no_switch	move.b	#248,ms_click
		tst.w	icon_mode
		beq.s	start_mode1
		cmp.w	#1,icon_mode
		beq.s	start_mode2
		bra.s	start_mode3
no_sel_titem	rts

draw3		movem.l	a0/d0,-(sp)
		bsr	draw2
		movem.l	(sp)+,a0/d0
		rts


start_mode1	move.b	#2,choose_path
		bra	make_sel_path_p

start_mode2	move.b	#1,choose_path
		bra	set_there_id

start_mode3	move.w	#2,icon_mode
		clr.l	w_mode1
		move.l	#$003c00af,d1
		move.l	#$0030000a,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.b	#3,choose_path
		move.w	#((200-40)*160)/4-1,d0
		bsr	small_cls2
		bra	draw_make2

permit_imode	dc.b	1,1,0,1,1,0,0
		even

table_titem	dc.l	$0000000c
		dc.l	$0093000c
		dc.l	$0093002b
		dc.l	$0000002b

		dc.l	$0000002b
		dc.l	$0093002b
		dc.l	$00930048
		dc.l	$00000048

		dc.l	$00000048
		dc.l	$00930048
		dc.l	$00930065
		dc.l	$00000065

		dc.l	$00000065
		dc.l	$00930065
		dc.l	$00930082
		dc.l	$00000082

		dc.l	$00000082
		dc.l	$00930082
		dc.l	$0093009f
		dc.l	$0000009f

		dc.l	$0093000c
		dc.l	$0125000c
		dc.l	$0125002b
		dc.l	$0093002b

		dc.l	$0093002b
		dc.l	$0125002b
		dc.l	$01250048
		dc.l	$00930048

		dc.l	$00930048
		dc.l	$01250048
		dc.l	$01250065
		dc.l	$00930065

		dc.l	$00930065
		dc.l	$01250065
		dc.l	$01250082
		dc.l	$00930082

		dc.l	$00930082
		dc.l	$01250082
		dc.l	$0125009f
		dc.l	$0093009f


do_sel_imode	clr.w	d6
		move.b	choose_path,d6
		lea	permit_imode,a0
		move.b	0(a0,d6.w),d6
		tst.b	d6
		beq	no_sel_titem	
		clr.w	d6
		lea	imode_x_tabs,a0
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$ae,d1
		blt	out_im
		cmp.w	#$ae+9,d1
		bgt	out_im
		clr.w	d2
		cmp.b	#3,choose_path
		beq.s	ignore_1st
		cmp.b	#4,choose_path
		bne.s	chk_ms_x_imtab
ignore_1st	addq.w	#1,d2
		addq.w	#4,a0
chk_ms_x_imtab	cmp.w	(a0),d0
		blt	next_one_im
		cmp.w	2(a0),d0
		bgt	next_one_im
		cmp.b	#248,ms_click
		beq	out_im
		addq.w	#1,d6
		move.w	d2,icon_mode
		cmp.b	#3,choose_path
		beq.s	set_then_id
		cmp.b	#4,choose_path
		beq.s	back_to_draw
		cmp.b	#2,d6
		beq.s	no_chn_modei
		cmp.b	#1,choose_path
		bne.s	no_chn_modei
		clr.b	choose_path
		bsr	restore_defs
		bsr	show_inv_mode
no_chn_modei	rts

back_to_draw	cmp.w	#2,d2	;tester
		bne.s	out_im
		bsr	start_mode3
		move.b	#3,choose_path
		rts

set_then_id	cmp.w	#1,d2
		bne.s	out_im
		bsr	set_there_id
		move.b	#4,choose_path
		rts

next_one_im	addq.b	#1,d2
		cmp.b	#3,d2
		beq.s	out_im
		cmp.b	#6,poke_edit
		bne.s	do_no_exchk
		cmp.b	#1+DEBUG,d2
		beq.s	out_im
do_no_exchk	addq.l	#4,a0
		bra	chk_ms_x_imtab
out_im		rts

show_inv_mode	cmp.b	#5,choose_path
		bge	no_inv_imode
		cmp.b	#2,choose_path
		beq	no_inv_imode
		move.w	#15,col1
		move.w	icon_mode,d0
		lsl.w	#3,d0
		lea	imode_table,a0
		move.l	0(a0,d0.w),d1
		move.l	4(a0,d0.w),d2
		move.l	#$00870008,d0
		bra	sprite

make_sel_path_p	move.b	icon_page_no,d0
		and.w	#$ff,d0
		mulu	#10,d0
		add.w	pick_icon,d0
		cmp.w	#40,d0
		blt.s	no_new_id
		lea	user_test1,a0
		bra.s	exec_new_id
no_new_id	lea	id_init,a0
		move.l	pain,d1
		add.l	d1,a0
exec_new_id	move.w	#15,d0
		move.l	#public,a1
copy_newid	move.b	(a0)+,(a1)+
		dbra	d0,copy_newid
		clr.l	public+$a

		bsr	popup
		sub.l	a0,a0
		move.w	d5,a0
		move.l	#$00700060,d0
		move.l	#SPXOR,w_mode1
		move.l	#$006c004a,d0
		move.w	#3,col1
		lea	what_next_path,a0
		bsr	print_text
		move.w	#15,col1
		bsr	i_pan
		move.l	#$000500a3,d1
		bsr	show_option

		bra	copy_O_to_W

cancel_path	cmp.b	#2,choose_path
		bne.s	no_canpa
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$8f,d0
		blt.s	no_canpa
		cmp.w	#$8f+$26,d0
		bgt.s	no_canpa
		cmp.w	#$5c,d1
		blt.s	no_canpa
		cmp.w	#$5c+9,d1
		bgt.s	no_canpa
		move.b	#2,force_high
		cmp.b	#248,ms_click
		bne.s	redraw_iconpg2
no_canpa	rts
redraw_iconpg2	move.l	#SPXOR,w_mode1
		move.w	#15,col1
		bsr	display_page_no
		clr.b	choose_path
		bra	redraw_iconpg


rnd		move.b	rndb,d0
		add.b	manx,d0
		add.b	mx,d0
		addq.b	#5,d0	
		move.b	d0,rndb
no_inv_imode	rts

from_bottom	move.b	public+$c,d0
		move.b	public+$d,d1
		subq.w	#1,d0
		subq.w	#1,d1
		lsl.w	#4,d0
		lsl.w	#3,d1
		move.w	d0,public+2
		move.w	d1,public+4
		rts
		jmp	start


draw_make	cmp.b	#5,priority
		bne	no_makep5
		bsr	small_cls
		sub.l	a5,a5
		move.l	#$013f0000,a6
		bsr	draw
		move.l	#$013f00ae,a5
		bsr	draw
		move.l	#$000000ae,a6
		bsr	draw
		sub.l	a5,a5
		bsr	draw
		move.l	#$000b0009,a5
		move.l	#$009b0009,a6
		move.w	#8,d0
line_row_box	move.w	d0,-(sp)
		bsr	draw
		move.w	(sp)+,d0
		addq.l	#8,a5
		addq.l	#8,a6
		dbra	d0,line_row_box
		subq.l	#8,a6
		move.l	#$009b0009,a5
		move.w	#16,d0
line_col_box	move.w	d0,-(sp)
		bsr	draw
		move.w	(sp)+,d0
		sub.l	#$00090000,a5
		sub.l	#$00090000,a6
		dbra	d0,line_col_box
		move.l	#$010e000e,a5
		move.l	#$0121000e,a6
		bsr	draw
		move.l	#$01210019,a5
		bsr	draw
		move.l	#$010e0019,a6
		bsr	draw
		move.l	#$010e000e,a5
		bsr	draw

		move.l	#$010e003e,a5
		move.l	#$0121003e,a6
		bsr	draw
		move.l	#$01210049,a5
		bsr	draw
		move.l	#$010e0049,a6
		bsr	draw
		move.l	#$010e003e,a5
		bsr	draw

		move.l	#$00fe001e,a5
		move.l	#$0131001e,a6
		bsr	draw
		move.l	#$01310039,a5
		bsr	draw
		move.l	#$00fe0039,a6
		bsr	draw
		move.l	#$00fe001e,a5
		bsr	draw

		clr.l	w_mode1
		move.l	#$000500b1,d1
		move.l	#$01360009,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		lea	make_text,a0
		move.l	#$000c006e,d0
		move.w	#5,col1
		bsr	print_text
		move.w	#15,col1
		move.l	#$00000079,d0
		move.l	#$000a0050,d1
		move.l	#$00910009,d2
		bsr	sprite
		move.w	#3,col1
		move.l	#info_make,a0
		move.l	#$00c00010,d0
		bsr	print_text
		move.w	#15,col1
		move.l	#$00ae006e,a5
		move.l	#$0131006e,a6
		bsr	draw
		move.l	#$013100a9-8,a5
		bsr	draw
		move.l	#$00ae00a9-8,a6
		bsr	draw
		move.l	#$00ae006e,a5
		bsr	draw
		move.w	#-1,old_active

		move.l	#$00a10009,d0
		bsr	draw_scroll_up
		move.l	#$00a1001e,d0
		bsr	draw_scroll_lf
		move.l	#$00a10033,d0
		bsr	draw_scroll_rg
		move.l	#$00a10048,d0
		bsr	draw_scroll_dn

		bsr	copy_O_to_W
		bsr	make_dummy
		bsr	clear_room_id
		bsr	clr_baddy
		bsr	show_players
		move.l	#system_blk+$7d00*2+127*160+(64/2),a0
		move.l	#mem+$68600+177*160,a1
		move.w	#8,d0
renew_menu_mk	move.w	#15,d1
dump_menu_mk	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d1,dump_menu_mk
		add.l	#64-32,a0
		add.l	#64-32,a1
		dbra	d0,renew_menu_mk
no_makep5	rts

locked_icon	dc.w	0


make_text	dc.b	'SOLID TO ENEMY ?.....',-1
		dc.b	'SOLID TO YOU ?.......',-1
		dc.b	'CAN YOU STAND ON IT ?',-1
		dc.b	'CAN IT KILL YOU ?....',-1
		dc.b	'CAN YOU CLIMB IT ?...',0

yeses		dc.b	'YES',0
noies		dc.b	'NO ',0

info_make	dc.b	'ACTUAL SIZE',-1,-1
		dc.b	'GROUPED',-1
		dc.b	'3 BY 3',-1,251
		dc.b	'SAVED BUFFER',-1,-1
sel_mdo		dc.b	252,3,'PLOT  ',252,7
		dc.b	'DOT  ALL  FILL',252,15,0

locked_txt	dc.b	'LOCKED',0

do_make		cmp.b	#5,priority
		bne	no_do_make
		clr.w	locked_icon
		move.w	icon_no,d0
		add.w	char_active,d0
		cmpi.w	#63,d0
		bge.s	no_locked
		IFEQ	DEBUG
		addq.w	#1,locked_icon
		ENDC
		move.l	#$010e00b3,d1
		move.l	#$00800028,d0
		move.l	#$00200006,d2
		bsr	sprite
no_locked	cmp.b	#248,ms_click
		beq.s	mark_col_make
		cmp.w	#$55-5,my
		blt.s	mark_col_make
		cmp.w	#$5d-5,my
		bgt.s	mark_col_make
		cmp.w	#10,mx
		blt.s	mark_col_make
		cmp.w	#10+9*16,mx
		bgt.s	mark_col_make
		clr.l	d0
		move.w	mx,d0
		sub.w	#10,d0
		divu	#9,d0
		cmp.w	#16,d0
		bne.s	not_overflow_mk
		move.w	#15,d0
not_overflow_mk	move.w	d0,colour_make
mark_col_make	move.w	colour_make,d1
		mulu	#9,d1
		add.w	#10,d1
		swap	d1
		move.w	#$0050,d1
		move.l	#$005e0020,d0
		move.l	#$000a0009,d2
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		bsr	sprite
		bsr	make_dummy
		tst.w	locked_icon
		bne	no_big_plot
		cmp.w	#11,mx
		blt	no_big_plot
		cmp.w	#11+16*9-1,mx
		bgt	no_big_plot
		cmp.w	#9,my
		blt	no_big_plot
		cmp.w	#9+8*8-1,my
		bgt	no_big_plot
		cmp.b	#248,ms_click
		beq	no_big_plot
		clr.l	d0
		move.w	mx,d0
		sub.w	#11,d0
		divu	#9,d0
		clr.l	d1
		move.w	my,d1
		sub.w	#9,d1
		lsr.w	#3,d1
		move.w	d0,d2
		cmp.b	#2,mode_make
		beq	do_fill1
		move.l	#col_mask_plane,a0
		lsl.w	#1,d2
		move.w	0(a0,d2.w),d3
		not.w	d3

		move.l	#mem+$68600+2696,a0	;zap
		move.w	d1,d4
		mulu	#160,d4
		add.l	d4,a0
		move.w	(a0),d4		;get color
		move.w	2(a0),d5
		move.w	4(a0),d6
		move.w	6(a0),d7
		cmp.b	#1,mode_make
		beq	plot_mkall
		and.w	d3,d4		;mask out color
		and.w	d3,d5
		and.w	d3,d6
		and.w	d3,d7
		move.w	colour_make,d3
		cmp.b	#250,ms_click
		beq.s	no_del_point
		clr.w	d3
no_del_point	move.w	d3,d2
		and.w	#1,d2
		tst.w	d2
		beq.s	no_mark_id1
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id1	or.w	d2,d4
		move.w	d4,(a0)
		move.w	d3,d2
		and.w	#2,d2
		tst.w	d2
		beq.s	no_mark_id2
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id2	or.w	d2,d5
		move.w	d5,2(a0)
		move.w	d3,d2
		and.w	#4,d2
		tst.w	d2
		beq.s	no_mark_id3
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id3	or.w	d2,d6
		move.w	d6,4(a0)
		move.w	d3,d2
		and.w	#8,d2
		tst.w	d2
		beq.s	no_mark_id4
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id4	or.w	d2,d7
		move.w	d7,6(a0)
jumphere	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#SPHARD,w_mode1
		bsr	plot_id
		move.l	#SPXOR,w_mode1
		move.l	(sp)+,old_screen

		IFEQ	DEBUG
		tst.w	locked_icon
		bne.s	no_big_plot
		ENDC

		bsr	copy_1_icon

no_big_plot	bsr	update_1_icon
		addq.w	#1,ununme
		bsr	redraw_3by3
		subq.w	#1,ununme
		tst.w	locked_icon
		beq.s	no_mk2222
		bsr	dmake2222
no_mk2222	clr.b	Etype
		tst.w	locked_icon
		bne	no_bit_config
		bsr	do_scrolling
		cmp.b	#248,ms_click
		beq.s	no_bit_config
		cmp.w	#$8e,mx
		blt.s	no_bit_config
		cmp.w	#$8e+18,mx
		bgt.s	no_bit_config
		cmp.w	#$6e,my
		blt.s	no_bit_config
		cmp.w	#$6e+10*5-1,my
		bgt.s	no_bit_config
		clr.l	d0
		move.w	my,d0		;mouse y
		sub.w	#$6e,d0		;sub base y
		divu	#10,d0		;split y by 10
		move.b	#1,d1		;init bit mask
		lsl.b	d0,d1		;rotate biy mask by mouse y/10
		move.w	icon_no,d0
		add.w	char_active,d0
		and.w	#$00ff,d0	;wrap round 255 byte only!
		move.l	#char_id,a0
		move.b	0(a0,d0.w),d3
		move.b	d3,d2
		and.b	d1,d2
		tst.b	d2
		beq.s	mask_it1
		eor.b	d1,d3
		bra.s	save_mask_new
mask_it1	or.b	d1,d3
save_mask_new	move.b	d3,0(a0,d0.w)
		bsr	display_maskes
		move.b	#1,un_click

no_bit_config	move.w	mx,d0
		move.w	my,d1
		cmp.w	#$55,d1
		blt.s	show_mode_mk
		cmp.w	#$55+9,d1
		bgt.s	show_mode_mk
		cmp.b	#248,ms_click
		beq.s	show_mode_mk

		cmp.w	#$e3,d0
		blt.s	make_fill
		cmp.w	#$e3+$13,d0
		bgt.s	make_fill
		clr.b	mode_make
		bra.s	show_mode_mk

make_fill	cmp.w	#$11f,d0
		blt.s	mode_allmk
		cmp.w	#$11f+$19,d0
		bgt.s	mode_allmk
		move.b	#2,mode_make
		bra.s	show_mode_mk

mode_allmk	cmp.w	#$101,d0
		blt.s	show_mode_mk
		cmp.w	#$101+$13,d0
		bgt.s	show_mode_mk
		move.b	#1,mode_make

show_mode_mk	tst.b	mode_make
		bne.s	mode_fill_mk
		move.l	#$00870008,d0
		move.l	#$00e30055,d1
		bra.s	done_md_mk
mode_fill_mk	cmp.b	#2,mode_make
		bne.s	all_fill_mk
		move.l	#$00870008,d0
		move.l	#$011f0055,d1
		move.l	#$00190009,d2
		bra.s	done_mode_mk
all_fill_mk	move.l	#$008f0008,d0
		move.l	#$01010055,d1
done_md_mk	move.l	#$00130009,d2
done_mode_mk	bsr	sprite
		cmp.w	#178,my
		blt	no_mk_icon3
		cmp.w	#184,my
		bgt	no_mk_icon3

		lea	menu_opt3,a0
		move.w	#6,d3
		move.w	mx,d4

check_window3	move.w	(a0)+,d0
		move.w	(a0)+,d1
		move.w	d1,d2
		sub.w	d0,d2
		addq.l	#1,d2
		cmp.w	d0,d4
		blt	no_mk_icon3
		cmp.w	d1,d4
		ble.s	highlight_box3
		dbra	d3,check_window3
		rts
highlight_box3	swap	d2
		move.w	#7,d2
		move.w	d0,d1
		swap	d1
		move.w	#178,d1
		move.l	#$00150010,d0
		move.l	#SPXOR,w_mode1
		bsr	sprite
		not.b	d3
		addq.b	#8,d3
		cmp.b	#248,ms_click
		beq	no_mk_icon3
		cmp.b	#7,d3
		bne.s	no_mk_exit
		move.b	#1,priority
		rts
no_mk_exit
		cmp.b	#6,d3
		bne.s	no_flipy_mk
		tst.w	locked_icon
		bne.s	no_flipy_mk
		move.w	char_active,d0
		add.w	icon_no,d0
		bsr	calc_icon_pos
		move.w	#7,d0
		move.l	a0,a2
		add.l	#160*7,a0
		lea	sscreenp,a1
		move.l	a1,a3
y_flippies	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		sub.l	#168,a0
		add.l	#152,a1
		dbra	d0,y_flippies
		move.w	#7,d0
hardcopflipymk	move.l	(a3)+,(a2)+
		move.l	(a3),(a2)
		add.l	#156,a2
		add.l	#156,a3
		dbra	d0,hardcopflipymk
		move.w	#-1,old_active
		bra	make_dummy
no_flipy_mk	cmp.b	#5,d3
		bne	no_flipx_mk
		tst.w	locked_icon
		bne	no_flipx_mk
		move.w	char_active,d0
		add.w	icon_no,d0
		bsr	calc_icon_pos
		lea	sscreenp,a1
		move.w	#7,d0
flipmkx		bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,flipmkx
		move.w	#-1,old_active
		bra	make_dummy

flip_it_mk_x	move.w	d0,-(sp)
		move.w	#%1000000000000000,d4
		move.w	#%0000000000000001,d5
		move.w	#7,d2
		move.w	(a0),d1
		clr.w	d7
swaping_x_mk	move.w	d1,d0
		and.w	d4,d0
		tst.w	d0
		beq.s	not_x1_mk
		or.w	d5,d7
not_x1_mk	move.w	d1,d0
		and.w	d5,d0
		tst.w	d0
		beq.s	not_x2_mk
		or.w	d4,d7
not_x2_mk	ror.w	#1,d4
		rol.w	#1,d5
		dbra	d2,swaping_x_mk
		move.w	d7,(a0)+
		move.w	d7,(a1)+
		move.w	(sp)+,d0
		rts	
		
no_flipx_mk	cmp.b	#3,d3
		bne.s	no_mk_save
		move.w	char_active,d0
		add.w	icon_no,d0
		and.w	#$00ff,d0
		move.l	#char_id,a2
		move.b	0(a2,d0.w),save_mkid
		lea	save_buff,a1
		bsr	calc_icon_pos
		move.w	#7,d0
copy_saved	move.l	(a0)+,(a1)+
		move.l	(a0),(a1)+
		add.l	#156,a0
		dbra	d0,copy_saved
		move.w	#-1,old_active
		bra	make_dummy
no_mk_save	cmp.b	#4,d3
		bne.s	no_mk_load
		tst.w	locked_icon
		bne.s	no_mk_load
		move.w	char_active,d0
		add.w	icon_no,d0
		and.w	#$00ff,d0
		move.l	#char_id,a2
		move.b	save_mkid,0(a2,d0.w)
		lea	sscreenp,a0
		bsr	show_1_icon
		move.w	#-1,old_active
		bra	make_dummy
no_mk_load	cmp.b	#2,d3
		bne.s	no_mk_clear
		tst.w	locked_icon
		bne.s	no_mk_clear
		move.w	icon_no,d0
		add.w	char_active,d0
		and.w	#$00ff,d0
		move.l	#char_id,a2
		clr.b	0(a2,d0.w)
		move.l	#system_blk+$7d00*2,a0
		bsr	show_1_icon
		move.w	#-1,old_active
		bra	make_dummy
no_mk_clear	cmp.b	#1,d3
		bne.s	no_mk_icon3
		tst.w	locked_icon
		bne.s	no_mk_icon3
		move.w	char_active,d0
		add.w	icon_no,d0
		and.w	#$00ff,d0
		move.l	#char_id,a2
		move.b	0(a2,d0.w),d1
		move.b	save_mkid,0(a2,d0.w)
		move.b	d1,save_mkid
		bsr	calc_icon_pos
		lea	save_buff,a1
		move.w	#7,d7
swap_buffs	move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		add.l	#152,a0
		dbra	d7,swap_buffs
		move.w	#-1,old_active
		bra.s	make_dummy
no_mk_icon3
no_do_make	rts

make_dummy	move.w	#15,col1
		move.l	#SPHARD,w_mode1
		move.w	icon_no,d0
		add.w	char_active,d0
		cmp.w	old_active,d0
		beq.s	no_upgrade
		move.w	d0,old_active
		move.l	#mem+$68600+2696,a1
		bsr	display_1_icon
		bsr	dmake2
		bsr	part_play
		move.b	#2,un_click

redraw_3by3

redraw_3by3b	move.w	icon_no,d0
		add.w	char_active,d0
		move.l	#$9f8+2696+mem+$68600,a1
		move.w	#2,d5
row_make3	bsr	display_1_icon
		addq.l	#8,a1
		bsr	display_1_icon
		addq.l	#8,a1
		bsr	display_1_icon
		add.l	#$4f0,a1
		dbra	d5,row_make3
		bra	show_players

no_upgrade	move.l	#SPXOR,w_mode1
		rts

plot_id		move.w	#11,d6
		move.w	#13,d5
		move.l	#mem+$68600+2696,a0

plot_id2	movem.w	d0-d1,-(sp)
		move.w	d0,d2
		mulu	#9,d2
		add.w	d5,d2
		swap	d2

		move.w	d1,d2
		lsl.w	#3,d2
		add.w	d6,d2

		move.w	d1,d4
		mulu	#160,d4
		add.l	d4,a0

		move.w	(a0),d3
		move.w	2(a0),d4
		move.w	4(a0),d5
		move.w	6(a0),d6

		lsl.w	#1,d0
		lea	col_mask_plane,a1
		move.w	0(a1,d0.w),d7

		and.w	d7,d3
		and.w	d7,d4
		and.w	d7,d5
		and.w	d7,d6
		clr.w	d7

		tst.w	d3
		beq.s	no_make_p1
		addq.w	#1,d7
no_make_p1	tst.w	d4
		beq.s	no_make_p2
		addq.w	#2,d7
no_make_p2	tst.w	d5
		beq.s	no_make_p3
		addq.w	#4,d7
no_make_p3	tst.w	d6
		beq.s	no_make_p4
		addq.w	#8,d7
no_make_p4	mulu	#9,d7
		addq.w	#2,d7
		move.w	d7,d0
		swap	d0
		move.w	#$007b,d0
		move.l	d2,d1
		move.l	#$00070006,d2
		bsr	sprite
		movem.w	(sp)+,d0-d1
		rts

sscreenp	equ	mem+$68600+2696+$500*6

display_play	bsr	part_play
		bra.s	show_players
part_play	bsr	display_maskes
		lea	save_buff,a0
		lea	sscreenp,a1
		move.w	#7,d0			;was 4
copy_saved2	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)
		add.l	#156,a1
		dbra	d0,copy_saved2
		bra	show_18_icons

ununme		dc.w	0

show_players	move.l	#$5eb8+mem+$68600-5*$500+160,a1
		lea	user_play,a0
		lea	syst_buf+364,a3
		move.l	(a0),(a3)
		move.l	4(a0),4(a3)
		move.l	8(a0),22(a3)
		move.l	12(a0),26(a3)
		move.l	16(a0),44(a3)
		move.l	20(a0),48(a3)
		move.l	24(a0),66(a3)
		move.l	28(a0),70(a3)
		move.l	32(a0),88(a3)
		move.l	36(a0),92(a3)
		move.l	40(a0),110(a3)
		move.l	44(a0),114(a3)
		move.w	#5,d2
renew_playx	move.w	#7,d3
showing_play	clr.w	d0
		move.b	(a0)+,d0
		movem.w	d2-d3,-(sp)
		tst.w	ununme
		beq.s	no_disp
		cmp.w	#60,d0
		blt.s	nununme
no_disp		bsr	display_1_icon
nununme		movem.w	(sp)+,d2-d3
		addq.l	#8,a1
		dbra	d3,showing_play
		add.l	#$500-8*8,a1
		dbra	d2,renew_playx
		rts

display_maskes	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		clr.l	w_mode1
		move.l	#$008e005e,d1
		move.l	#$00130050,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		clr.l	d0
		move.w	icon_no,d0
		add.w	char_active,d0
		and.w	#$00ff,d0
		move.l	d0,a0
		add.l	#char_id,a0
		move.b	(a0),d2
		move.w	#4,d1
		move.l	#$008e006e,d0
		move.b	#1,d3

showyn		movem.l	d0-d3,-(sp)
		move.l	d0,-(sp)
		clr.l	w_mode1
 		lea	blank_str,a0
		bsr	print_text
		move.l	#SPHARD,w_mode1
		move.l	(sp)+,d0
		move.b	d2,d6
		and.b	d3,d6
		tst.b	d6
		beq.s	plot_no
		clr.w	col1
		lea	noies,a0
		bsr	print_text
		lea	yeses,a0
		move.w	#11,col1
		bsr	print_text
		bra.s	show_nextyn
plot_no		lea	yeses,a0
		clr.w	col1
		bsr	print_text
		lea	noies,a0
		move.w	#10,col1
		bsr	print_text
show_nextyn	movem.l	(sp)+,d0-d3
		add.l	#10,d0
		lsl.b	#1,d3
		dbra	d1,showyn
		move.l	(sp)+,old_screen
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		rts

blank_str	dc.b	'   ',0

		even

save_buff	dc.l	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

menu_opt3	dc.w	3,32,37,72,77,106,111,140
		dc.w	145,179,184,218,223,252

col_mask_plane	dc.w	%1000000000000000
		dc.w	%0100000000000000
		dc.w	%0010000000000000
		dc.w	%0001000000000000
		dc.w	%0000100000000000
		dc.w	%0000010000000000
		dc.w	%0000001000000000
		dc.w	%0000000100000000
		dc.w	%0000000010000000
		dc.w	%0000000001000000
		dc.w	%0000000000100000
		dc.w	%0000000000010000
		dc.w	%0000000000001000
		dc.w	%0000000000000100
		dc.w	%0000000000000010
		dc.w	%0000000000000001

user_play	dc.l	$01010101,$01010101
		dc.l	$0,$0
		dc.l	$0,$0
		dc.l	$0,$0
		dc.l	$0,$0
		dc.l	$0a0a0a0a,$0a0a0a0a

calc_icon_pos	clr.l	d1
		move.b	d0,d1
		clr.l	d0
		divu	#20,d1
		move.w	d1,d0
		mulu	#$500,d0
		move.l	d0,a0
		swap	d1
		lsl.w	#3,d1
		add.w	d1,a0
		add.l	#system_blk+$7d00*2,a0
		rts

all_mode	not.w	d3
		and.w	d3,d4
		and.w	d3,d5
		and.w	d3,d6
		and.w	d3,d7
		clr.w	d0
		tst.w	d4
		beq.s	no_mkall_c1
		move.w	#1,d0
no_mkall_c1	tst.w	d5
		beq.s	no_mkall_c2
		addq.w	#2,d0
no_mkall_c2	tst.w	d6
		beq.s	no_mkall_c3
		addq.w	#4,d0
no_mkall_c3	tst.w	d7
		beq.s	no_mkall_c4
		addq.w	#8,d0
no_mkall_c4	move.w	d0,d4
		tst.b	Etype
		beq.s	make_type
		move.w	#15,d7
		move.l	logic_base,a0
		move.l	a0,a1
		bra.s	force_allmk

make_type	move.w	#7,d7
		move.w	char_active,d0
		add.w	icon_no,d0
		bsr	calc_icon_pos
		lea	sscreenp,a1

force_allmk	move.w	d7,-(sp)
		move.w	(a0),d0
		move.w	2(a0),d1
		move.w	4(a0),d2
		move.w	6(a0),d3
		move.w	#%1000000000000000,d5
		move.w	#15,d6
do_allmk_scan	move.w	d6,-(sp)
		move.w	d0,d6
		and.w	d5,d6
		tst.w	d6
		beq.s	mkall_starters
		move.w	#1,d6
mkall_starters	move.w	d1,d7
		and.w	d5,d7
		tst.w	d7
		beq.s	blank_allmk1
		addq.w	#2,d6
blank_allmk1	move.w	d2,d7
		and.w	d5,d7
		tst.w	d7
		beq.s	blank_allmk2
		addq.w	#4,d6
blank_allmk2	move.w	d3,d7
		and.w	d5,d7
		tst.w	d7
		beq.s	blank_allmk3
		addq.w	#8,d6
blank_allmk3	cmp.w	d6,d4
		bne.s	no_all_mk_plot
		not.w	d5
		and.w	d5,d0
		and.w	d5,d1
		and.w	d5,d2
		and.w	d5,d3
		not.w	d5
		move.w	colour_make,d7
		and.w	#1,d7
		tst.w	d7
		beq.s	no_all_p1
		or.w	d5,d0
no_all_p1	move.w	colour_make,d7
		and.w	#2,d7
		tst.w	d7
		beq.s	no_all_p2
		or.w	d5,d1
no_all_p2	move.w	colour_make,d7
		and.w	#4,d7
		tst.w	d7
		beq.s	no_all_p3
		or.w	d5,d2
no_all_p3	move.w	colour_make,d7
		and.w	#8,d7
		tst.w	d7
		beq.s	no_all_mk_plot
		or.w	d5,d3
no_all_mk_plot	move.w	(sp)+,d6
		lsr.w	#1,d5
		dbra	d6,do_allmk_scan
		move.w	d0,(a0)
		move.w	d1,2(a0)
		move.l	(a0)+,(a1)+
		move.w	d2,(a0)
		move.w	d3,2(a0)
		move.l	(a0),(a1)
		add.l	#156,a0
		add.l	#156,a1
		move.w	(sp)+,d7
		dbra	d7,force_allmk
		rts

plot_mkall	clr.b	Etype
		bsr	all_mode
done_fill	clr.l	d0
		move.l	d0,a0
		move.w	d4,a0
		move.w	#-1,old_active
		bsr	make_dummy
		bra	no_big_plot

do_fill1	clr.b	Etype
		bsr	fill_in
		bra	done_fill

fill_in		bsr	shift_point
		bsr	bget_point
		move.w	d4,pecol
		move.w	colour_make,pocol
		cmp.w	pocol,d4
		beq.s	no_filling
		bsr	shift_point
		bsr	put_stack
		clr.w	d3
filling		bsr	get_stack
		addq.w	#1,d4
		bsr	is_it_fill
		subq.w	#1,d4
		bsr	is_it_fill
		addq.w	#1,d5
		bsr	is_it_fill
		subq.w	#1,d5
		bsr	is_it_fill
		dbra	d3,filling
no_filling	rts



put_stack	move.l	(sp)+,a0
		move.w	d4,-(sp)
		move.w	d5,-(sp)
		addq.w	#1,d3
		move.l	a0,-(sp)
		bsr	bput_point
		bra.s	shift_point


get_stack	move.l	(sp)+,a0
		move.w	(sp)+,d1
		move.w	(sp)+,d0
		move.l	a0,-(sp)

shift_point	move.w	d0,d4
		move.w	d1,d5
		rts

		even
pecol		dc.w	0
stackrts	dc.l	0

is_it_fill	movem.w	d4-d5,-(sp)
		bsr	bget_point
		cmp.w	pecol,d4
		bne.s	no_put
		movem.w	(sp)+,d4-d5
		move.l	(sp)+,stackrts
		bsr	put_stack
		move.l	stackrts,-(sp)
		rts

no_put		movem.w	(sp)+,d4-d5
		bra.s	shift_point
		
bget_point	movem.w	d0-d3,-(sp)
		move.w	d4,d0
		move.w	d5,d1
		bsr	get_point
		movem.w	(sp)+,d0-d3
		rts

bput_point	movem.w	d0-d3,-(sp)
		move.w	d4,d0
		move.w	d5,d1
		bsr	put_point
		movem.w	(sp)+,d0-d3
		rts

		even
which_edit_defs	dc.w	0
little_cursor	dc.w	0
flash_little	dc.w	0
keys_vec_lit	dc.l	0
logic_base	dc.l	mem+$686a0+1048
true_pbase	dc.l	0
physical_base	dc.l	0
saveU		dc.l	0
Etype		dc.b	0

		even

draw_make2	bsr	clear_room_id
		clr.l	d0
		move.w	tpick,d0
		divu	#5,d0
		move.w	d0,d1
		mulu	#$a00,d1
		swap	d0
		mulu	#32,d0
		add.l	d1,d0
		add.l	#use_bad_def,d0
		move.l	d0,true_pbase
		sub.l	a5,a5
		move.l	#$013f0000,a6
		bsr	draw
		move.l	#$013f00ae-15,a5
		bsr	draw
		move.l	#$000000ae-15,a6
		bsr	draw
		sub.l	a5,a5
		bsr	draw
		move.l	#$00070005,a5
		move.l	#$00960005,a6
		move.w	#16,d0
line_row_box2	move.w	d0,-(sp)
		bsr	draw
		move.w	(sp)+,d0
		addq.l	#8,a5
		addq.l	#8,a6
		dbra	d0,line_row_box2
		subq.l	#8,a6
		move.l	#$00960005,a5
		move.w	#16,d0
line_col_box2	move.w	d0,-(sp)
		bsr	draw
		move.w	(sp)+,d0
		sub.l	#$00090000,a5
		sub.l	#$00090000,a6
		dbra	d0,line_col_box2

		move.w	#15,col1
		move.l	#$00000079,d0
		move.l	#$00060092,d1	;$4f
		move.l	#$00910009,d2
		bsr	sprite

		move.l	#$00000082,d0
		move.l	#$00a30087,d1
		move.l	#$00900015,d2
		bsr	sprite

		lea	sel_mdo,a0
		move.l	#$00a80078,d0
		bsr	print_text

		lea	buffs_save_txt,a0
		move.l	#$00a6005a,d0
		bsr	print_text

		move.w	#2,col1
		move.l	#$00ae0005,d1
		move.l	#$01250008,d0
		move.l	#$00140014,d2
		bsr	sprite
		add.l	#$00200000,d1
		bsr	sprite
		add.l	#$00200000,d1
		bsr	sprite
		add.l	#$00200000,d1
		bsr	sprite
		move.l	#$00ce005a,d1
		bsr	sprite
		move.l	#$011d005a,d1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	#$00a60010,d0
		lea	no_icon,a0
		move.w	#9,col1
		move.w	#3,d1
print_nos_defs	bsr	print_text
		addq.l	#2,a0
		add.l	#$200000,d0
		dbra	d1,print_nos_defs

		move.w	#3,col1
		move.l	#$00a20022,d0
		lea	text_animate,a0
		bsr	print_text

		clr.w	d0
		move.b	icon_page_no,d0
		sub.w	#4,d0
		mulu	#260,d0
		move.w	pick_icon,d1
		mulu	#26,d1
		add.w	d1,d0
		add.l	#icons_name,d0
		move.l	d0,a0
		move.l	d0,keys_vec_lit
		move.l	#$00b00039,d0
		move.w	#9,col1
		bsr	print_text
		clr.w	flash_little

		move.w	#15,col1
		move.l	#$00900079,d0
		move.l	#$00d00020,d1
		move.l	#$006d000b,d2
		bsr	sprite

		move.l	#$00a20033,a5
		move.l	#$01350033,a6
		bsr	draw
		move.l	#$01350050,a5
		bsr	draw
		move.l	#$00a20050,a6
		bsr	draw
		move.l	#$00a20033,a5
		bsr	draw

		move.b	#2,un_click
		bsr	clear_room_id
		bsr	clr_baddy
		move.b	#248,ms_click
		bsr	get_edit_box
		bsr	draw_soft_box
		lea	look_up_logic,a0

		move.w	#3,d0
		move.l	true_pbase,a1
		move.l	a1,a3
copy_old_ani	move.l	(a0)+,a2
		sub.l	#mem+$68600,a2
		add.l	old_screen,a2
		move.w	#15,d1
		move.l	a3,a1
copy_it_old_ani	move.l	(a1)+,(a2)+
		move.l	(a1)+,(a2)+
		add.l	#152,a2
		add.l	#152,a1
		dbra	d1,copy_it_old_ani
		addq.l	#8,a3
		dbra	d0,copy_old_ani

		bsr	dmake22
		bsr	demo_user_path

		move.l	old_screen,a0
		add.l	#14824,a0
		move.l	#ubsavebuf,a1
		move.w	#15,d0
Uonscreen	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		add.l	#152,a0
		dbra	d0,Uonscreen

		move.w	#9,col1
		move.w	#11,d6
		move.l	#ani_path,a1
		move.l	#conv_ani_lst,a2
		move.l	#ani_text_pf,a0
		move.l	#$00d20022,d0
		move.w	tpick,d1
		mulu	#12,d1
dump_ani_path	move.b	0(a1,d1.w),d2
		and.w	#$ff,d2
		move.b	0(a2,d2.w),d3
		move.b	d3,(a0)
		bsr	print_text
		addq.w	#1,d1
		add.l	#$00090000,d0
		dbra	d6,dump_ani_path

		move.l	#$002800aa,d0
		bsr	draw_scroll_lf
		move.l	#$003c00aa,d0
		bsr	draw_scroll_up
		move.l	#$005000aa,d0
		bsr	draw_scroll_dn
		move.l	#$006400aa,d0
		bsr	draw_scroll_rg

		bsr	copy_O_to_W
		bsr	do_cont_make2
		move.w	#15,col1
		move.l	#SPXOR,w_mode1
		move.w	tpick,d0
		add.w	#41,d0
		move.b	d0,act_buf
		rts

no_icon		dc.b	'1',0
		dc.b	'2',0
		dc.b	'3',0
		dc.b	'4',0

one_key_asc	dc.b	'A',0

text_animate	dc.b	'ANIMATE',0

buffs_save_txt	dc.b	252,3,'SAVED       ANIMATE',255
		dc.b	'BUFFER      PATH',252,15,0

control_mkdefs	cmp.b	#4,choose_path
		beq	do_cont_make
		cmp.b	#3,choose_path
		beq	do_cont_make
		rts

do_the_flashy	bsr	mark_col_make2
do_the_flashy2	bsr	no_little_chg

		bra	show_chn_mode

blinker_hi	dc.w	0

do_cont_make2	lea	object_id,a0
		move.w	tpick,d0
		move.b	40(a0,d0.w),d0
		and.b	#%0100,d0
		tst.b	d0
		beq	no_hit_man
		cmp.b	#4,choose_path
		beq.s	the_hit_man
		move.w	mx,d0
		move.w	my,d1
		cmpi.w	#$97,d0
		blt.s	the_hit_man
		cmpi.w	#$97+8,d0
		bgt.s	the_hit_man
		cmp.w	#5,d1
		blt.s	the_hit_man
		cmp.w	#5+16*8,d1
		bgt.s	the_hit_man
		subq.w	#5,d1
		lsr.w	#3,d1
		cmpi.b	#248,ms_click
		beq.s	the_hit_man
		lea	hit_man_top,a0
		lea	hit_man_bottom,a1
		move.w	tpick,d0
		lsl.w	#2,d0
		add.w	which_edit_defs,d0

		tst.w	blinker_hi
		bne.s	the_bottom_half
the_top_half	clr.w	blinker_hi
		cmp.b	0(a1,d0.w),d1
		beq.s	the_bottom_half
		bgt.s	the_hit_man
		move.b	d1,0(a0,d0.w)
		bra.s	the_hit_man
the_bottom_half	move.w	#1,blinker_hi
		cmp.b	0(a0,d0.w),d1
		beq.s	the_top_half
		blt.s	the_hit_man
		move.b	d1,0(a1,d0.w)

the_hit_man	move.w	#15,col1
		lea	hit_man_top,a5
		lea	hit_man_bottom,a6
		move.w	tpick,d6
		lsl.w	#2,d6
		add.w	which_edit_defs,d6
		move.l	#$00970005,d1
		move.l	d1,d4
		clr.w	d5
		move.b	0(a5,d6.w),d5
		lsl.w	#3,d5
		add.w	d5,d1
		clr.w	d5
		move.b	0(a6,d6.w),d5
		lsl.w	#3,d5
		add.w	d5,d4
		move.l	d4,-(sp)
		
		move.l	#$0080002e,d0	;????
		move.l	#$00080009,d2
		move.l	#SPHARD,w_mode1
		tst.w	blinker_hi
		bne.s	solid_hit_mant
		move.w	flash_little,d3
		and.w	#7,d3
		cmp.w	#4,d3
		blt.s	no_hit_mant
solid_hit_mant	bsr	sprite
no_hit_mant	move.l	#$00800034,d0
		move.l	(sp)+,d1
		move.l	#$00080009,d2
		tst.w	blinker_hi
		beq.s	solid_hit_manb
		move.w	flash_little,d3
		and.w	#7,d3
		cmp.w	#4,d3
		blt.s	no_hit_man
solid_hit_manb	bsr	sprite

no_hit_man	move.l	#SPXOR,w_mode1
		rts

do_cont_make	bsr	do_cont_make2
		cmp.b	#4,choose_path
		beq	do_the_flashy
		cmp.b	#1,keybrd
		bne.s	no_null_keys
		clr.b	keybrd
no_null_keys	move.w	#$af,d0
		cmp.w	#5,my
		blt.s	no_mx_new_defs
		cmp.w	#23,my
		bgt.s	no_mx_new_defs
		clr.w	d1
repeat_mk_defs	cmp.w	mx,d0
		bgt.s	no_mx_new_defs
		add.w	#18,d0
		cmp.w	mx,d0
		bgt.s	found_mx_defs
		add.w	#14,d0
		addq.w	#1,d1
		cmp.w	#4,d1
		bne.s	repeat_mk_defs
		bra.s	no_mx_new_defs
found_mx_defs	cmp.b	#248,ms_click
		beq.s	no_mx_new_defs
		cmp.w	which_edit_defs,d1
		beq.s	no_mx_new_defs
		move.w	d1,-(sp)
		bsr	get_edit_box
		bsr	draw_grey_bx
		move.w	(sp)+,d1
		move.w	d1,which_edit_defs
		lea	look_up_logic,a0
		lsl.w	#2,d1
		move.l	0(a0,d1.w),logic_base
		bsr	get_edit_box
		bsr	draw_white_bx
		bsr	dmake222
no_mx_new_defs

		lea	menu_make_defs,a0
		lea	menu_len_defs,a2
		clr.w	d4
		move.w	mx,d1
		move.w	my,d2
		move.w	#6,d3
find_range_defs	move.l	a0,a1
		cmp.w	(a1)+,d1
		blt.s	no_found_defs
		cmp.w	(a1)+,d2
		blt.s	no_found_defs
		cmp.w	(a1)+,d1
		bgt.s	no_found_defs
		cmp.w	(a1),d2
		bgt.s	no_found_defs
		move.l	(a0),d1
		move.l	(a2),d2
		move.l	#$00150010,d0
		bsr	sprite
		cmp.b	#248,ms_click
		beq.s	no_restart_defs
		cmp.b	#6,d4
		bne.s	nrest_defs
		bsr	restore_defs
		bra	show_inv_mode

nrest_defs	move.w	d4,which_command
		move.b	#2,un_click
		bra.s	no_restart_defs
no_found_defs	add.l	#8,a0
		addq.l	#4,a2
		addq.w	#1,d4
		dbra	d3,find_range_defs
no_restart_defs	tst.w	which_command
		bne.s	Uno_swap
		move.l	logic_base,a0
		lea	ubsavebuf,a1
		move.l	#mem+$68600+14824,a2
		move.w	#15,d0
Uswap		move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		move.l	(a0),d1
		move.l	(a1),(a0)+
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		add.l	#152,a0
		add.l	#152,a2
		dbra	d0,Uswap
		bsr	update_p
		bsr	Ularge

Uno_swap	cmp.w	#1,which_command
		bne.s	Uno_clear
		move.l	logic_base,a0
		move.w	#15,d0
Uclr		clr.l	(a0)+
		clr.l	(a0)
		add.l	#156,a0
		dbra	d0,Uclr
		bsr	update_p
		bsr	Ularge
Uno_clear	cmp.w	#2,which_command
		bne.s	Uno_save
		move.l	logic_base,a0
		move.l	#mem+$68600+14824,a1
		move.l	#ubsavebuf,a2
		move.w	#15,d0
Usave		move.l	(a0)+,d1
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		move.l	(a0)+,d1
		move.l	d1,(a1)+
		move.l	d1,(a2)+
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,Usave
Uno_save	cmp.w	#3,which_command
		bne.s	Uno_load
		move.l	logic_base,a0
		move.l	#mem+$68600+14824,a1
		move.w	#15,d0
Uload		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,Uload
		bsr	update_p
		bsr	Ularge

Uno_load	cmp.w	#4,which_command
		bne.s	Uno_xflip

		move.l	logic_base,a1
		move.l	a1,a0
		move.w	#15,d0
flipmkx2	bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		bsr	flip_it_mk_x
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,flipmkx2
		bra.s	lardg

Uno_xflip	cmp.w	#5,which_command
		bne.s	Uno_yflip
		move.l	logic_base,a0
		move.l	a0,a1
		add.l	#160*15,a1
		move.w	#7,d0
trans_xflip	move.l	(a0),d1
		move.l	4(a0),d2
		move.l	(a1),(a0)+
		move.l	4(a1),(a0)+
		move.l	d1,(a1)+
		move.l	d2,(a1)+
		add.l	#152,a0
		sub.l	#168,a1
		dbra	d0,trans_xflip
lardg		bsr	Ularge
		bsr	update_p

Uno_yflip	move.w	#20,which_command
		move.b	#1,d6
		tst.b	keybrd
		beq	no_keys_lit
		cmp.b	#65,keybrd
		blt	not_val_lit
		cmp.b	#65+26,keybrd
		bgt	not_val_lit
exec_Ckeys	move.l	keys_vec_lit,a0
		move.w	little_cursor,d0
		move.b	keybrd,0(a0,d0.w)
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$00b00039,xxx
		move.w	little_cursor,d0
		cmp.w	#13,d0
		blt.s	top_row_keys
		sub.w	#13,d0
		add.w	#10,yyy
top_row_keys	mulu	#6,d0
		add.w	d0,xxx
		move.l	xxx,d0
		move.b	keybrd,d1
		lea	one_key_asc,a0
		move.b	d1,(a0)
		move.w	#9,col1
		move.l	d0,d1		;xxxx
		move.l	#$00060007,d2
		clr.l	w_mode1
		bsr	sprite
		bsr	print_text
		move.l	(sp)+,old_screen
		clr.l	w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		bsr	print_text

		tst.b	d6
		beq	no_keys_lit

		cmp.w	#24,little_cursor
		beq	no_keys_lit
auto_newCpos	addq.w	#1,little_cursor
		cmp.w	#12,little_cursor
		bne	no_keys_lit
		bra	auto_newCpos


not_val_lit	move.b	keybrd,d0
		cmp.b	#4,d0
		bne.s	Cfailed_1
		move.b	#32,keybrd
		bra	exec_Ckeys

Cfailed_1	cmp.b	#5,d0
		bne.s	Cfailed_2
		tst.w	little_cursor
		beq.s	wrap_Ccw_LRG
		cmp.w	#13,little_cursor
		bne.s	small_Ccw
wrap_Ccw_LRG	add.w	#12,little_cursor
small_Ccw	subq.w	#1,little_cursor
		bra	no_keys_lit

Cfailed_2	cmp.b	#6,d0
		bne.s	Cfailed_3
		cmp.w	#11,little_cursor
		beq.s	wrap_Cce_LRG
		cmp.w	#24,little_cursor
		bne.s	small_Cce
wrap_Cce_LRG	sub.w	#12,little_cursor
small_Cce	addq.w	#1,little_cursor
		bra	no_keys_lit

Cfailed_3	cmp.b	#9,d0
		beq.s	updn_C
		cmp.b	#10,d0
		bne.s	Cfailed_4
updn_C		cmp.w	#12,little_cursor
		blt.s	addC13
		sub.w	#26,little_cursor
addC13		add.w	#13,little_cursor
		bra	no_keys_lit
Cfailed_4	cmp.b	#3,d0
		bne.s	Cfailed_5
		cmp.w	#12,little_cursor
		blt.s	down_linecr
		clr.w	little_cursor
		bra	no_keys_lit
down_linecr	move.w	#13,little_cursor
		bra	no_keys_lit
Cfailed_5	cmp.b	#2,d0
		bne.s	Cfailed_6
		clr.b	d6
		move.b	#32,keybrd
		tst.w	little_cursor
		beq	exec_Ckeys
auto_sub_NCpos	subq.w	#1,little_cursor
		cmp.w	#12,little_cursor
		bne	exec_Ckeys
		bra	auto_sub_NCpos
Cfailed_6	cmp.b	#7,d0
		bne.s	Cfailed_7
		move.w	little_cursor,d0
		move.l	keys_vec_lit,a0
		cmp.w	#24,little_cursor
		beq.s	blank_it_cur
		move.w	#24,d1
		move.w	#23,d2
download_ins	move.b	0(a0,d2.w),d3
		move.b	d3,0(a0,d1.w)
term_ins	subq.w	#1,d1
		cmp.w	#12,d1
		beq.s	term_ins
term_ins2	subq.w	#1,d2
		cmp.w	#12,d2
		beq.s	term_ins2
		cmp.w	d1,d0
		bne.s	download_ins
blank_it_cur	move.b	#32,0(a0,d0.w)
		bsr	print_little
		bra	no_keys_lit

Cfailed_7	cmp.b	#8,d0
		bne.s	Cfailed_7
		move.w	little_cursor,d0
		move.l	keys_vec_lit,a0
		cmp.w	#24,d0
		beq.s	blank_it_cur2
		move.w	d0,d1
		move.w	d1,d2	;4
nearly_foolme2	addq.w	#1,d2	;5
		cmp.w	#12,d2
		beq.s	nearly_foolme2
download_del	move.b	0(a0,d2.w),d3
		move.b	d3,0(a0,d1.w)
term_del	addq.w	#1,d1
		cmp.w	#12,d1
		beq.s	term_del
term_del2	addq.w	#1,d2
		cmp.w	#12,d2
		beq.s	term_del2
		cmp.w	#24,d1
		bne.s	download_del
blank_it_cur2	move.b	#32,24(a0)
		bsr	print_little
Cfailed_8

no_keys_lit	bsr	chn_mode

		cmp.b	#248,ms_click
		beq.s	no_little_chg
		clr.l	d0
		clr.l	d1
		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$b0,d0
		blt.s	no_little_chg
		cmp.w	#$b0+(12*6)-1,d0
		bgt.s	no_little_chg
		cmp.w	#$39,d1
		blt.s	no_little_chg
		cmp.w	#$38+10*2-1,d1
		bgt.s	no_little_chg
		sub.w	#$b0,d0
		divu	#6,d0
		sub.w	#$39,d1
		divu	#9,d1
		mulu	#13,d1
		add.w	d1,d0
		cmp.w	little_cursor,d0
		beq.s	no_little_chg
		move.w	d0,little_cursor
		clr.w	flash_little
no_little_chg	addq.w	#1,flash_little
		move.w	flash_little,d0
		and.w	#7,d0
		cmp.w	#4,d0
		bge.s	not_on_little
		move.l	#$00b00039,xxx
		move.w	little_cursor,d0
		cmp.w	#13,d0
		blt.s	top_row_edit
		sub.w	#13,d0
		add.w	#10,yyy
top_row_edit	mulu	#6,d0
		add.w	d0,xxx
		move.l	#system_blk+$7d00+1344,spdata
		move.l	#$00000006,d7
		bsr	ssprite
not_on_little	move.l	#SPXOR,w_mode1
		move.w	#15,col1
		cmp.b	#4,choose_path
		bne.s	cont_control
		rts

cont_control	move.b	#1,Etype
		bsr	do_scrolling
		cmp.b	#248,ms_click
		beq.s	mark_col_make2
		cmp.w	#$92,my
		blt.s	mark_col_make2
		cmp.w	#$92+9,my
		bgt.s	mark_col_make2
		cmp.w	#6,mx
		blt.s	mark_col_make2
		cmp.w	#6+9*16,mx
		bgt.s	mark_col_make2
		clr.l	d0
		move.w	mx,d0
		sub.w	#6,d0
		divu	#9,d0
		cmp.w	#16,d0
		bne.s	not_overflow_m2
		move.w	#15,d0
not_overflow_m2	move.w	d0,colour_make
mark_col_make2	move.w	colour_make,d1
		mulu	#9,d1
		add.w	#6,d1
		swap	d1
		move.w	#$0092,d1
		move.l	#$005e0020,d0
		move.l	#$000a0009,d2
		move.w	#15,col1
		bsr	sprite
		cmp.b	#4,choose_path
		bne.s	next_item_lst2
		rts

next_item_lst2	cmp.w	#7,mx
		blt	no_big_plot2
		cmp.w	#7+16*9-1,mx
		bgt	no_big_plot2
		cmp.w	#5,my
		blt	no_big_plot2
		cmp.w	#5+16*8-1,my
		bgt	no_big_plot2
		cmp.b	#248,ms_click
		beq	no_big_plot2
		clr.l	d0
		move.w	mx,d0
		sub.w	#7,d0
		divu	#9,d0
		clr.l	d1
		move.w	my,d1
		sub.w	#5,d1
		lsr.w	#3,d1
		move.w	d0,d2
		cmp.b	#2,mode_make
		beq	do_fill2
		move.l	#col_mask_plane,a1
		lsl.w	#1,d2
		move.w	0(a1,d2.w),d3
		not.w	d3

		move.l	logic_base,a0	;zap2
		move.w	d1,d4
		mulu	#160,d4
		add.l	d4,a0
		move.w	(a0),d4		;get color
		move.w	2(a0),d5
		move.w	4(a0),d6
		move.w	6(a0),d7
		cmp.b	#1,mode_make
		beq	plot_mkall2
		and.w	d3,d4		;mask out color
		and.w	d3,d5
		and.w	d3,d6
		and.w	d3,d7
		move.w	colour_make,d3
		cmp.b	#250,ms_click
		beq.s	no_del_point2
		clr.w	d3
no_del_point2	move.w	d3,d2
		and.w	#1,d2
		tst.w	d2
		beq.s	no_mark_id12
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id12	or.w	d2,d4
		move.w	d4,(a0)
		move.w	d3,d2
		and.w	#2,d2
		tst.w	d2
		beq.s	no_mark_id22
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id22	or.w	d2,d5
		move.w	d5,2(a0)
		move.w	d3,d2
		and.w	#4,d2
		tst.w	d2
		beq.s	no_mark_id32
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id32	or.w	d2,d6
		move.w	d6,4(a0)
		move.w	d3,d2
		and.w	#8,d2
		tst.w	d2
		beq.s	no_mark_id42
		move.w	#%1000000000000000,d2
		lsr.w	d0,d2
no_mark_id42	or.w	d2,d7
		move.w	d7,6(a0)		
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#SPHARD,w_mode1
		bsr	bit_plot_id
		move.l	#SPXOR,w_mode1
		move.l	(sp)+,old_screen
		bra.s	no_big_plot2
plot_mkall2	move.b	#1,Etype
		bsr	all_mode
jumphere2	bsr	update_p
		bsr	Ularge
		bra.s	no_big_plot2
do_fill2	bsr	fill_in
		bra.s	jumphere2

no_big_plot2	cmp.b	#248,ms_click
		beq	no_chan_path
		cmp.w	#$11e,mx
		blt.s	no_chan_path
		cmp.w	#$11e+19,mx
		bgt.s	no_chan_path
		cmp.w	#$5a,my
		blt.s	no_chan_path
		cmp.w	#$5a+19,my
		bgt.s	no_chan_path
		clr.l	d0
		move.w	tpick,d0
		add.l	#user_path_def,d0
		move.l	d0,a0
		cmp.b	#249,ms_click
		bne.s	back_ward_pf
		cmp.b	#1,(a0)
		beq.s	set_nullp
		addq.b	#1,(a0)
		bra.s	show_new_demo
back_ward_pf	tst.b	(a0)
		beq.s	set_twop
		subq.b	#1,(a0)
		bra.s	show_new_demo
set_twop	move.b	#1,(a0)
		bra.s	show_new_demo
set_nullp	clr.b	(a0)
show_new_demo	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		bsr	demo_user_path
		move.l	(sp)+,old_screen
		move.b	#1,un_click
		move.b	#2,ms_click
no_chan_path	cmp.b	#248,ms_click
		beq	no_ani_pf
		move.w	mx,d0
		move.w	d0,d2
		move.w	my,d1
		cmp.w	#$d1,d0
		blt	no_ani_pf
		cmp.w	#$cf+9*12,d0
		bgt	no_ani_pf
		cmp.w	#$20,d1
		blt	no_ani_pf
		cmp.w	#$2b,d1
		bgt	no_ani_pf
		sub.w	#$cf,d0
		and.l	#$ffff,d0
		divu	#9,d0
		move.w	tpick,d1
		mulu	#12,d1
		add.w	d1,d0
		move.l	#ani_path,a0
		cmp.b	#249,ms_click
		beq.s	get_ani_inc
		cmp.b	#4,0(a0,d0.w)
		beq.s	reset_aninc
		addq.b	#1,0(a0,d0.w)
		bra.s	show_ani_pf
reset_aninc	clr.b	0(a0,d0.w)
		bra.s	show_ani_pf

get_ani_inc	tst.b	0(a0,d0.w)
		beq.s	reset_andec
		subq.b	#1,0(a0,d0.w)
		bra.s	show_ani_pf

reset_andec	move.b	#4,0(a0,d0.w)		
show_ani_pf	move.b	0(a0,d0.w),d3
		and.w	#$ff,d3
		lea	conv_ani_lst,a0
		move.b	0(a0,d3.w),d4
		move.b	d4,ani_text_pf
		sub.w	#$cf,d2
		and.l	#$ffff,d2
		divu	#9,d2
		mulu	#9,d2
		add.w	#$d2,d2
		move.w	d2,d0
		swap	d0
		move.w	#$22,d0
		lea	ani_text_pf,a0
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.w	#9,col1
		move.l	d0,d1
		move.l	#$00060007,d2
		clr.l	w_mode1
		bsr	sprite
		move.l	d1,d0
		move.l	#SPXOR,w_mode1
		bsr	print_text
		move.w	#15,col1
		move.l	(sp)+,old_screen
		move.b	#248,ms_click
		move.b	#2,un_click
no_ani_pf
		rts

ani_text_pf	dc.b	' ',0
conv_ani_lst	dc.b	' 1234'
		even

bit_plot_id	move.l	logic_base,a0
		move.w	#7,d6
		move.w	#8,d5
		bsr	plot_id2
update_p	move.l	logic_base,a0
		move.l	physical_base,a1
		move.w	#15,d0
update_phyical	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,update_phyical
		rts

		even
menu_make_defs	dc.w	166,137,195,143
		dc.w	200,137,235,143
		dc.w	240,137,269,143
		dc.w	274,137,303,143
		dc.w	179,147,213,153
		dc.w	218,147,252,153
		dc.w	257,147,286,153

menu_len_defs	dc.l	$001e0007
		dc.l	$00240007
		dc.l	$001e0007
		dc.l	$001e0007
		dc.l	$00230007
		dc.l	$00230007
		dc.l	$001e0007

look_up_logic	dc.l	mem+$686a0+1048
		dc.l	mem+$686a0+1064
		dc.l	mem+$686a0+1080
		dc.l	mem+$686a0+1096

which_command	dc.w	20
ubshiftbuf	ds.l	16*8
ubsavebuf	ds.l	16*8

print_little	move.l	#$00b00039,d0
		clr.l	w_mode1
		move.l	d0,d1
		move.l	#$00540014,d2
		bsr	sprite
		move.l	keys_vec_lit,a0
		move.w	#9,col1
		move.l	#SPXOR,w_mode1
		bsr	print_text
		move.w	#24,d0
		move.l	old_screen,a0
		add.l	#$23f8,a0
		move.l	#mem+$6a9f8,a1
copy_scan_cur	move.w	#19,d1
copy_new_cur	move.l	(a0)+,(a1)+
		dbra	d1,copy_new_cur
		add.l	#80,a0
		add.l	#80,a1
		dbra	d0,copy_scan_cur
		rts

draw_soft_box	move.l	old_screen,a6
		bra.s	exec_soft_box
draw_white_bx
draw_grey_bx	move.l	#mem+$68600,a6
exec_soft_box	move.w	#15,d0
		move.l	logic_base,a0
		move.l	#ubshiftbuf,a1
temp_cop	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#152,a0
		dbra	d0,temp_cop

		move.l	old_screen,-(sp)
		move.l	a6,old_screen
		move.l	#$00000606,w_mode1
		move.w	#3,col1
		move.l	#$01250008,d0
		move.l	#$00140014,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	(sp)+,old_screen

		move.w	#15,d0
		move.l	logic_base,a1
		move.l	#ubshiftbuf,a0
temp_cop2	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#152,a1
		dbra	d0,temp_cop2
		move.l	true_pbase,physical_base
		move.w	which_edit_defs,d0
		mulu	#8,d0
		add.l	d0,physical_base
		rts

get_edit_box	move.w	which_edit_defs,d1
		lsl.w	#5,d1			;x32
		add.w	#$ae,d1
		swap	d1
		move.w	#5,d1
		rts

user_page	move.b	icon_page_no,d0		;...
		and.w	#255,d0
		sub.w	#4,d0
		mulu	#10*26,d0
		add.l	#icons_name,d0
		move.l	d0,a0
		move.l	#$00100013,d0
		move.w	#9,col1
		move.w	#4,d1
prt_users_name1	bsr	print_text
		add.w	#$1d,d0
		add.l	#26,a0
		dbra	d1,prt_users_name1
		move.w	#4,d1
		move.l	#$00a00013,d0
prt_users_name2	bsr	print_text
		add.w	#$1d,d0
		add.l	#26,a0
		dbra	d1,prt_users_name2
		move.w	#15,col1
		move.w	#9,d0
		lea	define_useri,a0
		lea	table_ybox,a1
		lea	act_buf,a2
		clr.w	d1
		move.b	icon_page_no,d1
		mulu	#10,d1
		addq.b	#1,d1
		move.w	d1,d5
		sub.w	#41,d5
		clr.w	d2
		lea	tabxpos,a6
		lea	user_path_def,a5
		clr.w	d6
next_define	move.b	0(a5,d5.w),d3
		tst.b	d3
		beq.s	poke_stop
		move.w	#4,pokedir
		bra.s	norm_poke
poke_stop	move.w	#7,pokedir
norm_poke	move.b	d5,d3
		and.b	#1,d3
		move.b	d3,pokexdir
		move.b	d1,(a0)
		move.l	0(a1,d2.w),2(a0)
		addq.l	#4,a1
		clr.l	d7
		move.w	d6,d7
		divu	#5,d7
		lsl.w	#1,d7
		move.b	0(a6,d7.w),pokex1
		move.b	1(a6,d7.w),pokex2
		move.l	(a0),(a2)+
		move.l	4(a0),(a2)+
		move.l	8(a0),(a2)+
		move.l	12(a0),(a2)+
		addq.b	#1,d1
		addq.b	#1,d5
		addq.b	#1,d6
		dbra	d0,next_define		
		rts

define_useri	dc.b	99,0
		dc.w	256,66-8
pokexdir	dc.b	0,0
pokedir		dc.w	7
pokex1		dc.b	16,200
pokex2		dc.b	19,0,0,0

tabxpos		dc.b	6,9
		dc.b	15,18

table_ybox	dc.l	$68000c+7,$68002b+7,$680048+7,$680065+7,$680082+7
		dc.l	$f8000c+7,$f8002b+7,$f80048+7,$f80065+7,$f80082+7

SPXOR		equ	$00050606
SPHARD		equ	$01010303


sprite		movem.l	a0-a2/d0-d2/a6,-(sp)
		move.l	d0,xsrc
		move.l	d1,xdes
		move.l	d2,len
		lea	sprite_blk,a0
		lea	work_sprite_blk,a1

		move.w	#4,d0
new_sprite	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,new_sprite
		lea	work_sprite_blk,a6
		dc.w	$a007
		movem.l	(sp)+,a0-a2/d0-d2/a6
		rts

sprite2		movem.l	a0-a2/d0-d2/a6,-(sp)
		move.l	#$00900090,d0
		move.l	#$007c0055,d1
		move.w	current_track,d2
		swap	d2
		move.w	#7,d2
		move.l	d0,xsrc2
		move.l	d1,xdes2
		move.l	d2,len2
		lea	sprite_blk2,a0
		lea	work_sprite_blk2,a1
		move.l	current_screen,old_screen2
		move.w	#15,col12
		move.l	#$01010303,w_mode12
		move.w	#4,d0
new_sprite2	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,new_sprite2
		lea	work_sprite_blk2,a6
		dc.w	$a007
		movem.l	(sp)+,a0-a2/d0-d2/a6
		rts
 		
		even

sprite_blk
len		dc.w	32
hi		dc.w	16
		dc.w	4
col1		dc.w	5
col2		dc.w	0
w_mode1		dc.b	0
w_mode2		dc.b	10
w_mode3		dc.b	11
w_mode4		dc.b	12
xsrc		dc.w	0
ysrc		dc.w	0
s_address	dc.l	system_blk
		dc.w	8
sline1		dc.w	160
		dc.w	2
xdes		dc.w	0
ydes		dc.w	0
old_screen	dc.l	mem+$70300
		dc.w	8
sline2		dc.w	160
		dc.w	2
		dc.l	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.l	0

work_sprite_blk	ds.b 80

sprite_blk2
len2		dc.w	32
hi2		dc.w	16
		dc.w	4
col12		dc.w	5
col22		dc.w	0
w_mode12	dc.b	0
w_mode22	dc.b	10
w_mode32	dc.b	11
w_mode42	dc.b	12
xsrc2		dc.w	0
ysrc2		dc.w	0
s_address2	dc.l	system_blk
		dc.w	8
sline12		dc.w	160
		dc.w	2
xdes2		dc.w	0
ydes2		dc.w	0
old_screen2	dc.l	mem+$70300
		dc.w	8
sline22		dc.w	160
		dc.w	2
		dc.l	0
		dc.w	0
		dc.w	0
		dc.w	0
		dc.l	0

work_sprite_blk2
		ds.b 80


demo_user_path	clr.l	w_mode1
		move.l	#$011e005b,d1
		move.l	#$000f000f,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.w	tpick,d0
		lea	user_path_def,a0
		move.b	0(a0,d0.w),d0
		and.w	#$ff,d0
		move.b	d0,d3
		mulu	#12,d0
		add.l	#new_user_path,d0
		move.l	d0,a0
		move.l	(a0)+,d0
		move.l	(a0)+,d1
		move.l	(a0),d2
		bsr	sprite
		tst.b	d3
		bne.s	utest2
		lea	user_test1,a0
		bra.s	utest1
utest2		lea	user_testdef2,a0
utest1		lea	act_buf,a1
		cmp.b	#200,act_buf+$b
		beq.s	ndload_chn
		move.w	#3,d0
trans_test	move.l	(a0)+,(a1)+
		dbra	d0,trans_test
		bra.s	dloaded_chn
ndload_chn	tst.b	d3
		bne.s	set_to_four
		move.w	#7,$8+act_buf
		bra.s	dloaded_chn
set_to_four	move.w	#4,$8+act_buf
dloaded_chn	clr.w	d0
		move.b	icon_page_no,d0
		mulu	#10,d0
		add.w	pick_icon,d0
		addq.b	#1,d0
		move.b	d0,act_buf
		rts

		even


new_user_path	dc.l	$00d10008
		dc.l	$01210061
		dc.l	$000d0008

		dc.l	$00df0008
		dc.l	$01200061
		dc.l	$000e0007

user_test1	dc.b	99,0
		dc.w	256,66-8
		dc.b	0,0
		dc.w	7
		dc.b	16,0,19,0,0,0

user_testdef1	dc.b	99,0
		dc.w	256,66-8
		dc.b	0,0
		dc.w	7
		dc.b	16,200,19,0,0,0

user_testdef2	dc.b	99,0
		dc.w	256,66-8
		dc.b	0,0
		dc.w	4
		dc.b	16,200,19,0,0,0


user_control	clr.l	d1		;copes with l.words
		move.b	(a0),d1		;get spr id
		sub.b	#41,d1		;sub to base =0-59
		

		lea	object_id,a3	;id lst
		move.b	40(a3,d1.w),d2	;get the id
		and.b	#%0100,d2	;get shoot bit
		tst.b	d2		;can I shoot it
		beq	no_die_inv	;no I can't

		tst.w	bul_state	;shooting?
		bne	no_die_inv	;no I'm not
		move.w	2(a0),d3	;get x of inv
		move.w	bul_x,d7	;get x of bul
		tst.w	bul_dir		;which direction?
		beq.s	bleft		;is left
		subq.w	#8,d7		;adjust offset x
		bra.s	bright		;in loop
bleft		subq.w	#4,d7		;adjust offset
bright		cmp.w	d7,d3		;is mx < bx
		blt	no_die_inv	;yes no dead
		sub.w	#16,d3		;offset
		cmp.w	d7,d3		;is mx > bx
		bgt.s	no_die_inv	;yes no dead
		move.w	4(a0),d3	;get y of inv
		move.w	bul_y,d7	;get bul y
		subq.w	#8,d3		;inv y -= 8
		move.w	d3,d4		;y of inv
		lea	hit_man_top,a3	;get hit top
		lea	ani_path,a4	;get ani list
		clr.l	d5		;d5 = 0
		move.w	d1,d5		;get sprite no ie 0,1,2
		lsl.w	#2,d5		;mulu #4,d5
		add.l	d5,a3		;add 0,4,8 to hit man top

		move.w	d1,d2		;get sprite no
		mulu	#12,d2		;mulu #12
		add.l	d2,a4		;add offset to ani path
		clr.w	d2		;.w
		move.b	$f(a0),d2	;get counter 1..12
		move.b	0(a4,d2.w),d2	;get ani_path[counter] 1..4
		subq.w	#1,d2		;now 0..3
		move.b	0(a3,d2.w),d2	;get top[counter2]
		add.w	d2,d4		;add top offset
		cmp.w	d7,d4
		bgt.s	no_die_inv
		lea	hit_man_bottom,a3
		add.l	d5,a3
		move.b	$f(a0),d2
		move.b	0(a4,d2.w),d2
		move.b	0(a3,d2.w),d2
		add.w	d2,d3
		addq.w	#8,d3
		cmp.w	d7,d3
		blt.s	no_die_inv
		clr.w	bul_ani
		move.w	2(a0),bul_x
		move.w	#1,bul_state
		addq.w	#1,cause_death

no_die_inv

		move.w	#15,d7		;height of sprite

		move.l	d1,d2		;icon no
		divu	#5,d2		;divide by 5
		move.w	d2,d4		;get whole number
		mulu	#$a00,d4	;multiply by 16 scan lines
		swap	d2		;get remainder
		mulu	#32,d2		;16*4 size array buffer
		add.l	d2,d4		;got the true buffer array
		add.l	#use_bad_def,d4	;+the base array
		move.l	d4,a4		;need d4 later

		lea	ani_path,a1	;base of animation path array
		move.w	d1,d2		;get icon no
		mulu	#12,d2		;size of array element
		clr.w	d5		;.w
		move.b	$f(a0),d5	;get animation frame no
		add.w	d2,d5		;add segment pointer
		move.b	0(a1,d5.w),d4	;get ani=array[frame_no]
		tst.b	d4		;is ani=0
		bne.s	found_ani	;no so it a valid_animation
		move.w	d2,d5		;reset animation frame no
		move.b	0(a1,d5.w),d4	;get ani=array[frame_no]
		tst.b	d4		;is first one=0
		beq.s	undefine_ani	;yes so animation undefined
found_ani	subq.b	#1,d4		;adjust data 1=0 2=1 3=2 4=3
		and.l	#$ff,d4		;copes with l.words
		lsl.w	#3,d4		;times 8
		add.l	a4,d4		;got animation sprite
		move.l	d4,spdata	;give it to sprite routine
		move.b	sys_not,d1	;system inc location
		andi.b	#1,d1		;mask =0/1
		tst.b	d1		;=0
		bne.s	no_next_uani	;=1=no ani
		move.b	$f(a0),d5	;get current frame no
		andi.w	#$ff,d5		;mask out waste
		add.w	d2,d5		;add segment array
		move.b	0(a1,d5.w),d2	;get animate no
		tst.b	d2		;is it zero
		beq.s	freset_uani	;reset frame ptr & add 1
		addq.b	#1,$f(a0)	;inc frame no ptr
		move.b	$f(a0),d2	;get frame no ptr
		cmp.b	#12,d2		;is it = 12
		beq.s	reset_uani	;reset pointer
simple		rts			;otherwise exit

freset_uani	clr.b	$f(a0)		;reset
		addq.b	#1,$f(a0)	;and add 1
		rts			;exit
		
reset_uani	clr.b	$f(a0)		;reset next pointer
no_next_uani	rts			;and exit

undefine_ani	move.w	#-1,d7		;sprite=null
		rts			;and exit

chn_mode	move.w	mx,d0
		move.w	my,d1
		cmp.w	#$78,d1
		blt.s	show_chn_mode
		cmp.w	#$78+9,d1
		bgt.s	show_chn_mode
		cmp.b	#248,ms_click
		beq.s	show_chn_mode
		lea	mode_tst_lst,a0
		clr.w	d2
new_chn_mode	move.w	(a0)+,d3
		cmp.w	d3,d0
		blt.s	show_chn_mode
		move.w	(a0)+,d4
		add.w	d4,d3
		cmp.w	d3,d0
		blt.s	got_chn_mode
		addq.w	#1,d2
		cmp.w	#3,d2
		bne.s	new_chn_mode
		bra.s	show_chn_mode
got_chn_mode	move.b	d2,mode_make		
show_chn_mode	lea	mode_tst_lst,a0
		clr.w	d4
		move.b	mode_make,d4
		lsl.w	#2,d4
		move.w	0(a0,d4.w),d1
		swap	d1
		move.w	#$77,d1
		move.w	2(a0,d4.w),d2
		swap	d2
		move.w	#9,d2
		move.l	#$00870008,d0
		move.w	#15,col1
		bra	sprite

box1		dc.l	0
box2		dc.l	0
box3		dc.l	0
box4		dc.l	0


draw_scroll_up	move.l	d0,box1
		bsr	grey_box
		move.l	#$005c0010,d0
		move.l	#$00070008,d2
		bra	sprite

draw_scroll_dn	move.l	d0,box2
		bsr	grey_box
		move.l	#$00630010,d0
		move.l	#$00070008,d2
		bra	sprite

draw_scroll_lf	move.l	d0,box3
		bsr	grey_box
		move.l	#$006a0010,d0
		move.l	#$00080007,d2
		bra	sprite

draw_scroll_rg	move.l	d0,box4
		bsr	grey_box
		move.l	#$00700010,d0
		move.l	#$00080007,d2
		bra	sprite

grey_box	move.l	d0,a5
		move.l	d0,a6
		add.l	#$00100000,a6
		bsr	draw4

		add.l	#$00100010,a5
		bsr	draw4

		sub.l	#$00100000,a6
		add.l	#$00000010,a6
		bsr	draw4

		move.l	d0,a5
		bsr	draw4
		move.l	d0,d1
		add.l	#$00050005,d1
		move.l	#$00080008,d2
		clr.l	w_mode1
		bsr	sprite
		move.l	#SPXOR,w_mode1
		rts

draw4		move.l	d0,-(sp)
		bsr	draw
		move.l	(sp)+,d0
		rts

do_scrolling	move.l	#SPHARD,w_mode1
		move.l	box1,d0
		bsr	in_range_box
		bne.s	no_box1_in
		move.l	#$00ee0008,d0
		move.l	#$00070008,d2
		bsr	sprite
		cmp.b	#248,ms_click
		bne	do_u_scroll

no_box1_in	move.l	box2,d0
		bsr	in_range_box
		bne.s	no_box2_in
		move.l	#$00ee000c,d0
		move.l	#$00070008,d2
		bsr	sprite
		cmp.b	#248,ms_click
		bne	do_d_scroll

no_box2_in	move.l	box3,d0
		bsr	in_range_box
		bne.s	no_box3_in
		move.l	#$00df0008,d0
		move.l	#$00080007,d2
		bsr	sprite
		cmp.b	#248,ms_click
		bne	do_l_scroll


no_box3_in	move.l	box4,d0
		bsr	in_range_box
		bne.s	no_box4_in
		move.l	#$00e40008,d0
		move.l	#$00080007,d2
		bsr	sprite
		cmp.b	#248,ms_click
		bne	do_r_scroll

no_box4_in	move.l	#SPXOR,w_mode1
		rts

in_range_box	move.w	mx,d1
		move.w	my,d2
		move.w	d0,d3	;y
		swap	d0	;x
		move.w	d0,d4
		swap	d0
		cmp.w	d4,d1
		blt.s	failed_in
		add.w	#$10,d4
		cmp.w	d4,d1
		bgt.s	failed_in
		cmp.w	d3,d2
		blt.s	failed_in
		add.w	#$10,d3
		cmp.w	d3,d2
		bgt.s	failed_in

		move.l	d0,d1
		add.l	#$00050005,d1

		clr.b	d0
		tst.b	d0
		rts

failed_in	move.b	#1,d1
		tst.b	d1
		rts

do_u_scroll	bsr	init_scroll
		add.l	#160,a0
do_u_loop	move.l	(a0)+,(a1)+
		move.l	(a0),(a1)
		add.l	#156,a0
		add.l	#156,a1
		dbra	d7,do_u_loop
		clr.l	(a1)+
		clr.l	(a1)
		move.b	#248,ms_click
		move.b	#2,un_click
		bra	end_scroll

do_d_scroll	bsr	init_scroll
		move.w	d7,d6
advance_y	add.l	#160,a0
		add.l	#160,a1
		dbra	d6,advance_y
		sub.l	#160,a0
do_d_loop	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		sub.l	#168,a0
		sub.l	#168,a1
		dbra	d7,do_d_loop
		clr.l	(a1)+
		clr.l	(a1)
		move.b	#248,ms_click
		move.b	#2,un_click
		bra	end_scroll

do_l_scroll	bsr	init_scroll
		addq.w	#1,d7
do_l_loop	move.w	#3,d1
rorata_l	move.w	(a0)+,d0
		lsl.w	#1,d0
		move.w	d0,(a1)+
		dbra	d1,rorata_l
		add.l	#152,a0
		add.l	#152,a1
		dbra	d7,do_l_loop
		move.b	#248,ms_click
		move.b	#2,un_click
		bra	end_scroll

do_r_scroll	bsr	init_scroll
		addq.w	#1,d7
do_r_loop	move.w	#3,d1
rorata_r	move.w	(a0)+,d0
		lsr.w	#1,d0
		move.w	d0,(a1)+
		dbra	d1,rorata_r
		add.l	#152,a0
		add.l	#152,a1
		dbra	d7,do_r_loop
		move.b	#248,ms_click
		move.b	#2,un_click
		bra	end_scroll

init_scroll	tst.b	Etype
		beq.s	edit_t1
		move.w	#14,d7
		move.l	logic_base,a0
		move.l	a0,a1
		rts

edit_t1		move.w	#6,d7
		move.w	char_active,d0
		add.w	icon_no,d0
		bsr	calc_icon_pos
		lea	sscreenp,a1
		rts

end_scroll	tst.b	Etype
		beq.s	edit_tt1
		bsr	update_p
		bra	Ularge

edit_tt1	clr.l	d0
		lea	sscreenp,a0
		jsr	show_1_icon
		move.w	#-1,old_active
		bra	make_dummy



get_point	cmp.w	#$ffff,d0
		beq.s	failed_get
		cmp.w	#$10,d0
		bge.s	failed_get
		cmp.w	#$ffff,d1
		beq.s	failed_get
		tst.b	Etype
		beq.s	poy_8
		cmp.w	#$10,d1
		bge.s	failed_get
		bra.s	get_it_po
poy_8		cmp.w	#$8,d1
		bge.s	failed_get

get_it_po	bsr	init_point
		move.w	(a0),d4		;get color
		move.w	2(a0),d5
		move.w	4(a0),d6
		move.w	6(a0),d7
		and.w	d3,d4		;mask out color
		and.w	d3,d5
		and.w	d3,d6
		and.w	d3,d7

		not	d0
		and.w	#15,d0
		lsr.w	d0,d4
		lsr.w	d0,d5
		lsr.w	d0,d6
		lsr.w	d0,d7

		lsl.w	#1,d5
		lsl.w	#2,d6
		lsl.w	#3,d7

		or.w	d5,d4
		or.w	d6,d4
		or.w	d7,d4		;d4 = color pixle
		rts

failed_get	move.w	#100,d4
		rts

init_point	tst.b	Etype
		beq.s	first_po
		move.l	logic_base,a0
		bra.s	got_po
first_po	movem.w	d0-d1,-(sp)
		move.w	char_active,d0
		add.w	icon_no,d0
		bsr	calc_icon_pos
		movem.w	(sp)+,d0-d1
got_po		move.w	d0,d2
		move.l	#col_mask_plane,a1
		lsl.w	#1,d2
		move.w	0(a1,d2.w),d3

		move.w	d1,d4
		mulu	#160,d4
		add.l	d4,a0
		rts

put_point	bsr	init_point
		move.w	(a0),d4		;get color
		move.w	2(a0),d5
		move.w	4(a0),d6
		move.w	6(a0),d7
		not	d3
		and.w	d3,d4		;clr out old color
		and.w	d3,d5
		and.w	d3,d6
		and.w	d3,d7

		move.w	d0,d2
		not.w	d2
		and.w	#15,d2
		move.w	pocol,d0	;color to poke

		move.w	d0,d1
		and.w	#%0001,d1
		lsl.w	d2,d1
		or.w	d1,d4
		move.w	d4,(a0)+

		move.w	d0,d1
		and.w	#%0010,d1
		lsr.w	#1,d1
		lsl.w	d2,d1
		or.w	d1,d5
		move.w	d5,(a0)+

		move.w	d0,d1
		and.w	#%0100,d1
		lsr.w	#2,d1
		lsl.w	d2,d1
		or.w	d1,d6
		move.w	d6,(a0)+

		move.w	d0,d1
		and.w	#%1000,d1
		lsr.w	#3,d1
		lsl.w	d2,d1
		or.w	d1,d7
		move.w	d7,(a0)

		rts


		even
mode_tst_lst	dc.w	$a8+$23,$13
		dc.w	$c7+$22,$13
		dc.w	$ec+$21-6,$19

pocol		dc.w	0

Ularge
dmake222	move.w	#15,getyco
		move.l	#mem+$68600,a1
		move.l	logic_base,a0
		move.w	#8,d2
		move.w	#7,d3
		bra.s	do_expand

dmake22		move.w	#15,getyco
		move.l	old_screen,a1
		move.l	logic_base,a0
		sub.l	#mem+$68600,a0
		add.l	old_screen,a0
		move.w	#8,d2
		move.w	#7,d3
		bra.s	do_expand

dmake2		move.w	#7,getyco		;height
		bra.s	skip_222
dmake2222	move.w	#2,getyco
skip_222	move.w	#13,d2			;grid x
		move.w	#11,d3			;grid y
		move.l	#mem+$68600+2696,a0
		move.l	#mem+$68600,a1
		bra.s	do_expand2

do_expand	bsr	do_expand2
reset_2222	move.b	#248,ms_click
		move.b	#2,un_click
		move.l	#SPXOR,w_mode1
		move.w	#15,col1
		rts

do_expand2	move.l	old_screen,-(sp)	;save true screen
		move.l	a1,old_screen		;fool true screen
		move.w	#%1000000000000000,d6	;mask of little sprite
		mulu	#160,d3			;screen y pos
		move.l	d3,a3
		add.l	a1,a3			;screen base

		move.w	#15,d0
zzplot_x_make	move.l	#%11111100000000000000000000000000,d7
		
		move.w	getyco,d1		;init y counter
		move.w	d2,d4			;get x
		and.w	#$000f,d4		;div 16 remainder
		lsr.l	d4,d7			;block adjusted
		move.l	d7,d5			;need a copy of block
		not.l	d5			;created mask

		move.w	d2,d4
		and.l	#$fff0,d4		;which x segment
		lsr.w	#1,d4			;div 2 = 8 size
		move.l	a3,a4			;screen pos in y
		add.l	d4,a4			;add the x to it
		move.l	a0,a6			;get small pixel
zzplot_y_make	lea	colours_mask,a5
		move.w	#$ffff,d3
		clr.l	(a5)			;mask = $0000
		clr.l	4(a5)			;mask = $0000

		move.w	(a6)+,d4		;get from screen
		and.w	d6,d4			;mask out unwanted pix
		tst.w	d4			;is a colour ?
		beq.s	null_c1			;no
		move.w	d3,(a5)			;yes mask = $ffff

null_c1		move.w	(a6)+,d4
		and.w	d6,d4
		tst.w	d4
		beq.s	null_c2
		move.w	d3,2(a5)

null_c2		move.w	(a6)+,d4
		and.w	d6,d4
		tst.w	d4
		beq.s	null_c3
		move.w	d3,4(a5)

null_c3		move.w	(a6)+,d4
		and.w	d6,d4
		tst.w	d4
		beq.s	null_c4
		move.w	d3,6(a5)

null_c4		move.w	#4,d4			;char plot y

plot_y_po	lea	colours_mask,a5

		swap	d7
		swap	d5
		
		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+
		
		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+

		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+		

		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+

		swap	d7
		swap	d5

		lea	colours_mask,a5

		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+
		
		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+

		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+		

		and.w	d5,(a4)			;mask out
		move.w	d7,d3			;get colour
		and.w	(a5)+,d3
		or.w	d3,(a4)+

		add.l	#152-8,a4
		dbra	d4,plot_y_po

		add.l	#160*3,a4
		add.l	#152,a6

		dbra	d1,zzplot_y_make
		add.w	#9,d2			;next grid x
		lsr.w	#1,d6			;shift >> 1 in small
		dbra	d0,zzplot_x_make
		
		move.l	(sp)+,old_screen
		rts


getyco		dc.w	0


		even

current_screen	dc.l	mem+$78000

start		move.l	#my_stack,sp
		clr.l	-(sp)
		move.w	#$20,-(sp)
		trap	#1
		add.l	#6,sp

		*move.w	#$2700,sr

		move.l	$404,old_gem
		move.l	#new_gem,$404

		lea	$8,a0
		lea	pvec,a1

		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+

		move.l	#ev1,$8
		move.l	#ev2,$c
		move.l	#ev3,$10
		move.l	#ev4,$14

		move.l	$114,old_200hz
		move.l	$120,old_tb
		move.l	$70,old_vbl
		move.l	$118,newkey+2

		move.l	#new_200hz,$114
		move.l	#redirect_key,$118
		move.l	#fast_timer_b,$120

		move.w	#34,-(sp)
		trap	#14
		addq.l	#2,sp
		move.l	d0,a0
		move.l	a0,the_ikey
		clr.w	d0
		move.l	16(a0,d0.w),old_kpro
		move.l	24(a0,d0.w),old_jpro
*		move.l	#keybrd_process,16(a0,d0)
*		move.l	#joy_vector,24(a0,d0)


		bsr	cls
		clr.w	-(sp)
		move.l	old_screen,-(sp)
		move.l	old_screen,-(sp)
		move.w	#5,-(sp)
		trap	#14
		add.l	#12,sp
		bsr	flip_wait
		move.l	#mem+$68600,a0
		move.l	old_screen,a1
		move.w	#$1f3f,d0
copylast	move.l	(a0)+,(a1)+
		dbra	d0,copylast
		bsr	cls

		pea	bottom_pal
		move.w	#6,-(sp)
		trap	#14
		addq.l	#6,sp
		bra	main

new_gem		moveq.l	#-1,d0
		rts

old_gem		dc.l	0

ev1		move.w	#2,bomb_out
		bra.s	clean_up2
ev2		move.w	#3,bomb_out
		bra.s	clean_up2
ev3		move.w	#4,bomb_out
		bra.s	clean_up2
ev4		move.w	#5,bomb_out
		bra.s	clean_up2

bomb_out	dc.w	0
spaces		dc.b	'-->',0
		even

mode1		clr.w	-(sp)
		move.l	#$78000+mem,-(sp)
		move.l	#$78000+mem,-(sp)
		move.w	#5,-(sp)
		trap	#14
		add.l	#12,sp
		move.w	#1,-(sp)
		move.l	#$78000+mem,-(sp)
		move.l	#$78000+mem,-(sp)
		move.w	#5,-(sp)
		trap	#14
		add.l	#12,sp
		rts

clean_up	clr.w	bomb_out
		bsr	mode1
clean_up2
clean_up3	bsr	config_ms

		move.l	old_gem,$404

		lea	$8,a1
		lea	pvec,a0

		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+

		clr.b	$fffa1b
*		move.l	newkey+2,$118
		move.l	old_200hz,$114
		move.l	old_tb,$120
		move.l	old_vbl,$70

		move.l	the_ikey,a0
		clr.w	d0
		move.l	old_kpro,16(a0,d0.w)
		move.l	old_jpro,24(a0,d0.w)

		move.w	#$654,$ff8246
		move.w	#$001,$ff8240

		lea	key_stv,a0
		move.l	(a0)+,a1
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+

		move.l	newkey+2,$118
		bsr	mode1

		tst.w	bomb_out
		beq.s	no_bombs
		clr.w	d0
		move.w	bomb_out,d0
		subq.w	#2,d0
		lsl.w	#2,d0
		lea	terrs,a0
		move.l	0(a0,d0.w),d0
		move.l	d0,-(sp)
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp
		bsr	sys_space
		

no_bombs	bsr	mode1
		clr.w	-(sp)
		trap	#1

t2		dc.b	'WORD ON BYTE BOUNDARY',0
t1		dc.b	'-/+ ERROR',0
t3		dc.b	'ILLEGAL INSTRUCTION',0
t4		dc.b	'DIVIDE BY ZERO',0

		even
terrs		dc.l	t1,t2,t3,t4
pvec		dc.l	0,0,0,0
old_vbl		dc.l	0
key_stv		ds.l	4
old_jpro	dc.l	0
old_kpro	dc.l	0
old_keypro	dc.l	0
the_ikey	dc.l	0
old_tb		dc.l	0
old_200hz	dc.l	0

old_hbl		dc.l	0
vbl_counter	dc.b	0

		even

*		movem.l	d0-d7/a0-a6,-(sp)
*		move.l	#system_blk+2560,spdata
*		move.l	#$00000007,d7
*		move.l	mx,xxx
*		move.l	old_screen,-(sp)
*		move.l	current_screen,old_screen
*		bsr	ssprite
*		move.l	(sp)+,old_screen
*
*		movem.l	(sp)+,d0-d7/a0-a6
*		rts


sys_space	move.w	#7,-(sp)
		trap	#1
		addq.l	#2,sp
		cmp.b	#32,d0
		beq.s	got_space_b
		cmp.b	#4,d0
		bne.s	sys_space
got_space_b	rts

new_200hz	addq.l	#1,$4ba
		bclr	#5,$fffffa11
		rte

cls		move.l	old_screen,a0
		move.l	#$1f3f,d0
blank_cls	clr.l	(a0)+
		dbra	d0,blank_cls
		rts

one_char	move.l	a0,-(sp)
		move.b	d1,one_char_plot
		move.l	#one_char_plot,a0
		bsr	print_text
		move.l	(sp)+,a0
		rts

one_char_plot	dc.b	'A',0

		even
		ds.b	1200
my_stack	ds.b	24

pal_table	dc.w	$000,$555,$333,$035,$004,$130,$020,$320
		dc.w	$210,$300,$700,$540,$000,$000,$000,$733

vbad_error	pea	char_txt
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp
		bsr	flip_wait
		bsr	sys_space
		bra	clean_up

main		move.l	#fast_vbl,$70
		move.b	#1,$fffa07
		move.b	#1,$fffa13
		clr.b	$fffa1b
		
		move.w	#1,in_play
		bsr	load_system
		bsr	load_format
		bsr	newkeys
		
		dc.w	$a00a
		move.l	old_screen,a0
		move.l	#mem+$68600,a1
		move.w	#7999,d0
copy_title	move.l	(a1)+,(a0)+
		dbra	d0,copy_title
		bsr	flip_screen
		move.l	old_screen,a0
		move.l	current_screen,a1
		move.w	#7999,d0
need_to		move.l	(a1)+,(a0)+
		dbra	d0,need_to
		jsr	loading
		bsr	cls
		jsr	draw_wow
		addq.b	#1,first_time
		bsr	flip_screen
		move.w	#0,in_play
		jmp	play

char_txt	dc.b	27,'Y',32+17,32+7
		dc.b	27,'b',4,'DISK ERROR. RE-BOOT'
		dc.b	' DISK.',0

		even

newkeys		
		move.l	#-1,d0
		move.l	d0,-(sp)
		move.l	d0,-(sp)
		move.l	d0,-(sp)
		move.w	#16,-(sp)
		trap	#14
		add.l	#14,sp
		move.l	d0,a1
		lea	key_stv,a0
		move.l	a1,(a0)+	;the address of vector
		move.l	(a1)+,(a0)+	;+ contents
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	#standard,d0
		move.l	d0,-(sp)
		move.l	d0,-(sp)
		move.l	d0,-(sp)
		move.w	#16,-(sp)
		trap	#14
		add.l	#14,sp
		rts

standard	dc.b	0,1,129,130,131,132,133,134
		dc.b	135,136,137,138,139,140,2,141
		dc.b	'Q','W','E','R','T','Y','U','I','O','P'
		dc.b	142,143,3,144
		dc.b	'A','S','D','F','G','H','J','K','L'
		dc.b	145,146,147,148,149
		dc.b	'Z','X','C','V','B','N','M'
		dc.b	150,151,152,153,154,155,4
		dc.b	156
*		dc.b	251	;removed help
		dc.b	0,0,0,0,0,0,0,0,0,250,0,0,0,9,0,0
		dc.b	5,0,6,0,0,10,0,7,8
		dc.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0
		dc.b	0,0,0,0,0,0,0,3
		dc.b	0,0,0,0,0,0,0,0,0,0,0,0,0

keyStatus	dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0,0,0,0

* 0=null 1=esc 2=bs 3=cr 4=spc 5=cw 6=ce 7=ins 8=del 9=cn 10=cs
* 11=* 250=F10 251=F1 252=F2 253=F3 254=F4 
		even

withzero	movem.l	d0-d6/a1,-(sp)
		move.b	#1,d6
		bra	skip_num

load_format	clr.w	-(sp)
		move.l	#format_name,-(sp)
		move.w	#$3c,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.w	d0
		bmi	failed_that
		move.w	d0,d7

		move.l	#format_buffer,-(sp)
		move.l	#$100,-(sp)
		move.w	d7,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		tst.w	d0
		bmi	failed_that

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		tst.w	d0
		bmi	failed_that

		rts

format_name	dc.b	'diskinfo.dat',0
		even


load_system	lea	filename_buf,a3
		move.w	#neo_total_pic,d3
		move.l	#system_blk,a4

loading_pics	clr.w	-(sp)
		move.l	a3,-(sp)
		move.w	#$3d,-(sp)
		trap	#1
		addq.l	#8,sp
		move.w	d0,file_handle
		tst.w	d0
		bmi	failed_that

		move.l	a4,-(sp)
		move.l	#4,-(sp)
		move.w	file_handle,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		tst.w	d0
		bmi.s	failed_that

		clr.w	-(sp)
		move.w	file_handle,-(sp)
		move.l	#128,-(sp)
		move.w	#$42,-(sp)
		trap	#1
		add.l	#10,sp
		tst.w	d0
		bmi.s	failed_that

		move.l	a4,-(sp)
		move.l	#32000,-(sp)
		move.w	file_handle,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		tst.w	d0
		bmi.s	failed_that

		move.w	file_handle,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		tst.w	d0
		bmi.s	failed_that

		dbra	d3,next_file_name
		rts

next_file_name	move.b	(a3)+,d0
		bne.s	next_file_name
		adda.l	#$7d00,a4
		bra	loading_pics

failed_that	bra	vbad_error


		even

file_handle	ds.w	1
filename_buf	dc.b	'jos.neo',0
		dc.b	'mtitle.neo',0
		dc.b	'ship.neo',0
*		dc.b	'mtitle.neo',0
		dc.b	'picture2.neo',0
		even


		even
angle		dc.l	$00060000

video_wait	movem.l	d0-d2/a0-a2,-(sp)
		move.w	#37,-(sp)
		trap	#14
		addq.l	#2,sp
		movem.l	(sp)+,d0-d2/a0-a2
null_sprite  	rts


ssprite		tst.w	d7
		bmi.s	null_sprite
		movem.l	d0/a0,-(sp)
		clr.l	d0
		clr.l	d1
		clr.l	d2
		lea	list,a3
		move.w	(a3)+,d2
		move.w	(a3)+,d1
		move.l	(a3)+,a0
		move.l	(a3),a2
		move.l	old_screen,a1

		move.w	d2,d0
		andi.w	#$fff0,d2
		lsr.w	#1,d2
		andi.w	#$000f,d0
		
		add.l	d2,a1
		mulu	#160,d1
		add.l	d1,a1
		move.w	#16,d1
		sub.w	d0,d1

		movea.l	#152,a5
		move.l	a1,a3
		addq.l	#8,a3

height		clr.l	d2
length
		move.w	(a2),d2
		or.w	2(a2),d2
		or.w	4(a2),d2
		or.w	6(a2),d2
		not.l	d2
		ror.l	d0,d2
		move.l	d2,d6
		swap	d6

planes		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		adda.l	a5,a1
		adda.l	a5,a3
		adda.l	a5,a2
		dbra	d7,height
		movem.l	(sp)+,d0/a0
no_ploty_man	rts

force_edge1	dc.b	0
force_edge2	dc.b	0
man_feets	dc.l	0

ssprite2	tst.w	d7
		bmi.s	no_ploty_man
		clr.w	force_edge1
		move.w	manx,d2
		tst.w	d2
		bpl.s	man_fully_on
		addq.b	#1,force_edge1
man_fully_on	cmpi.w	#310,d2
		ble.s	no_edgy
		addq.b	#1,force_edge2
no_edgy		move.l	spdata,a1
		add.l	#$960,a1
		move.w	(a1)+,d1
		or.w	(a1)+,d1
		or.w	(a1)+,d1
		or.w	(a1)+,d1
		move.w	d1,man_feets
		movem.l	d0/a0,-(sp)
		clr.l	d0
		clr.l	d1
		clr.l	d2
		lea	list,a3
		move.w	(a3)+,d2
		move.w	(a3)+,d1
		move.l	(a3)+,a0
		move.l	(a3),a2
		move.l	old_screen,a1

		move.w	d2,d0
		andi.w	#$fff0,d2
		lsr.w	#1,d2
		andi.w	#$000f,d0
		
		add.l	d2,a1
		mulu	#160,d1
		add.l	d1,a1
		move.w	#16,d1
		sub.w	d0,d1

		movea.l	#152,a5
		move.l	a1,a3
		addq.l	#8,a3
		tst.b	force_edge2
		beq.s	height3
		move.l	#system_blk+$7d90,a3

height3		tst.b	force_edge1
		beq.s	height2
		move.l	#system_blk+$7d90,a1
		sub.l	#32768,a3

height2		movem.l	d0-d6/a0-a6,-(sp)
		clr.l	d2
		move.w	old_shadow_ptr,d5
		lea	man_lastxy,a6
		move.l	manx,d1
		move.w	shadow_ptr,d2
		move.l	d1,0(a6,d2.w)
		move.b	d7,4(a6,d2.w)
		lea	murder_match,a2
		clr.w	d3
read_murder	move.l	(a2)+,d4
		move.l	spdata,d5
		cmp.l	d4,d5
		beq.s	save_murder
		addq.w	#1,d3
		cmp.w	#13,d3
		bne.s	read_murder
save_murder	move.b	d3,5(a6,d2.w)
		move.w	shadow_ptr,old_shadow_ptr
		addq.w	#6,shadow_ptr
		cmp.w	#80*6,shadow_ptr
		bne.s	length2b
		clr.w	shadow_ptr
		move.w	#1,started_shadow
length2b	movem.l	(sp)+,d0-d6/a0-a6
length2		move.w	#1,shadow_count
height2b	clr.l	d2
		move.w	(a2),d2
		or.w	2(a2),d2
		or.w	4(a2),d2
		or.w	6(a2),d2
		not.l	d2
		ror.l	d0,d2
		move.l	d2,d6
		swap	d6

planes2		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		and.w	d2,(a1)
		clr.l	d5
		move.w	(a2)+,d5
		ror.l	d0,d5
		or.w	d5,(a1)+
		swap	d5
		and.w	d6,(a3)
		or.w	d5,(a3)+

		adda.l	a5,a1
		adda.l	a5,a3
		adda.l	a5,a2
		dbra	d7,height2b
		movem.l	(sp)+,d0/a0
		rts

		even
murder_match	dc.l	system_blk+$7d00*2+$4560	;left
		dc.l	system_blk+$7d00*2+$4568
		dc.l	system_blk+$7d00*2+$4570
		dc.l	system_blk+$7d00*2+$4578
		dc.l	system_blk+$7d00*2+$4580

		dc.l	system_blk+$7d00*2+$4588	;right
		dc.l	system_blk+$7d00*2+$4590
		dc.l	system_blk+$7d00*2+$4598
		dc.l	system_blk+$7d00*2+$45a0
		dc.l	system_blk+$7d00*2+$45a8

		dc.l	system_blk+$7d00*2+$45e0	;up
		dc.l	system_blk+$7d00*2+$45e8
		
		dc.l	system_blk+$7d00*2+$45f0	;down
		dc.l	system_blk+$7d00*2+$45f8


temp		dc.l	0,0,0,0
scre		dc.l	$70300

list
xxx		dc.w	120
yyy		dc.w	80
		dc.l	0
spdata		dc.l	0

flip_wait	bsr	flip_screen
		bra	video_wait

flip_screen
		addq.b	#1,sys_not
		move.w	current_screen+2,d0
		move.w	d0,old_screen+2
		cmp.w	#$300,current_screen+2
		beq.s	set_to_78000
		move.w	#$0300,current_screen+2
		move.b	#$03,d0
		bra.s	set_up_screen
set_to_78000	move.w	#$8000,current_screen+2
		move.b	#$80,d0
set_up_screen

		move.b	d0,$ffff8203
		move.l	old_screen,$44e

		move.b	sys_not2,d0
		and.b	#1,d0
		bne.s	no_pal_rotate
		tst.b	first_time
		beq.s	no_pal_rotate

		move.w	new_pal,old_pal
		addq.w	#1,new_pal
		addq.w	#1,pal_rotata
		cmp.w	#16,new_pal
		bne.s	pal_fine
		move.w	#12,new_pal

pal_fine	move.w	new_pal,d0
		sub.w	#12,d0
		lsl.w	#2,d0
		lea	pal_address,a0
		move.l	0(a0,d0.w),a1

		clr.l	d0
		move.w	dim_type,d0
		divu	#24,d0
		lsl.w	#1,d0
		lea	burning_pal,a2
		move.w	0(a2,d0.w),d0
		move.w	d0,(a1)

		move.w	old_pal,d0
		sub.w	#12,d0
		lsl.w	#2,d0
		move.l	0(a0,d0.w),a1
		clr.w	(a1)
no_pal_rotate
		clr.b	vbl_counter
		addq.b	#1,sys_not2
		rts

sys_not2	dc.b	0

		even
pal_address	dc.l	$ff8258
		dc.l	$ff825a
		dc.l	$ff825c
		dc.l	$ff825e

*joy_vector	move.b	$2(a0),tjoy_byte
*		move.l	a0,joy_info
*		rts

		even
joy_info	dc.l	0
joy_byte	dc.b	0
tjoy_byte	dc.b	0
lastKeyPressed	dc.b	0
		even

redirect_key	movem.l	d0-d2/a0-a2,-(sp)
pollkeys	clr.l	d0
		move.b	$fffffc02,d0
		cmp.b	#0,packetMode
		bne	processPacket
		cmp.w	#$f6,d0
		bge.s	initPacketMode

		move.b	#1,d2
		btst	#7,d0
		beq.s	notReleasedK
		bclr	#7,d0
		clr.b	d2
		bra.s	pokeKey
notReleasedK	move.b	d0,lastKeyPressed
pokeKey		lea	keyStatus,a0
		adda.l	d0,a0
		move.b	d2,0(a0)
		move.b	d0,rawkeys

IKBDContinue	btst	#4,$fffffa01
		beq.s	pollkeys

		bclr	#6,$fffffa11
		movem.l	(sp)+,d0-d2/a0-a2
		rte

initPacketMode	
*		move.b	#1,keyStatus+102

		move.l	#packetBuffer+1,packetPtr
		clr.l	packetBuffer
		clr.l	packetBuffer+4
		clr.l	packetBuffer+8
		move.b	d0,packetBuffer
		sub.w	#$f6,d0
		move.b	d0,packetScanCode
		move.l	#IKBDPackets,a0
		add.l	d0,a0
		move.b	(a0),packetMode
		bra.s	IKBDContinue

processPacket	
*clr.b	packetMode
*		bra	IKBDContinue

		subq.b	#1,packetMode
		move.l	#packetPtr,a0
		move.l	(a0),a0
		move.b	d0,(a0)
		move.b	d0,lastPacketS
		addq.l	#1,packetPtr
		cmp.b	#0,packetMode
		bne.s	IKBDContinue


		clr.l	d0
		move.b	packetScanCode,d0
		lsl.w	#2,d0
		lea	packetHandler,a0
		move.l	0(a0,d0.w),a0
		jmp	(a0)

packetMode	dc.b	0
packetScanCode	dc.b	0
lastPacketS	dc.b	0
		even
packetPtr	dc.l	0

packetBuffer	ds.b	16

IKBDPackets	dc.b	7		;F6 status report
		dc.b	5		;F7 Absolute mouse position report
		dc.b	2		;F8
		dc.b	2		;F9
		dc.b	2		;FA
		dc.b	2		;FB
		dc.b	6		;FC
		dc.b	2		;FD
		dc.b	1		;FE
		dc.b	1		;FF
		even
	
packetHandler	dc.l	IKBDnothing	;F6 status report
		dc.l	IKBDnothing	;F7
		dc.l	IKBDmsButton	;F8
		dc.l	IKBDmsButton	;F9
		dc.l	IKBDmsButton	;FA
		dc.l	IKBDmsButton	;FB
		dc.l	IKBDnothing	;FC
		dc.l	IKBDnothing	;FD
		dc.l	IKBDnothing	;FE
		dc.l	IKBDjoystick	;FF

IKBDnothing	bra	IKBDContinue


IKBDjoystick	move.b	packetBuffer+1,tjoy_byte
		bra	IKBDContinue

IKBDmsButton	move.l	#packetBuffer,a0
		jsr	keybrd_process
		bra	IKBDContinue




*		move.w	#$2500,sr	;for hbl raster operations
		move.l	d0,-(sp)

		clr.w	d0
		move.b	$fffffc02,d0	;scan code
		cmp.w	#254,d0
		beq.s	joyPacket
		cmp.w	#255,d0
		beq.s	joyPacket

		move.b	$fffffc02,d0	;key
		move.w	d0,rawKeys
		
joyExit		move.l	(sp)+,d0
*		move.w	#$2500,sr
		rte

joyPacket	move.l	#rawJoyHandle,$118
		bra.s	joyExit

rawJoyHandle	tst.b	$fffffc02
		move.l	#redirect_key,$118
		rte

		even
rawKeys		dc.w	0
		dc.w	0

*redirect_key	move.w	#$2500,sr
newkey		jmp	$00000000	;jump to true keybrd vector


keybrd_process	

*		movem.l	d0,-(sp)
		tst.b	un_click
		beq.s	ms_ok_ok
		move.b	1(a0),d0
		or.b	2(a0),d0
		tst.b	d0
		bne.s	ms_ok_ok
		clr.b	un_click
ms_ok_ok	move.w	truemx,d0
		move.w	d0,mx
		move.w	truemy,d0
		move.w	d0,my
		move.b	(a0),d0
		move.b	d0,ms_click
		cmp.b	#248,d0
		bne.s	not_by_me
		clr.b	un_click
not_by_me	tst.b	un_click
		beq.s	ms_click_ok
		move.b	#248,ms_click
ms_click_ok	move.b	1(a0),workx+1
		bmi.s	sub_ms_x
		move.w	workx,d0
		add.w	d0,mx
		cmp.w	#313,mx
		ble.s	calc_ms_y
		move.w	#313,mx
		bra.s	calc_ms_y

sub_ms_x	not.b	workx+1
		addq.b	#1,workx+1
		move.w	workx,d0
		sub.w	d0,mx
		bpl.s	calc_ms_y
		clr.w	mx

calc_ms_y	move.b	2(a0),worky+1
		bmi.s	sub_ms_y
		move.w	worky,d0
		add.w	d0,my
		cmp.w	#191,my
		ble.s	ms_y_done
		move.w	#191,my
ms_y_done	move.w	mx,truemx
		move.w	my,truemy
no_msprocess	
		rts

sub_ms_y	not.b	worky+1
		addq.b	#1,worky+1
		move.w	worky,d0
		sub.w	d0,my
		bpl.s	ms_y_done
		clr.w	my
		bra.s	ms_y_done

workx		dc.w	0
worky		dc.w	0

burning_pal	dc.w	$733,$633,$533,$422,$322,$211,$100

two_sprite	bsr	sprite
		bsr	flip_screen
		bra	sprite

		even
dim_type	dc.w	0
vsys_not	dc.b	0

		even

fast_vbl	clr.b	$fffa1b		;stop timer b
		move.b	#160,$fffa21	;set timer b data register
		move.b	#8,$fffa1b	;start timer b off

		movem.l	d0-d7/a0-a6,-(sp)


		addq.b	#1,vbl_counter	;total screen refresh to date
		tst.b	first_time
		beq.s	exec_timer2
		addq.b	#1,vsys_not
		cmp.w	#1,magic_option
		beq.s	lighter
		tst.w	light_on
		beq.s	dimmer
lighter		tst.w	dim_type
		beq.s	no_new_bright
		move.b	vsys_not,d0
		and.b	#3,d0
		bne.s	no_new_bright
		sub.w	#24,dim_type
no_new_bright	lea	play_darkness,a0
		move.w	dim_type,d0
		movem.l	0(a0,d0.w),d1-d6
		movem.l	d1-d6,$ff8240		
		bra.s	exec_timer
dimmer		cmp.w	#24*6,dim_type
		beq.s	no_new_bright
		move.b	vsys_not,d0
		and.b	#3,d0
		bne.s	no_new_bright
		add.w	#24,dim_type
		bra.s	no_new_bright

exec_timer2	clr.b	$fffa1b		;stop timer b
		move.b	#10,$fffa21	;set timer b data register 60??
		move.b	#8,$fffa1b
		movem.l	first_pal,d0-d7
		movem.l	d0-d7,$ff8240

exec_timer	addq.l	#1,$466		;OS crashes if this code not in
		cmp.w	#-1,in_play
		beq.s	yes_mouse
		tst.w	in_play
		bne	no_mouse
		moveq.l	#7,d7
		bra.s	yes_mouse2
yes_mouse	moveq.l	#15,d7
yes_mouse2	lea	background,a1
		clr.l	d6
		move.b	$ff8201,d6
		lsl.l	#8,d6
		move.b	$ff8203,d6
		lsl.l	#8,d6
		move.l	d6,a0
		move.l	#144,a2
		clr.l	d0
		move.w	del_mx,d0
		lsr.w	#4,d0
		lsl.w	#3,d0
		move.w	del_my,d1
		mulu	#160,d1
		move.l	d6,a3
		add.l	#$7d00,a3
		add.l	d0,d1
		add.l	d1,a0
		move.b	$ff8203,d1
		cmp.b	old_8203,d1
		bne.s	no_delete
		cmp.w	#-1,old_in_play
		beq.s	delete_mouse
		tst.w	old_in_play
		bne.s	no_delete
delete_mouse	move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		move.l	(a1)+,(a0)+
		add.l	a2,a0
		cmp.l	a3,a0
		bge.s	no_delete
		dbra	d7,delete_mouse
no_delete	tst.w	current_track
		bmi.s	no_format_tr
		bsr	sprite2
no_format_tr	move.b	$ff8203,old_8203
		clr.b	flip_mode
		move.l	old_screen,-(sp)
		move.l	xxx,-(sp)
		move.l	spdata,-(sp)
		move.l	d6,old_screen
		move.l	mx,d0

		cmp.w	#-1,in_play
		beq.s	show_man_play
		move.l	#system_blk+2560,spdata
		moveq.l	#$7,d5
		bra.s	norm_man
show_man_play	move.l	#system_blk+$7d00*2+$4568,spdata
		moveq.l	#15,d5
		swap	d0
		and.w	#$fffe,d0
		swap	d0
		cmp.w	#136,d0
		blt.s	norm_man
		move.w	#136,d0
norm_man	move.l	d0,xxx
		move.l	d0,del_mx

		lea	background,a1
		move.l	d6,a0
		move.l	#144,a2
		clr.l	d0
		move.w	del_mx,d0
		lsr.w	#4,d0
		lsl.w	#3,d0
		move.w	del_my,d1
		mulu	#160,d1
		add.l	d0,d1
		add.l	d1,a0 
		moveq.l	#15,d7
save_mouse	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	a2,a0
		dbra	d7,save_mouse
		move.l	d5,d7

		bsr	ssprite
		move.l	(sp)+,spdata
		move.l	(sp)+,xxx
		move.l	(sp)+,old_screen
		jsr	main_room_edit
no_mouse	cmp.b	#1,vbl_counter
		bne.s	no_waves
		bsr	sea_wave
no_waves
		movem.l	(sp)+,d0-d7/a0-a6
		clr.b	flip_mode
		move.w	in_play,old_in_play
		rte			;end of vbl interrupt!!

		even
old_in_play	dc.w	0
del_mx		dc.w	0
del_my		dc.w	0
background	ds.l	4*16
flip_mode	dc.b	0
old_8203	dc.b	0
		even

fast_timer_b	tst.b	first_time
		beq.s	second_raster
		movem.l	d2-d7,-(sp)
		movem.l	play_darkness,d2-d7
		movem.l	d2-d7,$ff8240
		movem.l	(sp)+,d2-d7
		bclr	#0,$fffa0f
		clr.b	$fffa1b
		rte

second_raster	movem.l	d0-d7,-(sp)
		movem.l	bottom_pal,d0-d7
		movem.l	d0-d7,$ff8240
		movem.l	(sp)+,d0-d7
		bclr	#0,$fffa0f
		clr.b	$fffa1b
		rte

bottom_pal	dc.w	$000,$211,$322,$433,$544,$655,$200,$300
		dc.w	$400,$500,$100,$421,$532,$643,$754,$765
		
		

fade_col_off	lea	$ff8240,a0
		move.w	#7,d1
next_fx19	clr.b	vbl_counter
video_flyback	cmp.b	#4,vbl_counter
		bne.s	video_flyback
		move.w	#15,d2
		move.l	a0,a1
chn_col_off	move.w	(a1),d3
		move.w	d3,d4
		and.w	#%111,d4
		tst.b	d4
		beq.s	no_chn_h1
		subq.w	#$001,d3
no_chn_h1	move.w	d3,d4
		lsr.w	#4,d4
		and.w	#%111,d4
		tst.b	d4
		beq.s	no_chn_h2
		sub.w	#$010,d3
no_chn_h2	move.w	d3,d4
		lsr.w	#8,d4
		and.w	#%111,d4
		tst.b	d4
		beq.s	no_chn_h3
		sub.w	#$100,d3
no_chn_h3	move.w	d3,(a1)+
		dbra	d2,chn_col_off
		dbra	d1,next_fx19
		rts

fade_col_on	lea	first_pal,a0
		lea	$ff8240,a2
		move.w	#7,d1
fading_away	clr.b	vbl_counter
recycle		cmp.b	#4,vbl_counter
		bne.s	recycle
		move.w	#15,d2
		move.l	a0,a1
		move.l	a2,a3
turn_video_on	move.w	(a1)+,d3		;get pal col
		move.w	(a3),d4			;get hardware col
		move.w	d3,d5
		and.w	#%111,d5
		move.w	d4,d6
		and.w	#%111,d6
		cmp.b	d5,d6
		beq.s	blue_ok
		addq.w	#$001,d4
blue_ok		move.w	d3,d5
		lsr.w	#4,d5
		and.w	#%111,d5
		move.w	d4,d6
		lsr.w	#4,d6
		and.w	#%111,d6
		cmp.w	d5,d6
		beq.s	green_ok
		add.w	#$010,d4
green_ok	move.w	d3,d5
		lsr.w	#8,d5
		and.w	#%111,d5
		move.w	d4,d6
		lsr.w	#8,d6
		and.w	#%111,d6
		cmp.w	d5,d6
		beq.s	red_ok
		add.w	#$100,d4
red_ok		move.w	d4,(a3)+
		dbra	d2,turn_video_on
		dbra	d1,fading_away
		rts

		even
first_pal	dc.w	$000,$112,$223,$334,$445,$556,$667,$210
		dc.w	$320,$430,$540,$051,$130,$543,$331,$510
*		dc.w	$040,$764,$410,$645,$423,$534,$310,$777

play_darkness	dc.w	$000,$444,$333,$035,$004,$130,$020,$320,$210
		dc.w	$300,$700,$540		;STAGE #1

		dc.w	$000,$333,$333,$035,$004,$130,$020,$320,$210
		dc.w	$300,$600,$540		;STAGE #2

		dc.w	$000,$333,$222,$024,$003,$120,$010,$220,$210
		dc.w	$200,$500,$430		;STAGE #3

_dark_col	dc.w	$000,$222,$222,$024,$003,$120,$010,$220,$110
		dc.w	$200,$400,$430		;STAGE #4

		dc.w	$000,$111,$111,$023,$002,$010,$000,$210,$110
		dc.w	$100,$300,$320		;STAGE #5

		dc.w	$000,$111,$000,$012,$001,$010,$000,$210,$000
		dc.w	$100,$200,$210		;STAGE #6

		dc.w	$000,$101,$000,$001,$000,$001,$000,$101,$000
		dc.w	$000,$100,$101		;STAGE #7 (LAST)


print_text	movem.l	d0-d7/a0-a6,-(sp)
		move.w	d0,d1		;save y of text
		swap	d0		;get x
		mulu	#160,d1		;y of text on screen		
		add.l	old_screen,d1	;d1 is definate screen y
		clr.l	d3
		lea	system_blk,a2	;font #1 table address
		lea	tablex3,a3	;table of mask outs
		lea	rotatex3,a4	;rotate values
		move.l	angle,a5	;get angle to print char
		lea	colours_mask,a6	;colours list
		bsr	calc_colours
		move.w	d0,savetd0
print_x		move.w	savetd0,d2	;start x in active x
print_char	move.w	d2,d3		;get x 1
		move.w	d2,d4		;get x 2
		andi.w	#$fff0,d3	;mask out not 15
		lsr.w	#1,d3		;div 2 ie now div 8 in total
		andi.w	#$000f,d4	;get remainder of div 16
		move.l	d1,a1		;get y
		add.l	d3,a1		;add x and screen pos is found

		clr.l	d5
next_d5		move.b	(a0)+,d5	;get char
		tst.b	d5		;is it null
		beq.s	terminator	;it is the string terminator
		bpl.s	do_texty
		cmp.b	#252,d5
		bne.s	no_tx1
		move.b	(a0)+,d5
		move.w	d5,col1
		bsr	calc_colours
		bra.s	next_d5

terminator	movem.l	(sp)+,a0-a6/d0-d7
		rts

no_tx1		cmp.b	#253,d5
		bne.s	no_tx2
		add.l	#160*$14,d1
		bra.s	print_x

no_tx2		cmp.b	#254,d5
		bne.s	no_tx3
		add.l	#160*$13,d1
		bra.s	print_x

no_tx3		cmp.b	#250,d5
		bne.s	no_tx4
		add.l	#160*10,d1
		bra.s	print_x

no_tx4		add.l	#160*$a,d1
		bra.s	print_x


do_texty	sub.b	#32,d5		;convert space to null
		divs	#3,d5		;get word segment
		swap	d5
		lsl.w	#1,d5
		move.w	0(a3,d5.w),d6	;got mask
		move.w	0(a4,d5.w),d3	;got rotate count value
		clr.w	d5		;for later used
		swap	d5		;got every 3 segments
		lsl.w	#3,d5		;segment address [x8]
		move.w	#7,d7
		move.l	d1,-(sp)
pscan_line	clr.l	d0
		move.w	0(a2,d5.w),d0	;get font def
		and.w	d6,d0		;got specific font def
		lsl.w	d3,d0		;correct pos
		swap	d0
		lsr.l	d4,d0		;adjust to screen pos

		
		move.w	d0,d1
		and.w	(a6),d1                          
		or.w	d1,8(a1)
		move.w	d0,d1
		and.w	2(a6),d1
		or.w	d1,10(a1)
		move.w	d0,d1
		and.w	4(a6),d1
		or.w	d1,12(a1)
		and.w	6(a6),d0
		or.w	d0,14(a1)
		
		swap	d0
		move.w	d0,d1		;un-do mask
		and.w	(a6),d1
		or.w	d1,(a1)		;and poke char to screen
		move.w	d0,d1
		and.w	2(a6),d1
		or.w	d1,2(a1)
		move.w	d0,d1
		and.w	4(a6),d1
		or.w	d1,4(a1)
		and.w	6(a6),d0
		or.w	d0,6(a1)

		add.l	#160,d5		;char scan line def
		add.l	#160,a1		;screen scan line def
		dbra	d7,pscan_line	;next char height
		move.l	(sp)+,d1
		move.l	a5,d7		;get next char print angle
		move.w	d7,d6		;save next y pos
		swap	d7		;get x pos
		mulu	#160,d6		;mulu scan line to y pos
		add.l	d6,d1		;add it to y pos scan line
		add.w	d7,d2		;add x to screen pos
		
		bra	print_char	;get next char

calc_colours	movem.l	d0-d1,-(sp)
		move.w	#$ffff,d1
		clr.l	(a6)
		clr.l	4(a6)
		move.w	col1,d0
		bclr	#0,d0
		beq.s	no_set1c
		move.w	d1,(a6)
no_set1c	bclr	#1,d0
		beq.s	no_set2c
		move.w	d1,2(a6)
no_set2c	bclr	#2,d0
		beq.s	no_set3c
		move.w	d1,4(a6)
no_set3c	bclr	#3,d0
		beq.s	no_set4c
		move.w	d1,6(a6)	
no_set4c	movem.l	(sp)+,d0-d1
		rts

		even
colours_mask	dc.w	$ffff,0,$ffff,0

tablex3		dc.w	%1111100000000000
		dc.w	%0000011111000000
		dc.w	%0000000000111110

rotatex3	dc.w	0
		dc.w	5
		dc.w	10

savetd0		dc.w	0

print_number	movem.l	d0-d6/a0-a2,-(sp)
		clr.l	d6
skip_num	move.l	a0,d5			;number to print
		clr.w	d3			;8 digits
		lea	digit_mask_out,a1	;char number to int
		lea	numstr,a2
rotates_digits	clr.w	d4			;counter of howmany ti
sub_digit_loop	sub.l	(a1),d5
		bmi.s	done_digit_divd
		addq.w	#1,d4
		bra.s	sub_digit_loop

done_digit_divd	add.l	(a1)+,d5
		tst.w	d4			;is it zero?
		bne.s	no_leading_zero		;no so print
		tst.w	d6			;re-quest leading zero
		bne.s	no_leading_zero		;yes so print
		move.b	#32,0(a2,d3.w)
		bra.s	loop_num

no_leading_zero	addq.b	#1,d6			;zeros are permitted
		add.b	#'0',d4
		move.b	d4,0(a2,d3.w)
loop_num	addq.w	#1,d3
		cmp.w	#8,d3
		bne.s	rotates_digits
		tst.w	d6
		bne.s	number_complete
		move.b	#'0',7(a2)
number_complete	move.l	a2,a0
		bsr	print_text
		movem.l	(sp)+,d0-d6/a0-a2
		rts

numstr		dc.b	'        ',0	;8 digits

		even

digit_mask_out	dc.l	10000000
		dc.l	1000000
		dc.l	100000
		dc.l	10000
		dc.l	1000
		dc.l	100
		dc.l	10
		dc.l	1

inter_level	dc.w	0
goodies		dc.w	0
spell_repair	dc.w	0
recarx		dc.w	0
recary		dc.w	0
recar_room	dc.w	0
rise_man	dc.w	15
million		dc.w	0
true_slip	dc.w	0
slippy		dc.w	0
permit_slip	dc.w	0
slip_dir	dc.w	0
old_pal		dc.w	15
new_pal		dc.w	12
pal_rotata	dc.w	0
rndb		dc.b	231
sys_not		dc.b	0
numb		dc.b	0
priority	dc.b	0
old_prior	dc.b	0
temp_prior	dc.b	0
which_icon	dc.b	0
fnot		dc.b	0
flash		dc.b	0
sub_priority	dc.b	0
activate_wrap	dc.b	0
sea_wave1	dc.b	0
sea_wave2	dc.b	0
burn1		dc.b	0
burn2		dc.b	0
icon_page_no	dc.b	0
brick_not	dc.b	0
choose_path	dc.b	0
set_by_me	dc.b	0
p_value		dc.b	0
bomb_buf	dc.b	0
lastalpx	dc.b	0
lastalpy	dc.b	0
box_me		dc.b	0
keybrd		dc.b	0
save_mkid	dc.b	0
mode_make	dc.b	0
man_fall	dc.b	0
dead_counter	dc.b	0
jump_dir	dc.b	-1
fall_not	dc.b	0
obj_lr		dc.b	0
obj_ud		dc.b	0
stop_icon	dc.b	0
		even
got_cross	dc.b	0
got_candle	dc.b	0
got_fire	dc.b	0
got_armour	dc.b	0
got_ice		dc.b	0
got_eye		dc.b	0
total_rises	dc.b	0
total_crown	dc.b	0
test_rise	dc.b	0
Art_S		dc.b	0
no_jumpin	dc.b	0
		even

end_col		dc.w	9
the_end_flag	dc.w	0
the_end_ptr	dc.w	0
text_x		dc.l	$002a0004
launch		dc.w	0

ydir		dc.w	1
ballx		dc.w	0
bally		dc.w	0
xdir		dc.w	1
icon_no		dc.w	0
char_active	dc.w	0
edit_room	dc.w	1
xcursor		dc.w	0
path_no		dc.l	1000
jump_wrap	dc.w	0
pr_control	dc.l	0
pa_control	dc.l	0
p_max		dc.l	0
bomb_pos	dc.w	0
bar1		dc.b	0
bar2		dc.b	0
bar3		dc.b	0
bar4		dc.b	0
save_ptra2	dc.l	0
save_ptrd0	dc.w	0
colour_make	dc.w	0
old_active	dc.w	$ffff
manx		dc.w	0
many		dc.w	80
man_ani		dc.w	0
mandirpos	dc.l	0
spman		dc.l	$7d00+system_blk+$4568
testmanx	dc.w	0
testmany	dc.w	0
man_dead	dc.l	0
user_test	dc.l	0
user_test2	dc.l	0
man_yoff	dc.w	0
man_dir		dc.w	0
gold_coins	dc.l	0
Ogold_coins	dc.l	0
lives		dc.l	0
Olives		dc.l	0
total_keys	dc.l	0
Ototal_keys	dc.l	0
potion1		dc.l	0
potion2		dc.l	0
potion3		dc.l	0
potion4		dc.l	0
Opotion1	dc.l	0
Opotion2	dc.l	0
Opotion3	dc.l	0
Opotion4	dc.l	0
burnpos		dc.w	0
		dc.l	0
light_on	dc.w	1
startmany	dc.w	0
		dc.l	0
		even

move_man	lea	joy_byte,a0
		move.w	#-1,flipped_kill
		move.b	1(a0),(a0)
		tst.w	in_sel_magic
		beq.s	no_clr_joy
		clr.b	(a0)
no_clr_joy	bsr	game_control
		clr.w	joy_shot
		clr.b	obj_lr
		clr.b	obj_ud
		move.w	many,startmany

		clr.w	joy_duck
		tst.w	climb_pause
		beq.s	allow_grab
		subq.w	#1,climb_pause
allow_grab

		move.b	joy_byte,d1
		move.b	d1,a_joy
		and.b	#%10000010,d1
		cmp.b	#%10000010,d1
		bne.s	psprite
		addq.w	#1,joy_shot

psprite		cmp.b	#20,priority
		bne.s	no_advance
		move.l	testmanx,d1
		move.l	d1,manx
		bsr	do_spikes
no_advance
		cmp.b	#22,priority
		beq.s	yno_skull
		clr.w	sprite_pass
		lea	do_kill,a0
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)
		clr.b	killer_good
		bsr	main_control
		addq.b	#1,killer_good
		addq.w	#1,sprite_pass
		bsr	main_control
		bra	no_skull
yno_skull	tst.w	inter_level
		bne.s	set_numb
		tst.b	dead_counter
		bne.s	set_numb
		tst.w	the_end_flag
		bne.s	set_numb
		tst.w	in_play
		beq.s	no_numb
		cmp.w	#15,rise_man
		beq.s	no_numb
set_numb	move.b	#1,numb
		bra	numb_enable
no_numb		clr.b	numb
skip_numb	clr.b	first_timer
		move.w	#1,done_once

		bsr	icon_Scont
		clr.w	done_once
		addq.b	#1,first_timer

		move.l	manx,d1
		bsr	bget_climb
		beq.s	no_nrom
		addq.w	#8,d1
		bsr	bget_climb
		beq.s	no_nrom
		addq.w	#7,d1
		bsr	bget_climb
		beq.s	no_nrom
		clr.w	joy_climb
		
no_nrom		move.b	joy_byte,d0
		and.b	#%00000010,d0
		beq.s	no_force_climb
		move.w	manx,d5
		and.w	#15,d5
		cmp.w	#6,d5
		bgt.s	no_force_climb
		tst.w	joy_climb
		bne.s	no_force_climb
		move.l	manx,d1
		add.w	#16,d1
		bsr	bget_climb2
		bne.s	no_force_climb
		addq.w	#1,joy_climb
		swap	d1
		and.w	#$fff0,d1
		addq.w	#2,d1
		move.w	d1,manx
		move.w	#1,joy_climb
no_force_climb
		addq.w	#1,permit_flip
		move.b	man_fall,d0
		move.w	d0,-(sp)
		move.w	many,d0
		move.w	d0,-(sp)
		move.b	#1,man_fall
		bsr	permit_rise
		subq.w	#1,permit_flip
		move.w	(sp)+,d0
		move.w	(sp)+,d1
		move.b	d1,man_fall
		move.w	many,d1
		move.w	d0,many
		cmp.w	d1,d0
		bne.s	rest_of_bug

		move.b	man_fall,d0
		move.w	d0,-(sp)
		move.w	many,d0
		move.w	d0,-(sp)
		move.b	#30,man_fall
		bsr	permit_fall
		move.w	(sp)+,d0
		move.w	(sp)+,d1
		move.b	d1,man_fall
		cmp.w	many,d0
		beq.s	set_many_zero
		move.w	d0,many
		bra.s	rest_of_bug
set_many_zero	clr.b	man_fall

rest_of_bug
		tst.b	dead_counter
		bne	no_lr_man
		cmp.w	#15,rise_man
		bne	no_lr_man

		move.b	joy_byte,d6
		move.b	d6,d1
		and.b	#%00000001,d6
		tst.b	d6
		beq.s	no_climb
		tst.w	joy_climb
		bne.s	no_climb
		tst.w	climb_pause
		bne.s	no_climb
ok_clim		move.w	manx,d5
		and.w	#15,d5
		cmp.w	#6,d5
		bgt.s	no_climb
		move.l	manx,d1
		subq.w	#1,d1
		bsr	bget_climb
		beq.s	do_climb
		addq.w	#8,d1
		bsr	bget_climb
		beq.s	do_climb
		addq.w	#8,d1
		bsr	bget_climb
		bne.s	no_climb
do_climb	swap	d1
		and.w	#$fff0,d1
		addq.w	#2,d1
		move.w	d1,manx
		move.w	#1,joy_climb
		bsr	climb_mode

no_climb
		tst.w	joy_climb
		beq	never_climb
		move.l	manx,d1
		subq.w	#1,d1
		bsr	bget_climb
		beq.s	do_climb_up
		addq.w	#8,d1
		bsr	bget_climb
		beq.s	do_climb_up
		addq.w	#6,d1
		bsr	bget_climb
		beq.s	do_climb_up
		addq.w	#2,d1
		bsr	bget_climb2
		bne.s	no_climb_up
do_climb_up	move.b	joy_byte,d2
		and.b	#%00000001,d2
		tst.b	d2
		beq.s	no_climb_up
		move.w	many,d7
		bsr	permited_rise
		bsr	permited_rise
		cmp.w	many,d7
		beq.s	never_climb
		addq.w	#1,ani_climb
		bra.s	never_climb

no_climb_up	move.b	joy_byte,d1
		and.b	#%00000010,d1
		tst.b	d1
		beq.s	never_climb
		move.w	many,d7
		addq.w	#1,allow_climb
		bsr	no_true_fall
		bsr	no_true_fall
		clr.w	allow_climb
		cmp.w	many,d7
		beq.s	never_climb
		addq.w	#1,ani_climb

never_climb	tst.b	man_fall
		bne	no_lr_man
		beq.s	next_try
movelr		bsr	stand_control
next_try

		move.b	joy_byte,d6
		move.b	d6,d1
		and.b	#2,d1
		tst.b	d1
		beq.s	no_duck
		cmp.b	#47,which_obj
		beq.s	no_duck
		addq.w	#1,joy_duck
		clr.w	d6
no_duck
		tst.w	joy_climb
		bne.s	no_left2
		bra.s	defint
no_left2	move.b	joy_byte,d0
		and.b	#%00001100,d0
		tst.b	d0
		beq	no_left
		move.b	joy_byte,d0
		and.b	#%00000011,d0
		tst.b	d0
		bne	no_left
		move.l	manx,d1
		add.w	#16,d1
		bsr	get_element2
		not.b	d3
		and.b	#%101,d3
		tst.b	d3
		beq	no_left
		and.w	#7,d1
		tst.w	d1
		bne	no_left

		move.b	joy_byte,d0
		and.b	#%00001100,d0
		tst.b	d0
		beq	no_left
		clr.w	joy_climb

defint
		tst.w	joy_shot
		beq.s	no_shot_joy
		clr.w	d6
no_shot_joy	tst.b	thy_slip
		beq.s	no_slipp_ok
		move.w	#1,permit_slip
no_slipp_ok
		move.b	d6,d1
		and.b	#8,d1
		tst.b	d1
		beq.s	no_right
		move.w	#1,tman_dir
		move.b	#1,man_dir

		cmp.w	#1,permit_slip
		bne.s	no_so_can_walk1
		tst.w	slip_dir
		bne.s	no_so_can_walk1
		addq.w	#1,slippy
		cmp.w	#4,slippy
		bne.s	no_right
no_so_can_walk1	clr.w	true_slip
		clr.w	slippy
just_right	bsr	permit_right
		cmp.w	#1,permit_slip
		beq.s	slip_right
		clr.w	true_slip
slip_right	move.w	#1,slip_dir

no_right	move.b	d6,d1
		and.b	#4,d1
		tst.b	d1
		beq.s	no_left
		clr.b	man_dir
		clr.w	tman_dir

		cmp.w	#1,permit_slip
		bne.s	no_so_can_walk2
		tst.w	slip_dir
		beq.s	no_so_can_walk2
		addq.w	#1,slippy
		cmp.w	#4,slippy
		bne.s	no_left
no_so_can_walk2	move.w	#1,true_slip
		clr.w	slippy
just_left	bsr	permit_left
		cmp.w	#1,permit_slip
		beq.s	slip_left
		move.w	#1,true_slip
slip_left	clr.w	slip_dir
		
no_left		
		tst.b	no_jumpin
		bne	no_lr_man
		tst.w	joy_shot
		bne	no_lr_man
not_chk_jmp	move.w	#1,in_spring
		tst.w	force_spring
		bne.s	normal_jump
		clr.w	in_spring
		move.b	joy_byte,d0
		and.b	#%10000000,d0
		tst.b	d0
		beq	no_lr_man

normal_jump	clr.w	fall_not
		clr.w	force_spring
		move.b	many,d0
		andi.b	#1,d0
		beq.s	no_bound_jmp
		bsr	permit_rise
no_bound_jmp	tst.w	joy_climb
		beq.s	no_set_coclimb
		clr.w	joy_climb
		move.w	#5,climb_pause
no_set_coclimb	move.b	#-1,jump_dir
		move.b	joy_byte,d0
		and.b	#%00001000,d0
		tst.b	d0
		beq.s	no_jumpr

		move.w	#1,slip_dir
		clr.w	true_slip

		move.b	#1,tman_dir
		move.b	#1,jump_dir
		move.b	#1,man_dir

		clr.w	slippy
		clr.w	joy_climb

		cmp.l	#$28,mandirpos
		blt.s	risie_shine
		tst.l	man_dead
		bne	no_lr_man
		clr.l	mandirpos
		bra.s	risie_shine
no_jumpr	move.b	joy_byte,d0
		and.b	#%00000100,d0
		tst.b	d0
		beq.s	risie_shine2

		move.w	#1,true_slip
		clr.w	slip_dir

		clr.b	jump_dir
		clr.w	tman_dir		
		clr.b	man_dir

		clr.w	slippy
		clr.w	joy_climb

		cmp.l	#$28,mandirpos
		bge.s	risie_shine
		tst.l	man_dead
		bne.s	no_lr_man
		move.l	#$28,mandirpos
risie_shine	tst.l	man_dead
		bne.s	no_lr_man
		lea	man_pos_right,a0
		move.w	man_ani,d0
		andi.w	#31,d0
		move.l	0(a0,d0.w),d1
		add.l	mandirpos,d1
		move.l	d1,spman
risie_shine2	tst.w	joy_climb
		bne.s	no_lr_man		
		bsr	permit_rise
		move.w	many,d0
		and.w	#1,d0
		tst.w	d0
		beq.s	no_extra_rises
		bsr	permit_rise
no_extra_rises
no_lr_man
		move.b	joy_byte,d0
		and.b	#%00001100,d0
		bne.s	shifting
		clr.w	slippy
shifting
		move.b	man_fall,d5
		tst.b	d5
		beq.s	true_fall
		tst.w	in_spring
		beq.s	norm_risies_in
		move.w	jump_extend,d6
		cmp.b	d6,d5
		blt.s	rising_man
		cmp.b	d6,d5
		bge.s	true_fall
		bra.s	init_it
norm_risies_in	cmp.b	#18,d5
		blt.s	rising_man
		cmp.b	#20,d5
		bge.s	true_fall
init_it		addq.b	#1,man_fall
		bra	no_man_fall
rising_man	bsr	permit_rise
		bsr	permit_rise
		tst.w	in_spring
		beq.s	no_man_fall
		move.b	man_fall,d6
the_extra2	bsr	permit_rise
		move.b	d6,man_fall
		bra	no_man_fall
true_fall	move.l	d5,-(sp)
		bsr	permit_fall
		bsr	permit_fall
		tst.w	in_spring
		beq.s	no_extra_fall
the_extra1	bsr	permit_fall
no_extra_fall	move.l	(sp)+,d5
		move.b	man_fall,d0
		cmp.b	d5,d0
		beq.s	no_man_fall
		tst.b	d5
		beq.s	no_man_fall
		tst.b	d0
		beq	movelr
no_man_fall
		addq.b	#1,fall_not
		move.l	spman,-(sp)
		move.w	man_ani,-(sp)
		move.w	many,or_many
		cmp.b	#1,fall_not
		beq.s	no_movinglr
		bsr	jump_slr
no_movinglr	move.w	(sp)+,d2
		move.l	(sp)+,d1
		move.b	fall_not,d0
		and.b	#1,d0
		tst.b	d0
		beq.s	no_fool_spman
		move.l	d1,spman
		move.w	d2,man_ani
no_fool_spman
		move.b	man_fall,d0
		move.w	d0,a4
		move.w	many,a5
		addq.w	#1,permit_flip
		addq.b	#1,test_rise
		bsr	permit_rise
		subq.w	#1,permit_flip
		subq.b	#1,test_rise
		move.w	a5,d0
		cmp.w	many,d0
		beq.s	restore_mafl
		bsr	permit_fall
		tst.b	man_fall
		beq.s	no_restore_mafl
		move.w	a5,many
restore_mafl	move.w	a4,d0
		move.b	d0,man_fall
no_restore_mafl	bsr	stand_control
		move.l	spman,-(sp)
		move.l	mandirpos,-(sp)
		move.w	man_ani,-(sp)
		move.w	man_dir,-(sp)

		tst.w	joy_climb
		bne	no_slipping
		cmp.w	#1,permit_slip
		bne.s	no_kidding
		tst.b	man_fall
		bne.s	no_kidding
		move.w	true_slip,d6
		eor.w	#1,d6
		move.w	d6,tman_dir
		tst.w	slip_dir
		beq.s	set_slip_L
		move.b	#1,obj_lr
		bra.s	no_kidding
set_slip_L	move.b	#255,obj_lr

no_kidding	move.b	obj_lr,d0
		cmp.b	#255,d0
		bne.s	no_left_obj
		bra.s	skip_rebo1
rebo1		clr.w	slip_dir
skip_rebo1	move.l	manx,d1
		add.w	#$f,d1
		sub.l	#$00020000,d1
nearly_got_me
		clr.b	man_dir
		move.w	manx,-(sp)
		bsr	permit_left
		move.w	(sp)+,d0
		cmp.w	#1,permit_slip
		bne.s	no_right_obj
		cmp.w	manx,d0
		bne.s	no_right_obj
		move.w	#1,slip_dir
		clr.w	slippy
		bra.s	rebo2
no_left_obj	move.b	obj_lr,d0
		and.b	#%00001111,d0
		tst.b	d0
		beq.s	no_right_obj
		bra.s	skip_rebo2
rebo2		move.w	#1,slip_dir
skip_rebo2	move.l	manx,d1
nearly_got_me2	move.b	#1,man_dir
		move.w	manx,-(sp)
		bsr	permit_right
		move.w	(sp)+,d0
		cmp.w	#1,permit_slip
		bne.s	no_right_obj
		cmp.w	manx,d0
		bne.s	no_right_obj
		clr.w	slip_dir
		clr.w	slippy
		bra	rebo1
no_right_obj	cmp.w	#1,permit_slip
		bne.s	no_reset_lrm
no_slipping	clr.b	obj_lr
no_reset_lrm	tst.w	suck_mode
		beq.s	no_do_suck
		tst.w	joy_climb
		bne.s	no_do_suck
		move.w	#2,slippy
		cmp.w	#1,suck_mode
		bne.s	force_left
		bsr	permit_left
		clr.w	slip_dir
		bra.s	no_do_suck
force_left	bsr	permit_right
		move.w	#1,slip_dir
no_do_suck	clr.w	suck_mode
		move.w	(sp)+,man_dir
		move.w	(sp)+,man_ani
		move.l	(sp)+,mandirpos
		move.l	(sp)+,spman

numb_enable	tst.w	inter_level
		bne	no_inpike
		bsr	do_spikes
		tst.b	want_flips
		beq.s	no_switch1
		move.l	#restore_flips,trap_poke+2
		bsr	untrap
		clr.b	want_flips
no_switch1	tst.b	want_convery
		beq.s	no_switch2
		move.l	#restore_con,trap_poke+2
		bsr	untrap
		clr.b	want_convery
no_switch2	tst.b	want_secret
		beq.s	no_switch3
		move.l	#restore_sec,trap_poke+2
		bsr	untrap
		clr.b	want_secret
no_switch3	tst.b	want_ladder
		beq.s	no_switch4
		move.l	#restore_lad,trap_poke+2
		bsr	untrap
		clr.b	want_ladder
no_switch4	tst.b	want_gate
		beq.s	no_switch5
		clr.b	want_gate
		lea	syst_buf,a0
		clr.w	d1
		move.w	#19,d6
open_gy		move.w	#19,d7
		and.l	#$ffff,d1
open_gx		cmp.b	#17,45(a0)
		bne.s	no_gate_to_open
		move.b	#234,45(a0)
		move.b	#235,67(a0)
		movem.l	d0-d1/d6-d7/a0,-(sp)
		bsr	init_gate_open
		movem.l	(sp)+,d0-d1/d6-d7/a0
no_gate_to_open	addq.l	#1,a0
		add.l	#$100000,d1
		dbra	d7,open_gx
		addq.l	#2,a0
		addq.w	#8,d1
		dbra	d6,open_gy
no_switch5	tst.b	want_walls
		beq.s	no_switch6
		move.l	#restore_walls,trap_poke+2
		bsr	untrap
		clr.b	want_walls
no_switch6

no_inpike	bsr	do_money_v2
		bsr	in_control
		tst.w	allow_up
		beq	no_extend_fall
		tst.b	man_fall
		beq.s	do_smooth
		cmp.b	#18,man_fall
		blt.s	no_extend_fall

do_smooth	
		bsr	reset_fall
		move.b	#-1,jump_dir
		tst.w	allow_up
		bpl.s	allow_the_rise
		move.w	many,d0
		subq.w	#1,d0
		cmp.w	startmany,d0
		ble.s	no_extend_fall
		bsr	permit_rise
		bsr	reset_fall
		bra.s	no_extend_fall
allow_the_rise	move.w	many,d0
		cmp.w	startmany,d0
		blt.s	smooth_up3
		bsr	permit_rise
		move.w	many,d0
		cmp.w	startmany,d0
		blt.s	smooth_up3
		bsr	permit_rise
		move.w	many,d0
		cmp.w	startmany,d0
		blt.s	smooth_up3
		bsr	permit_rise
smooth_up3	bsr	reset_fall
no_extend_fall	bsr	got_big_money
		tst.w	toggle_maj
		bne	no_set_blip
		cmp.b	#251,keybrd
		bne.s	no_set_rep_pot
		tst.l	potion1
		beq.s	no_set_rep_pot
		subq.l	#1,potion1
		addq.w	#1,spell_repair
no_set_rep_pot	cmp.b	#252,keybrd
		bne.s	no_set_see_pot
		tst.l	potion2
		beq.s	no_set_see_pot
		tst.w	spell_seec
		bne.s	no_set_see_pot
		subq.l	#1,potion2
		addq.w	#1,spell_see
		move.w	#200,spell_seec
no_set_see_pot	cmp.b	#253,keybrd
		bne.s	no_set_stand
		tst.l	potion3
		beq.s	no_set_stand
		tst.w	spell_stand
		bne.s	no_set_stand
		subq.l	#1,potion3
		addq.w	#1,spell_stand
no_set_stand	cmp.b	#254,keybrd
		bne.s	no_set_blip
		tst.l	potion4
		beq.s	no_set_blip
		subq.l	#1,potion4
		add.w	#100,blipper
no_set_blip	bsr	spells
		tst.l	man_dead
		bne.s	no_doutline	
		bsr	icon_Scont
no_falling_ART	cmp.b	#1,fall_not
		bne.s	no_xtra_lr

		cmp.b	#1,ART_S
		beq.s	no_xtra_lr
do_xtra_lr	bsr	jump_slr
no_xtra_lr	tst.b	man_fall
		beq.s	no_chn_stand
		clr.w	joy_duck
no_chn_stand
		tst.w	blipper
		bne.s	no_burnol
		tst.w	the_end_flag
		bne.s	no_burnol
		bsr	burn_outline
no_burnol


no_doutline	move.l	temp_keys,d0
		tst.l	d0
		beq.s	no_cpy_keys
		add.l	d0,total_keys
		clr.l	temp_keys
no_cpy_keys
		clr.b	thy_slip
		lea	do_kill,a0
		clr.w	sprite_pass
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)
		clr.b	killer_good
		bsr	main_control
		tst.w	blipper
		beq.s	no_double
		move.w	blipper,d5
		andi.w	#3,d5
		cmp.w	#1,d5
		bne.s	no_double
no_doubleo	bsr	burn_outline
no_double	bsr	burn_outline2
		clr.l	d7
		move.l	manx,d5
		add.w	man_yoff,d5
		move.l	d5,d1
		bsr	bget_kill2
		bne.s	next_jo1
		move.b	d2,d0
		bsr	poke_new_icon3
next_jo1	add.l	#$100000,d1
		move.l	#$100000,d7
		bsr	bget_kill2
		bne.s	next_jo2
		move.b	d2,d0
		bsr	poke_new_icon3
next_jo2	move.l	d5,d1
		addq.w	#8,d1
		moveq.l	#8,d7
		bsr	bget_kill2
		bne.s	next_jo3
		move.b	d2,d0
		bsr	poke_new_icon3
next_jo3	add.l	#$100000,d1
		move.l	#$100008,d7
		bsr	bget_kill2
		bne.s	next_jo4
		move.b	d2,d0
		bsr	poke_new_icon3
next_jo4	move.l	d5,d1
		add.w	#$10,d1
		move.l	#$10,d7
		bsr	bget_kill2
		bne.s	next_jo5
		move.b	d2,d0
		bsr	poke_new_icon3
next_jo5	add.l	#$100000,d1
		move.l	#$100010,d7
		bsr	bget_kill2
		bne.s	jo_all_done
		move.b	d2,d0
		bsr	poke_new_icon3
jo_all_done	bsr	flick_light_off
		tst.w	inter_level
		bne.s	no_die
		tst.w	the_end_flag
		bne.s	no_die

		tst.w	blipper
		beq.s	the_burning
		move.w	blipper,d5
		andi.w	#3,d5
		cmp.w	#1,d5
		bne.s	no_die
the_burning	bsr	check_outline
no_die		addq.b	#1,killer_good
		move.w	#1,sprite_pass
		bsr	main_control
		clr.b	stop_icon

		tst.w	flipped_kill
		bmi.s	no_killer_sw
		move.w	flipped_kill,saved0s
		bsr	flip_kill
no_killer_sw	bsr	do_bonus_rise
		bsr	fire_bul
		bsr	do_the_timer
		bsr	auto_man
		move.l	spman,d0
		add.l	man_dead,d0
		move.l	d0,spdata
		move.l	manx,xxx
		move.w	man_yoff,d0
		add.w	d0,yyy
		clr.l	d7
		move.l	d7,over_limit
		move.w	rise_man,d7
		move.w	yyy,d0
more_ycut	tst.w	d0
		bpl.s	y_pos_mok
		add.l	#160,spdata
		addq.w	#1,yyy
		addq.w	#1,d0
		subq.w	#1,d7
		sub.l	#160,over_limit
		bra	more_ycut

over_limit	dc.l	0

y_pos_mok	cmp.b	#5,dead_counter
		bgt	no_prt_dead
		tst.l	man_dead
		bne.s	no_ducking
		tst.b	man_fall
		bne.s	no_ducking
		tst.w	joy_climb
		beq.s	no_climbin
		move.l	#system_blk+$7d00*2+$45f0,d0
		sub.l	over_limit,d0
		move.l	d0,spdata
		move.w	ani_climb,d0
		andi.w	#3,d0
		cmp.w	#1,d0
		bgt.s	no_ducking
		bra.s	add8_climb

no_climbin	tst.w	joy_duck
		beq.s	no_ducking
		move.l	#system_blk+$7d00*2+$45e0,d2
		sub.l	over_limit,d2
		move.l	d2,spdata
		tst.w	tman_dir
		bne.s	no_ducking
add8_climb	addq.l	#8,spdata
no_ducking	tst.w	blipper
		beq.s	gar_prt
		tst.w	inter_level
		bne.s	gar_prt
		subq.w	#1,blipper
		cmp.w	#20,blipper
		blt.s	gar_prt
		move.w	blipper,d5
		andi.w	#3,d5
		cmp.w	#1,d5
		beq.s	no_prt_dead
gar_prt		tst.w	the_end_flag
		bne.s	no_prt_dead
		move.w	yyy,d0
		cmp.w	#144,d0
		ble.s	ok_pme_now
		sub.w	#144,d0
		sub.w	d0,d7
ok_pme_now	bsr	ssprite2
no_prt_dead
		tst.l	man_dead
		beq	no_skull
		bsr	repair_room
		addq.b	#1,dead_counter
		clr.w	in_sel_magic
		move.b	dead_counter,d0
		clr.w	blipper
		cmp.b	#5,d0
		bgt.s	no_dead_ani
		add.l	#8,man_dead
no_dead_ani
		cmp.b	#25,d0
		blt	no_skull
		cmp.w	#0,in_play
		ble.s	was_testin
		tst.l	lives
		beq.s	game_is_over
		subq.l	#1,lives
		tst.w	secret_mode
		beq.s	norm_reset_m
		clr.w	goodies
		bra	function43
norm_reset_m
		bsr	init_man2
		bra.s	no_skull

game_is_over	move.w	save_edit,edit_room
		jsr	first_time_room
		bsr	display_gover
		bra.s	no_skull

was_testin	move.b	#9,priority
		bsr	config_ms
		move.w	#1,allow_CA
		clr.w	secret_mode
		move.w	save_edit,edit_room
		clr.w	in_play
		addq.l	#4,sp
		jmp	prior_same

re_draw_bad	addq.l	#4,sp
		jmp	re_draw

no_skull
no_min_y	move.l	#system_blk+$7d00*2+$4568,spdata
		move.w	rise_man,d7
		move.l	mx,d0
		and.l	#$fffeffff,d0
		move.l	d0,testmanx

tst_man_coord	bsr	take_off
		cmp.b	#20,priority
		bne.s	dropno_id
		jsr	true_id
		move.l	testmanx,d1
		move.b	#1,stop_icon
		cmp.b	#250,ms_click
		bne.s	dropno_id
		move.l	d1,d6
		bsr	bget_syou
		beq.s	dropno_id
		addq.w	#8,d1
		bsr	bget_syou
		beq.s	dropno_id
		addq.w	#7,d1
		bsr	bget_syou
		beq.s	dropno_id
		sub.w	#7+8,d1
		add.l	#$00090000,d1
		bsr	bget_syou
		beq.s	dropno_id
		addq.w	#8,d1
		bsr	bget_syou
		beq.s	dropno_id
		addq.w	#7,d1
		bsr	bget_syou
		beq.s	dropno_id
		move.l	testmanx,manx
		move.w	#-2,in_play
		bsr	config_joy
		clr.w	suck_mode
		clr.b	got_candle
		bsr	why_not

		
dropno_id	cmp.b	#20,priority
		ble.s	no_manning
		bsr	do_exec_fades
		bsr	do_gate_open
		bsr	do_remove
		bsr	draw_the_end
		cmp.w	#15,rise_man
		beq.s	no_rise_man
		tst.b	dead_counter
		bne.s	no_rise_man
		subq.w	#1,many
		addq.w	#1,rise_man
		move.w	#1,tman_dir
		cmp.w	#15,rise_man
		bne.s	no_rise_man
		move.w	#10,in_play
no_rise_man	bsr	display_score

no_manning	cmp.b	#'F',keybrd
		bne	no_freeze
freezing	cmp.w	#0,in_play
		ble	no_freeze
		move.l	#system_blk+$1ac0,a0
		move.l	old_screen,a1
		add.l	#$9a0,a1
		move.w	#20,d1
freeze_ln	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#128,a0
		add.l	#128,a1
		dbra	d1,freeze_ln
		move.w	#1,freeze_mode
		rts

display_score	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.w	#7,col1
		move.l	gold_coins,d3
		cmp.l	Ogold_coins,d3
		beq.s	no_golds
		move.l	d3,Ogold_coins
		move.l	#$000d00bd,d0
		move.l	gold_coins,a0
		cmp.w	#0,in_play
		ble.s	no_add_his
		move.l	a0,the_last_score
		move.l	a0,the_new_high
no_add_his	move.l	#189*160,a6
		move.w	#3,d7
		bsr	delete_number
		bsr	print_number
		bra	done_number

delete_number	move.l	a6,a5
		add.l	#mem+$68600,a6
		add.l	#system_blk,a5
		move.w	d7,d6
		move.w	#8,d5
number_line	move.l	#160,a4
number_col	move.l	(a5)+,(a6)+
		move.l	(a5)+,(a6)+
		subq.l	#8,a4
		dbra	d7,number_col
		add.l	a4,a5
		add.l	a4,a6
		move.w	d6,d7
		dbra	d5,number_line
		rts

no_golds	move.l	lives,d3
		cmp.l	Olives,d3
		beq.s	no_lives
		move.l	d3,Olives
		move.l	lives,a0
		cmp.l	#99,lives
		blt.s	no_show_maxL
		move.l	#99,a0
no_show_maxL	move.l	#$010a00b8,d0
		move.l	#184*160+$90,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
		bra	done_number

no_lives	move.l	total_keys,d0
		cmp.l	Ototal_keys,d0
		beq.s	no_keys
		move.l	d0,Ototal_keys
		move.l	#$00e900b8,d0
		move.l	total_keys,a0
		cmp.l	#99,total_keys
		blt.s	keys_max_ok
		move.l	#99,a0
keys_max_ok	move.l	#184*160+$80,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
		bra	done_number
no_keys		move.l	potion1,d0
		cmp.l	Opotion1,d0
		beq.s	no_potion1
		move.l	d0,Opotion1
		move.l	#$004800b4,d0
		move.l	potion1,a0
		cmp.l	#99,potion1
		blt.s	pot1_max_ok
		move.l	#99,a0
pot1_max_ok	move.l	#180*160+$30,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
		bra	done_number
no_potion1	move.l	potion2,d0
		cmp.l	Opotion2,d0
		beq.s	no_potion2
		move.l	d0,Opotion2
		move.l	#$006b00b4,d0
		move.l	potion2,a0
		cmp.l	#99,potion2
		blt.s	pot2_max_ok
		move.l	#99,a0
pot2_max_ok	move.l	#180*160+$40,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
		bra	done_number
no_potion2	move.l	potion3,d0
		cmp.l	Opotion3,d0
		beq.s	no_potion3
		move.l	d0,Opotion3
		move.l	#$004800be,d0
		move.l	potion3,a0
		cmp.l	#99,potion3
		blt.s	pot3_max_ok
		move.l	#99,a0
pot3_max_ok	move.l	#190*160+$30,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
		bra.s	done_number
no_potion3	move.l	potion4,d0
		cmp.l	Opotion4,d0
		beq.s	no_potion4
		move.l	d0,Opotion4
		move.l	#$006b00be,d0
		move.l	potion4,a0
		cmp.l	#99,potion4
		blt.s	pot4_max_ok
		move.l	#99,a0
pot4_max_ok	move.l	#190*160+$40,a6
		move.w	#1,d7
		bsr	delete_number
		bsr	print_number
no_potion4
done_number	move.w	#15,col1
		move.l	#SPXOR,w_mode1
		move.l	(sp)+,old_screen
		rts

pannel_candle	tst.b	got_candle
		beq.s	no_candle
		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		bne.s	no_candle
		move.w	candle_flick,d0
		addq.w	#1,candle_flick
		and.w	#3,d0
		lsl.w	#2,d0
		lea	burn_candle,a0
		move.l	0(a0,d0.w),a0
		move.l	#$68600+mem+$70+$7080+160*9,a1
		move.l	(a0),(a1)
		move.l	4(a0),4(a1)
		move.l	160(a0),160(a1)
		move.l	164(a0),164(a1)
		move.l	320(a0),320(a1)
		move.l	324(a0),324(a1)
no_candle	rts

		even
freeze_mode	dc.w	0
candle_flick	dc.w	0
burn_candle	dc.l	system_blk+$38+$4560
		dc.l	system_blk+$40+$4560
		dc.l	system_blk+$48+$4560
		dc.l	system_blk+$50+$4560

man_pos_right	dc.l	$7d00*2+system_blk+$4560
		dc.l	$7d00*2+system_blk+$4568
		dc.l	$7d00*2+system_blk+$4570
		dc.l	$7d00*2+system_blk+$4578
		dc.l	$7d00*2+system_blk+$4580
		dc.l	$7d00*2+system_blk+$4578
		dc.l	$7d00*2+system_blk+$4570
		dc.l	$7d00*2+system_blk+$4568


ms_click	dc.b	248
un_click	dc.b	0
truemx		dc.w	0
truemy		dc.w	0
mx		dc.w	0
my		dc.w	0

key_command	dc.b	$b
		dc.b	1
		dc.b	1

joy_command	dc.b	$14

oldx_s1		dc.w	0
oldy_s1		dc.w	0
oldx_s2		dc.w	0
oldy_s2		dc.w	0

get_element2	bsr	get_element
		lea	char_id,a1
		move.b	0(a1,d2.w),d3
		not.b	d3
		rts

calc_element	lea	syst_buf,a1
		move.w	#400,d3
		clr.l	d2
		swap	d1
		move.w	d1,d2
		swap	d1
		move.w	d1,d3
		tst.w	d2
		add.w	#16,d2
		add.w	#16,d3
		lsr.w	#4,d2
		lsr.w	#3,d3
		mulu	#22,d3
		add.l	d2,d3
bad_range	clr.w	d2
		rts

dirty_calc	move.w	d1,d3
		lsr.w	#3,d3
		lsl.w	#1,d3
		move.w	0(a6,d3.w),d3
		move.l	d1,d2
		swap	d2
		lsr	#4,d2
		add.w	d2,d3
		rts

init_dirty	lea	syst_buf,a5
		lea	tx20,a6
		rts

tx20
		dc.w	45,67,89,111,133,155,177,199,221,243,265,287
		dc.w	309,331,353,375,397,419,441,463,485
		dc.w	0,20,40,60,80,100,120,140,160,180,200
		dc.w	220,240,260,280,300,320,340,360,380,400

limits_convert	equ	201

get_element	bsr	calc_element
		move.b	0(a1,d3.w),d2
		cmp.w	#limits_convert,d2
		blt.s	no_converts
		cmp.w	#210,d2
		bgt	no_converts
		sub.w	#limits_convert,d2
		move.l	a1,-(sp)
		lea	converts_list,a1
		move.b	0(a1,d2.w),d2
		move.l	(sp)+,a1
no_converts	rts

converts_list	dc.b	26,25
		dc.b	31,32,33,28,29,30
		dc.b	44,45
		even

put_element	bsr	calc_element
		move.b	d0,0(a1,d3.w)
		rts

put_astrib	bsr	calc_element
		lea	astrib,a1
		or.b	#%00001111,0(a1,d3.w)
		rts

put_bonus	bsr	calc_element
		lea	astrib,a1
		addq.w	#1,fruities
nrom		or.b	#%10000000,0(a1,d3.w)
		rts

clr_bonus	bsr	calc_element
		lea	astrib,a1
		and.b	#%01111111,0(a1,d3.w)
		rts

get_bonus	bsr	calc_element
		lea	astrib,a1
		move.b	0(a1,d3.w),d4
		and.b	#%10000000,d4
		tst.b	d4
		beq.s	no_got_bonus
		tst.w	inter_level
		bne.s	no_got_bonus
		subq.w	#1,fruities
		tst.w	fruities
		bne.s	more_fruities
		tst.w	super_bonus
		bne.s	more_fruities
		move.w	#1,big_money
		move.l	#$6440-160*2,money_pos
		move.w	rnd_fruit,d5
		addq.w	#1,d5
		mulu	#25000,d5
		add.l	d5,gold_coins
more_fruities	eor.b	#%10000000,0(a1,d3.w)
		clr.w	d0
		bsr	poke_new_icon
		move.w	rnd_fruit,d5
		tst.w	d5
		beq	bonus10
		cmp.w	#1,d5
		beq	bonus50
		cmp.w	#2,d5
		beq	bonus100
		bra	bonus200
no_got_bonus	rts

bget_senermy	cmp.w	#0,d1
		blt.s	failed_ran
		cmp.w	#160,d1
		bge.s	failed_ran
		swap	d1
		cmp.w	#0,d1
		blt.s	failed_rang
		cmp.w	#320,d1
		bge.s	failed_rang
		swap	d1
		bsr	get_element2
		and.b	#%00000001,d3
		tst.b	d3
		rts

failed_rang	swap	d1
failed_ran	clr.b	d3
		tst.b	d3
		rts

bget_sfire	bsr	get_element
		cmp.b	#9,d2
		bne.s	is_it_fsol
		movem.l	a0/d1,-(sp)
		bsr	function9
		movem.l	(sp)+,a0/d1
		addq.w	#5,d1
		bsr	get_element
		cmp.b	#9,d2
		bne.s	hit_wall
it_a_wall	move.l	a0,-(sp)
		bsr	function9
		move.l	(sp)+,a0
hit_wall	clr.w	d0
		tst.w	d0
		rts

is_it_fsol	bsr	get_element2
		and.b	#%00000010,d3
		tst.b	d3
		bne.s	try_bottom
		move.w	d3,saved3
		addq.w	#5,d1
		bsr	get_element2
		cmp.b	#9,d2
		beq	it_a_wall
		move.w	saved3,d3
		tst.b	d3
		rts


saved3		dc.w	0

try_bottom	addq.w	#5,d1
		bsr	get_element2
		cmp.b	#9,d2
		beq	it_a_wall
		and.b	#%00000010,d3
		tst.b	d3
		rts

bget_syou	bsr	get_element
		tst.l	total_keys
		beq.s	chk2_item
		tst.b	test_rise
		bne.s	chk2_item
		cmp.b	#19,d2
		beq	function19
		cmp.b	#18,d2
		beq	function18
		cmp.b	#17,d2
		beq	function17
chk2_item

no_1ways	bsr	get_element2
		and.b	#%00000010,d3
non_sol		tst.b	d3
exit_sol	rts

bget_stand	move.w	d1,d0
		and.w	#7,d0
		tst.b	d0
		bne.s	out_stand
		cmp.w	#4,magic_option
		bne.s	no_ice_check
		bsr	get_element2
		cmp.b	#24,d2
		bne.s	no_ice_check
		rts
no_ice_check	tst.w	allow_climb
		bne.s	do_special_st
the_stand	bsr	get_element2
		and.b	#%00000100,d3
		tst.b	d3
out_stand	rts
do_special_st	bsr	get_element2
		and.b	#%00010000,d3
		bne.s	the_stand
		move.b	#1,d3
		tst.b	d3
		rts

bget_kill2	tst.w	blipper
		beq.s	bget_kill

bget_kill3	bsr	get_element2
		and.b	#%00000010,d3
		tst.b	d3
		rts

bget_kill	bsr	get_element2
norm_check_kill	and.b	#%00001000,d3
		tst.b	d3
		rts

bget_climb	bsr	get_element2
		and.b	#%00010000,d3
		tst.b	d3
		rts

bget_climb2	bsr	get_element2
		and.b	#%00010100,d3
		tst.b	d3
		rts


play_menu	cmp.b	#9,priority
		bne	no_play_opt
		tst.w	allow_CA
		bne.s	play_menu2
		move.l	#$010900b2,d1
		jsr	show_option
		jsr	display_CA
		bra.s	play_the_menu
play_menu2	jsr	mend_room
		jsr	show_room2
		jsr	true_id
play_the_menu	clr.w	in_play
		jsr	popup
		move.l	#$0086004a,d0
		lea	text_play,a0
		move.w	#7,col1
		move.l	#SPXOR,w_mode1
		bsr	print_text
		move.w	#15,col1
		clr.b	got_cross
		move.w	#1,light_on
		jmp	copy_O_to_W

cont_play_menu2	cmp.b	#9,priority
		bne	no_play_opt
		move.b	#1,box_me
		rts

cont_play_menu	cmp.b	#9,priority
		bne	no_play_opt

		move.w	mx,d0
		move.w	my,d1
		cmp.w	#$85,d0
		blt	no_press_menu
		cmp.w	#$86+54,d0
		bgt	no_press_menu
		cmp.w	#$49,d1
		blt	no_press_menu
		cmp.w	#$44+14,d1
		bgt.s	ptest_room
		move.l	#$00870008,d0
		move.l	#$00850049,d1
		move.l	#$00380009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	no_press_menu
		move.b	#1,priority
		clr.b	got_candle
		clr.w	allow_CA
		rts

ptest_room	cmp.w	#$44+10*2+4,my
		bgt	pplay_game
		move.l	#$00870008,d0
		move.l	#$00850053,d1
		move.l	#$00380009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq	no_press_menu
		move.b	got_candle,d0
		clr.w	in_sel_magic
		clr.w	min_buffer

		move.w	d0,-(sp)
		bsr	reset_game2
		move.b	#20,priority
		move.w	#-1,in_play
		jsr	true_id
		jsr	show_room
		move.w	#12,money_on
		clr.w	money_off
		move.l	#$60,money_on_pos
		clr.l	money_off_pos

		move.b	#1,un_click
		bsr	print_room_name
		clr.l	secret_valid
		move.w	edit_room,save_edit
		move.w	(sp)+,d0
		move.b	d0,got_candle
		jmp	copy_O_to_W
pplay_game	cmp.w	#$48+10*3,my
		bgt.s	pquit_game
		move.l	#$00870008,d0
		move.l	#$0085005d,d1
		move.l	#$00380009,d2
		bsr	sprite
		cmp.b	#248,ms_click
		beq.s	no_press_menu
		clr.b	got_candle
		clr.b	priority
		clr.w	allow_CA
		jmp	main_pg

pquit_game
no_press_menu
no_play_opt	rts

text_play	dc.b	'EDIT GAME',-1
		dc.b	'TEST ROOM',-1
		dc.b	'GAME MENU',0
		even

config_joy	move.l	#ms_off,-(sp)
		clr.w	-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
		move.l	#joy_command,-(sp)
		clr.w	-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
		rts

config_ms
		move.l	#joy_off,-(sp)
		clr.w	-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
		move.l	#ms_rel,-(sp)
		clr.w	-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
		move.l	#key_command,-(sp)
		move.w	#2,-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
no_con_ms	rts

joy_off		dc.b	$13
ms_rel		dc.b	$8
ms_off		dc.b	$13
		dc.b	0,0,0,0
joy_read	dc.b	$16,0,0,0

main_game_draw	cmp.b	#22,priority
		bne.s	no_gpannel
		jsr	print_room_name
		move.l	#$6d60+system_blk,a0
		move.l	#$6d60,a1
		add.l	old_screen,a1
		move.w	#999,d0
make_gpannel	move.l	(a0)+,(a1)+
		dbra	d0,make_gpannel
small_copy_otow	move.l	old_screen,a0
		add.l	#$6400,a0
		move.l	#mem+$68600+$6400,a1
		move.w	#1599,d0
copy_small_OW	move.l	(a0)+,(a1)+
		dbra	d0,copy_small_OW
		jsr	init_numbers
no_gpannel	rts

permit_right	
*		tst.w	game_play_mode
*		beq.s	held_in_r
*		cmp.w	#100,edit_room
*		bgt.s	held_in_r
*		cmp.w	#316,manx
*		bne.s	held_in_r2
*		bsr	inter_room_save
*		bsr	pwrap_right
*		move.w	d7,edit_room
*		clr.w	vwrap_y
*		move.w	#-320,vwrap_x
*		bsr	reset_room
*		jsr	show_room
*		jsr	print_room_name
*
*		move.w	t_light_on,light_on
*		move.w	#-4,manx


held_in_r	cmp.w	#310,manx
		bge	no_mover
held_in_r2	move.l	manx,d1
		add.l	#$000a0000,d1
		bsr	bget_syou
		beq.s	no_mover
		cmp.b	#45,d2
		beq.s	no_mover
		addq.w	#8,d1
		move.w	manx,d0
		and.w	#15,d0
		cmp.w	#6,d0
		bne.s	no_chk_mr
		tst.b	man_fall
		bne.s	always_chk_mr
		move.w	d1,d0
		and.w	#7,d0
		tst.w	d0
		beq.s	no_chk_mr
always_chk_mr	bsr	bget_syou
		beq.s	no_mover
		cmp.b	#45,d2
		beq.s	no_mover
no_chk_mr	addq.w	#7,d1

no_perri	bsr	bget_syou
		beq.s	no_mover
		cmp.b	#45,d2
		beq.s	no_mover
man_range_ok	addq.w	#4,man_ani
		addq.w	#2,manx
no_mover	clr.l	mandirpos
		bra	plot_man

inter_room_save	move.w	edit_room,d7
		bsr	get_mem_add
		lea	syst_buf+45,a1
		move.w	#19,d0
save_room_idl	move.w	#19,d1
copy_bytes2	cmp.b	#225,(a1)
		bne.s	no_burn_repl
		move.b	#60,(a0)+
		addq.l	#1,a1
		bra.s	burn_repl
no_burn_repl	move.b	(a1)+,(a0)+
burn_repl	dbra	d1,copy_bytes2
		addq.l	#2,a1
		dbra	d0,save_room_idl
		rts
*		bra	rsplit_screens

vwrap_x		dc.w	0
vwrap_y		dc.w	0

permit_left	
*		tst.w	game_play_mode
*		beq.s	held_in_l
*		cmp.w	#100,edit_room
*		bgt.s	held_in_l
*		cmp.w	#-6,manx
*		bne.s	held_in_l2
*		bsr	inter_room_save
*		bsr	pwrap_left
*		move.w	#320,vwrap_x
*		clr.w	vwrap_x
*		move.w	d7,edit_room
*		bsr	reset_room
*		jsr	show_room
*		jsr	print_room_name
*		move.w	t_light_on,light_on
*		move.w	#320-6,manx

held_in_l	tst.w	manx
		beq.s	no_movel
held_in_l2	move.l	manx,d1
		swap	d1
		move.w	d1,d2
		swap	d1
		sub.l	#$00020000,d1
		and.w	#15,d2
		tst.w	d2
		bne.s	why_checkl
		bsr	bget_syou
		beq.s	no_movel
		cmp.b	#44,d2
		beq.s	no_movel
		cmp.b	#209,d2
		beq.s	no_movel
		addq.w	#8,d1
		tst.b	man_fall
		bne.s	always_chk_ml
		move.w	d1,d0
		and.w	#7,d0
		tst.w	d0
		beq.s	no_chk_movel
always_chk_ml	bsr	bget_syou
		beq.s	no_movel
		cmp.b	#44,d2
		beq.s	no_movel
		cmp.b	#209,d2
		beq.s	no_movel
		bra.s	no_chk_movel
why_checkl	addq.w	#8,d1
no_chk_movel	addq.w	#7,d1
no_perle	bsr	bget_syou
		beq.s	no_movel
		cmp.b	#44,d2
		beq.s	no_chk_movel
		cmp.b	#209,d2
		beq.s	no_chk_movel
man_range_okl	subq.w	#2,manx
		subq.w	#4,man_ani
no_movel	move.l	#$28,mandirpos
plot_man	tst.l	man_dead
		bne.s	he_dead
		move.w	man_ani,d0
		andi.w	#31,d0
		lea	man_pos_right,a0
		move.l	0(a0,d0.w),d1
		add.l	mandirpos,d1
		move.l	d1,spman
he_dead		rts

permit_fall	tst.w	joy_climb
		bne	climb_mode
		tst.b	man_fall
		beq.s	permitted_fall
		cmp.b	#1,obj_ud
		beq.s	no_solidfall
		cmp.b	#18,man_fall
		blt.s	no_solidfall
permitted_fall	tst.b	Art_S
		bne.s	no_solidfall
no_true_fall	move.l	manx,d1
		bsr	man_standing
		beq.s	no_mfalling_ok
		addq.w	#1,many
		move.w	many,d0
		and.w	#1,d0
		tst.w	d0
		bne.s	no_solidfall
		addq.b	#1,man_fall
no_solidfall	rts
no_mfalling_ok
		clr.b	man_fall
		rts

permit_flip	dc.w	0

permit_rise	tst.w	joy_climb
		bne	climb_mode
permited_rise	move.l	manx,d1
unlimited_rise	cmp.w	#100,edit_room
		bgt	norm_rise_gm
		tst.w	permit_flip

		bne.s	norm_rise_gm
		cmp.w	#-12,many
		bge.s	norm_rise_gm
		movem.l	a0-a6/d0-d7,-(sp)
		bsr	inter_room_save
		bsr	pwrap_up
		move.w	#320,vwrap_x
		clr.w	vwrap_y
		move.w	d7,edit_room
		bsr	reset_room
		jsr	show_room
		jsr	print_room_name
		move.w	t_light_on,light_on
		move.w	#160-15,many
n_rest_fl	movem.l	(sp)+,a0-a6/d0-d7
		move.l	manx,d1
norm_rise_gm	subq.w	#1,d1
		bsr	bget_syou
		beq.s	no_upc
		add.l	#$00080000,d1
		bsr	bget_syou
		beq.s	no_up
up_ok		addq.b	#1,man_fall
		subq.w	#1,many
no_rise_climb	rts
no_upc		add.l	#$00080000,d1
		bsr	bget_syou
		bra.s	no_up
no_upb		move.b	#20,man_fall	;v was 20
		move.w	#16,jump_extend
no_up		tst.b	man_fall
		beq.s	no_condit_rise
		move.l	manx,d1
		tst.w	joy_climb
		bne.s	no_condit_rise
		bsr	man_standing
		cmp.b	#234,d0
		bne.s	no_condit_rise
		move.b	#18,man_fall
		move.w	#16,jump_extend
no_condit_rise	rts

man_standing	
*tst.w	game_play_mode
*		bne.s	unlimit_fall
		cmp.w	#144,d1
		bge	standok
*		bra.s	force_fall_lm
*unlimit_fall	cmp.w	#100,edit_room
*		bgt.s	norm_fall_gm
*		tst.w	permit_flip
*
*		bne.s	norm_fall_gm
*		cmp.w	#144+1,many		;+12
*		blt.s	norm_fall_gm
*		movem.l	a0-a6/d0-d7,-(sp)
*		bsr	inter_room_save
*		bsr	pwrap_down
*		clr.w	vwrap_y
*		move.w	#-360,vwrap_y
*		move.w	d7,edit_room
*		bsr	reset_room
*		jsr	show_room
*		jsr	print_room_name
*		move.w	t_light_on,light_on
*		move.w	#-17,many		;16-20
*		cmp.b	#40,man_fall
*		blt.s	n_rest_ri
*		move.b	#40,man_fall
*n_rest_ri
*		movem.l	(sp)+,a0-a6/d0-d7
*		move.l	manx,d1
*norm_fall_gm

force_fall_lm	add.w	#16,d1
		clr.w	d4
		bsr	bget_syou
		
		beq.s	standokb
		bsr	bget_stand
		beq.s	standokb
		addq.w	#1,d4
		add.l	#$00080000,d1
		bsr	bget_syou
		beq.s	standok
		bsr	bget_stand
		beq.s	standok
continue_fall
		tst.b	man_fall
		bne.s	no_reset_fall
		move.b	#20,man_fall
		move.w	#16,jump_extend
no_reset_fall	move.b	#234,d0
		tst.b	d0
		rts

save_d0_f1	dc.w	0

standok
standokb
reset_fall	tst.w	in_spring
		beq.s	nor_reset_f
		move.w	d0,-(sp)
		move.w	jump_extend,d0
		add.w	#14,d0
		move.w	d0,save_d0_f1
		clr.w	d0
		move.b	man_fall,d0
		cmp.w	save_d0_f1,d0
		ble.s	reset_falling2
		move.w	(sp)+,d0
		bra.s	nor_reset_f
reset_falling2	move.w	(sp)+,d0
		bra.s	reset_falling
nor_reset_f	cmp.b	#38,man_fall
		ble.s	reset_falling
		tst.l	man_dead
		bne.s	reset_falling
		cmp.w	#3,magic_option
		beq.s	reset_falling
		move.l	#system_blk+$7d00*2+$4560,spman
		clr.l	mandirpos
		move.b	#1,dead_counter
man_deadl	move.l	#$50,man_dead
reset_falling
		clr.b	man_fall
		move.b	#-1,jump_dir
		clr.w	joy_climb
		tst.b	man_fall
		rts

climb_mode	clr.b	man_fall
climb_mode2	move.b	#-1,jump_dir
		clr.b	no_jumpin
		rts

S_freezer	cmp.w	#4,magic_option
		bne.s	no_freeze
		move.b	#241,d0
		bsr	put_element
		move.l	#system_blk+$7d00*2+$3c08,d6
		clr.l	d7
		bsr	init_fades
no_freeze	rts

S_ladder_up	rts
S_ladder_down	rts
S_break_wall	tst.b	Art_S
		bne.s	no_crumber
		andi.w	#$ff,d6
		cmpi.b	#8,d6
		beq.s	no_crumber
		lea	up_date_stand,a0
		move.b	0(a0,d6.w),d0
		bsr	put_element
		move.l	d1,d2
		swap	d2
		tst.w	d2
		bmi.s	nS_break_wall
		bsr	poke_new_icon
nS_break_wall	cmpi.b	#255,d0
		bne.s	no_crumber
bonus10		move.l	#system_blk+$6870,d2
		add.l	#10,gold_coins
		bra	rise_bonus_init
no_crumber	rts
		even
up_date_stand	dc.b	248,249,250,251,252,253,254,255,255


S_converoy_R	move.w	#2,permit_slip
		addq.b	#1,obj_lr
		move.w	#1,slip_dir
		rts

S_converoy_L	move.w	#2,permit_slip
		clr.w	slip_dir
		subq.b	#1,obj_lr
		cmpi.b	#254,obj_lr
		bne.s	no_true_lr
		move.b	#255,obj_lr
no_true_lr	rts

S_stop_icon	move.b	#1,stop_icon
		rts

* d0=icon no,d1 = x,y of icon poke

poke_new_icon3	move.l	d1,-(sp)
		move.l	d7,d1
		bsr	poke_new_icon4
		move.l	(sp)+,d1
		rts

poke_new_icon4	lea	kill_pos,a4
		cmp.b	#8,d0
		bne.s	poke_itthen
		move.b	#1,d0
		bra.s	poke_itthen

poke_new_icon2	move.l	old_screen,a4
		bra.s	poke_itthen
poke_new_icon	move.l	#mem+$68600,a4
poke_itthen	move.l	d1,-(sp)
		sub.l	a1,a1
		cmp.w	#144+16,d1
		bcc.s	npoke_me
		swap	d1
		tst.w	d1
		bmi.s	npoke_me
		cmp.w	#320,d1
		bcc.s	npoke_me
		lsr.w	#4,d1
		lsl.w	#3,d1
		move.w	d1,a1
		swap	d1
		and.w	#%11111000,d1
		mulu	#160,d1
		add.l	d1,a1
		add.l	a4,a1
		jsr	display_1_icon
npoke_me	move.l	(sp)+,d1
		rts

stand_control	tst.b	thy_slip
		bne.s	dont_clr_slip
		clr.w	permit_slip
dont_clr_slip	move.l	manx,d1
		move.w	d1,d0
		and.w	#7,d0
		tst.w	d0
		bne.s	no_stand_cont
		add.w	#16,d1
		move.l	d1,-(sp)
		bsr	what_am_I_on
		move.l	(sp)+,d1
		swap	d1
		move.w	d1,d0
		swap	d1
		and.w	#15,d0
		cmp.w	#8,d0
		blt.s	no_stand_cont
		add.l	#$00080000,d1
		bra.s	what_am_I_on
no_stand_cont	rts


what_am_I_on	bsr	bget_syou
		andi.w	#$ff,d2
		cmpi.w	#47,d2
		beq	function47
		cmpi.w	#46,d2
		beq.s	slip_ice
		cmp.w	#241,d2
		beq.s	slip_ice
		cmp.w	#223,d2
		beq.s	slip_ice
		cmp.w	#24,d2
		beq.s	over_crumb
		tst.b	man_fall
		bne.s	no_stand_cont
		cmp.w	#8,d2
		beq	function8
		cmp.w	#248,d2
		bge.s	crumb_extra
		cmp.w	#24,d2
		blt.s	no_stand_cont
		cmp.w	#34,d2
		bgt.s	no_stand_cont
		clr.b	d6
		bra.s	over_crumb
crumb_extra	sub.b	#247,d2
		move.b	d2,d6
		move.b	#35,d2
over_crumb	sub.b	#24,d2
		and.l	#$ff,d2
		lsl.b	#2,d2
		move.l	d2,a0
		add.l	#stand_table,a0
		move.l	(a0),a1
		move.l	d1,-(sp)
		jsr	(a1)
		move.l	(sp)+,d1
		rts

slip_ice	tst.w	permit_slip
		bne.s	done_so_slip
		addq.w	#1,permit_slip
done_so_slip	rts

in_control	clr.w	done_trap
		clr.w	allow_up
		move.l	manx,d1
		bsr	what_am_I_in
		cmp.w	#8,rise_man
		blt.s	no_third_in2
		addq.w	#8,d1
		bsr	what_am_I_in
		cmp.w	#15,rise_man
		bne.s	no_third_in2
		move.w	d1,d0
		and.b	#7,d0
		tst.b	d0
		beq.s	no_third_in1
		addq.w	#8,d1
		bsr	what_am_I_in
no_third_in1	swap	d1
		move.w	d1,d0
		swap	d1
		move.w	many,d1
		and.w	#15,d0
		cmp.w	#8,d0
		blt.s	no_third_in2
		add.l	#$00080000,d1
		bsr	what_am_I_in
		addq.w	#8,d1
		bsr	what_am_I_in
		move.w	d1,d0
		and.b	#7,d0
		tst.b	d0
		beq.s	no_third_in2
		addq.w	#8,d1
		bsr	what_am_I_in
no_third_in2	rts

what_am_I_in	move.l	d1,-(sp)
		bsr	get_bonus
		bsr	get_element
		andi.l	#$ff,d2
		cmp.w	#225,d2
		beq	re_light
		cmp.w	#219,d2
		beq.s	funct22skip
		cmp.w	#65,d2
		bgt.s	no_special_in
		lsl.w	#2,d2
		lea	touch_table,a0
		add.l	d2,a0
		move.l	(a0),d0
		tst.l	d0
		beq.s	no_special_in
		move.l	d0,a0
		jsr	(a0)
no_special_in	move.l	(sp)+,d1
		rts

funct22skip	bsr	function22
		move.l	(sp)+,d1
		rts

		
true_u		addq.b	#1,obj_ud
		move.b	obj_ud,d2
		cmp.b	#2,d2
		bne.s	no_fool_t_u
		move.b	#1,obj_ud
no_fool_t_u	rts

true_d		subq.b	#1,obj_ud
		move.b	obj_ud,d2
		cmp.b	#-2,d2
		bne.s	no_fool_t_d
		move.b	#-1,obj_ud
sliding_in_wall
no_fool_t_d	rts

	
jump_slr	move.w	#30,d0
		tst.w	in_spring
		beq.s	valid_spring
		move.w	jump_extend,d0
		addq.w	#8,d0
valid_spring	clr.w	d1
		move.b	man_fall,d1
		cmp.w	d0,d1
		bgt.s	sliding_in_wall
		cmp.b	#-1,jump_dir
		beq.s	sliding_in_wall
		tst.b	jump_dir
		beq	permit_left
		bra	permit_right

take_off	cmp.w	#105,edit_room
		bne	no_take_off

		move.l	#$00200058,a5
		move.w	v1_pos,d6
		swap	d6
		move.w	a5,d6
		move.l	d6,a6
		jsr	draw

		move.l	#$00400058,a5
		move.w	v2_pos,d6
		swap	d6
		move.w	a5,d6
		move.l	d6,a6
		jsr	draw

		move.l	#$00200074,a5
		move.w	v1_pos,d6
		swap	d6
		move.w	a5,d6
		move.l	d6,a6
		jsr	draw

		move.l	#$00400074,a5
		move.w	v2_pos,d6
		swap	d6
		move.w	a5,d6
		move.l	d6,a6
		jsr	draw

		tst.w	the_end_flag
		beq	no_take_off
		addq.w	#1,the_end_flag
		cmp.w	#150,the_end_flag
		blt.s	no_rsupport
		cmp.w	#160,the_end_flag
		bgt.s	no_rsupport
		subq.w	#1,v1_pos
		addq.w	#1,v2_pos
		move.l	#$00260077,flxxx
		move.l	#$32b0,rk_pos
		move.b	#20,dead_counter
		clr.w	rflame

no_rsupport	move.w	the_end_flag,d7
		cmp.w	#200,d7
		blt.s	no_open_rd
		cmp.w	#216,d7
		bgt.s	no_open_rd
		sub.w	#200,d7
		move.w	#$ffff,d6
		move.w	d6,d5
		lsl.w	d7,d6
		lsr.w	d7,d5
		move.l	#mem+$68600+$2810,a0

		move.w	#7,d0
open_rocketd	and.w	d6,(a0)+
		and.w	d6,(a0)+
		and.w	d6,(a0)+
		and.w	d6,(a0)+
		and.w	d5,(a0)+
		and.w	d5,(a0)+
		and.w	d5,(a0)+
		and.w	d5,(a0)+
		add.l	#144,a0
		dbra	d0,open_rocketd
		clr.w	insidex

no_open_rd	move.w	the_end_flag,d7
		cmp.w	#280,d7
		blt	no_twin
		cmp.w	#311,d7
		bgt.s	show_rdoor
		addq.w	#1,insidex

show_rdoor	cmp.w	#332,the_end_flag
		bgt	no_prt_mand
		move.l	manx,xxx
		move.w	#13,d7
		addq.w	#2,yyy
		bsr	ssprite
no_prt_mand	move.w	insidex,xxx
		move.w	#15,d7
		move.w	#$60,yyy
		move.l	#system_blk+$4c28+160,spdata
		bsr	ssprite
		cmp.w	#16,xxx
		blt.s	no_twin
		sub.w	#16,xxx
		move.l	#system_blk+$4c20+160,spdata
		move.w	#15,d7
		bsr	ssprite
		cmp.w	#320,the_end_flag
		blt.s	no_twin
		bne.s	check_2nddr
		addq.w	#2,manx
check_2nddr	cmp.w	#332,the_end_flag
		bgt.s	no_twin
		move.l	manx,d1
		bsr	permit_right
no_twin		move.l	#mem+$68600+15360,a0
		move.l	old_screen,a1
		add.l	#15360,a1
		move.w	#17,d0
hide_doorl	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#144+8,a0
		add.l	#144+8,a1
		dbra	d0,hide_doorl

no_inside_r	move.w	the_end_flag,d6
		cmp.w	#370,d6
		blt.s	no_close_door
		cmp.w	#390,d6
		bgt.s	no_close_door
		subq.w	#1,insidex
no_close_door	cmp.w	#400,d6
		bne.s	no_black_rk
		clr.l	w_mode1
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$00260050,d1
		move.l	#$00180031,d2
		bsr	sprite
		move.l	#SPXOR,w_mode1
		move.l	(sp)+,old_screen
no_black_rk	cmp.w	#394,d6
		blt.s	no_rkfl
		lea	fldata,a1
		addq.w	#4,rflame
		move.w	rflame,d0
		andi.w	#15,d0
		move.l	0(a1,d0.w),spdata
		move.w	#19,d7
		move.l	flxxx,d6
flscan		tst.w	d6
		bpl.s	flok
		add.l	#160,spdata
		addq.w	#1,d6
		dbra	d7,flscan
		bra.s	no_rkfl
flok		move.l	d6,xxx
		move.l	d6,-(sp)
		move.l	spdata,-(sp)
		move.w	d7,-(sp)
		bsr	ssprite
		move.w	(sp)+,d7
		move.l	(sp)+,spdata
		move.l	(sp)+,d6
		add.l	#$a0000,d6
		move.l	d6,xxx
		bsr	ssprite
no_rkfl		move.w	the_end_flag,d6
		cmp.w	#394,d6
		blt	no_rock_act
		move.w	#47,d0
		move.l	rk_pos,d2
		move.l	#system_blk+$ec0,a1
gno_rock	tst.l	d2
		bpl.s	rock_on_s
		add.l	#160,d2
		add.l	#160,a1
		dbra	d0,gno_rock
		addq.b	#1,dead_counter
		subq.w	#2,flyyy
		bra	display_gover
rock_on_s	move.l	old_screen,a0
		add.l	d2,a0
pf_rocket	move.w	#1,d3
pf_rline	move.w	(a1),d1
		or.w	2(a1),d1
		or.w	4(a1),d1
		or.w	6(a1),d1
		not.w	d1
		move.w	d1,d2
		swap	d2
		move.w	d1,d2

		move.l	(a1)+,d1
		and.l	d2,(a0)
		or.l	d1,(a0)+

		move.l	(a1)+,d1
		and.l	d2,(a0)
		or.l	d1,(a0)+

		dbra	d3,pf_rline
		add.l	#144,a0
		add.l	#144,a1
		dbra	d0,pf_rocket
no_rock_act	cmp.w	#420,the_end_flag
		blt.s	no_take_off
		sub.l	#160*2,rk_pos
		subq.w	#2,flyyy
no_take_off	rts

		even
v1_pos		dc.w	44
v2_pos		dc.w	52
insidex		dc.w	16
rock_doorx	dc.w	0
rk_pos		dc.l	$32b0
rflame		dc.w	0
flxxx		dc.w	0
flyyy		dc.w	0

rkflame		dc.w	128,66
		dc.w	128+16,66
		dc.w	128+16*2,66
		dc.w	128+16,66

fldata		dc.l	system_blk+$2980
		dc.l	system_blk+$2988
		dc.l	system_blk+$2990
		dc.l	system_blk+$2988

or_many		dc.w	0
joy_shot	dc.w	0
joy_duck	dc.w	0
joy_climb	dc.w	0
ani_climb	dc.w	0
climb_pause	dc.w	0
		

function5	move.l	#ph1,trap_poke+2
		move.w	#5,ph1+2
		move.w	#217,ph2+2
		move.w	#4,ph3+2
		move.w	#218,ph4+2
		bra	untrap

function7	move.l	#ph1,trap_poke+2
		move.w	#7,ph1+2
		move.w	#215,ph2+2
		move.w	#6,ph3+2
		move.w	#216,ph4+2
		bra	untrap

function8
do_sfade	move.b	#227,d0
		bsr	put_element
		move.l	#end_of_remove1,d6
init_removeb	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.b	#1,d0
		bsr	poke_new_icon
		move.l	(sp)+,old_screen
		bra	init_remove

function9	move.b	#214,d0
		bsr	put_element
		move.b	#220,d0
		move.l	#end_of_remove3,d6
		bra	init_removeb

function11	move.b	#239,d0
		bsr	put_element
		bsr	poke_new_icon
		addq.b	#1,total_crown
		bsr	bonus50000
		cmp.w	#0,in_play
		ble.s	got_max_crown
		cmp.b	#5,total_crown
		bne.s	got_max_crown
the_max_crown	addq.w	#1,king_kong
		bra	the_crown
got_max_crown	rts

function12	tst.l	secret_valid
		beq.s	got_max_crown
		bsr	do_clr_off
		movem.l	d0-d2/a0-a2,-(sp)
		bsr	inter_room_save
no_save_inter
		move.w	goodies,s_goodies
		move.w	edit_room,old_edit
		bsr	rnd
		and.w	#3,d0
		move.w	d0,d5
		movem.l	(sp)+,d0-d2/a0-a2
		lea	secret_valid,a3
look_for_srm	tst.b	0(a3,d5.w)
		bne.s	ok_secret_rm
		addq.w	#1,d5
		and.w	#3,d5
		bra.s	look_for_srm
ok_secret_rm	add.w	#101,d5
		move.w	d5,recar_room
		move.w	d5,edit_room
		addq.w	#1,secret_mode
		move.l	#21,timer
		clr.w	timer_x
		move.w	#160,timer_y
		move.w	#1,timer_dir_x
		clr.w	timer_dir_y
		bra	find_here

secret_valid	dc.b	1,1,0,0

s_goodies	dc.w	0
secret_mode	dc.w	0
old_edit	dc.w	0

function13	bra	function22

function14	move.b	#238,d0
		subq.w	#1,goodies
		bsr	put_element
		bsr	poke_new_icon
		add.l	#200,gold_coins
		move.l	#system_blk+$68a0,d2
		bra	rise_bonus_init

function15	tst.b	dead_counter
		beq.s	scored_500
		rts
scored_500	move.b	#237,d0
		subq.w	#1,goodies
		bsr	put_element
		bsr	poke_new_icon
bonus200	add.l	#500,gold_coins
		move.l	#system_blk+$68b0,d2
		bra	rise_bonus_init

function16	move.b	#236,d0
		bsr	put_element
		bsr	poke_new_icon
		add.l	#100,gold_coins
		move.l	#system_blk+$6890,d2
		addq.l	#1,total_keys
		tst.w	inter_level
		beq	rise_bonus_init
		sub.l	#100,gold_coins
		rts

bonus100	add.l	#100,gold_coins
		move.l	#system_blk+$6890,d2
		bra	rise_bonus_init

function17	subq.l	#1,total_keys
		move.b	#234,d0
		bsr	put_element
		bsr	init_gate_open
		addq.w	#8,d1
		move.b	#235,d0
		bsr	put_element
		subq.w	#8,d1
		tst.l	old_screen
		rts

function18	subq.l	#1,total_keys
		move.b	#235,d0
		bsr	put_element
		subq.w	#8,d1
		move.b	#234,d0
		bsr	put_element
		bsr	init_gate_open
		addq.w	#8,d1
		tst.l	old_screen
		rts

function19	subq.l	#1,total_keys
		move.b	#229,d0
		bsr	put_element
		bsr	poke_new_icon
		tst.b	d0
		rts

function22	tst.w	secret_mode
		bne.s	no_grave
		cmp.w	#15,rise_man
		bne.s	no_grave
		tst.w	d1
		bmi.s	no_grave
*		tst.w	game_play_mode
*		beq.s	no_unlimit_gr
*		cmp.w	#160-16,d1
*		bge.s	no_grave
no_unlimit_gr	swap	d1
		tst.w	d1
		bmi.s	no_grave2
		cmp.w	#320-10,d1
		bge.s	no_grave2
		swap	d1

		move.l	d1,-(sp)
		and.w	#%1111111111111000,d1
		add.w	#7,d1
		move.w	d1,recary
		swap	d1
		and.w	#%1111111111110000,d1
		addq.w	#4,d1
		move.w	d1,recarx
		move.w	edit_room,recar_room
		move.l	(sp)+,d1
no_grave	rts
no_grave2	swap	d1
		rts

function25	addq.w	#1,allow_up
		rts
function26	subq.w	#1,allow_up
		rts

function35	move.b	#240,d0
		bsr	put_element
		addq.l	#1,lives
		move.l	#system_blk+$6860,d2
		bsr	rise_bonus_init
		move.b	#240,d0
		bra	poke_new_icon

tfunction43	cmp.w	#0,in_play
		ble	no_secret_bonus
		tst.w	secret_mode
		beq.	function43
		bsr	function43
		tst.w	goodies
		bne.s	no_secret_bonus
		move.l	recarx,d1
		subq.w	#8,d1
		bra	bonus10000

ttfunction43	clr.w	goodies

function43	tst.w	secret_mode
		bne.s	restore_old_rm
		cmp.w	#105,edit_room
		bne.s	normal_end
		move.w	#1,the_end_flag
		move.w	#8,manx
		move.w	#96,many
no_secret_bonus	rts

restore_old_rm	tst.w	goodies
		bne.s	no_secret_bonus
		movem.l	d0-d7/a0-a6,-(sp)
		move.w	s_goodies,goodies
		move.w	old_edit,edit_room
		move.w	old_edit,recar_room
		bsr	do_clr_off
		bsr	find_star
		clr.w	secret_mode
		movem.l	(sp)+,d0-d7/a0-a6
		bra	function22


normal_end	tst.w	king_kong
		bne.s	the_crown
		tst.w	goodies
		bne.s	no_f43
the_crown	cmp.w	#20,inter_level
		bgt.s	next_level
		jsr	fast_popup
		move.w	#1,inter_level
no_f43		rts
next_level	move.w	#1000,inter_level
		rts

function47
do_sfade_ice	tst.b	man_fall
		bne	no_more_ice
		move.b	#223,d0
		bsr	put_element
		move.l	#end_of_remove2,d6
		bsr	init_remove
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.b	#46,d0
		bsr	poke_new_icon
		move.l	(sp)+,old_screen
		bra	slip_ice

function49	addq.l	#1,potion4
		move.b	#230,d0
		bsr	put_element
		bsr	poke_new_icon
		bra	bonus50

function50	addq.l	#1,potion1
		move.b	#231,d0
		bsr	put_element
		bsr	poke_new_icon
		bra	bonus50

function51	addq.l	#1,potion2
		move.b	#232,d0
		bsr	put_element
		bsr	poke_new_icon
		bra	bonus50

spell_stand	dc.w	0
allow_up	dc.w	0
sstand_ptr	dc.w	0

sstand_id	ds.b	32

function52	addq.l	#1,potion3
		move.b	#233,d0
		bsr	put_element
		bsr	poke_new_icon

bonus50		add.l	#50,gold_coins
		move.l	#system_blk+$6880,d2
		bra	rise_bonus_init

function53	tst.b	got_ice
		bne.s	no_more_ice
		move.b	#242,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$00d001a0,d0
		move.l	#$00c300b4,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		move.b	#1,got_ice
		move.l	(sp)+,d1
		bra	bonus10000
no_more_ice	rts

function54	tst.b	got_fire
		bne.s	no_more_fire
		move.b	#243,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$00e001a0,d0
		move.l	#$00c300bd,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		addq.b	#1,got_fire
		move.l	(sp)+,d1
		bra	bonus10000
no_more_fire	rts

function55	tst.b	got_eye
		bne.s	no_more_eye
		move.b	#244,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$00f001a0,d0
		move.l	#$00d400b4,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		move.b	#1,got_eye
		move.l	(sp)+,d1
		bra	bonus10000
no_more_eye	rts

function56	tst.b	got_armour
		bne.s	no_more_armour
		move.b	#245,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$010001a0,d0
		move.l	#$00e500b4,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		move.b	#1,got_armour
		move.l	(sp)+,d1
		bra	bonus10000
no_more_armour	rts

function57	tst.b	got_cross
		bne.s	no_more_cross
		move.b	#246,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$011001a0,d0
		move.l	#$00d400bd,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		move.b	#1,got_cross
		move.l	(sp)+,d1
		bra	bonus10000
no_more_cross	rts

function58	tst.b	got_candle
		bne.s	no_more_candle
		move.b	#247,d0
		bsr	put_element
		move.l	d1,-(sp)
		bsr	poke_new_icon
		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	#$012001a0,d0
		move.l	#$00e500bd,d1
		move.l	#$00100008,d2
		bsr	sprite
		move.l	(sp)+,old_screen
		move.b	#1,got_candle
		subq.w	#1,light_on
		move.l	(sp)+,d1
		bra	bonus10000
no_more_candle	rts
		rts

function60	addq.w	#1,light_on
		move.b	#225,d0
		bsr	put_element
		bsr	put_astrib
		bra	poke_new_icon

re_light	move.b	#255,d0
		bsr	put_astrib
		bra	no_special_in

restore_f60	subq.w	#1,light_on
		move.b	#60,d0
		bsr	put_element
		bra	poke_new_icon

function62	move.b	#221,d0
		bsr	put_element
		move.w	#1,super_bonus
		bra	poke_new_icon
function63	
function64	
function65	rts



reset_game	lea	activate_demo,a0
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.w	(a0)+
		bsr	mend_room
		clr.w	in_sel_magic
		clr.w	min_buffer
reset_game2	move.w	#-1,magic_option
		lea	syst_buf,a0
do_clr_vars	clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		clr.l	(a0)+
		move.l	a0,d0
		cmp.l	#fend,d0
		blt	do_clr_vars
		move.l	#$56789,want_old_data
		move.w	#9,end_col
		clr.w	spell_seec
		clr.w	inter_level
		clr.w	the_end_flag
		clr.w	the_end_ptr
		move.l	#$002a0004,text_x
		clr.w	million
		clr.w	launch
		move.w	#15,rise_man
		clr.w	king_kong
		clr.w	in_play
		clr.b	got_ice
		clr.b	got_fire
		clr.b	got_eye
		clr.b	got_armour
		clr.b	got_cross
		clr.b	got_candle
		clr.l	gold_coins
		clr.b	joy_byte
		clr.b	no_jumpin

		move.l	#5,lives
		clr.b	total_crown
		clr.l	total_keys
		move.l	#999999,d0
		move.l	d0,olives
		move.l	d0,Ogold_coins
		move.l	d0,Ototal_keys
		move.l	d0,Opotion1
		move.l	d0,Opotion2
		move.l	d0,Opotion3
		move.l	d0,Opotion4
		clr.l	potion1
		clr.l	potion2
		clr.l	potion3
		clr.l	potion4
		clr.w	spell_seec
		lea	sstand_id,a0
		move.w	#7,d0
clr_ssid	clr.l	(a0)+
		dbra	d0,clr_ssid

		bsr	reset_the_man

*		move.w	game_play_mode,-(sp)
*		clr.w	game_play_mode
		bsr	reset_room
*		move.w	(sp)+,game_play_mode
		rts

reset_the_man	clr.w	man_dir
		clr.w	tman_dir
		clr.b	thy_slip
		clr.w	slippy
		clr.w	slip_dir
		move.w	#1,true_slip
		move.b	#1,obj_lr
		clr.w	permit_slip
*		move.l	joy_info,d0
*		tst.l	d0
*		beq.s	no_info_joy
*		move.l	d0,a0
*		clr.b	2(a0)
no_info_joy	clr.w	joy_byte


		rts

reset_room	move.w	#12,money_on
		clr.w	money_off
		move.l	#$60,money_on_pos
		clr.l	money_off_pos

		clr.w	suck_mode
		clr.b	total_rises
		clr.b	dead_counter
		clr.w	spell_repair
		clr.w	spell_see
		clr.w	super_bonus
		clr.w	fruities
		clr.w	big_money
		clr.w	bul_shot
		clr.b	Art_S  
		clr.b	majic
		move.w	#44,v1_pos
		move.w	#52,v2_pos

		move.w	#131,d0
		lea	astrib,a0
clr_atribe	clr.l	(a0)+
		dbra	d0,clr_atribe

		lea	gate_open_buf,a0
		move.w	#7,d0
clr_open_gates	
*		tst.w	game_play_mode
*		beq.s	do_clr_gate
*		move.l	vwrap_x,d1
*		add.l	d1,6(a0)
*		beq.s	no_clr_gate2
do_clr_gate	clr.l	(a0)
no_clr_gate2	add.l	#10,a0
		dbra	d0,clr_open_gates

		lea	bonus_buf,a0
		move.w	#24,d0
clr_bonus_buf	
*		tst.w	game_play_mode
do_clr_bon	clr.w	(a0)
		subq.b	#1,total_rises
the_bon_clr	adda.l	#14,a0
		addq.b	#1,total_rises
		dbra	d0,clr_bonus_buf

do_clr_fades	lea	create_fades,a2
		move.w	#15,d0
clr_fades	
*		tst.w	game_play_mode
*		beq.s	do_clr_fade
*		move.l	vwrap_x,d1
*		add.l	d1,14(a2)
*		bra.s	no_clr_fade1
do_clr_fade	clr.l	(a2)
		bra.s	no_clr_a0f
no_clr_fade1
no_clr_a0f	add.l	#18,a2
		dbra	d0,clr_fades
		
		lea	remove_buf,a0
		move.w	#7,d0
		move.l	d1,-(sp)
clr_removers
		tst.w	(a0)
		beq.s	no_clr_removie
do_clr_rem	move.l	6(a0),a1
		movem.l	a0/d0,-(sp)
		jsr	(a1)
		movem.l	(sp)+,a0/d0
		clr.w	(a0)
no_clr_removie	add.l	#18,a0
		dbra	d0,clr_removers
		move.l	(sp)+,d1
		rts

mend_room	clr.l	temp_keys
		lea	room,a0
		lea	converted,a1
		sub.l	#212,a1
		move.w	#9999,d0
		clr.w	d1
		clr.w	d2
mending		move.b	0(a0,d1.w),d2
		cmp.w	#212,d2
		blt.s	no_convert_1
		move.b	0(a1,d2.w),0(a0,d1.w)
no_convert_1	move.b	1(a0,d1.w),d2
		cmp.w	#212,d2
		blt.s	no_convert_2
		move.b	0(a1,d2.w),1(a0,d1.w)
no_convert_2	move.b	2(a0,d1.w),d2
		cmp.w	#212,d2
		blt.s	no_convert_3
		move.b	0(a1,d2.w),2(a0,d1.w)
no_convert_3	move.b	3(a0,d1.w),d2
		cmp.w	#212,d2
		blt.s	no_convert_4
		move.b	0(a1,d2.w),3(a0,d1.w)
no_convert_4	add.l	#4,a0
		dbra	d0,mending
		rts

converted	dc.b	15	;212 death gold 
		dc.b	48	;213 move icon
		dc.b	9	;214 shoot in process
		dc.b	7	;215 close trap removed
		dc.b	6	;216 close wall active
		dc.b	5	;217 secret trap used
		dc.b	4	;218 trap wall appear
		dc.b	12	;219 secret room used
		dc.b	9	;220 shot wall
		dc.b	62	;221 bonus used
		dc.b	222	;222 grass
		dc.b	47	;223 ice remove in process
		dc.b	47	;224 ice remove done
		dc.b	60	;225 touch light
		dc.b	58	;226 candle light
		dc.b	8	;227 fade wall in process
		dc.b	8	;228 fade wall done
		dc.b	19	;229 lock
		dc.b	49	;230 potion 1
		dc.b	50	;231 potion 2
		dc.b	51	;232 potion 3
		dc.b	52	;233 potion 4
		dc.b	17	;234 gate #1
		dc.b	18	;235 gate #2
		dc.b	16	;236 keys
		dc.b	15	;237 green diamond
		dc.b	14	;238 money bag
		dc.b	11	;239 crown
		dc.b	35	;240 extra man
		dc.b	24	;241 water change to ice
		dc.b	53	;242 magic power #1
		dc.b	54	;243 magic power #2
		dc.b	55	;244 magic power #3
		dc.b	56	;245 magic power #4
		dc.b	57	;246 magic power #5
		dc.b	58	;247 magic power #6
		dc.b	27	;249 cumbling wall
		dc.b	27	;250
		dc.b	27	;251
		dc.b	27	;252
		dc.b	27	;253
		dc.b	27	;254
		dc.b	27	;255
		dc.b	27
		even

stand_table	dc.l	S_freezer		;24
		dc.l	S_ladder_up		;item 25
		dc.l	S_ladder_down		;26
		dc.l	S_break_wall		;27
		dc.l	S_converoy_R		;28
		dc.l	S_converoy_R		;29
		dc.l	S_converoy_R		;30
		dc.l	S_converoy_L		;31
		dc.l	S_converoy_L		;32
		dc.l	S_converoy_L		;33
		dc.l	S_stop_icon		;34
		dc.l	S_break_wall		;>=247

touch_table	dc.l	0
		dc.l	0
		dc.l	0
		dc.l	0
		dc.l	0
		dc.l	function5	;screct trap
		dc.l	0
		dc.l	function7	;close trap
		dc.l	0		;fading wall
		dc.l	0
		dc.l	0
		dc.l	function11	;crown
		dc.l	function12	;star
		dc.l	function13	;here
		dc.l	function14	;treasure
		dc.l	function15	;diamonds
		dc.l	function16	;keys
		dc.l	0		;function17	gate #1
		dc.l	0		;function18	gate #2
		dc.l	0		;function19	lock
		dc.l	0,0
		dc.l	function22	;grave
		dc.l	0,0
		dc.l	function25	;ladder up
		dc.l	function26	;ladder down
		dc.l	0,0,0,0,0,0,0,0
		dc.l	function35	;extra man
		dc.l	0,0,0,0,0,0
		dc.l	0		;spikes
		dc.l	tfunction43	;end of level icon
		dc.l	0
		dc.l	0
		dc.l	0
		dc.l	0		;crumblerling ice
		dc.l	function48	;undefined
		dc.l	function49	;green p
		dc.l	function50	;blue p
		dc.l	function51	;red p
		dc.l	function52	;brown p
		dc.l	function53	;ice star
		dc.l	function54	;fire ball
		dc.l	function55	;eye
		dc.l	function56	;armour
		dc.l	function57	;cross		
		dc.l	function58	;candle
		dc.l	0
		dc.l	function60	;touch holder
		dc.l	0		;sun
		dc.l	function62
		dc.l	function63
		dc.l	function64
		dc.l	function65
		dc.l	0	

rise_bonus_init	tst.w	d1
		bmi.s	illage_r
		bsr	tab_xfer2
		lea	bonus_buf,a0
		clr.b	d3
next_rise_bonus	tst.w	0(a0)
		beq.s	found_blank_B
		adda.l	#14,a0
		addq.b	#1,d3
		cmp.b	#26,d3
		bne.s	next_rise_bonus
illage_r	rts

found_blank_B	move.w	#1,(a0)+
		move.l	d2,(a0)+
		move.l	d5,(a0)+
		move.l	d4,(a0)
no_overflow	addq.b	#1,total_rises
		rts

do_bonus_rise	lea	bonus_buf,a0
		move.w	#24,d0
		move.l	#160,d6
next_bonus_item	move.l	a0,a1
		tst.w	(a0)
		beq	no_rise_bonus
		addq.w	#1,(a0)
		move.w	(a0),d1
		cmp.b	#2,d1
		beq	no_rise_bonus
		cmp.b	#22,d1
		bne.s	no_max_B
		clr.w	(a0)
		subq.b	#1,total_rises
		bra	no_rise_bonus
no_max_B	cmp.b	#16,d1
		bgt	no_true_rise
		sub.l	d6,6(a0)
no_true_rise
		cmp.w	#320,10(a0)
		bge.s	no_rise_bonus
		tst.w	10(a0)
		bmi.s	no_rise_bonus

		move.w	#7,d2
		move.l	2(a0),a2
		move.l	a2,a3
		addq.l	#8,a3
		move.l	6(a0),a4
		move.l	old_screen,a5
		add.l	a4,a5
sprite_loop_B	cmp.l	#0,a4
		blt.s	not_on_screen
		cmp.l	#(144+16)*160,a4
		bgt.s	not_on_screen
		move.l	(a5),d3
		and.l	(a3),d3
		or.l	(a2),d3
		move.l	d3,(a5)
		move.l	4(a5),d3
		and.l	(a3),d3
		or.l	4(a2),d3
		move.l	d3,4(a5)
not_on_screen	add.l	d6,a2
		add.l	d6,a3
		add.l	d6,a4
		add.l	d6,a5
		dbra	d2,sprite_loop_B
no_rise_bonus	add.l	#14,a1
		move.l	a1,a0
		dbra	d0,next_bonus_item
		rts
			

tab_xfer	move.l	d1,d0
		sub.l	d5,d5
		swap	d0
		lsr.w	#4,d0
		lsl.w	#3,d0
		move.w	d0,d5
		move.w	d0,d4
		swap	d0
		and.w	#%11111000,d0
		swap	d4
		move.w	d0,d4
		mulu	#160,d0
		add.l	d0,d5
		swap	d4
		rts

tab_xfer2	bsr	tab_xfer
		swap	d4
		rts

init_fades	lea	create_fades,a0
		bsr	tab_xfer2
		add.l	#mem+$68600,d5
find_free_F	move.l	(a0),d0
		tst.l	d0
		beq.s	found_blank_F
		add.l	#18,a0
		bra.s	find_free_F
found_blank_F	move.l	d5,(a0)+
		move.l	d6,(a0)+
		move.l	d7,(a0)+
		clr.w	(a0)+
		move.l	d4,(a0)
		rts

do_exec_fades	clr.l	d0
		lea	create_fades,a0
		move.w	#15,d6
		move.l	a0,a5
do_fadeses	move.l	(a0)+,d1
		tst.l	d1
		beq	next_fadeses
		tst.w	14(a5)
		bmi	next_fadeses
		cmp.w	#320,14(a5)
		bge	next_fadeses
		tst.w	16(a5)
		bmi	next_fadeses
		cmp.w	#160,14(a5)
		bge	next_fadeses
		move.l	d1,a3
		move.l	(a0)+,a4
		move.w	12(a5),d0
		move.w	d0,d1
		and.b	#1,d0
		tst.b	d0
		bne.s	Fpause
		lsl.w	#1,d1
		lea	appear_defs,a2
		move.l	0(a2,d1.w),a2
		move.w	#7,d7
next_Fplane	move.w	#1,d3
		move.w	(a4),d0
		or.w	2(a4),d0
		or.w	4(a4),d0
		or.w	6(a4),d0
		move.w	d0,d1
		swap	d1
		move.w	d0,d1
		move.l	d1,a6
rep_spr_Fdef	move.l	(a4)+,d0
		and.l	(a2),d0
		move.l	a6,d1
		and.l	(a2),d1
		not.l	d1
		move.l	(a3),d2
		and.l	d1,d2
		or.l	d0,d2
		move.l	d2,(a3)+
		dbra	d3,rep_spr_Fdef
		add.l	#160,a2
		add.l	#152,a3
		add.l	#152,a4
		dbra	d7,next_Fplane
Fpause		addq.w	#1,12(a5)
		move.w	12(a5),d0
		cmp.w	#$f,d0
		blt.s	next_fadeses
		clr.l	(a5)
next_fadeses	add.l	#18,a5
		move.l	a5,a0
		dbra	d6,do_fadeses	
		rts

init_remove	bsr	tab_xfer2
		add.l	#mem+$68600,d5
		lea	remove_buf,a0
find_remove	tst.w	(a0)
		beq.s	found_f_rem
		add.l	#18,a0
		bra.s	find_remove
found_f_rem	move.w	#1,(a0)+
		move.l	d5,(a0)+
		move.l	d6,(a0)+
		move.l	d1,(a0)+
		move.l	d4,(a0)
		rts

do_remove	lea	remove_buf,a0
		move.w	#7,d0
remove_item	tst.w	(a0)
		beq	non_remove_i

		addq.w	#1,(a0)
		move.w	(a0),d1
		cmp.w	#16,d1
		beq.s	finish_remove
		move.l	2(a0),a1
		subq.w	#1,d1
		move.w	d1,d2
		and.w	#1,d2
		tst.w	d2
		bne.s	non_remove_i
		lsl.w	#1,d1
		lea	appear_defs,a2
		move.l	0(a2,d1.w),a2
		move.w	#7,d7
		tst.w	14(a0)
		bmi.s	non_remove_i
		cmp.w	#320,14(a0)
		bge.s	non_remove_i
		cmp.w	#160,16(a0)
		bge.s	non_remove_i
make_remove	move.l	(a2),d4
		not.l	d4
		and.l	d4,(a1)+
		and.l	d4,(a1)+
		add.l	#160,a2
		add.l	#152,a1
		dbra	d7,make_remove
		bra.s	non_remove_i
finish_remove	move.w	d0,-(sp)
		clr.w	(a0)
		move.l	6(a0),a1
		move.l	a0,a5
		move.l	a0,-(sp)
		jsr	(a1)
		move.l	(sp)+,a3
		tst.w	14(a3)
		bmi.s	non_remove_i2
		cmp.w	#320,(a3)
		bge.s	non_remove_i2
		tst.w	16(a3)
		bmi.s	non_remove_i2
		cmp.w	#160,16(a3)
		bge.s	non_remove_i2
		move.l	#system_blk+$7d00*2,a0
		move.l	2(a3),a1	;a5
		jsr	bound_sprite
		move.w	(sp)+,d0
non_remove_i2	move.l	a3,a0
non_remove_i	add.l	#18,a0
		dbra	d0,remove_item
		rts

end_of_remove1	move.l	10(a0),d1
		move.b	#228,d0
		bra	put_element

end_of_remove2	move.l	10(a0),d1
		move.b	#224,d0
		bra	put_element

end_of_remove3	move.l	10(a0),d1
		move.b	#220,d0
		bra	put_element


init_gate_open	bsr	tab_xfer2
		add.l	#mem+$68602,d5
		lea	gate_open_buf,a0
find_a_gate	tst.w	(a0)
		beq.s	free_gate
		add.l	#10,a0
		bra.s	find_a_gate
free_gate	move.w	#1,(a0)+
		move.l	d5,(a0)+
		move.l	d4,(a0)
		rts

do_gate_open	lea	gate_open_buf,a0
		move.w	#7,d0
open_the_gate	tst.w	(a0)
		beq.s	no_gate
		tst.w	6(a0)
		bmi.s	no_gate
		cmp.w	#320,6(a0)
		bge.s	no_gate
		addq.w	#1,(a0)
		move.w	(a0),d1
		cmp.w	#16,d1
		beq.s	gate_over
		move.w	d1,d2
		move.l	#system_blk+$7d00+$7300,a1
		move.l	a1,a2
		add.l	#10,a2
		move.l	2(a0),a3
		move.w	d2,d1
		subq.l	#1,d1
make_gate	add.l	#160,a2
		dbra	d1,make_gate
		move.w	#15,d1
draw_gate	move.w	(a3),d3
		and.w	(a1),d3
		move.l	a3,a5
		cmp.w	d1,d2
		bgt	no_gate_bars
		move.w	(a2),d4
		move.w	(a1),d5
		not.w	d5
		and.w	d5,d4
		or.w	d4,d3
		add.l	#160,a2
no_gate_bars	move.w	d3,(a5)
		add.l	#160,a1
		add.l	#160,a3
		dbra	d1,draw_gate
		bra.s	no_gate
gate_over	clr.w	(a0)
no_gate		add.l	#10,a0
		dbra	d0,open_the_gate
		rts

bonus10000	add.l	#10000,gold_coins
		cmp.b	#24,total_rises
		bgt	no_showB
		move.l	d1,d0
		swap	d0
		cmp.w	#304,d0
		blt.s	point_fineB
		sub.l	#$00100000,d1
point_fineB	move.l	#system_blk+$68c0,d2
		bsr	rise_bonus_init
		add.l	#$00100000,d1
		move.l	#system_blk+$68d0,d2
		bsr	rise_bonus_init
no_showB	rts

bonus50000	add.l	#50000,gold_coins
		cmp.b	#24,total_rises
		bgt.s	no_showB50
		move.l	d1,d0
		swap	d0
		cmp.w	#304,d0
		blt.s	point_fineB50
		sub.l	#$00100000,d1
point_fineB50	move.l	#system_blk+$68e0,d2
		bsr	rise_bonus_init
		add.l	#$00100000,d1
		move.l	#system_blk+$68f0,d2
		bra	rise_bonus_init
no_showB50	rts

burn_outline	move.w	#23,d0
		lea	kill_pos,a3
clr_kill_me	clr.l	(a3)+
		clr.l	(a3)+
		clr.l	(a3)+
		clr.l	(a3)
		add.l	#148,a3
		dbra	d0,clr_kill_me
		move.l	spman,d0
		add.l	man_dead,d0
		move.l	d0,spdata
		move.l	manx,xxx
ok_hashy	move.w	man_yoff,d0
		add.w	d0,yyy
		clr.l	d7
		move.w	rise_man,d7
		bsr	get_duck

		clr.l	d0
		clr.l	d1
		clr.l	d2
		lea	list,a3
		move.w	(a3)+,d2	;xxx
		move.w	(a3)+,d1	;yyy
		move.l	(a3)+,a0
		move.l	(a3)+,a2
		move.l	old_screen,a1

		add.w	#16,d2
		move.w	d2,d0		;get x
		andi.w	#$fff0,d2	;mask out small bits
		lsr.w	#1,d2		;convert to screen map
		andi.w	#$000f,d0	;mask out big bits

		add.l	d2,a1
		subq.w	#8,a1
		add.w	#16,d1
		mulu	#160,d1
		add.l	d1,a1
		sub.l	#160*16,a1
		move.w	#16,d1
		sub.w	d0,d1
		move.l	#160,a4
		move.w	manx,d5
		move.w	d5,d6
		tst.w	d5
		bpl.s	goes_one
		clr.w	d5
		bra.s	goes_two
goes_one	move.w	#1,d5
goes_two	cmp.w	#310,d6
		bgt	Oheight
		clr.w	d6
Oheight		clr.l	d2
Olength		move.w	yyy,d1
		tst.w	d1
		bmi.s	skip_hash2
		cmp.w	#160,d1
		bcc.s	skip_hash2
		move.w	(a2),d2
		or.w	2(a2),d2
		or.w	4(a2),d2
		or.w	6(a2),d2
		not.l	d2
		ror.l	d0,d2
		tst.w	d5
		beq.s	skip_hash1
		and.w	d2,(a1)
		and.w	d2,2(a1)
		and.w	d2,4(a1)
		and.w	d2,6(a1)
skip_hash1
		swap	d2
		tst.w	d6
		bne.s	skip_hash2
		and.w	d2,8(a1)
		and.w	d2,10(a1)
		and.w	d2,12(a1)
		and.w	d2,14(a1)
skip_hash2	addq.w	#1,yyy
		add.l	a4,a1
		add.l	a4,a2
		add.l	a4,a3
		dbra	d7,Oheight
no_chk_ol	rts

burn_outline2	move.l	manx,xxx
		move.w	man_yoff,d0
		add.w	d0,yyy
		clr.l	d7
		move.w	rise_man,d7
		bsr	get_duck

		clr.l	d0
		clr.l	d1
		clr.l	d2
		move.w	xxx,d2	;xxx
		move.w	yyy,d1	;yyy
		move.l	old_screen,a1

		add.w	#16,d2
		move.w	d2,d0		;get x
		andi.w	#$fff0,d2	;mask out small bits
		lsr.w	#1,d2		;convert to screen map
		andi.w	#$000f,d0	;mask out big bits

		add.l	d2,a1
		subq.w	#8,a1
		add.w	#16,d1
		mulu	#160,d1
		add.l	d1,a1
		sub.l	#160*16,a1
		move.w	#16,d1
		sub.w	d0,d1
		move.l	#160,a4
		lea	kill_pos,a3
		move.w	many,d5
		and.w	#7,d5
		mulu	#160,d5
		add.l	d5,a3
		move.w	manx,d5
		move.w	d5,d6
		tst.w	d5
		bpl.s	goes_one2
		clr.w	d5
		bra.s	goes_two2
goes_one2	move.w	#1,d5
goes_two2	cmp.w	#310,d6
		bgt.s	Oheight2
		clr.w	d6
Oheight2	clr.l	d2
Olength2	move.w	yyy,d1
		tst.w	d1
		bmi.s	skip_hash22
		cmp.w	#160,d1
		bcc.s	skip_hash22
		tst.w	d5
		beq.s	skip_hash12
		move.l	(a1),(a3)
		move.l	4(a1),4(a3)
skip_hash12	swap	d2
		tst.w	d6
		bne.s	skip_hash22
		move.l	8(a1),8(a3)
		move.l	12(a1),12(a3)
skip_hash22	addq.w	#1,yyy
		add.l	a4,a1
		add.l	a4,a3
		dbra	d7,Oheight2
		rts

get_duck	tst.w	joy_climb
		beq.s	no_climbie
		move.l	#system_blk+$7d00*2+$45f0,spdata
		move.w	ani_climb,d0
		andi.w	#3,d0
		cmp.w	#1,d0
		ble.s	chr_off_climb
		rts

no_climbie	tst.w	joy_duck
		beq.s	no_duckie
		move.l	#system_blk+$7d00*2+$45e0,spdata
		tst.w	tman_dir
		bne.s	no_duckie
chr_off_climb	addq.l	#8,spdata
no_duckie	rts

check_outline	tst.l	man_dead
		bne	no_chk_ol
		move.l	spman,d0
		add.l	man_dead,d0
		move.l	d0,spdata
		move.l	manx,xxx
		move.w	man_yoff,d0
		add.w	d0,yyy
		clr.l	d7
		move.w	rise_man,d7
		bsr	get_duck

		clr.l	d0
		clr.l	d1
		clr.l	d2
		lea	list,a3
		move.w	(a3)+,d2
		move.w	(a3)+,d1
		move.l	(a3)+,a0
		move.l	(a3)+,a2
		lea	kill_pos,a1
		and.w	#7,d1
		mulu	#160,d1
		add.l	d1,a1
		move.w	d2,d0
		andi.w	#$000f,d0	;mask out big bits

Oheight22	clr.l	d2
Olength22	move.w	(a2),d2
		or.w	2(a2),d2
		or.w	4(a2),d2
		or.w	6(a2),d2
		ror.l	d0,d2

		move.w	(a1)+,d4
		or.w	(a1)+,d4
		or.w	(a1)+,d4
		or.w	(a1)+,d4
		and.w	d2,d4
		tst.w	d4
		bne.s	init_ydead
		swap	d2
		move.w	(a1)+,d4
		or.w	(a1)+,d4
		or.w	(a1)+,d4
		or.w	(a1)+,d4
		and.w	d2,d4
		tst.w	d4
		bne.s	init_ydead
		add.l	#160-8-8,a1
		add.l	#160,a2
		dbra	d7,Oheight22
		rts	

init_ydead	move.l	#system_blk+$7d00*2+$4560,spman
		clr.l	mandirpos
		move.b	#1,dead_counter
man_deadleft	move.l	#$50,man_dead
		rts



old_mfall	dc.b	0
many_up		dc.b	0
tmany		dc.w	0
inside_ss	dc.b	0
old_mfall2	dc.b	0
majic		dc.b	0
		even
force_spring	dc.w	0
jump_extend	dc.w	0
in_spring	dc.w	0

icon_scont	tst.w	inter_level
		beq.s	sure_sicon
		rts

sure_sicon	move.b	man_fall,old_mfall
		move.b	man_fall,old_mfall2
		clr.b	no_jumpin
		clr.b	Art_S
		tst.b	man_fall
		beq.s	no_fallin_dn
		cmp.b	#18,man_fall		;was 18 benny
		blt	crash_more

no_fallin_dn	tst.b	majic
		bne	hi_pro
		lea	top_stand,a0
		lea	act_buf,a6
		bsr	init_sicon
		lea	swapped_defs,a5
		move.w	(a5)+,d5
		clr.l	d3
Zicon_standing	lea	top_stand,a0
		move.w	d5,d3
		lsr.w	#1,d3
		add.w	d3,a0
		
		move.w	4(a0),d6
		tst.w	d6
		beq	no_stand_ic		;????
		move.w	2(a6,d5.w),d3		;get x
		cmp.w	d3,d2			;is manx+10 > x
		ble	no_stand_ic		;no so failed
		add.w	#16,d3			;x += 16
		cmp.w	d3,d1			;is manx > x + 16
		bge	no_stand_ic		;yes so failed

		lea	act_buf,a3
		move.w	#%0111111110000000,d7
		sub.w	#16,d3			;x -= 16
		cmp.w	d3,d1			;x <= manx
		ble.s	shift_feets_l		;rotate left routine
		move.w	manx,d6
		sub.w	d3,d6
		lsr.w	d6,d7
		cmp.w	#1,$6(a3)
		bne.s	no_feetsl
		lsl.w	#1,d7
no_feetsl	and.w	4(a0),d7
		tst.w	d7
		beq	no_stand_ic
		bra.s	no_shift_feets

shift_feets_l
		sub.w	manx,d3		;sub obj x with man x
nopi		lsl.w	d3,d7		;shift result right
		cmp.w	#-1,$6(a3)
		bne.s	no_feetsr
		lsr.w	#1,d7
no_feetsr
		and.w	4(a0),d7
		tst.w	d7
		beq	no_stand_ic

no_shift_feets
untest		cmp.w	#1,$8(a6)
		beq.s	up_only_stand

		move.w	d4,d7
		subq.w	#1,d7
		move.w	4(a6,d5.w),d6
		cmp.w	d7,d6
		blt	no_stand_ic
		addq.w	#2,d7
		cmp.w	d7,d6
		bgt	no_stand_ic
		bra.s	make_certain

up_only_stand	move.w	d4,d7
		subq.w	#2,d7
		move.w	4(a6,d5.w),d6
		cmp.w	d7,d6
		blt	no_stand_ic
		addq.w	#3,d7
		cmp.w	d7,d6
		bgt	no_stand_ic	

make_certain	cmp.w	4(a6,d5.w),d4
		beq	yes_stand_ic
		bgt.s	yes_stand_ic2

yes_stand_ic3	move.w	many,d6
		movem.l	a0/d5/d6,-(sp)
		clr.b	man_fall
		bsr	permit_fall
		tst.b	old_mfall
		beq.s	chk_shifty
		move.b	#1,no_jumpin
		bra.s	chk_shifty

yes_stand_ic2	movem.l	d0-d4,-(sp)
		move.l	manx,d1
		bsr	man_standing
		bne.s	no_ficonC
		movem.l	(sp)+,d0-d4
		lea	act_buf,a1
		move.w	4(a1,d5.w),d1
		cmp.w	2(a0),d1
		bgt	no_stand_ic
		bra.s	yes_ficonC
no_ficonC	movem.l	(sp)+,d0-d4
yes_ficonC	move.w	many,d6
		movem.l	a0/d5/d6,-(sp)
		clr.b	man_fall
		addq.w	#1,permit_flip
		bsr	permit_rise
		subq.w	#1,permit_flip

chk_shifty	clr.b	man_fall
		movem.l	(sp)+,a0/d5/d6
		cmp.w	many,d6
		beq	no_stand_ic
		move.w	many,d4
		add.w	#16,d4
		bra	make_certain

yes_stand_ic	tst.w	done_once
		bne.s	got_once
		cmp.w	#9,d0
		beq.s	got_once
		lea	swapped_defs,a4
		move.w	#9,d6
		sub.w	d0,d6
		lsl.w	#1,d6
		move.w	0(a4,d6.w),d3
no_rota_swap	subq.w	#2,d6
		move.w	0(a4,d6.w),2(a4,d6.w)
		tst.w	d6
		bne.s	no_rota_swap
		move.w	d3,(a4)
		addq.w	#1,done_once

got_once	lea	act_buf,a1
		move.b	0(a1,d5.w),d1
		cmp.b	#10,d1
		beq.s	no_rest_soft
		cmp.b	#22,d1
		beq.s	no_rest_soft
		cmp.b	#20,d1
		bne.s	no_rest_hard
no_rest_soft	move.b	#25,man_fall
		cmp.b	#22,d1
		bne.s	no_rest_hard
		tst.b	$f(a1,d5.w)
		bne.s	no_rest_hard
		tst.b	old_mfall
		beq.s	no_rest_hard
		move.b	#16,$f(a1,d5.w)
		move.w	#1,force_spring
		clr.w	d1
		move.b	old_mfall,d1
		cmp.w	#22,d1
		bgt.s	no_man4
		move.w	#22,jump_extend
		bra.s	no_rest_hard
no_man4		cmp.w	#30,d1
		bgt.s	no_man3
		move.w	#26,jump_extend
		bra.s	no_rest_hard
no_man3		cmp.w	#50,d1
		bgt.s	no_man2
		move.w	#34,jump_extend
		bra.s	no_rest_hard
no_man2		move.w	#48,jump_extend
no_rest_hard	
		
		bsr	reset_fall
		move.b	#1,Art_S
		

		lea	act_buf,a1
		move.b	0(a1,d5.w),d1
		move.b	d1,which_obj
		move.w	d5,which_ico
		cmpi.b	#10,d1
		bne.s	over_shifty
		tst.b	old_mfall
		beq.s	over_shifty
		move.b	#16,$e(a1,d5.w)
over_shifty	cmpi.b	#20,d1
		bne.s	over_shifty2
		tst.b	$f(a1,d5.w)
		bne.s	over_shifty2
		addq.b	#1,$f(a1,d5.w)
over_shifty2	clr.b	old_mfall
		tst.b	first_timer
		bne	crash_more
		move.w	$2(a1,d5.w),d0
		clr.b	man_fall
		cmp.b	#5,0(a1,d5.w)
		beq	crash_more
		move.w	(a0),d3
		cmp.w	d3,d0
		beq	crash_more
		move.l	mandirpos,-(sp)
		move.l	spman,-(sp)
		move.w	man_dir,-(sp)
		move.w	man_ani,-(sp)
		cmp.b	#41,d1
		beq.s	reset_stk_icon
		cmp.b	#46,d1
		blt.s	nreset_stk_icon
		cmp.b	#49,d1
		ble.s	reset_stk_icon

nreset_stk_icon	cmp.w	d3,d0
		bgt.s	pright
		bsr	permit_left
		bra.s	reset_stk_icon
pright		bsr	permit_right
reset_stk_icon	move.w	(sp)+,man_ani
		move.w	(sp)+,man_dir
		move.l	(sp)+,spman
		move.l	(sp)+,mandirpos
		rts
	
first_timer	dc.b	0
which_obj	dc.b	0
done_once	dc.w	0
real_refs	dc.w	144,128,112,96,80,64,48,32,16,0
swapped_defs	dc.w	144,128,112,96,80,64,48,32,16,0

		even

no_stand_ic
		move.w	(a5)+,d5
		dbra	d0,Zicon_standing

hi_pro		clr.b	majic
		clr.b	many_up
		move.w	many,tmany
		clr.b	man_fall
		addq.w	#1,permit_flip
		bsr	permit_rise
		subq.w	#1,permit_flip
		move.w	many,d0
		cmp.w	tmany,d0
		beq.s	diti_gup
		addq.b	#1,many_up
		addq.w	#1,many
diti_gup	move.b	old_mfall2,man_fall
		bsr	init_sicon
is_sstand	move.w	edit_room,d6
		cmp.w	4(a2,d5.w),d6
		bne.s	is_no_sstand
		move.w	2(a2,d5.w),d6
		cmp.w	d6,d4
		beq.s	is_yes_sstand
		addq.w	#1,d6
		cmp.w	d6,d4
		bne.s	is_no_sstand
	
is_yes_sstand	move.w	0(a2,d5.w),d6
		cmp.w	d6,d2
		ble.s	is_no_sstand
		add.w	#16,d6
		cmp.w	d6,d1
		bge.s	is_no_sstand
		subq.w	#1,6(a2,d5.w)
		tst.w	6(a2,d5.w)
		bne.s	ok_sstand
		clr.w	4(a2,d5.w)
		move.w	d5,sstand_ptr
		bra.s	is_no_sstand
ok_sstand	move.b	#1,Art_S
		bsr	reset_fall
		move.b	#1,majic
		move.b	#-1,jump_dir
		rts

init_sicon	move.w	#9,d0
		move.w	manx,d1
		move.w	d1,d2
		add.w	#10,d2
		move.w	many,d4
		add.w	#16,d4
		clr.w	d5
		lea	sstand_id,a2
		rts

is_no_sstand	addq.w	#8,d5
		cmp.w	#8*4,d5
		bne	is_sstand
	
benny_skippy

crash_more	rts

flick_light_off	move.b	sys_not,d0
		and.b	#3,d0
		cmp.b	#2,d0
		bge	no_flicker
		move.w	#199,d0
		lea	astrib+45,a0
		clr.w	d4
		move.b	sys_not,d1
		and.b	#1,d1
		beq.s	do_line_2_lf

		clr.w	d1
		clr.w	d5
		bra.s	do_check_lf

do_line_2_lf	move.w	#22,d1
		move.w	#8,d5


do_check_lf	move.b	0(a0,d1.w),d2
		move.b	d2,d3
		and.b	#%11110000,d2
		and.b	#%1111,d3
		tst.b	d3
		beq.s	lf_out

		subq.b	#1,d3
		or.b	d3,d2
		move.b	d2,0(a0,d1.w)
		tst.b	d3
		bne.s	lf_out
		subq.w	#1,light_on

		movem.l	d0-d5/a0,-(sp)
		move.w	d4,d1
		swap	d1
		move.w	d5,d1
		move.w	#60,d0
		bsr	put_element
		bsr	poke_new_icon
		movem.l	(sp)+,d0-d5/a0

lf_out		add.w	#16,d4
		cmp.w	#320,d4
		bne.s	no_over_flow_lf
		clr.w	d4
		add.w	#16,d5
		add.w	#24,d1
no_over_flow_lf	addq.w	#1,d1
		dbra	d0,do_check_lf
no_flicker	rts

draw_the_end	tst.w	the_end_flag
		beq	no_end
		tst.w	million
		beq.s	no_million
		subq.w	#1,million
		add.l	#9999,gold_coins
		cmp.w	#40,million
		bne.s	no_million
		addq.w	#1,launch
no_million
		move.w	end_col,col1
		lea	the_end_text,a1
ok_again_end	move.w	the_end_ptr,d1
		move.b	0(a1,d1.w),d2
		tst.b	d2
		beq	no_end_set_mill
		cmp.b	#255,d2
		bne.s	no_return_end
		addq.w	#1,the_end_ptr
		move.l	text_x,d4
		swap	d4
		move.w	#$002c,d4
		swap	d4
		add.w	#9,d4
		move.l	d4,text_x
		bra.s	ok_again_end
no_return_end	cmp.b	#252,d2
		bne.s	true_text_dr
		clr.w	d2
		move.b	1(a1,d1.w),d2
		move.w	d2,col1
		move.w	d2,end_col
		addq.w	#2,the_end_ptr
		bra.s	ok_again_end
true_text_dr	move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		move.l	text_x,d0
		lea	char_one,a0
		move.b	d2,(a0)
		bsr	print_text
		add.l	#$00060000,text_x
		addq.w	#1,the_end_ptr
		move.l	(sp)+,old_screen
		cmp.b	#32,d2
		beq	ok_again_end
		move.w	#15,col1
no_end		rts

no_end_set_mill	tst.w	launch
		bne.s	no_end
		addq.w	#1,launch
		move.w	#100,million
		add.l	#100,gold_coins
		rts

char_one	dc.b	'A',0

the_end_text	dc.b	'            CONGRATULATIONS!',255,255,252,4
		dc.b	'YOU HAVE ACHIEVED THE NEAR IMPOSSIBLE',255
		dc.b	'   MISSION AND YOU TRULY DESERVE AN',255
		dc.b	'     EXTRA ONE MILLION GOLD COINS.',0

		even

* in_play 0=no 1=start 2=rise 10=playing 20=finish round

game_control	cmpi.w	#1,in_play
		beq.s	find_here
no_game		rts

find_star	move.b	#12,d7
		bra.s	do_find_hs

find_here	move.b	#13,d7
do_find_hs	jsr	is_it_complete
		bne.s	baddy_designed
		move.w	edit_room,d0
		subq.w	#1,d0
		mulu	#400,d0
		add.l	#room,d0
		move.l	d0,a0
		move.l	a0,a1
		move.l	#399,d0
search_ere	cmp.b	0(a0,d0.w),d7
		beq.s	found_ere
		dbra	d0,search_ere
baddy_designed	move.w	#105,edit_room
		move.w	#105,recar_room
		bra.s	find_here

found_ere	tst.w	secret_mode
		beq.s	no_chn_star
		cmp.b	#13,d7
		beq.s	no_chn_star
		move.b	#219,0(a0,d0.w)
no_chn_star	add.l	a0,d0
		sub.l	a1,d0
		divu	#20,d0
		move.w	d0,d1
		lsl.w	#3,d1
		addq.w	#7,d1
		move.w	d1,many
		move.w	d1,recary
		swap	d0
		lsl.w	#4,d0
		addq.w	#4,d0
		move.w	d0,manx
		move.w	d0,recarx
		clr.w	rise_man
		jsr	show_room
		move.b	#1,un_click
		bsr	reset_the_man
		bsr	reset_room
		move.w	#2,in_play
		bsr	config_joy
		bsr	init_man2
		move.w	t_light_on,light_on
		jsr	copy_O_to_W
		jsr	print_room_name
		tst.w	secret_mode
		beq	to_a_rts
		bra	do_clr_on

init_man2	move.w	recar_room,d0
		cmp.w	edit_room,d0
		beq.s	init_man
		move.w	d0,edit_room
		jsr	show_room
		move.w	t_light_on,light_on
		jsr	copy_O_to_W
		jsr	print_room_name

init_man	clr.w	started_shadow
		clr.w	shadow_ptr
		clr.w	in_spring
		clr.w	force_spring
		move.l	manx,old_man_x
		clr.w	rise_man
		move.w	recarx,manx
		move.w	recary,many
		bra.s	no_reset_light
why_not		move.w	t_light_on,light_on
no_reset_light	move.w	#1,tman_dir
		clr.l	mandirpos
		clr.b	dead_counter
		move.w	#4,man_ani
		move.l	#$7d00*2+system_blk+$4568,spman
		move.b	#1,man_dir
		clr.b	man_fall
		move.w	#1,slip_dir
		clr.w	man_yoff
		clr.l	man_dead
		clr.w	joy_climb
		move.l	d6,d1
		move.b	#-1,jump_dir
		move.b	#22,priority
		move.w	#60,blipper
		move.l	#joy_read,-(sp)
		clr.w	-(sp)
		move.w	#25,-(sp)
		trap	#14
		addq.l	#8,sp
		bsr	man_standing

		lea	act_buf,a1
		lea	true_pos,a2
		move.w	#9,d0
copy_old_pos	cmp.b	#47,(a1)
		bne.s	no_copy_old
		move.l	(a2),2(a1)
no_copy_old	add.l	#16,a1
		addq.l	#4,a2
		dbra	d0,copy_old_pos
		rts

blipper		dc.w	0

display_gover	clr.w	in_sel_magic
		cmp.b	#100,dead_counter
		bge.s	jump_quick
		move.w	#500,light_on
		move.l	#system_blk+$78+$2760,a0
		move.l	old_screen,a1
		add.l	#$40+$500*8,a1
		move.l	#system_blk+$78+$3520,a2
		move.l	a1,a3
		add.l	#$3520-$2760,a3
		clr.w	d1
		move.b	dead_counter,d1
		cmp.w	#25,d1
		ble.s	no_go_ok
		sub.w	#25,d1
		cmp.w	#22,d1
		blt.s	go_lines
		move.w	#22,d1
go_lines	move.w	#9,d0
go_loop		move.l	(a0)+,(a1)+
		move.l	(a2)+,(a3)+
		dbra	d0,go_loop
		add.l	#120,a0
		add.l	#120,a1
		sub.l	#200,a2
		sub.l	#200,a3
		dbra	d1,go_lines
no_go_ok	rts


jump_quick	addq.l	#4,sp
		clr.b	priority
		clr.w	secret_mode
		move.w	save_edit,edit_room
		jsr	first_time_room
		clr.w	in_play
		jmp	main_pg

repair_room	tst.w	in_play
		beq.s	no_go_ok
		clr.l	d1
		move.b	dead_counter,d1
		cmp.w	#2,d1
		bne.s	no_go_ok
		tst.l	lives
		beq.s	no_go_ok
		tst.w	spell_repair
		bne.s	no_go_ok
		move.w	#1,spell_repair
to_a_rts	rts

spells		cmp.b	#20,priority
		blt	no_spellies
until_repaired
		tst.w	spell_repair
		beq	next_spell
		bsr	do_clr_fades
		clr.w	spell_repair
		move.l	#spells_repairs,trap_poke+2
		bsr	untrap
		bra	next_spell
		
spells_repairs	cmp.b	#223,d2
		beq.s	poke_new_ice
		cmp.b	#224,d2
		beq.s	poke_new_ice
		cmp.w	#248,d2
		bge.s	poke_new_crumb
		cmp.w	#227,d2
		beq.s	poke_new_fade
		cmp.w	#228,d2
		beq.s	poke_new_fade
		cmp.b	#241,d2
		beq.s	poke_new_water
		bra.s	main_repair
poke_new_ice	move.b	#47,d0
		move.b	d0,0(a5,d3.w)
		tst.w	spell_seec
		bne.s	not_see_p1
		subq.w	#1,d0
not_see_p1	bsr	poke_new_icon
		bra.s	main_repair2
poke_new_crumb	move.b	#27,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra.s	main_repair2
poke_new_water	move.b	#24,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra.s	main_repair2
poke_new_fade	move.b	#8,d0
		move.b	d0,0(a5,d3.w)
		tst.w	spell_seec
		bne.s	not_see_p2
		move.b	#1,d0
not_see_p2	bsr	poke_new_icon
main_repair2	lea	astrib,a1
		tst.b	0(a1,d3.w)
		bpl	back_in
		and.b	#%01111111,0(a1,d3.w)
		subq.w	#1,fruities
main_repair	bra	back_in

next_spell	tst.w	super_bonus
		beq.s	no_fruities
		bsr	supa_bonus
no_fruities	tst.w	spell_see
		beq.s	next_spell2
		clr.w	spell_see
		move.w	#1000,spell_seec
		move.l	#restore_see,trap_poke+2
		bsr	untrap

next_spell2	tst.w	spell_seec
		beq.s	next_spell2b
		subq.w	#1,spell_seec
		tst.w	spell_seec
		bne.s	next_spell2b
		move.l	#un_restore_see,trap_poke+2
		bsr	untrap
next_spell2b	tst.w	spell_stand
		beq.s	next_spell3
		move.w	many,d0
		cmp.w	#0,d0
		ble.s	next_spell3
		clr.w	spell_stand
		lea	sstand_id,a1
		move.w	sstand_ptr,d1
		move.w	d0,d2
		andi.w	#1,d2
		tst.w	d2
		beq.s	ok_ypos_ss
		subq.w	#1,d0
ok_ypos_ss	move.w	d0,2(a1,d1.w)
		move.w	manx,d2
		cmp.w	#2,d2
		blt.s	no_mid_ss
		subq.w	#2,d2
no_mid_ss	cmp.w	#320-16,d2
		ble.s	no_mid_ss2
		move.w	#320-16,d2
no_mid_ss2	move.w	d2,0(a1,d1.w)
		move.w	edit_room,4(a1,d1.w)
		move.w	#160,6(a1,d1.w)
		addq.w	#8,sstand_ptr
		cmp.w	#8*4,sstand_ptr
		bne.s	next_spell3
		clr.w	sstand_ptr
next_spell3	lea	sstand_id,a1
		move.l	#$7d00+system_blk+$2d40,spdata
		clr.w	d1
		move.w	#3,d2
draw_sstand	move.w	4(a1,d1.w),d3
		cmp.w	edit_room,d3
		bne.s	no_sstands
		move.l	0(a1,d1.w),xxx

		movem.l	d1-d2/a1,-(sp)
		moveq.l	#2,d7
		bsr	ssprite3
no_more_sst	movem.l	(sp)+,a1/d1-d2
no_sstands	addq.w	#8,d1
		dbra	d2,draw_sstand
		
no_spellies
		rts

restore_see	cmp.w	#48,d2
		beq.s	valid_see
		cmp.w	#20,d2
		beq.s	valid_see
		cmp.w	#47,d2
		beq.s	valid_see
		cmp.w	#1,d2
		ble	back_in
		cmp.w	#10,d2
		bge	back_in
valid_see	move.w	d2,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in

restore_flips	cmp.w	#44,d2
		beq.s	flip_over1
		cmp.w	#45,d2
		beq.s	flip_over2
		cmp.w	#210,d2
		beq.s	flip_over3
		cmp.w	#209,d2
		beq.s	flip_over4
		bra	back_in
flip_over1	move.b	#210,d0
flip_overs	move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in
flip_over2	move.b	#209,d0
		bra	flip_overs
flip_over3	move.b	#44,d0
		bra	flip_overs
flip_over4	move.b	#45,d0
		bra	flip_overs

restore_con	cmp.w	#28,d2
		blt	back_in
		cmp.w	#33,d2
		ble.s	flip_con_1
		cmp.w	#203,d2
		blt	back_in
		cmp.w	#208,d2
		bgt	back_in
		sub.b	#203-28,d2
		move.b	d2,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in
flip_con_1	add.b	#203-28,d2
		move.b	d2,d0
		bra.s	flip_overs

restore_sec	cmp.w	#4,d2
		beq.s	un_sol1
		cmp.w	#218,d2
		bne	back_in
		move.b	#1,d0
		move.b	d0,d2
		move.b	#4,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in
un_sol1		move.b	#218,d0
		bra	flip_overs

restore_lad	cmp.w	#25,d2
		beq.s	un_lad1
		cmp.w	#26,d2
		beq.s	un_lad2
		cmp.w	#201,d2
		beq.s	un_lad3
		cmp.w	#202,d2
		bne	back_in
		move.b	#26,d0
		bra	flip_overs
un_lad1		move.b	#201,d0
		bra	flip_overs
un_lad2		move.b	#202,d0
		bra	flip_overs
un_lad3		move.b	#25,d0
		bra	flip_overs

un_restore_see	cmp.w	#48,d2
		beq.s	null_icon
		cmp.w	#20,d2
		beq.s	null_icon
		cmp.w	#47,d2
		beq.s	null_ice
		cmp.w	#1,d2
		ble	back_in
		cmp.w	#10,d2
		bge	back_in
		subq.w	#2,d2
		lea	convert_asc,a1
		move.b	0(a1,d2.w),d0
		bsr	poke_new_icon
		bra	back_in

restore_walls	cmp.w	#6,d2
		beq.s	un_wall1
		cmp.w	#216,d2
		bne	back_in
		clr.w	d0
		move.b	#6,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in
un_wall1	move.b	#216,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in

null_icon	clr.b	d0
		bsr	poke_new_icon
		bra	back_in

null_ice	move.b	#46,d0
		bsr	poke_new_icon
		bra	back_in
		
convert_asc	dc.b	1,0,1,0,1,0,1,1
		even

untrap		bsr	init_dirty
		clr.l	d1
		move.w	#9999,d7
untrap_trap	move.w	d7,-(sp)
		bsr	dirty_calc
		clr.w	d2
		move.b	0(a5,d3.w),d2
trap_poke	jmp	$ffffff

ph1		cmp.w	#5,d2
		bne.s	poke_no_sw
ph2		move.w	#217,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra.s	poke_no_wall
poke_no_sw
ph3		cmp.w	#4,d2
		bne.s	poke_no_wall
ph4		move.w	#218,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
poke_no_wall

back_in		swap	d1
		add.w	#$10,d1
		cmp.w	#$140,d1
		blt.s	reset_untrap2
		sub.w	#$140,d1
		swap	d1
		addq.w	#8,d1
		cmp.w	#$a0,d1
		blt.s	reset_untrap3
		move.w	(sp)+,d7
		addq.w	#1,done_trap
		rts

reset_untrap2	swap	d1
reset_untrap3	move.w	(sp)+,d7
		dbra	d7,untrap_trap

rnd_potion	dc.b	3,6,12,8,17,5,14,19,1,6,11,15,4,13,0,18,10,7
		dc.b	16,2,9

tnext_level	dc.b	252,3,'LETS TRY THE NEXT LEVEL',0
grant_text	dc.b	252,3,'YOUR PASSAGE TO FREEDOM',0
		even

auto_man	tst.w	inter_level
		beq	no_force_right
		jsr	box_it
		cmp.w	#1000,inter_level
		beq	no_auto

		cmp.w	#18,inter_level
		bne.s	no_man_y_pos
		move.w	#88,many
no_man_y_pos

		tst.w	king_kong
		beq.s	no_kduck
		cmp.w	#35,inter_level
		blt.s	no_kduck
		cmp.w	#43,inter_level
		bgt.s	no_kduck

		addq.w	#1,inter_level
		move.w	#1,joy_duck
		rts

no_kduck	clr.w	joy_duck
		cmp.w	#44,inter_level
		bne.s	no_inter_txt

		move.l	old_screen,-(sp)
		move.l	#mem+$68600,old_screen
		clr.l	w_mode1
		move.l	#$00540048,d1
		move.l	#$0097000a,d2
		bsr	sprite

		tst.w	king_kong
		beq.s	no_grant
		move.l	#$00a00058,d1
		move.l	#$00100010,d2
		bsr	sprite
		move.l	#system_blk+$7d00+$6908,spdata
		move.l	d1,xxx
		move.w	#15,d7
		bsr	ssprite
		lea	grant_text,a0
		bra.s	jgrant
no_grant	lea	tnext_level,a0
jgrant		move.l	#SPXOR,w_mode1
		move.l	#$005b0048,d0
		bsr	print_text
		move.l	(sp)+,old_screen

no_inter_txt	addq.w	#1,inter_level
		cmp.w	#15,inter_level
		blt.s	no_force_right
force_right	clr.w	man_yoff
		clr.b	man_fall
		bra.s	rise_him
rise_her	bsr	permit_rise
rise_him	move.w	manx,-(sp)
		bsr	permit_right
		move.w	(sp)+,d0
		cmp.w	manx,d0
		beq.s	rise_her
		bsr	permit_fall
		bsr	permit_fall
		clr.b	no_jumpin
no_force_right	rts
		
no_auto		tst.w	king_kong
		bne.s	met_the_king
		addq.w	#1,edit_room
		cmp.w	#101,edit_room
		bne.s	no_complete
met_the_king	move.w	#105,edit_room
no_complete	move.w	#1,in_play
		clr.w	inter_level
		move.w	edit_room,recar_room
		rts

function48	move.l	#deheld_id,trap_poke+2
		clr.w	held_icon
		bra	untrap

deheld_id	cmp.b	#48,d2
		bne	back_in
		move.b	#213,d0
		move.b	d0,0(a5,d3.w)
		bsr	poke_new_icon
		bra	back_in

supa_bonus	move.l	#bonus_id,trap_poke+2
		clr.w	super_bonus
		bra	untrap


bonus_id	lea	astrib,a1
		tst.b	0(a1,d3.w)
		bmi	back_in
		tst.w	d2
		beq.s	definite
		cmp.w	#61,d2
		beq.s	definite
		cmp.w	#62,d2
		beq.s	definite
		cmp.w	#212,d2
		blt	back_in
		lea	extend_bonus,a1
		sub.w	#212,d2
		tst.b	0(a1,d2.w)
		bne	back_in
definite	move.b	#62,d0
		lea	astrib,a1
		addq.w	#1,fruities
		or.b	#%10000000,0(a1,d3.w)
		bsr	poke_new_icon
main_bonus	bra	back_in

got_big_money	tst.w	big_money
		beq.s	fine_plot
no_reset_big	move.w	#11,d2
		move.l	money_pos,d1
		subq.l	#8,d1
		move.l	old_screen,a0
		move.l	#$52c8+system_blk,a2
		move.l	#$6440-(160*118)-8,d3
		
show_liness	cmp.l	#$6450-160,d1
		bgt.s	done_best
		cmp.l	d3,d1
		bgt.s	norm_plot
		move.l	a0,a1
		add.l	d3,a1
		add.l	#160,d3
		bra.s	smooth_plot
norm_plot	move.l	a0,a1
		add.l	d1,a1
smooth_plot	bsr	super_bonusl
		add.l	#160*3,d1
		add.l	#160,a2
		dbra	d2,show_liness

done_best	sub.l	#160,money_pos
		cmp.l	#$200,money_pos
		bgt.s	fine_plot
		clr.w	big_money
fine_plot	rts

super_bonusl	move.l	a2,a4
		move.l	a1,a5
		move.w	#5,d4
show_supa	move.w	(a4),d5
		or.w	2(a4),d5
		or.w	4(a4),d5
		or.w	6(a4),d5
		not.w	d5
		move.w	d5,d6
		swap	d6
		move.w	d5,d6

		move.l	(a5),d5
		and.l	d6,d5
		or.l	(a4)+,d5
		move.l	d5,(a5)+

		move.l	(a5),d5
		and.l	d6,d5
		or.l	(a4)+,d5
		move.l	d5,(a5)+
		dbra	d4,show_supa
no_bul		rts

fire_bul	tst.w	bul_shot
		bne.s	cont_bul
		tst.w	joy_shot
		beq.s	no_bul
fired_joy	tst.l	man_dead
		bne.s	no_bul
		tst.w	inter_level
		bne.s	no_bul
		cmp.w	#15,rise_man
		blt.s	no_bul
		cmp.w	#2,magic_option
		bne.s	no_bul
		addq.w	#1,bul_shot
		move.l	manx,bul_x
		addq.w	#6,bul_y
		move.w	tman_dir,bul_dir
		clr.w	bul_state

cont_bul	moveq.l	#4,d7
		move.l	bul_x,xxx
		tst.w	bul_state
		bne	bul_blast
		addq.w	#1,bul_ani
		tst.w	bul_dir
		beq.s	bul_left

		lea	bul_ptr_right,a0
		addq.w	#8,bul_x
		cmp.w	#320,bul_x
		bge.s	hit_wally2b
		move.l	bul_x,d1
		add.l	#$70000,d1
		bsr	bget_sfire
		beq.s	hit_wally2
		bra	bul_prt
hit_wally2b	move.w	#-1,d7
		move.l	bul_x,d1
		bsr	bget_sfire
		beq.s	hit_wally2
		bra.s	hit_wally2a
hit_wally2	swap	d1
		and.w	#$fff0,d1
		subq.w	#8,d1
		cmp.w	#304,d1
		ble.s	ok_prt_rbul
		move.w	#304,d1
ok_prt_rbul	move.w	d1,bul_x
hit_wally2a
		
the_wally_1	addq.w	#1,bul_state
		clr.w	bul_ani
		bra	bul_prt

bul_left	lea	bul_ptr_left,a0
		subq.w	#8,bul_x
		cmp.w	#-8,bul_x
		blt.s	hit_wally1b
		move.l	bul_x,d1
		bsr	bget_sfire
		beq.s	hit_wally1
		bra.s	bul_prt2
hit_wally1b	move.w	#-1,d7
		move.l	bul_x,d1
		bsr	bget_sfire
		beq.s	hit_wally1
		bra.s	hit_wally1a
hit_wally1	swap	d1
		and.w	#$fff0,d1
		addq.w	#8,d1
		tst.w	d1
		bpl.s	ok_x_buls
		clr.w	d1
ok_x_buls	move.w	d1,bul_x
		bra.s	the_wally_2
hit_wally1a
the_wally_2	addq.w	#1,bul_state
		clr.w	bul_ani
bul_prt2
bul_prt		move.w	bul_ani,d0
		andi.w	#1,d0
		lsl.w	#2,d0
		move.l	0(a0,d0.w),spdata

ssprite3	move.w	xxx,d0
		tst.w	d0
		bmi	no_end_bul
		cmp.w	#320,d0
		bge	no_end_bul
		move.w	yyy,d0
		add.w	d7,d0
		cmp.w	#143+16,d0
		blt.s	sp_nul_bul
		sub.w	#143+16,d0
		sub.w	d0,d7
		bmi.s	no_end_bul
		bra	ssprite
sp_nul_bul	sub.w	d7,d0
nsp_nul_bul	tst.w	d0
		bpl.s	a_bul_to_do
		add.l	#160,spdata
		subq.w	#1,d7
		addq.w	#1,d0
		move.w	d0,yyy
		bra.s	nsp_nul_bul
a_bul_to_do	tst.w	d7
		bmi.s	no_end_bul
		bra	ssprite

bul_blast	lea	explode_defs,a0
		move.w	bul_ani,d0
		move.l	0(a0,d0.w),spdata
		move.l	bul_x,d1
		move.l	d1,xxx
		swap	d1
		cmp.w	#304,d1
		bgt.s	the_end_bul
		tst.w	d1
		bmi.s	the_end_bul
		move.w	#7,d7
		bsr	ssprite3
		addq.w	#4,bul_ani
		cmp.w	#5*4,bul_ani
		bne.s	no_end_bul
the_end_bul	clr.w	bul_shot
no_end_bul	rts

		even
hit_grave	dc.w	0

bul_ptr_left	dc.l	system_blk+$500+$7d00
		dc.l	system_blk+$508+$7d00
bul_ptr_right	dc.l	system_blk+$510+$7d00
		dc.l	system_blk+$518+$7d00


extend_bonus	dc.b	212
		dc.b	0
		dc.b	214
		dc.b	0
		dc.b	216
		dc.b	0
		dc.b	0
		dc.b	219
		dc.b	0
		dc.b	221
		dc.b	222
		dc.b	223
		dc.b	0
		dc.b	225
		dc.b	226
		dc.b	227
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	234,235
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	241
		dc.b	0,0,0,0,0,0
		dc.b	248,249,250,251,252,253,254,0

		even
done_trap	dc.w	0
super_bonus	dc.w	0
fruities	dc.w	0
big_money	dc.w	0
money_pos	dc.l	0
bul_shot	dc.w	0
bul_x		dc.w	0
bul_y		dc.w	0
bul_dir		dc.w	0
bul_state	dc.w	0
bul_ani		dc.w	0
timer		dc.l	0
timer_x		dc.w	0
timer_y		dc.w	0
timer_dir_x	dc.w	0
timer_dir_y	dc.w	0

do_the_timer	tst.w	secret_mode
		beq	dno_tim
		move.l	#system_blk+12000,spdata
		tst.l	man_dead
		bne	dno_tim
		tst.l	timer
		beq	ttfunction43
		move.l	#system_blk+10400,a0
		move.l	#system_blk+12000,a1
		move.w	#10,d0
cpy_s_timer	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		add.l	#152,a0
		add.l	#152,a1
		dbra	d0,cpy_s_timer

		tst.w	timer_dir_x
		beq.s	move_tleft
		addq.w	#2,timer_x
		cmp.w	#320-16,timer_x
		blt.s	do_timer_y
		clr.w	timer_dir_x
		bra.s	do_timer_y
move_tleft	subq.w	#2,timer_x
		tst.w	timer_x
		bne.s	do_timer_y
		move.w	#1,timer_dir_x
do_timer_y	tst.w	timer_dir_y
		beq.s	move_tup
		addq.w	#1,timer_y
		cmp.w	#199-10,timer_y
		blt.s	no_stimer
		clr.w	timer_dir_y
		subq.l	#1,timer
		bra.s	no_stimer
move_tup	subq.w	#1,timer_y
		cmp.w	#161,timer_y
		bgt.s	no_stimer
		move.w	#1,timer_dir_y
		subq.l	#1,timer
no_stimer	move.l	old_screen,-(sp)
		move.l	#system_blk,old_screen
		move.w	#11,col1
		move.l	timer,a0
		move.l	#$0002004d,d0
		swap	d0
		sub.w	#6*6,d0
		cmp.l	#10,a0
		bge.s	no_mid_tim
		subq.w	#2,d0
no_mid_tim	swap	d0
		bsr	print_number
		move.l	(sp)+,old_screen
dno_tim2	move.l	timer_x,xxx
		move.w	#10,d7
		bra	ssprite
dno_tim		rts

money_on	dc.w	12
money_off	dc.w	0
money_on_pos	dc.l	$60
money_off_pos	dc.l	0

do_money_v2	tst.w	inter_level
		bne.s	no_bad_mpos1
		move.b	sys_not2,d0
		and.b	#1,d0
		tst.b	d0
		bne.s	alternate

		move.w	money_on,d0
		move.l	#$68600+mem,a1
		add.l	money_on_pos,a1
		move.l	#$3260+system_blk+$7d00*2,a0
		move.b	#212,d1
		move.b	#15,d2
		bsr	remove_list

		addq.w	#1,money_on
		addq.l	#8,money_on_pos
		cmp.w	#20,money_on
		bne.s	no_bad_mpos1
		clr.w	money_on
		clr.l	money_on_pos
no_bad_mpos1	rts

alternate	move.w	money_off,d0
		move.l	#$68600+mem,a1
		add.l	money_off_pos,a1
		move.l	#$70+system_blk+$7d00*2,a0
		move.b	#15,d1
		move.b	#212,d2
		bsr	remove_list

		addq.w	#1,money_off
		addq.l	#8,money_off_pos
		cmp.w	#20,money_off
		bne.s	no_bad_mpos2
		clr.w	money_off
		clr.l	money_off_pos
no_bad_mpos2	rts


remove_list	move.w	#19,d7
		lea	syst_buf+45,a2
do_rem_list	move.b	0(a2,d0.w),d3
		cmp.b	d2,d3
		bne.s	no_do_rem_list
		move.b	d1,0(a2,d0.w)
		movem.l	a0-a1,-(sp)
		jsr	bound_sprite
		movem.l	(sp)+,a0-a1
no_do_rem_list	add.w	#22,d0
		add.l	#$500,a1
		dbra	d7,do_rem_list
		rts

do_spikes	bsr	init_dirty
		move.l	manx,d1
		sub.l	#16,d1
		move.w	#5,d5
spike_line	move.w	d5,-(sp)
		move.w	#4,d6
		swap	d1
		move.w	manx,d1
		sub.w	#32,d1
		swap	d1
spike_scan	move.w	d6,-(sp)
		bsr	dirty_calc
		move.b	0(a5,d3.w),d3
		andi.w	#$ff,d3
		cmp.w	#5,magic_option
		bne.s	no_eye_got
		cmp.w	#20,d3
		beq.s	spec_1
		cmp.w	#47,d3
		beq.s	spec_1
		cmp.w	#48,d3
		beq.s	spec_1
		cmp.w	#2,d3
		blt.s	no_eye_got
		cmp.w	#9,d3
		bgt.s	no_eye_got
spec_1		move.b	d3,d0
		bra.s	show_hidden
no_eye_got	cmp.b	#42,d3
		bne.s	no_spikey
		move.b	d3,d0
show_hidden	bsr	poke_new_icon2
no_spikey	add.l	#$100000,d1
		move.w	(sp)+,d6
		dbra	d6,spike_scan
		move.w	(sp)+,d5
		addq.w	#8,d1
		dbra	d5,spike_line
		rts


		
		even


spell_see	dc.w	0
spell_seec	dc.w	0

f_blank		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		dc.w	%0000000000000000
		
f_box1		dc.w	%0111111111111110
		dc.w	%1111111111111111
		dc.w	%1111111111111111
		dc.w	%1111111001111111
		dc.w	%1111111001111111
		dc.w	%1111111111111111
		dc.w	%1111111111111111
		dc.w	%0111111111111110

f_box2		dc.w	%0011111111111100
		dc.w	%0111111111111110
		dc.w	%1111111001111111
		dc.w	%1111110000111111
		dc.w	%1111110000111111
		dc.w	%1111111001111111
		dc.w	%0111111111111110
		dc.w	%0011111111111100

f_box3		dc.w	%0001111111111000
		dc.w	%0011111001111100
		dc.w	%0111110000111110
		dc.w	%1111100000011111
		dc.w	%1111100000011111
		dc.w	%0111110000111110
		dc.w	%0011111001111100
		dc.w	%0001111111111000

f_box4		dc.w	%0000111001110000
		dc.w	%0001111001111000
		dc.w	%0011110000111100
		dc.w	%0111100000011110
		dc.w	%0111100000011110
		dc.w	%0011110000111100
		dc.w	%0001111001111000
		dc.w	%0000111001110000

f_box5		dc.w	%0000011001100000
		dc.w	%0000111001110000
		dc.w	%0001110000111000
		dc.w	%0011100000011100
		dc.w	%0011100000011100
		dc.w	%0001110000111000
		dc.w	%0000111001110000
		dc.w	%0000011001100000

f_box6		dc.w	%0000001001000000
		dc.w	%0000011001100000
		dc.w	%0000110000110000
		dc.w	%0001100000011000
		dc.w	%0001100000011000
		dc.w	%0000110000110000
		dc.w	%0000011001100000
		dc.w	%0000001001000000

f_box7		dc.w	%0000001001000000
		dc.w	%0000010000100000
		dc.w	%0000100000010000
		dc.w	%0001000000001000
		dc.w	%0001000000001000
		dc.w	%0000100000010000
		dc.w	%0000010000100000
		dc.w	%0000001001000000



fades_list	dc.l	f_box1,f_box2,f_box3,f_box4
		dc.l	f_box5,f_box6,f_box7,f_blank
fades_list2	


king_kong	dc.w	0
esc_stack	dc.l	0

do_clr_off	move.l	sp,esc_stack
		move.l	current_screen,a0
		move.l	old_screen,a1
		move.w	#1999,d0
copy_fade_s	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,copy_fade_s
		lea	fades_list,a0
		move.w	#7,d6
loop_fade	move.l	(a0)+,a1
		move.l	a1,a2
		move.l	old_screen,a3
		move.w	#21,d1
loop_fade4	move.w	#7,d4
loop_fade3	move.w	#19,d2
		move.w	(a1),d3
		move.w	d3,d5
		swap	d5
		move.w	d3,d5
loop_fade2	and.l	d5,(a3)+
		and.l	d5,(a3)+
		dbra	d2,loop_fade2
		addq.l	#2,a1
		dbra	d4,loop_fade3
		move.l	a2,a1
		dbra	d1,loop_fade4
		movem.l	a0-a6/d0-d7,-(sp)
		jsr	do_magic_ma
		movem.l	(sp)+,a0-a6/d0-d7
		bsr	screen_pause
		dbra	d6,loop_fade
		rts


screen_pause	clr.b	vbl_counter
_wait_refresh	move.b	vbl_counter,d7
		cmp.b	#3,d7
		bne.s	_wait_refresh
		move.w	old_screen+2,d7
		lsr.w	#8,d7
		move.b	d7,$ff8203
		move.b	vbl_counter,d7
_at_least_again	cmp.b	vbl_counter,d7
		beq.s	_at_least_again
		movem.l	a0-a6/d0-d7,-(sp)
		bsr	flip_screen
		move.w	#$ff,-(sp)
		move.w	#6,-(sp)
		trap	#1
		addq.l	#4,sp
		move.b	d0,keybrd
		movem.l	(sp)+,a0-a6/d0-d7
		rts

quit_sys	move.l	esc_stack,sp
		rts
	
do_clr_on	move.l	sp,esc_stack
		move.l	current_screen,a0
		move.l	old_screen,a1
		move.w	#1759,d0
copy_fade_s2
		clr.l	(a1)+
		clr.l	(a1)+
		clr.l	(a1)+
		clr.l	(a1)+
		dbra	d0,copy_fade_s2
		jsr	rnd
		lea	fades_list2,a0
		move.w	#7,d6
loop_fadez	move.l	-(a0),a1
		move.l	a1,a2
		move.l	old_screen,a3
		move.l	#mem+$68600,a4
		move.w	#21,d1
loop_fade4z	move.w	#7,d4
loop_fade3z	move.w	#19,d2
		move.w	(a1),d3
		move.w	d3,d5
		swap	d5
		move.w	d3,d5
loop_fade2z	move.l	(a4)+,(a3)
		and.l	d5,(a3)+
		move.l	(a4)+,(a3)
		and.l	d5,(a3)+
		dbra	d2,loop_fade2z
		addq.l	#2,a1
		dbra	d4,loop_fade3z
		move.l	a2,a1
		dbra	d1,loop_fade4z
		movem.l	a0-a6/d0-d7,-(sp)
		jsr	do_magic_ma
		movem.l	(sp)+,a0-a6/d0-d7
		bsr	screen_pause
		dbra	d6,loop_fadez
		move.l	old_screen,a0
		move.l	#mem+$68600,a1
		move.w	#7999,d0
no_flashy	move.l	(a1)+,(a0)+
		dbra	d0,no_flashy
		rts

sprite_pass	dc.w	0


draw_pg1	lea	brick_txt,a0
		move.l	#$00100013,d0
		move.w	#9,col1
		bsr	print_text
		lea	ball_txt,a0
		move.l	#$00a00013,d0
		bsr	print_text
		move.w	#15,col1
		move.w	#159,d0
		lea	id_init,a0
		lea	act_buf,a1
fixed		move.b	(a0)+,(a1)+
		dbra	d0,fixed
		rts

draw_pg2	lea	brick_txt2,a0
		move.l	#$00100013,d0
		move.w	#9,col1
		bsr	print_text
		lea	ball_txt2,a0
		move.l	#$00a00013,d0
		bsr	print_text
		move.w	#15,col1
		move.w	#159,d0
		lea	id_init2,a0
		lea	act_buf,a1
fixed2		move.b	(a0)+,(a1)+
		dbra	d0,fixed2
		move.b	#4,act_buf+$f
		rts

draw_pg3	lea	brick_txt3,a0
		move.l	#$00100013,d0
		move.w	#9,col1
		bsr	print_text
		lea	ball_txt3,a0
		move.l	#$00a00013,d0
		bsr	print_text
		move.w	#15,col1
		move.w	#159,d0
		lea	id_init3,a0
		lea	act_buf,a1
fixed3		move.b	(a0)+,(a1)+
		dbra	d0,fixed3
		rts


draw_pg4	lea	brick_txt4,a0
		move.l	#$00100013,d0
		move.w	#9,col1
		bsr	print_text
		lea	ball_txt4,a0
		move.l	#$00a00013,d0
		bsr	print_text
		move.w	#15,col1
		jsr	clr_baddy
		move.w	#159,d0
		lea	id_init4,a0
		lea	act_buf,a1
fixed4		move.b	(a0)+,(a1)+
		dbra	d0,fixed4
		rts

brick_txt	dc.b	'CRUMBERLING',255
		dc.b	'BRICKS',253
		dc.b	'POKING',255
		dc.b	'SPIKES',254
		dc.b	'VOLCANIC',255
		dc.b	'ROCK',254
		dc.b	'BURNING',255
		dc.b	'BARREL',254
		dc.b	'MOBILE',255
		dc.b	'PLATFORM',0

ball_txt	dc.b	'BOUNCING',255
		dc.b	'BALL',253
		dc.b	'JACK IN',255
		dc.b	'A BOX',254
		dc.b	'SPACE',255
		dc.b	'INVADER',254
		dc.b	'CUSTARD',255
		dc.b	'PIE',254
		dc.b	'WATER',255
		dc.b	'BUBBLE',0

brick_txt2	dc.b	'FOLLOW THE',255
		dc.b	'WALL',253
		dc.b	'OPPOSITE',255
		dc.b	'SPIKES',254
		dc.b	'FALLING',255
		dc.b	'ICE',254
		dc.b	'DEADLY',255
		dc.b	'ARROW',254
		dc.b	'UNHOLY',255
		dc.b	'MAGIC',0

ball_txt2	dc.b	'PUSH',255
		dc.b	'ME',253
		dc.b	'SLIDING',255
		dc.b	'X SPIKES',254
		dc.b	'SUCKING',255
		dc.b	'SPIKES',254
		dc.b	'HOMING',255
		dc.b	'GHOST',254
		dc.b	'VOLCANIC',255
		dc.b	'BUBBLE',0

brick_txt3	dc.b	'ROLLING',255
		dc.b	'BARREL',253
		dc.b	'SPRINGY',255
		dc.b	'THINGY',254
		dc.b	'SHADOW',255
		dc.b	'MURDER',254
		dc.b	'FALLING',255
		dc.b	'SPIKES',254
		dc.b	'SHOOT POST',255
		dc.b	'LEFT',0

ball_txt3	dc.b	'SHOOT POST',255
		dc.b	'RIGHT',253
		dc.b	'SHOOT POST',255
		dc.b	'UP',254
		dc.b	'SHOOT POST',255
		dc.b	'DOWN',254
		dc.b	'NO KEYS PASS',255
		dc.b	'HERE',254
		dc.b	'MAGIC KEY',255
		dc.b	'MASTER',0

brick_txt4	dc.b	'TURNS LIGHT',255
		dc.b	'ON/OFF',253
		dc.b	'TOGGLES TRAP &',255
		dc.b	'SECRET WALL(S)',254
		dc.b	'TOGGLES',255
		dc.b	'TRAP WALL(S)',254
		dc.b	'TOGGLES ICON(S)',255
		dc.b	'MOVEMENTS',254
		dc.b	'MAGIC LADDER',255
		dc.b	'DIRECTION',0

ball_txt4	dc.b	'KILL ICON(S)',255
		dc.b	'OFF',253
		dc.b	'OPENS LOCKED',255
		dc.b	'GATE(S)',254
		dc.b	'TOGGLES',255
		dc.b	'SECRET WALL(S)',254
		dc.b	'ONEWAY',255
		dc.b	'DIRECTION',254
		dc.b	'CONVERYOR',255
		dc.b	'DIRECTION',0
		even

killer_good	dc.b	0	;0=killer 1=live
permit_Sicon	dc.b	0	;0=no stand, 1=stand

		even
fools_y		dc.l	0
saved0s		dc.w	0
		dc.w	0
pow_y		dc.w	0
pow_yy		dc.w	0
sspdata		dc.l	0
mmove_pos	dc.l	0
cause_death	dc.w	0
switch_ptr	dc.l	0
main_sprite_def	ds.l	16
main_sprite_hi	ds.l	16

main_control	lea	act_buf,a0		;?????
		lea	save_old_buf,a1
		move.l	#9,d0
dload_stop	move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		move.l	(a0)+,(a1)+
		dbra	d0,dload_stop
		tst.w	sprite_pass
		bne.s	no_bomb_inity
		addq.b	#1,bomb_buf
no_bomb_inity	move.w	#9,d1
next_sprite	clr.w	cause_death
		move.w	d1,d2
		lsl.w	#1,d2
		lea	act_buf,a0
		lea	swapped_defs,a1
		move.w	0(a1,d2.w),d0
		clr.l	d2
		move.w	d0,d2
		lsr.w	#2,d2
		move.l	#switch_buf,switch_ptr
		add.l	d2,switch_ptr
		
		add.l	d0,a0
		movem.l	d0-d1/a0,-(sp)
		move.w	d0,saved0s

		clr.w	d2
		
		move.b	(a0),d2
		clr.b	set_done
		clr.b	permit_Sicon
		clr.l	fools_y
		clr.l	pow_y
		tst.b	d2
		beq	extra_goodies
re_entry	move.l	$8(a0),force_old
		move.l	$c(a0),force_old2
		clr.b	hold_it
		cmp.b	#210,d2
		beq	invader_bombs
		tst.b	d2			;zero = no sprites
		beq	not_valid_main
		cmp.b	#115,d2
		beq	broken_maj
		cmp.b	#120,d2
		beq	they_dying
		cmp.b	#100,d2
		bgt	not_valid_main
		lea	do_kill,a3		;ptr to kill flag
		tst.b	killer_good
		bne.s	low_test_move		;these don't kill
		move.l	#object_id-1,a4
		move.b	0(a4,d2.w),d3
		and.b	#%0001,d3
		beq	not_valid_main		
		addq.b	#1,set_done
		bra.s	check_evil

low_test_move	move.w	d0,d4
		lsr.w	#4,d4
		move.b	0(a3,d4.w),d3
		tst.b	d3
		bne	not_valid_main
		move.w	d0,d4
		lsr.w	#4,d4
		addq.b	#1,0(a3,d4.w)


check_evil	clr.b	cross_effects
		tst.w	magic_option
		bne.s	no_tst_cross
		lea	object_id-1,a1
		move.b	0(a1,d2.w),d3
		andi.b	#%1000,d3
		beq.s	no_tst_cross
		addq.b	#1,cross_effects
no_tst_cross	clr.b	permit_Sicon
		lea	object_id-1,a1
		move.b	0(a1,d2.w),d3
		andi.b	#%0010,d3
		beq.s	no_stand_icon
		addq.b	#1,permit_Sicon
no_stand_icon	cmpi.w	#50,d2
		bgt	fixed_const
		move.w	d2,d5
		subq.w	#1,d5
		lsl.w	#2,d5
		lea	table_routine,a1
		move.l	0(a1,d5.w),a2
		bra.s	na_fixed_const
fixed_const	lea	user_control,a2
na_fixed_const	clr.w	d3
		move.l	2(a0),d4
		move.l	d4,xxx

		move.w	d0,d5
		lsr.w	#1,d5
		lea	top_stand,a5
		move.l	d4,0(a5,d5.w)
		clr.b	d6
		cmp.w	#100,d2
		bgt.s	no_jmp_dis
		jsr	(a2)
no_jmp_dis	tst.w	sprite_pass
		bne.s	shift_icon
		tst.b	set_done
		beq	not_valid_main

shift_icon	tst.b	hold_it
		bne.s	exec2
		cmp.b	#120,(a0)
		beq.s	exec2
		move.w	$8(a0),d1
		lsl.w	#2,d1
		lea	path_control,a1
		move.l	0(a1,d1.w),a2
		cmp.w	#999,$8(a0)
		blt.s	exec_it
		move.l	d6,-(sp)
		bsr	pc_defined
		move.l	(sp)+,d6
		tst.w	cause_death
		beq.s	exec2
		bsr	enermy_die
		bra.s	exec2
exec_it		jsr	(a2)
exec2		move.w	d7,saved_d7
		tst.w	flash_item
		beq.s	not_valid_f
		move.b	sys_not,d5
		and.b	#1,sys_not
		bne.s	not_valid_f
		clr.w	d5
		move.b	which_icon,d5
		move.w	saved0s,d4
		lsr.w	#4,d4
		cmp.w	d4,d5
		beq	not_valid_main
not_valid_f	tst.w	d7
		bmi	not_valid_main
		move.w	yyy,d0
		move.w	limit_line,d2
until_d7_ok	move.w	d0,d1
		add.w	d7,d1
		cmp.w	d2,d1
		blt.s	cont_norm_yyy
		dbra	d7,until_d7_ok

cont_norm_yyy	tst.w	d0
		bpl.s	on_screen
		eor.w	#$ffff,d0
		addq.w	#1,d0
		sub.w	d0,d7
		mulu	#$a0,d0
		add.l	d0,spdata
		tst.w	d7
		bmi.s	not_valid_main
		clr.w	yyy
on_screen	tst.w	cause_death
		bne.s	death_here
		tst.b	cross_effects
		beq.s	yes_valid_main
		cmp.b	#120,(a0)
		beq.s	yes_valid_main
death_here	bsr	enermy_die

yes_valid_main	move.l	spdata,sspdata
		move.w	saved0s,d0
		lsr.w	#2,d0
		lea	main_sprite_def,a1
		lea	main_sprite_hi,a2
		move.l	spdata,0(a1,d0.w)
		move.l	d7,0(a2,d0.w)
		jsr	ssprite

not_valid_main	movem.l	(sp)+,d0-d1/a0
		tst.b	permit_Sicon
		beq.s	no_Sicon
		move.l	sspdata,a3
		clr.l	d3		;????
		move.w	(a3)+,d3
		or.w	(a3)+,d3
		or.w	(a3)+,d3
		or.w	(a3)+,d3
		swap	d3
		move.w	xxx,d3
		bra.s	save_Sicon	
no_Sicon	clr.l	d3
		tst.b	killer_good
		beq.s	save_Sicon
		lea	do_kill,a3
		move.w	d0,d2
		lsr.w	#4,d2
		move.b	0(a3,d2.w),d2
		tst.b	d2
		bne.s	no_save_Sicon
save_Sicon	move.w	d0,d2
		lsr.w	#1,d2
		lea	top_stand,a3
		tst.l	fools_y
		beq.s	no_copy_fools_y
		move.l	fools_y,0(a3,d2.w)
no_copy_fools_y	move.l	d3,4(a3,d2.w)
no_save_Sicon
		lea	do_kill,a3
		move.b	set_done,d3
		move.w	d0,d2
		lsr.w	#4,d2
		move.b	d3,0(a3,d2.w)

		addi.w	#16,d0
		dbra	d1,next_sprite
		tst.b	stop_icon
		bne.s	do_si
		cmpi.b	#20,priority
		blt.s	no_si
*		tst.w	held_icon
*		beq.s	no_si
do_si		lea	save_old_buf,a0
		lea	act_buf,a1
		move.w	#9,d0
		lea	switch_move,a2
reload_stop	tst.w	held_icon
		bne.s	dosh
		tst.b	stop_icon
		bne.s	dosh
		tst.b	(a2)
		beq.s	bosh_bad
		cmp.b	#120,(a1)
		beq.s	bad_bosh
		cmp.b	#160,(a1)
		bne.s	dosh
		clr.b	(a1)
dosh		
		move.b	1(a0),1(a1)
		move.l	2(a0),2(a1)
		move.w	6(a0),6(a1)
*		tst.w	held_icon
*		beq.s	bosh_bad
		move.l	8(a0),12(a1)
		move.l	12(a0),12(a1)
bosh_bad	addq.l	#1,a2
		add.l	#16,a0
		add.l	#16,a1
		dbra	d0,reload_stop
*		clr.b	sys_not
no_si		rts
bad_bosh	move.l	2(a0),2(a1)
		add.l	#16,a0
		add.l	#16,a1
		bra.s	bosh_bad

enermy_die	cmp.b	#120,(a0)
		beq.s	alread_diein
		move.b	#120,(a0)
		lea	system_blk+$7d00+$5f10,a5
		add.l	mmove_pos,a5
		addq.l	#8,mmove_pos
		cmp.l	#8*10,mmove_pos
		bne.s	do_made_spprite
		clr.l	mmove_pos
do_made_spprite	move.l	a5,12(a0)
		clr.w	8(a0)
		move.w	saved_d7,d1
		tst.w	d1
		bmi.s	neg_d7
		cmp.w	#15,d1
		ble.s	no_error_d7
neg_d7		moveq.l	#7,d1
no_error_d7	move.w	d1,10(a0)
		move.l	spdata,a6
		move.l	#156,a4
cpy_data	move.l	(a6)+,(a5)+
		move.l	(a6),(a5)
		add.l	a4,a6
		add.l	a4,a5
		dbra	d1,cpy_data
alread_diein	rts

they_dying	move.l	12(a0),a3
		move.l	a3,spdata
		move.w	10(a0),d7
		move.w	d7,d4
		lea	fade_defs,a4
		move.w	8(a0),d3
		and.w	#%1111111111111100,d3
		move.l	0(a4,d3.w),a4
		addq.w	#2,8(a0)
		cmpi.w	#8*4,8(a0)
		bne.s	loop_fadey
		move.b	#101,(a0)
		bra	not_valid_main
loop_fadey	move.l	(a4),d3
		and.l	d3,(a3)+
		and.l	d3,(a3)
		add.l	#156,a3
		add.l	#160,a4
		dbra	d4,loop_fadey

		bra	check_evil

saved_d7	dc.w	0
cross_effects	dc.b	0

		even
extra_goodies
		tst.b	stop_icon
		bne	not_valid_main
		tst.w	held_icon
		bne	not_valid_main
		move.b	bomb_buf,d1
		andi.b	#7,d1
		bne	not_valid_main
		add.w	#16,bomb_pos
		move.w	bomb_pos,d3
		cmp.w	#159,d3
		ble.s	bomb_pos_ok
		clr.w	bomb_pos
bomb_pos_ok	move.w	bomb_pos,d1
		lea	act_buf,a1
		move.b	0(a1,d1.w),d3
		cmp.b	#8,d3
		bne	not_valid_main
		move.l	$2(a1,d1.w),$2(a0)
		add.w	#10,$4(a0)
		move.l	$2(a0),d1
		add.l	#$60006,d1
		bsr	bget_senermy
		beq	not_valid_main
		add.l	#$20000,d1
		bsr	bget_senermy
		beq	not_valid_main
		move.b	#210,d2
		move.b	d2,(a0)
		move.w	#20,$e(a0)
		move.w	d0,-(sp)
		jsr	rnd
		and.b	#1,d0
		addq.b	#1,d0
		lsl.b	#1,d0
		move.b	d0,$1(a0)
		move.w	(sp)+,d0
		bra	re_entry

invader_bombs	tst.w	sprite_pass
		beq.s	jump_me_not
		clr.b	set_done
		bra	not_valid_main

jump_me_not	move.b	#1,set_done
		cmp.w	#20,$e(a0)
		bne.s	exploding
		move.l	#system_blk+$af00,spdata
		move.l	#$00000007,d7
		move.l	$2(a0),xxx
		bsr	ssprite
		move.l	$2(a0),d1
		add.l	#$00060006,d1
		bsr	bget_senermy
		beq.s	set_explode
		add.l	#$00020000,d1
		bsr	bget_senermy
		beq.s	set_explode
		clr.w	d1	
		move.b	$1(a0),d1
		add.w	d1,$4(a0)
		cmp.w	#152,$4(a0)
		blt	not_valid_main
set_explode	and.w	#$fff8,$4(a0)
		clr.w	$e(a0)
		bra	not_valid_main

exploding	lea	explode_defs,a1
		move.w	$e(a0),d1
		move.l	0(a1,d1.w),spdata
		move.l	#$00000007,d7
		move.l	$2(a0),xxx
		bsr	ssprite
		addq.w	#4,$e(a0)
		cmp.w	#20,$e(a0)
		blt	not_valid_main
		clr.b	(a0)
		bra	not_valid_main

		even
explode_defs	dc.l	system_blk+$af08
		dc.l	system_blk+$af10
		dc.l	system_blk+$af18
		dc.l	system_blk+$af20
		dc.l	system_blk+$af28
		

		even
crumb_routine	
		clr.w	d1
		move.b	$f(a0),d1
		andi.b	#60,d1
		lea	crumb_brick_pos,a1
		move.l	0(a1,d1.w),a1
		move.l	a1,spdata
		cmp.l	#system_blk+$fa50,a1
		beq.s	no_killer_brick
		
		tst.w	sprite_pass
		bne.s	no_killer_brick
		clr.b	set_done
		move.w	#-1,d7
		rts

no_killer_brick	moveq.l	#7,d7
		addq.b	#2,$f(a0)
		move.b	#1,set_done
		rts


poke_spike	move.l	$2(a0),xxx
		move.l	#poke_defs,a1
		move.w	$e(a0),d1
		and.w	#63,d1
		move.l	0(a1,d1.w),spdata
		move.l	#$00000007,d7
		move.b	sys_not,d1
		and.b	#1,d1
		cmp.b	#1,d1
		beq.s	no_poke_spike
		addq.w	#4,$e(a0)
no_poke_spike	rts

		even
poke_defs	dc.l	system_blk+$7d28
		dc.l	system_blk+$7d28+$500
		dc.l	system_blk+$7d28+$500*2
		dc.l	system_blk+$7d28+$500*3
		dc.l	system_blk+$7d28+$500*4
		dc.l	system_blk+$7d28+$500*5
		dc.l	system_blk+$7d28+$500*6
		dc.l	system_blk+$7d28+$500*7
		dc.l	system_blk+$fa00
		dc.l	system_blk+$7d28+$500*7
		dc.l	system_blk+$7d28+$500*6
		dc.l	system_blk+$7d28+$500*5
		dc.l	system_blk+$7d28+$500*4
		dc.l	system_blk+$7d28+$500*3
		dc.l	system_blk+$7d28+$500*2
		dc.l	system_blk+$7d28+$500
		dc.l	system_blk+$7d28

not_AI_vol	cmp.w	#4,$8(a0)
		beq.s	bounce_vol
		cmp.b	#1,$7(a0)
		beq.s	m_vol_down
		bra.s	m_vol_up

volcanic_rock	cmp.w	#7,$8(a0)
		bne.s	not_AI_vol
bounce_vol	move.b	$1(a0),d1
		addq.b	#1,$1(a0)
		and.b	#63,d1
		cmp.b	#43,d1
		bgt.s	no_spit
		cmp.b	#21,d1
		ble.s	vol_up
		addq.w	#1,$4(a0)
m_vol_down	move.l	#system_blk+$8730,spdata
		move.b	$f(a0),d1
		and.b	#3,d1
		cmp.b	#1,d1
		ble.s	set_vol
		move.l	#system_blk+$8c30,spdata
		bra.s	set_vol
vol_up		subq.w	#1,$4(a0)
m_vol_up	move.l	#system_blk+$7d30,spdata
		move.b	$f(a0),d1
		and.b	#3,d1
		cmp.b	#1,d1
		ble.s	set_vol
		move.l	#system_blk+$8230,spdata
set_vol		addq.b	#1,$f(a0)
		move.l	#$00000007,d7
		rts
no_spit		move.w	#$ffff,d7
		rts		

permit_drop	clr.b	$1(a0)
		move.w	$8(a0),d2
		cmp.w	#999,d2
		bgt	no_permit_drop
		cmp.w	#4,d2
		beq.s	no_permit_drop
		cmp.w	#7,d2
		beq.s	no_permit_drop
		cmp.w	#3,d2
		blt.s	no_permit_drop
		add.w	d1,$4(a0)
		move.w	$4(a0),yyy
no_permit_drop	rts

burning_barrel
no_first_burn	move.l	#bb_defs,a1
		move.w	$e(a0),d1
		and.w	#15,d1
		move.l	0(a1,d1.w),spdata
		move.l	#$0000000f,d7
		move.b	#1,d6
		move.b	sys_not,d1
		and.b	#1,d1
		cmp.b	#1,d1
		bne.s	no_burn
		move.b	$6(a0),d1
		cmp.b	#-1,d1
		beq.s	sub_burn_rota
		addq.w	#4,$e(a0)
		rts
sub_burn_rota	subq.w	#4,$e(a0)
no_burn		rts

		even

bb_defs		dc.l	system_blk+$f020-16
		dc.l	system_blk+$f028-16
		dc.l	system_blk+$f030-16
		dc.l	system_blk+$f038-16


mobile_platform	move.l	#system_blk+$7d40,spdata
		move.l	#$00000007,d7
		rts

bouncing_ball	tst.w	sprite_pass
		bne	ball_exit
		cmp.w	#2,$8(a0)
		ble	ball_id
		cmp.w	#999,$8(a0)
		bgt	ball_id
		cmp.b	#2,$6(a0)
		beq.s	ball_ida
		move.w	$8(a0),d2
		cmp.w	#3,d2
		beq	ball_id
		cmp.w	#5,d2
		beq	ball_id
		cmp.w	#6,d2
		beq	ball_id
		cmp.b	#-1,$6(a0)
		beq.s	ball_left
		move.w	$2(a0),d1
		clr.w	d2
		move.b	$a(a0),d2
		subq.b	#1,d2
		lsl.w	#4,d2
		cmp.w	d1,d2
		bne.s	ball_ida
		move.w	#12,$e(a0)
		bra.s	ball_ida
ball_left	move.w	$2(a0),d1
		clr.w	d2
		move.b	$c(a0),d2
		subq.b	#1,d2
		lsl.w	#4,d2
		cmp.w	d1,d2
		bne.s	ball_ida
		move.w	#12,$e(a0)
ball_ida	cmp.b	#2,$7(a0)
		beq.s	ball_id
		cmp.b	#-1,$7(a0)
		beq.s	ball_up
		move.w	$4(a0),d1
		clr.w	d2
		move.b	$b(a0),d2
		subq.b	#1,d2
		lsl.w	#3,d2
		subq.w	#8,d2
		cmp.w	d1,d2
		bne.s	ball_id
		move.w	#16,$e(a0)
		bra.s	ball_id
ball_up		move.w	$4(a0),d1
		clr.w	d2
		move.b	$d(a0),d2
		subq.b	#1,d2
		lsl.w	#3,d2
		subq.w	#3,d2
		cmp.w	d1,d2
		bne.s	ball_id
		move.w	#12,$e(a0)
ball_id		move.w	$e(a0),d1
		lea	ball_defs,a1
		move.l	0(a1,d1.w),spdata
		move.l	#$0000000f,d7
		tst.w	d1
		beq.s	ball_exit
		move.b	sys_not2,d1
		and.b	#1,d1
		tst.b	d1
		bne.s	ball_exit
		subq.w	#4,$e(a0)
ball_exit	rts



		even
ball_defs	dc.l	system_blk+$f070
		dc.l	system_blk+$f088
		dc.l	system_blk+$f080
		dc.l	system_blk+$f078
		dc.l	system_blk+$f070

jack_in_a_box
no_first_jack	move.w	#1,d6
		move.l	#$0000000f,d7
		lea	jack_defs,a1
		move.w	$e(a0),d1
		and.w	#31,d1
		tst.w	d1
		bne.s	animate
		move.l	jack_defs,spdata
		move.w	manx,d1
		move.w	xxx,d2
		addq.w	#6,d1
		cmp.w	d2,d1
		blt.s	no_jackie
		add.w	#18,d2
		cmp.w	d2,d1
		bgt.s	no_jackie
		tst.b	man_fall
		beq.s	no_jackie
		tst.l	man_dead
		bne.s	no_jackie

animate		move.w	$e(a0),d1
		and.w	#31,d1
		move.l	0(a1,d1.w),spdata
		move.b	sys_not,d1
		and.b	#1,d1
		cmp.b	#1,d1
		beq.s	no_jackie
		addq.w	#4,$e(a0)
no_jackie	rts

		even
jack_defs	dc.l	system_blk+$f048
		dc.l	system_blk+$f040
		dc.l	system_blk+$f038
		dc.l	system_blk+$f030
		dc.l	system_blk+$f030
		dc.l	system_blk+$f038
		dc.l	system_blk+$f040
		dc.l	system_blk+$f048


space_invader	move.w	#1,d6
		move.l	#$0000000f,d7
		lea	space_defs,a1
		bra	animate

		even
space_defs	dc.l	system_blk+$f050
		dc.l	system_blk+$f058
		dc.l	system_blk+$f060
		dc.l	system_blk+$f068
		dc.l	system_blk+$f068
		dc.l	system_blk+$f060
		dc.l	system_blk+$f058
		dc.l	system_blk+$f050

custard_pie	move.w	#7,d7
		move.l	pie_defs,spdata
		cmp.w	#7,$8(a0)
		bne.s	na_ai_custard
		move.l	#pie_hard,auto_hard
		bsr	auto_fall
na_ai_custard	rts

true_stkp	dc.l	0

pie_hard	clr.w	d0
		move.b	$e(a0),d0
		lea	pie_defs,a2
		move.l	0(a2,d0.w),spdata
		move.b	sys_not,d0
		and.b	#1,d0
		beq	visible_pie
		addq.b	#4,$e(a0)
		cmp.b	#4*4,$e(a0)
		beq	reset_pie
		bra	visible_pie

hit_hard	move.l	true_stkp,sp
		move.b	#10,$1(a0)
		move.l	auto_hard,a2
		jmp	(a2)	

auto_fall	move.l	sp,true_stkp

		move.l	$2(a0),d1	;pie x,y
		addq.w	#8,d1		;offset bellow pie
		bsr	bget_senermy	;solid to me?
		beq.s	hit_hard	;I've hit something hard
		cmp.b	#10,$1(a0)	;and again it hard
		beq.s	hit_hard
n_pie_hard	tst.b	$1(a0)
		bmi	reset_pie

		tst.b	$d(a0)		;the routine counter
		bne	do_exec_pie	;non zero mean executine routine

		tst.b	$c(a0)		;in pipe or not
		bne	do_pipes	;doing pipe routines

		move.b	#8,$d(a0)

		cmp.b	#36,d2		;is it pipe top?
		bne.s	not_entr_pie	;no
		clr.b	$1(a0)		;yes so enter
		bra	do_exec_pie	;and start it

not_entr_pie	cmp.b	#28,d2
		blt.s	no_con_pier	;not converoy right
		cmp.b	#30,d2
		bgt.s	no_con_pier	;not converoy right
		move.l	$2(a0),d1
		add.l	#$100000,d1
		bsr	bget_senermy
		beq	hit_hard
		move.b	#4,$1(a0)	;yes it converoy right
		bra	do_exec_pie

no_con_pier	cmp.b	#31,d2
		blt	no_con_piel
		cmp.b	#33,d2
		bgt	no_con_piel
		move.l	$2(a0),d1
		sub.l	#$100000,d1
		bsr	bget_senermy
		beq	hit_hard

		move.b	#3,$1(a0)
		bra	do_exec_pie

no_con_piel	move.b	#2,$1(a0)	;going down
		bra	do_exec_pie

no_fall_pie	rts


setp_command	dc.b	2,1,2,2,5,2

do_pipes	move.l	$2(a0),d1	;top corner of pie
		bsr	is_it_potty	;is it a pipe?
		bne	hit_hard	;no but was expecting one
		and.w	#$ff,d2
		sub.w	#36,d2		;adjust to table
		lea	setp_command,a2
		move.b	0(a2,d2.w),$1(a0)
		move.b	#8,$d(a0)	;set counter

do_exec_pie	clr.w	d0		;work in word
		move.b	$1(a0),d0	;get routine no
		addq.b	#1,d0		;add 1 for luck!
		lsl.w	#2,d0		;adjust to table
		lea	pie_commands,a2	;list of routines
		move.l	0(a2,d0.w),a3	;get command
		jsr	(a3)		;jump to it
		subq.b	#1,$d(a0)	;counter change
		rts

pie_commands	dc.l	reset_pie	;-1
		dc.l	entering_pie	;0
		dc.l	exit_pie	;1
		dc.l	down_pie	;2
		dc.l	left_pie	;3
		dc.l	right_pie	;4
		dc.l	rnd_pie		;5

left_pie	cmp.w	#0,$2(a0)	;check edge <--
		ble	hit_hard	;hit so take action
		subq.w	#2,$2(a0)	;otherwise move <<--
		bra	visible_pie

right_pie	cmp.w	#320-16,$2(a0)	;check -->
		bge	hit_hard	;hit so take action
		addq.w	#2,$2(a0)	;otherwise move -->>
		bra	visible_pie

rnd_pie		move.l	d1,-(sp)
		jsr	rnd
		move.l	(sp)+,d1
		and.w	#3,d0
		lea	pie_rnd_list,a2
		move.b	$0(a2,d0.w),$1(a0)
		move.b	#9,$d(a0)	;counter = 8 + 1
		move.w	#-1,d7
		rts

pie_rnd_list	dc.b	2,3,4,4

* down only pie

down_pie	move.l	$2(a0),d1	;pie x,y
		addq.w	#8,d1		;offset bellow pie
		bsr	bget_senermy	;solid to me?
		cmp.b	#28,d2
		blt.s	visible_pie_d
		cmp.b	#33,d2
		ble.s	visible_pie
visible_pie_d	addq.w	#1,$4(a0)	;going down

visible_pie	tst.b	$c(a0)		;inside pipe or not?
		beq.s	is_visible	;no so visible
		move.w	#-1,d7		;not visible
is_visible	rts

* copes exiting pipes

exit_pie	addq.w	#1,$4(a0)	;move down
		move.w	d1,d3
		andi.w	#7,d3		;0-7
		eori.w	#7,d3		;7=0 0=7
		addq.w	#1,d3
		add.w	d3,yyy		;fool y on screen!
		sub.w	d3,d7
		move.w	d3,d4
		mulu	#160,d4
		add.l	d4,spdata

no_dec_hip	clr.b	$c(a0)		;not in pipe anymore
no_yet_piee	rts			;done

* copes entring pipes

entering_pie	addq.w	#1,$4(a0)	;pie going down
		move.w	d1,d3		;get y of pie
		andi.w	#7,d3		;0-7 of y
		sub.w	d3,d7		;height of pie changing
		move.b	#1,$c(a0)	;flag now inside pipe
		rts

* reset pie co-orinates and counters states

reset_pie	clr.w	d0		;work with words
		clr.w	d1
		move.w	#-1,d7		;sprite_not visible
		clr.l	$c(a0)		;clear all counters
		move.b	$a(a0),d0	;get tab x
		subq.b	#1,d0
		lsl.w	#4,d0		;convert to grafix x
		move.w	d0,$2(a0)
		move.b	$b(a0),d1	;get tab y
		subq.b	#1,d1
		lsl.w	#3,d1		;convert to grafix y
		move.w	d1,$4(a0)
		clr.b	$1(a0)
		move.l	$2(a0),d1
		bsr	is_it_potty
		bne.s	no_see_pie
		addq.b	#1,$c(a0)
no_see_pie	move.l	true_stkp,sp
		bra	auto_fall
	

* is it inside pipe or not

is_it_potty	bsr	get_element	;returns true (beq) if a pot
		and.w	#$ff,d2
		cmp.w	#36,d2
		blt.s	failed_potty
		cmp.w	#41,d2
		bgt.s	failed_potty
		clr.b	d3
		tst.b	d3
		rts

failed_potty	move.b	#1,d3
		tst.b	d3
		rts


		even
pie_defs	dc.l	system_blk+$7d50
		dc.l	system_blk+$8250
		dc.l	system_blk+$8750
		dc.l	system_blk+$8c50
		dc.l	system_blk+$9150

auto_hard	dc.l	0

volcanic_bub	moveq.l	#24,d3
		bra.s	do_bubs

water_bubble	moveq.l	#0,d3
do_bubs		move.l	$2(a0),xxx
		moveq.l	#7,d7
		move.l	#system_blk+$9b38,spdata
		sub.l	d3,spdata

		cmp.w	#7,$8(a0)
		bne	no_water_AI
		clr.w	d1
		move.b	$e(a0),d1
		lea	water_bdefs,a1
		move.l	0(a1,d1.w),spdata
		sub.l	d3,spdata
		subq.w	#1,$4(a0)
		cmp.b	#24,$e(a0)
		beq.s	check_water_pop
		cmp.b	#40,$e(a0)
		beq.s	reset_origin
		move.b	sys_not,d1
		and.b	#1,d1
		tst.b	d1
		bne.s	check_water_pop
		addq.b	#4,$e(a0)
check_water_pop	cmp.w	#$ffff,$4(a0)
		beq.s	go_water_popper
		tst.b	$f(a0)
		beq.s	no_hotty_pop
		addq.b	#1,$f(a0)
		move.b	$f(a0),d2
		cmp.b	#20,d2
		beq.s	hot_it_pop
no_hotty_pop	move.l	$2(a0),d1
		bsr	bget_senermy
		bne.s	no_water_AI
go_water_popper	cmp.b	#24,$e(a0)
		bgt.s	no_water_AI		
hot_it_pop	move.b	#28,$e(a0)
no_water_AI	rts

reset_origin	clr.w	$e(a0)
		clr.w	d1
		clr.w	d2
		move.b	$a(a0),d1
		move.b	$b(a0),d2
		subq.b	#1,d1
		subq.b	#1,d2
		lsl.w	#4,d1
		lsl.w	#3,d2
		move.w	d1,$2(a0)
		move.w	d2,$4(a0)
		move.b	#-1,$1(a0)
		rts


		even

water_bdefs	dc.l	system_blk+$7d38
		dc.l	system_blk+$8238
		dc.l	system_blk+$8738
		dc.l	system_blk+$8c38
		dc.l	system_blk+$9138
		dc.l	system_blk+$9638
		dc.l	system_blk+$9b38

water_bpop	dc.l	system_blk+$a038
		dc.l	system_blk+$a038
		dc.l	system_blk+$a538
		dc.l	system_blk+$aa38
		dc.l	system_blk+$aa38

p_up_only	move.b	#1,bar1
		move.b	public+$b,d0
		move.b	public+$d,d1
		cmp.b	d1,d0
		beq	on_top_no
		move.b	public+$a,d2
		cmp.b	public+$c,d2
		beq.s	not_p_range1
		clr.w	public+$c
		rts
not_p_range1	cmp.b	d1,d0
		bgt	swap_uo1
		move.b	d1,public+$b
		move.b	d0,public+$d	
swap_uo1	rts

p_down_only	move.b	#1,bar1
		move.b	public+$b,d0
		move.b	public+$d,d1
		cmp.b	d1,d0
		beq.s	on_top_no
		move.b	public+$a,d2
		cmp.b	public+$c,d2
		beq.s	not_p_range2
		clr.w	public+$c
		rts
not_p_range2	cmp.b	d1,d0
		blt.s	swap_uo2
		move.b	d1,public+$b
		move.b	d0,public+$d	
swap_uo2	rts


p_up_down	move.b	public+$b,d0
		cmp.b	public+$d,d0
		beq.s	on_top_no
		move.b	public+$a,d0
		cmp.b	public+$c,d0
		beq.s	not_p_range3
on_top_no	clr.w	public+$c
not_p_range3	move.b	#1,bar1
		rts

p_left_right	move.b	public+$b,d0
		tst.b	d0
		beq.s	not_p_range4
		move.b	public+$d,d1
		tst.b	d1
		beq.s	not_p_range4
		cmp.b	d0,d1
		beq.s	not_p_range4
		clr.w	public+$c
not_p_range4	move.b	#1,bar2
		rts

p_d_right	tst.w	public+$a
		beq.s	no_fix_dir
		move.b	#1,bar3
		move.w	public+$a,d0
		cmp.w	public+$c,d0
		bne.s	no_remove_dl
		clr.w	public+$c
no_remove_dl	bsr	set_public
		move.w	#22,a3	;xx
		move.w	a3,d6
		sub.b	d2,d6
		move.b	d6,d2
		move.w	a3,d6
		sub.b	d4,d6
		move.b	d6,d4	;xx
		sub.b	d2,d1
		sub.b	d2,d2
		sub.b	d4,d3
		sub.b	d4,d4
		cmp.b	d1,d3
		bne.s	failed_p_d
		cmp.b	d2,d4
		bne.s	failed_p_d
no_fix_dir	rts
p_d_left	tst.w	public+$a
		beq.s	no_fix_dir2
		move.b	#1,bar4
		move.w	public+$a,d0
		cmp.w	public+$c,d0
		bne.s	no_remove_dl2
failed_p_d	clr.w	public+$c
		rts
no_remove_dl2	bsr	set_public
		sub.b	d1,d2
		sub.b	d1,d1
		sub.b	d3,d4
		sub.b	d3,d3
		cmp.b	d1,d3
		bne.s	failed_p_d
		cmp.b	d2,d4
		bne.s	failed_p_d
no_fix_dir2	rts

set_public	move.b	public+$a,d1
		move.b	public+$b,d2
		move.b	public+$c,d3
		move.b	public+$d,d4
p_boxed
p_stop		rts

		move.w	#$101,public+$6
		move.b	public+$a,d0
		move.b	public+$b,d1
		cmp.b	public+$c,d0
		blt.s	no_swap_box1
		move.b	#-1,public+$6
no_swap_box1	cmp.b	public+$d,d1
		bgt.s	no_swap_box2
		move.b	#-1,public+$7
no_swap_box2	rts

p_defined	move.l	sp,a6
		move.l	save_ptra2,a2
		move.w	save_ptrd0,d0
		cmp.w	#40,d0
		bge	no_checks_sys
		tst.w	d0
		beq	co_ord_ok
		subq.w	#2,d0
		move.b	0(a2,d0.w),d1	;xA1
		move.b	1(a2,d0.w),d2	;yA1
		move.b	2(a2,d0.w),d3	;xB1
		move.b	3(a2,d0.w),d4	;yB1
		clr.w	d5
		cmp.b	d1,d3
		beq.s	co_ord_ok
		cmp.b	d2,d4
		beq.s	co_ord_ok
		movem.w	d1-d4,-(sp)
spot_retry	cmp.b	d1,d2
		blt.s	diff_pc1
		sub.b	d1,d2
		sub.b	d1,d1
		sub.b	d3,d4
		sub.b	d3,d3
		cmp.b	d1,d3
		bne.s	failed_pc_spot
		cmp.b	d2,d4
		beq.s	co_ord_ok
failed_pc_spot	addq.b	#1,d5
		cmp.b	#2,d5
		beq.s	pc_spottie
		movem.w	(sp)+,d1-d4
		move.w	#22,a3
		move.w	a3,d6
		sub.b	d2,d6
		move.b	d6,d2
		move.w	a3,d6
		sub.b	d4,d6
		move.b	d6,d4
		bra.s	spot_retry
pc_spottie	clr.w	2(a2,d0.w)
		move.l	a6,sp
no_checks_sys	rts
diff_pc1	sub.b	d2,d1
		sub.b	d2,d2
		sub.b	d4,d3
		sub.b	d4,d4
		cmp.b	d1,d3
		bne.s	failed_pc_spot
		cmp.b	d2,d4
		beq.s	co_ord_ok
		bra.s	failed_pc_spot
co_ord_ok	move.l	a6,sp
		rts

pa_up_only	bsr	pa_up_downo
		move.l	public+$a,d0
		swap	d0
		move.l	d0,public+$a
		move.w	#1,public+$8
		rts

pa_down_only	bsr	pa_up_downo
		move.w	#2,public+$8
		rts

pa_up_down	move.b	#1,public+$7
		move.b	public+$b,d0
		move.b	public+$d,d1
		cmp.b	d1,d0
		beq	set_stop_path
		blt.s	flip_yupdn
		move.b	#-1,public+$7
		move.b	d1,public+$b
		move.b	d0,public+$d
flip_yupdn	move.w	#3,public+$8
		rts

pa_up_downo	move.b	#2,public+$6
pa_up_down2	move.b	public+$b,d0
		move.b	public+$d,d1
		cmp.b	d1,d0
		beq	set_stop_path
		blt.s	not_pa_range3
		move.b	d1,public+$b
		move.b	d0,public+$d
not_pa_range3	rts

pa_left_right	move.b	#1,public+$6
pa_left_right2	move.b	public+$a,d0
		move.b	public+$c,d1
		cmp.b	d1,d0
		beq	set_stop_path
		blt.s	not_pa_range4
		move.b	d1,public+$a
		move.b	d0,public+$c
		move.b	#-1,public+$6
not_pa_range4	move.w	#4,public+$8
		rts
pa_stop		bra	set_stop_path

pa_d_right
pa_d_left	bsr	pa_boxed
		move.w	#5,public+$8
		rts


pa_boxed
		bsr	pa_up_down
		bsr	pa_left_right2
		move.w	#8,public+$8
		rts

		clr.b	d7
		move.b	public+$a,d0
		move.b	public+$c,d1
		cmp.b	d1,d0
		bne.s	pa_boxed_1
		addq.b	#1,d7
pa_boxed_1	move.b	public+$b,d0
		move.b	public+$d,d1
		cmp.b	d1,d0
		bne.s	pa_boxed_2
		addq.b	#2,d7
pa_boxed_2	cmp.b	#3,d7
		beq.s	set_stop_path
		cmp.b	#2,d7
		beq	pa_left_right
		cmp.b	#1,d7
		beq	pa_up_downo	
		move.w	#8,public+$8
		bra	p_boxed
pa_defined	rts

set_stop_path	move.w	#7,public+$8
		rts

pc_up_only	move.b	#-1,$7(a0)
		subq.w	#1,$4(a0)
		clr.w	d1
		move.b	$1(a0),d1
		cmp.b	#16,d1
		blt.s	pc_up_entry
		cmp.b	#100,d1
		bne.s	pc_up_exit
pc_up_same	move.b	#100,$1(a0)
check_out_up	clr.w	d1
		move.b	$d(a0),d1	;??b
		subq.b	#1,d1
		lsl.w	#3,d1
		move.w	$4(a0),d2
		cmp.w	d1,d2
		bgt.s	exit_pc_up
		move.b	#101,$1(a0)
*		move.w	#-1,d7
exit_pc_up	rts

pc_up_exit	clr.b	permit_Sicon
		addq.w	#1,$4(a0)
		clr.w	d2
		move.b	$1(a0),d2
		sub.w	#101,d2
		sub.w	d2,d7
		mulu	#160,d2
		add.l	d2,spdata
		addq.b	#1,$1(a0)
		tst.w	d7
		bne.s	exit_pc_up
		clr.w	d1
		move.b	$b(a0),d1	;??d
		subq.w	#1,d1
		lsl.w	#3,d1
		move.w	d1,$4(a0)
		clr.b	$1(a0)
		move.l	$2(a0),d2
		move.w	#1000,d2
		move.l	d2,fools_y
		clr.b	set_done
		rts
	
pc_up_entry	

		clr.w	d3
		move.b	$b(a0),d3	;??b
		subq.b	#1,d3
		lsl.w	#3,d3
		move.w	$4(a0),d4
		add.w	#6,d3
		cmp.w	d3,d4
		ble.s	ok_no_flip
		move.w	d3,$4(a0)
		move.w	#-1,d7
		rts

ok_no_flip	cmp.w	#2,d1
		bgt	no_fool_ndead
		clr.b	set_done
no_fool_ndead	tst.w	d1
		bne.s	no_fool_up_1st
		cmp.w	#8,d7
		bge.s	too_large_up
		add.w	d7,$4(a0)
		bra.s	no_fool_yup_1st
too_large_up	addq.w	#7,$4(a0)
no_fool_yup_1st	move.l	$2(a0),d2
		addq.w	#1,d2
		move.l	d2,fools_y
no_fool_up_1st	cmp.w	d1,d7
		beq	pc_up_same
		move.w	d1,d7				
		addq.b	#1,$1(a0)
		move.l	$2(a0),xxx
		addq.w	#1,yyy
		bra	check_out_up

pc_down_only	move.b	#1,$7(a0)
		addq.w	#1,$4(a0)
		clr.w	d1
		move.b	$1(a0),d1
		cmp.b	#16,d1
		blt.s	pc_dn_entry
		cmp.b	#100,d1
		bne	pc_dn_exit
pc_dn_same	move.b	#100,$1(a0)
check_out_down	clr.w	d1
		move.b	$d(a0),d1	;??b
		subq.b	#1,d1
		lsl.w	#3,d1
		cmp.w	#8,d7
		blt.s	no_overflow_dn
		sub.w	d7,d1
		addq.w	#7,d1
no_overflow_dn	move.w	$4(a0),d2
		cmp.w	d1,d2
		ble.s	exit_pc_dn
		move.b	#101,$1(a0)
exit_pc_dn	rts

pc_dn_entry	clr.b	permit_Sicon
		clr.w	d2
		move.b	$1(a0),d2
		move.w	d7,d3
		move.w	d3,d4
		move.w	d2,d7
		mulu	#160,d3
		mulu	#160,d2
		add.l	d3,spdata
		sub.l	d2,spdata
		addq.b	#1,$1(a0)
		cmp.w	d4,d7
		beq	pc_dn_same
		subq.w	#1,$4(a0)
		bra	check_out_down

pc_dn_exit	clr.w	d1
		move.b	$1(a0),d1
		sub.w	#100,d1
		sub.w	d1,d7
		addq.b	#1,$1(a0)
		tst.w	d7
		bne	exit_pc_dn
		clr.w	d1
		move.b	$b(a0),d1	;??d
		subq.w	#1,d1
		lsl.w	#3,d1
		move.w	d1,$4(a0)
		clr.b	$1(a0)
		rts

pc_up_down	move.b	$7(a0),d1
		cmp.b	#1,d1
		beq.s	pc_ud_f
		subq.w	#1,$4(a0)
		clr.w	d1
		move.b	$b(a0),d1
		subq.b	#1,d1
		lsl.w	#3,d1
		cmp.w	#7,d7
		ble.s	not_biggie2
		cmp.b	#1,d6
		bne.s	not_biggie2
		move.w	d7,d4
		subq.w	#7,d4
		move.w	#8,d3		;8
		sub.w	d4,d3
		add.w	d3,d1
not_biggie2	cmp.b	#6,(a0)
		bne.s	no_more_balls
		cmp.w	#5,$8(a0)
		beq.s	no_more_balls
		subq.w	#7,d1
no_more_balls	move.w	$4(a0),d5
		cmp.w	d1,d5
		bgt	not_pc_range3
		move.b	#1,$7(a0)
		cmp.b	#6,(a0)
		bne.s	no_more_balls2
		cmp.w	#5,$8(a0)
		beq.s	no_more_balls2
		move.w	#12,$e(a0)
no_more_balls2	rts

pc_ud_f		addq.w	#1,$4(a0)	;move obj down
		clr.w	d1		;copes with words
		move.b	$d(a0),d1	;tab y 2
		subq.b	#1,d1		;true y
		lsl.w	#3,d1		;convert to graphic
		move.w	d7,d5		;get hight of char
		cmp.b	#6,(a0)
		bne.s	not_biggie
		cmp.w	#5,$8(a0)
		beq.s	not_biggie
		subq.w	#8,d1
not_biggie	move.w	$4(a0),d5
		cmp.w	d1,d5
		blt.s	not_pc_range3
		move.b	#-1,$7(a0)
		cmp.b	#6,(a0)
		bne.s	not_pc_range3
		cmp.w	#5,$8(a0)
		beq.s	not_pc_range3
		move.w	#16,$e(a0)
not_pc_range3	rts

pc_left_right	move.b	$6(a0),d1
		cmp.b	#1,d1
		beq.s	pc_lr_f
		subq.w	#2,$2(a0)
		clr.w	d1
		move.b	$a(a0),d1
		subq.b	#1,d1
		lsl.w	#4,d1
		move.w	$2(a0),d5
		cmp.w	d1,d5
		bgt	not_pc_range4
		move.b	#1,$6(a0)
		bra.s	not_pc_range4
pc_lr_f		addq.w	#2,$2(a0)
		clr.w	d1
		move.b	$c(a0),d1
		subq.b	#1,d1
		lsl.w	#4,d1
		move.w	$2(a0),d5
		cmp.w	d1,d5
		blt.s	not_pc_range4
		move.b	#-1,$6(a0)
not_pc_range4	
move_up_sprite
sprite_exit	rts

pc_d_right
pc_d_left	
pc_boxed	bsr	pc_up_down	
		bra	pc_left_right
		
		


pc_stop		bra	move_up_sprite

pc_defined
no_powy8	move.b	$b(a0),d6	;get pause counter
		tst.b	d6		;reached zero?
		beq.s	no_pauses_exec	;yes so no pauses
		subq.b	#1,$b(a0)	;decrease pause timer
psprite_hiok2	rts			;and exit

no_pauses_exec	clr.w	d5		;clr sys working pointer
		move.w	$8(a0),d1	;get path no
		sub.w	#1000,d1	;adjust to base of 0
		mulu	#40,d1		;adjust to data array[items]
		add.l	#path_def,d1	;so it path_def[items]
		move.l	d1,a1		;address a1 handles it!
failed_pc	tst.b	(a1)		;if id = zero then
		beq	path_fail_calc	;not a valid sprite id

		move.b	$1(a0),d5	;give sys path offset
		move.w	$2(a0),d0	;x pos of sprite
psprite_hiok	move.w	$4(a0),d1	;y pos of sprite

		cmp.b	#44,$1(a0)	;if reached max offset in list (44)
		bgt	make_fades	;then fade away
		tst.w	(a1)		;if path_def[0]=0
		beq	path_fail_calc	;then path not valid (remove)

		clr.w	d2		;clr words
		clr.w	d3		;clr word
		move.b	0(a1,d5.w),d2	;get x of destination
		move.b	1(a1,d5.w),d3	;get y of destination
		subq.b	#1,d2		;true screen x
		subq.b	#1,d3		;true screen y
		lsl.w	#4,d2		;adjust to graphic format
		lsl.w	#3,d3		;adjust to graphic format

		cmp.w	d0,d2		;is both x the same
		bne	so_shift_it	;no so just move
		cmp.w	d1,d3		;is both y the same?
		bne	so_shift_it	;no so just move


path_fine_calc	clr.w	d2		;copes with words
		clr.w	d3		;copes with words
		cmp.b	#2,$a(a0)
		bne.s	no_fcheck
		cmp.b	#38,d5		;reached list maximum?
		bgt	restart_path	;yes so start again	;bgt
no_fcheck	cmp.b	#$fe,d5		;reached minimum? ie backwards
		beq	restart_path
		cmp.b	#-2,$a(a0)
		bne.s	no_early_chk
		tst.b	d5
		beq	restart_path	;yes so recycle

no_early_chk	add.b	$a(a0),d5	;contains direction flag +|- 2

		cmp.b	#38,d5		;;
		bgt	restart_path	;;
		move.b	0(a1,d5.w),d2	;get new x from array[items+-2]
		tst.b	d2		;is it zero?
		beq	restart_path	;yes restart path_flow

		clr.w	d3		;copes with words
		move.b	$1(a0),d3	;get path offset
		move.w	0(a1,d3.w),d6	;get x1,y1

		cmp.b	#2,$a(a0)	;get direction byte
		bne.s	back_list_pc	;!=2 means backwards

		cmp.w	2(a1,d3.w),d6	;is array[item+2]=array[item]
		bne.s	no_pauses	;no, so it no pauses
		cmp.b	#2,$a(a0)
		bne.s	no_pc_upfp
		cmp.b	#38,d5
		bge	exec_fades	;fred
no_pc_upfp	cmp.b	#36,d5		;if ptr>36 then it is a pause!
		bgt.s	pausing_pc	;so do pause

		tst.w	4(a1,d3.w)	;if array[items+4]=0 it fading
		beq	exec_fades	;so do fade

pausing_pc	move.b	#8,$b(a0)	;flag a pause
		move.b	d5,$1(a0)	;give me latest system ptr
		rts			;and exit for pauses

back_list_pc	tst.b	d5		;is offset zero?
		beq.s	no_pauses	;yes so no pauses
		bmi.s	no_pauses
		subq.w	#2,d3		;sub array item-2
		tst.b	d3
		beq.s	no_pauses
		bmi.s	no_pauses
		cmp.w	0(a1,d3.w),d6	;is array[item]=array[item-2]
		beq.s	pausing_pc	;is a pause then

no_pauses
		clr.w	d3
		move.b	d5,$1(a0)	;get new offset
		move.b	1(a1,d5.w),d3	;get new y
		move.b	d2,$c(a0)	;save it to old x*****
		move.b	d3,$d(a0)	;save it to old y
		subq.b	#1,d2		;true x
		subq.b	#1,d3		;true y
		lsl.w	#4,d2		;convert tab to graphics
		lsl.w	#3,d3		;convert tab to graphics
		cmp.w	d2,d0		;is destination same?
		beq.s	no_x_adjust	;yes so don't adjust x
		blt.s	move_pright	;is it <destination?
		move.b	#-1,$6(a0)	;move left
		bra.s	pathie_up	;now do the up dir
no_x_adjust	clr.b	$6(a0)		;not moving in the x direction
		bra.s	pathie_up	;now do the up dir
move_pright	move.b	#1,$6(a0)	;move right
pathie_up	cmp.w	d3,d1		;is y the same
		beq.s	no_y_adjust	;yes so no y direction
		blt.s	move_pdown	;move down
		move.b	#-1,$7(a0)	;otherwise move it
		bra	so_shift_it	;move direction now	
no_y_adjust	clr.b	$7(a0)		;no movement in y
		bra	so_shift_it	;move direction now
move_pdown	move.b	#1,$7(a0)	;moving down
		bra	so_shift_it	;move direction now

restart_path	cmp.b	#2,$a(a0)	;is item inc flag =+2
		beq.s	back_ward_pc	;then make backward
		move.b	#2,$a(a0)	;else make forwards
		clr.w	d5		;new path ptr
		bra	path_fine_calc	;redo path calc

back_ward_pc	subq.w	#2,d5		;re-adjust path ptr
		tst.w	d5		;is it zero?
		beq.s	exec_fades	;yes therefore not moved (fade)
		move.w	0(a1,d5.w),a6	;get current def [?]x,[?]y
		move.w	(a1),d6		;get [a]x,[a]y
		cmp.w	a6,d6		;is [?]x,[?]y = [a]x,[a]y?
		beq	restart_pc	;yes therefore re-cycle
		move.b	#-2,$a(a0)	;no bounce back
		bra	path_fine_calc	;and do it

exec_fades	move.b	#50,$1(a0)	;start fading routine
make_fades	
		clr.w	d0
		move.b	$1(a0),d0	;get fade counter
		sub.b	#50,d0		;sub flag
		cmp.b	#8,d0		;reached max fade off?
		beq	init_pc_def	;yes so restart new pos
		cmp.b	#17,d0		;reached max fade on?
		beq	restart_pcz	;totaly init
fading		tst.w	sprite_pass
		bne.s	n_forced
		move.l	force_old,$8(a0)
		move.l	force_old2,$c(a0)
n_forced	tst.b	killer_good
		beq.s	no_add_fade1
		move.b	sys_not,d1	;get my updated location
		and.b	#1,d1		;get 0 or 1
		tst.b	d1		;is is zero?
		beq.s	no_add_fade1	;yes get do fade frame here
		addq.b	#1,$1(a0)	;up date next fade frame defs
no_add_fade1	lsl.w	#2,d0		;adjust to array offset
		lea	fade_defs,a2	;base address of array
		move.l	0(a2,d0.w),a2	;a2 hold sprite mask
		clr.l	d0		;copes with lword
		move.w	$2(a0),d0	;get graphic X
		lsr.w	#1,d0		;divide by 2 to screen map
		move.w	$4(a0),d1	;get y
valid_date_fade	tst.w	d1		;now is sprite off screen?
		bpl.s	valid_fade	;no therefore no need to adjust
		add.l	#160,spdata	;adjust sprite read pos
		addq.w	#1,d1		;adjust sprite scan line
		dbra	d7,valid_date_fade	;dec hi and redo {NT}
valid_fade	move.w	d1,d4
		add.w	d7,d4
		cmp.w	#160,d4
		blt.s	verify_fade
		dbra	d7,valid_fade
verify_fade	tst.b	cross_effects	;does cross effect it?
		bne	cross_fade	;no fading!
		clr.b	set_done	;nothin kills you when fading
pain_in_the_nec	tst.b	killer_good	;killer?
		bne.s	norm_fade	;yes fading
		move.w	#-1,d7
		rts
norm_fade	tst.w	flash_item
		beq.s	go_on_fade
		move.b	sys_not,d3
		and.b	#1,d3
		bne.s	go_on_fade
		move.w	saved0s,d3
		lsr.w	#4,d3
		clr.w	d2
		move.b	which_icon,d2
		cmp.w	d3,d2
		bne.s	go_on_fade
		move.w	#-1,d7
		rts
go_on_fade	mulu	#160,d1		;mulu by scan line
		add.l	old_screen,d1	;+ flip screen offset
		add.l	d0,d1		;+ raster x line
		move.l	d1,a3		;a3 hold screen address
		move.l	spdata,a4	;a4 hold sprite definition
next_plane	move.w	#3,d3		;3 planes
		move.w	(a4),d0		;most complicated sprite
		or.w	2(a4),d0	;routine yet
		or.w	4(a4),d0	;this is calculating
		or.w	6(a4),d0	;the sprite mask
		move.w	d0,a6		;save mask
rep_spr_def	move.w	(a4)+,d0	;get sprite def
		and.w	(a2),d0		;mask it with sprite mask
		move.w	a6,d1		;get sprite mask definition
		and.w	(a2),d1		;mask it with sprite mask
		not.w	d1		;and inverse all bits
		move.w	(a3),d2		;get screen definition
		and.w	d1,d2		;mask it with inverse mask
		or.w	d0,d2		;or sprite definition to screen
		move.w	d2,(a3)+	;send it to screen
		dbra	d3,rep_spr_def	;all planes
		add.l	#160,a2		;next raster mask
		add.l	#152,a3		;next screen address
		add.l	#152,a4		;next sprite def
		dbra	d7,next_plane	;rows of sprite
cross_fade	move.w	#-1,d7		;reset d7 so that other sprite
		rts			;routines are fooled
		
init_pc_def	clr.w	d2		;copes with words
		clr.w	d3		;copes with words
		clr.w	d5		;reset d5
		move.w	(a1),$c(a0)	;give it to me
		move.b	(a1),d2		;get first path [a]x		
		move.b	1(a1,d5.w),d3	;get first path [a]y
		tst.b	d2		;is that zero?
		beq.s	path_fail_calc	;no so it not a valid_path
		subq.b	#1,d2		;true x
		subq.b	#1,d3		;true y
		lsl.w	#4,d2		;graphics
		lsl.w	#3,d3		;graphics
		move.w	d2,$2(a0)	;reset x
		move.w	d3,$4(a0)	;reset y
		bra	fading		;fade item on screen

restart_pcz	move.w	$c(a0),d6	;has path defs of [a],xy
		cmp.w	(a1),d6		;changed since fading?
		bne	exec_fades	;little git fooling system

restart_pc	clr.b	$1(a0)		;reset lookup ptr
		clr.w	d5		;reset system ptr
		move.b	#2,$a(a0)	;moving forward in list
		move.w	2(a1,d5.w),$c(a0)
		move.w	$2(a0),d0	;get current x to d0
		move.w	$4(a0),d1	;get current y to d1
		bra	path_fine_calc	;restart this routine again

path_fail_calc	clr.b	(a0)		;illigal path remove sprite
		move.w	#$ffff,d7	;and clear sprite length
		rts			;and exit otherwise it crashes

so_shift_it	tst.w	(a1)		;is array[0]=0
		beq.s	path_fail_calc	;yes then a illigal path
		move.w	$2(a0),d6	;get current x
		and.w	#15,d6		;is it in screen plane boundary
		tst.w	d6		;test
		bne.s	no_fading_bound	;yes so no fading away
		move.w	$0(a1,d5.w),d6	;get x,y im going to****
		cmp.w	$c(a0),d6	;is it still there?
		bne	exec_fades	;the little git fooling system
no_fading_bound
		move.l	$2(a0),xxx
		move.b	$6(a0),d0
		tst.b	d0
		beq.s	no_lr_dir
		cmp.b	#1,d0
		beq.s	mpright
		subq.w	#2,$2(a0)
		bra	no_lr_dir
mpright		addq.w	#2,$2(a0)
no_lr_dir	move.b	$7(a0),d0
		tst.b	d0
		beq.s	no_ud_dir
		cmp.b	#1,d0
		beq.s	mpdown
		subq.w	#1,$4(a0)
		bra.s	no_ud_dir
mpdown		addq.w	#1,$4(a0)
no_ud_dir	rts

		even

fade_defs	dc.l	system_blk+$7d98
		dc.l	system_blk+$7d98+$a00
		dc.l	system_blk+$7d98+$a00*2
		dc.l	system_blk+$7d98+$a00*3
		dc.l	system_blk+$7d98+$a00*4
		dc.l	system_blk+$7d98+$a00*5
		dc.l	system_blk+$7d98+$a00*6
		dc.l	system_blk+$7d98+$a00*7
appear_defs	dc.l	system_blk+$7d98+$a00*6
		dc.l	system_blk+$7d98+$a00*5
		dc.l	system_blk+$7d98+$a00*4
		dc.l	system_blk+$7d98+$a00*3
		dc.l	system_blk+$7d98+$a00*2
		dc.l	system_blk+$7d98+$a00	
		dc.l	system_blk+$7d98
		dc.l	system_blk+$7d98+$a00*8
		dc.l	system_blk+$7d98+$a00*8

mask_question	move.l	#system_blk+$f50,a1
		move.l	#system_blk+$f58,a2
		move.w	#7,d1
print_quez	move.l	(a3),d0
		and.l	(a2)+,d0
		or.l	(a1)+,d0
		move.l	d0,(a3)+
		move.l	(a3),d0
		and.l	(a2),d0
		or.l	(a1),d0
		move.l	d0,(a3)
		add.l	#156,a3
		add.l	#156,a1
		add.l	#156,a2
		dbra	d1,print_quez
		rts

draw_qx		clr.w	d0
		move.b	lastalpy,d0
		subq.b	#1,d0
		mulu	#$500,d0
		add.l	old_screen,d0
		move.l	d0,a3
		move.w	#19,d3
next_dqx	move.l	a3,-(sp)
		bsr	mask_question
		move.l	(sp)+,a3
		addq.l	#8,a3
		dbra	d3,next_dqx
		rts

draw_qy		clr.l	d0
		move.b	lastalpx,d0
		subq.b	#1,d0
		lsl.w	#3,d0
		add.l	old_screen,d0
		move.l	d0,a3
		move.w	#19,d3
next_dqy	move.l	a3,-(sp)
		bsr	mask_question
		move.l	(sp)+,a3
		add.l	#$500,a3
		dbra	d3,next_dqy
		rts

draw_dia1	clr.l	d0
		move.l	d0,d1
		move.b	lastalpy,d0
		subq.b	#1,d0
		move.b	lastalpx,d1
		subq.b	#1,d1
next_low_dia1	cmp.b	#19,d0
		beq.s	done_low_dia1
		tst.b	d1
		beq.s	done_low_dia1
		addq.b	#1,d0
		subq.b	#1,d1
		bra.s	next_low_dia1
done_low_dia1	cmp.b	#0,d1
		bne.s	no_y_count_dia1	
		move.w	d0,d3
		bra.s	exec_dia1
no_y_count_dia1	move.w	#19,d3
		sub.w	d1,d3
exec_dia1	mulu	#$500,d0
		add.l	old_screen,d0
		lsl.w	#3,d1
		add.l	d1,d0
		move.l	d0,a3
next_dqia1	move.l	a3,-(sp)
		bsr	mask_question
		move.l	(sp)+,a3
		sub.l	#$4f8,a3
		dbra	d3,next_dqia1
		rts

draw_dia2	clr.l	d0
		move.l	d0,d1
		move.b	lastalpy,d0
		subq.b	#1,d0
		move.b	lastalpx,d1
		subq.b	#1,d1
next_low_dia2	tst.b	d0
		beq.s	done_low_dia2
		tst.b	d1
		beq.s	done_low_dia2
		subq.b	#1,d0
		subq.b	#1,d1
		bra.s	next_low_dia2
done_low_dia2	cmp.b	#0,d1
		bne.s	no_y_count_dia2	
		move.w	#19,d3
		sub.w	d0,d3
		bra.s	exec_dia2
no_y_count_dia2	move.w	#19,d3
		sub.w	d1,d3
exec_dia2	mulu	#$500,d0
		add.l	old_screen,d0
		lsl.w	#3,d1
		add.l	d1,d0
		move.l	d0,a3
next_dqia2	move.l	a3,-(sp)
		bsr	mask_question
		move.l	(sp)+,a3
		add.l	#$508,a3
		dbra	d3,next_dqia2
		rts

		even

path_max	dc.b	2,2,2,2,2,2,1,2,20,-1
do_kill		dc.l	0,0,0,0

path_check	dc.l	p_up_only
		dc.l	p_down_only
		dc.l	p_up_down
		dc.l	p_left_right
		dc.l	p_d_right
		dc.l	p_d_left
		dc.l	p_stop
		dc.l	p_boxed
		dc.l	p_defined

path_adjust	dc.l	pa_up_only
		dc.l	pa_down_only
		dc.l	pa_up_down
		dc.l	pa_left_right
		dc.l	pa_d_right
		dc.l	pa_d_left
		dc.l	pa_stop
		dc.l	pa_boxed
		dc.l	pa_defined

path_control	dc.l	pc_stop
		dc.l	pc_up_only
		dc.l	pc_down_only
		dc.l	pc_up_down
		dc.l	pc_left_right
		dc.l	pc_d_right
		dc.l	pc_d_left
		dc.l	pc_stop
		dc.l	pc_boxed
		dc.l	0		;this is a dummy

id_init		dc.b	1		;brick
		dc.b	0
		dc.w	106
		dc.w	24
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	2		;spikes
		dc.b	0
		dc.w	106
		dc.w	56
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	3		;volcanic rock
		dc.b	0
		dc.w	105
		dc.w	94
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	4		;burning barrel
		dc.b	0
		dc.w	106
		dc.w	114-8
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	5		;mobile platform
		dc.b	0
		dc.w	106
		dc.w	143
		dc.b	0
		dc.b	0
		dc.w	4
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	6		;bouncing balls
		dc.b	0
		dc.w	246
		dc.w	24
		dc.b	1
		dc.b	1
		dc.w	3
		dc.b	3
		dc.b	3
		dc.b	5
		dc.b	5
		dc.b	0
		dc.b	0

		dc.b	7		;Jack in a box
		dc.b	0
		dc.w	246
		dc.w	56-8
		dc.b	0
		dc.b	0
		dc.w	4
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	8		;space invader
		dc.b	0
		dc.w	246
		dc.w	84-8
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	9		;custard pie
		dc.b	-1
		dc.w	246
		dc.w	114
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	10		;water bubble
		dc.b	0
		dc.w	246
		dc.w	142
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

id_init2	dc.b	11		;follow the wall
		dc.b	0
		dc.w	106
		dc.w	24
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	5

		dc.b	12		;guiding spikes
		dc.b	0
		dc.w	106
		dc.w	56
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	13		;falling ice
		dc.b	0
		dc.w	105
		dc.w	84
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	14		;deadly arrow
		dc.b	0
		dc.w	106
		dc.w	114
		dc.b	0
		dc.b	0
		dc.w	4
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	15		;unholy magic
		dc.b	0
		dc.w	106
		dc.w	136
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	16		;push me
		dc.b	11
		dc.w	246
		dc.w	24
		dc.b	1
		dc.b	1
		dc.w	3
		dc.b	3
		dc.b	3
		dc.b	5
		dc.b	5
		dc.b	0
		dc.b	0

		dc.b	17		;sliding spikes 
		dc.b	0
		dc.w	246
		dc.w	56-8
		dc.b	0
		dc.b	0
		dc.w	4
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	18		;sucking spikes
		dc.b	0
		dc.w	246
		dc.w	84-8
		dc.b	0
		dc.b	0
		dc.w	7
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	19		;homing ghost
		dc.b	0
		dc.w	246
		dc.w	108
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	20		;volcanic buble
		dc.b	0
		dc.w	246
		dc.w	142
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

id_init3	dc.b	21		;rolling barrel
		dc.b	0
		dc.w	106
		dc.w	24
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	22		;spring thing
		dc.b	0
		dc.w	106
		dc.w	56
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	23		;shadow murder
		dc.b	0
		dc.w	105
		dc.w	80
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	24

		dc.b	24		;falling spikes
		dc.b	0
		dc.w	106
		dc.w	108
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	25		;post left
		dc.b	0
		dc.w	106
		dc.w	140
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	26		;post right
		dc.b	0
		dc.w	246
		dc.w	24
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	27		;post up
		dc.b	0
		dc.w	246
		dc.w	56-4
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	28		;post down
		dc.b	0
		dc.w	246
		dc.w	84-2
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	29		;No keys allowed
		dc.b	0
		dc.w	246
		dc.w	108
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0

		dc.b	30		;magic key master
		dc.b	0
		dc.w	246
		dc.w	142-5
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0



id_init4	dc.b	31		;switch #1
		dc.b	0
		dc.w	116
		dc.w	24
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	11
		dc.b	1

		dc.b	32		;switch #2
		dc.b	0
		dc.w	116
		dc.w	55
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	7
		dc.b	1

		dc.b	33		;switch #3
		dc.b	0
		dc.w	116
		dc.w	83
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	4
		dc.b	0

		dc.b	34		;switch #4
		dc.b	0
		dc.w	116
		dc.w	112
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	2
		dc.b	1

		dc.b	35		;switch #5
		dc.b	0
		dc.w	116
		dc.w	140
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	6
		dc.b	0
		dc.b	8
		dc.b	0
		dc.b	8
		dc.b	0

		dc.b	36		;switch #6
		dc.b	0
		dc.w	256
		dc.w	24
		dc.b	1
		dc.b	1
		dc.w	0
		dc.b	3
		dc.b	3
		dc.b	5
		dc.b	5
		dc.b	9
		dc.b	0

		dc.b	37		;swicth #7
		dc.b	0
		dc.w	256
		dc.w	55
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	3
		dc.b	1

		dc.b	38		;switch #8
		dc.b	0
		dc.w	256
		dc.w	83
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	15
		dc.b	0
		dc.b	18
		dc.b	0
		dc.b	14
		dc.b	1

		dc.b	39		;switch #9
		dc.b	0
		dc.w	256
		dc.w	112
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	5
		dc.b	0

		dc.b	40		;switch #10
		dc.b	0
		dc.w	256
		dc.w	140
		dc.b	0
		dc.b	0
		dc.w	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	0
		dc.b	1
		dc.b	1




table_routine	dc.l	crumb_routine
		dc.l	poke_spike
		dc.l	volcanic_rock
		dc.l	burning_barrel
		dc.l	mobile_platform		
		dc.l	bouncing_ball
		dc.l	jack_in_a_box
		dc.l	space_invader
		dc.l	custard_pie
		dc.l	water_bubble

table_routine2	dc.l	round_the_wall
		dc.l	oppo_spikes
		dc.l	ice_fall
		dc.l	deadly_arrow
		dc.l	unholy_magic		
		dc.l	push_me
		dc.l	sliding_spikes
		dc.l	sucking_spikes
		dc.l	homing_ghost
		dc.l	volcanic_bub

table_routine3	dc.l	rolling_barrel
		dc.l	push_jump
		dc.l	shadow_murders
		dc.l	falling_gate
		dc.l	shoot_postl
		dc.l	shoot_postr
		dc.l	shoot_postu
		dc.l	shoot_postd
		dc.l	no_keys_allowed
		dc.l	magic_key

table_routine4	dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch
		dc.l	show_switch

table_routine5	dc.l	oppo_direct
		dc.l	autorise
		dc.l	autofall
		dc.l	spring_fall
		dc.l	spring_rise
		dc.l	stop_me
		dc.l	oppo_foll
		dc.l	oppo_updn
		dc.l	go_when_on
		dc.l	slip_when_on


crumb_brick_pos	dc.l	system_blk+$7d00
		dc.l	system_blk+$7d08
		dc.l	system_blk+$7d10
		dc.l	system_blk+$7d18
		dc.l	system_blk+$fa00
		dc.l	system_blk+$fa00
		dc.l	system_blk+$fa00
		dc.l	system_blk+$fa00
		dc.l	system_blk+$7d18
		dc.l	system_blk+$7d10
		dc.l	system_blk+$7d08
		dc.l	system_blk+$7d00
		dc.l	system_blk+$fa50
		dc.l	system_blk+$fa50
		dc.l	system_blk+$fa50
		dc.l	system_blk+$fa50



round_the_wall	moveq.l	#7,d7
		clr.w	d4
		move.l	#system_blk+$7d00+$a40,spdata
no_ani_rwall	cmp.b	#32,$e(a0)
		bgt	dizzy_round_end
no_chn_dizzy	cmp.w	#7,$8(a0)
		bne	round_the_wall4
		move.l	$2(a0),d5
		clr.w	d1
		move.b	$f(a0),d1
		lsl.w	#2,d1
		lea	which_r_wall,a1
		move.l	0(a1,d1.w),a2
		jmp	(a2)

dizzy_round_end	move.b	#5,$f(a0)
		clr.b	$e(a0)
		rts

round_the_wall0	cmp.w	#4,d4
		bgt	dizzy_round_end
		addq.w	#1,d4
		move.l	d5,d1
		add.l	#$100007,d1
		bsr	bget_senermyz
		beq.s	rtw0_2
		move.l	d5,d1
		add.l	#$100000,d1
		bsr	bget_senermyz
		beq.s	rtw0_2
		move.b	#3,$f(a0)
		addq.b	#1,$e(a0)
		bra	dortw3
rtw0_2		move.l	d5,d1
		addq.w	#8,d1
		bsr	bget_senermyz
		beq.s	rtw0_chn
		clr.b	$e(a0)
dortw0		addq.w	#$1,$4(a0)
dizzy_round	rts
rtw0_chn	clr.b	$e(a0)
		move.b	#1,$f(a0)

round_the_wall1	addq.w	#1,d4
		move.l	d5,d1
		addq.w	#8,d1
		bsr	bget_senermyz
		beq.s	rtw1_2
		move.l	d5,d1
		add.l	#$e0008,d1
		bsr	bget_senermyz
		beq.s	rtw1_2
		clr.b	$f(a0)
		addq.b	#1,$e(a0)
		bra.s	dortw0
rtw1_2		move.l	d5,d1
		sub.l	#$20000,d1
		bsr	bget_senermyz
		beq.s	rtw1_chn
		clr.b	$e(a0)
dortw1		subq.w	#$2,$2(a0)
		rts
rtw1_chn	clr.b	$e(a0)
		move.b	#2,$f(a0)

round_the_wall2	addq.w	#1,d4
		move.l	d5,d1
		sub.l	#$20000,d1
		bsr	bget_senermyz
		beq.s	rtw2_2
		move.l	d5,d1
		sub.l	#$20000,d1
		addq.w	#7,d1
		bsr	bget_senermyz
		beq.s	rtw2_2
		addq.b	#1,$e(a0)
		move.b	#1,$f(a0)
		bra.s	dortw1
rtw2_2		move.l	d5,d1
		subq.w	#1,d1
		bsr	bget_senermyz
		beq.s	rtw2_chn
		clr.b	$e(a0)
dortw2		subq.w	#$1,$4(a0)
		rts
rtw2_chn	move.b	#3,$f(a0)
		clr.b	$e(a0)


round_the_wall3	addq.w	#1,d4
		move.l	d5,d1
		subq.w	#1,d1
		add.l	#$e0000,d1
		bsr	bget_senermyz
		beq.s	rtw3_2
		move.l	d5,d1
		subq.w	#$1,d1
		bsr	bget_senermyz
		beq.s	rtw3_2
		move.b	#2,$f(a0)
		addq.b	#1,$e(a0)
		bra.s	dortw2
rtw3_2		move.l	d5,d1
		add.l	#$100000,d1
		bsr	bget_senermyz
		beq.s	rtw3_chn
		clr.b	$e(a0)
dortw3		addq.w	#$2,$2(a0)
		rts
rtw3_chn	clr.b	$e(a0)
		clr.b	$f(a0)
		bra	round_the_wall0

round_the_wall4	rts

round_the_wall5	move.l	d5,d1
		move.b	#8,$e(a0)
		move.w	d1,d2
		andi.w	#7,d2
		tst.w	d2
		bne.s	forced_rdn
		addq.w	#8,d1
		bsr	bget_senermyz
		beq	rtw0_chn
forced_rdn	addq.w	#1,$4(a0)
		rts

bget_senermyz	bra	bget_senermy

		

which_r_wall	dc.l	round_the_wall0
		dc.l	round_the_wall1
		dc.l	round_the_wall2
		dc.l	round_the_wall3
		dc.l	round_the_wall4
		dc.l	round_the_wall5	


oppo_spikes	cmp.w	#7,$8(a0)
		bne	opps	
		move.w	manx,d2
		cmp.w	old_man_x,d2
		blt.s	move_oppo_l
		beq.s	oppo_s_updn
		move.l	$2(a0),d1
		sub.l	#$20000,d1
		bsr	bget_senermy
		beq.s	oppo_s_updn
		addq.w	#7,d1
		bsr	bget_senermy
		beq.s	oppo_s_updn
		subq.w	#2,$2(a0)
		bra.s	oppo_s_updn
move_oppo_l	move.l	$2(a0),d1
		add.l	#$c0000,d1
		bsr	bget_senermy
		beq.s	oppo_s_updn
		addq.w	#7,d1
		bsr	bget_senermy
		beq.s	oppo_s_updn
		addq.w	#2,$2(a0)
oppo_s_updn	move.w	many,d2
		cmp.w	old_man_y,d2
		bgt.s	move_oppo_u
		beq.s	opps
		move.l	$2(a0),d1
		addq.w	#8,d1
		bsr	bget_senermy
		beq.s	opps
		add.l	#$a0000,d1
		bsr	bget_senermy
		beq.s	opps
		addq.w	#1,$4(a0)
		bra.s	opps
move_oppo_u	move.l	$2(a0),d1
		subq.w	#1,d1
		bsr	bget_senermy
		beq.s	opps
		add.l	#$a0000,d1
		bsr	bget_senermy
		beq.s	opps
		subq.w	#1,$4(a0)		
opps
		move.l	#system_blk+$1440+$7d00,spdata
		move.w	#7,d7
		rts
		
		
old_man_x	dc.w	0
old_man_y	dc.w	0


ice_fall	move.l	#$7d00+$1940+system_blk,spdata
		move.w	#7,d7
		cmp.w	#7,$8(a0)
		bne	no_ice_fall
		clr.w	d2
		move.b	$e(a0),d2
		cmp.b	#16,d2
		bge.s	try_ice_fall
		lsr.w	#1,d2
		move.w	d2,d7
		lea	ice_part_stage,a1
		lsl.w	#2,d2
		move.l	0(a1,d2.w),spdata
		addq.b	#1,$e(a0)
no_ice_fall2	rts

try_ice_fall	cmp.b	#16,$e(a0)
		bne.s	falling_ice
		cmp.b	#20,priority
		blt.s	no_ice_fall2
		move.w	manx,d2
		add.w	#10,d2
		move.w	$2(a0),d1
		cmp.w	d1,d2
		blt.s	no_ice_fall
		sub.w	#10,d2
		add.w	#16,d1
		cmp.w	d1,d2
		bgt.s	no_ice_fall
		addq.b	#1,$e(a0)
no_ice_fall	rts

falling_ice	cmp.b	#17,$e(a0)
		bne.s	hit_ground
		addq.w	#4,$4(a0)
		move.l	$2(a0),d1
		addq.w	#6,d1
		bsr	bget_senermy
		bne.s	no_ice_fall
		move.b	#100,$e(a0)
		and.w	#%1111111111111000,$4(a0)
		addq.w	#2,$4(a0)	
		rts

hit_ground	clr.w	d2
		move.b	$e(a0),d2
		sub.w	#100,d2
		lsr.w	#1,d2
		lsl.w	#2,d2
		lea	ice_crumb_stage,a1
		move.l	0(a1,d2.w),spdata
		addq.b	#1,$e(a0)
		cmp.b	#106,$e(a0)
		bne.s	no_ice_fall
		clr.b	$e(a0)
		clr.w	d1
		move.b	$b(a0),d1
		subq.w	#1,d1
		lsl.w	#3,d1
		move.w	d1,$4(a0)
		rts

ice_part_stage	dc.l	system_blk+$1940+$7d00+160*7
		dc.l	system_blk+$1940+$7d00+160*6
		dc.l	system_blk+$1940+$7d00+160*5
		dc.l	system_blk+$1940+$7d00+160*4
		dc.l	system_blk+$1940+$7d00+160*3
		dc.l	system_blk+$1940+$7d00+160*2
		dc.l	system_blk+$1940+$7d00+160
		dc.l	system_blk+$1940+$7d00

ice_crumb_stage	dc.l	system_blk+$1940+$7d00+$500
		dc.l	system_blk+$1940+$7d00+$500*2
		dc.l	system_blk+$1940+$7d00+$500*3


deadly_arrow	move.l	#$7d00+system_blk+$3238,spdata
		move.w	#2,d7
		cmp.b	#1,$6(a0)
		bne.s	no_forw_deada
		add.l	#160*3,spdata
no_forw_deada	cmp.w	#7,$8(a0)
		beq.s	AI_da
no_off_DA	rts

AI_da		tst.b	$e(a0)
		bne.s	too_late_DA
		cmp.b	#20,priority
		blt.s	no_off_DA
too_late_DA	move.b	$e(a0),d1
		cmp.b	#30,d1
		bgt.s	do_move_DA
		tst.w	sprite_pass
		beq.s	nDA_kills
		addq.b	#1,$e(a0)
		andi.b	#1,d1
		beq.s	no_off_DA
		move.w	#-1,d7
		rts

do_move_DA	cmp.b	#1,$f(a0)
		beq.s	lock_in_DA
		move.w	$4(a0),d1
		cmp.w	many,d1
		beq.s	shoot_DA
		bgt.s	move_DA_up
		addq.w	#1,$4(a0)
		rts
move_DA_up	subq.w	#1,$4(a0)
		rts
shoot_DA	move.b	#1,$f(a0)
		rts
nDA_kills	clr.b	set_done
		move.w	#-1,d7
		rts

lock_in_DA	cmp.b	#1,$6(a0)
		beq.s	forward_DA
		tst.w	$2(a0)
		beq.s	reset_DA
		sub.w	#16,$2(a0)
		rts

forward_DA	add.w	#16,$2(a0)
		cmp.w	#320,$2(a0)
		bne.s	no_reset_DA
reset_DA	clr.w	d1
		move.b	$a(a0),d1
		subq.w	#1,d1
		lsl.w	#4,d1
		move.w	d1,$2(a0)
		cmp.w	manx,d1
		blt.s	fire_DA_lsr
		move.b	#-1,$6(a0)
		bra.s	fired_DA_lsl
fire_DA_lsr	move.b	#1,$6(a0)
fired_DA_lsl	clr.w	d1
		move.b	$b(a0),d1
		subq.w	#1,d1
		lsl.w	#3,d1
		move.w	d1,$4(a0)
		clr.w	$e(a0)
no_reset_DA	rts
		
unholy_magic	move.l	#system_blk+$7250+$7d00+320,spdata
		move.w	#15,d7
		move.w	$2(a0),d2
		cmp.b	#20,priority
		ble.s	no_break_maj
		move.w	manx,d3
		add.w	#10,d3
		cmp.w	d2,d3
		blt.s	no_break_maj
		add.w	#$10,d2
		sub.w	#10,d3
		cmp.w	d2,d3
		bgt.s	no_break_maj
		move.w	many,d2
		move.w	$4(a0),d3
		add.w	#16,d2
		cmp.w	d3,d2
		blt.s	no_break_maj
		sub.w	#16,d2
		add.w	#16,d3
		cmp.w	d3,d2
		bgt.s	no_break_maj
		cmp.b	#20,priority
		blt.s	no_break_maj
		add.b	#100,(a0)
		subq.w	#1,toggle_maj
no_break_maj	rts

		even
toggle_maj	dc.w	0

broken_maj	tst.w	sprite_pass
		beq	not_valid_main
		move.l	#system_blk+$7d00+$7258+320,spdata
		move.w	#15,d7
		bra	check_evil

push_me		move.w	#7,d7
		move.l	#system_blk+$7d00+$1430,spdata
		cmpi.w	#7,$8(a0)
		bne.s	no_hard_push
		move.l	#na_ai_push,auto_hard
		bsr	auto_fall
no_hard_push	rts

na_ai_push	
		move.l	$2(a0),d1	;pie x,y
		move.w	manx,d2
		move.w	$2(a0),d3
		add.w	#6,d2
		cmp.w	d3,d2
		blt.s	no_moves_p
		sub.w	#6,d2
		add.w	#12,d3
		cmp.w	d3,d2
		bgt.s	no_moves_p
		move.w	many,d2
		move.w	d1,d3
		add.w	#16,d2
		cmp.w	d3,d2
		ble.s	no_moves_p
		sub.w	#16,d2
		addq.w	#8,d3
		cmp.w	d3,d2
		bge.s	no_moves_p
		move.w	old_man_x,d2
		sub.w	manx,d2
		tst.w	d2
		beq.s	no_moves_p
		bpl.s	move_r_p
		add.l	#$100000,d1
		bsr	bget_senermy
		beq.s	no_moves_p
		addq.w	#2,$2(a0)
		bra.s	no_moves_p
move_r_p	sub.l	#$20000,d1
		bsr	bget_senermy
		beq.s	no_moves_p
		subq.w	#2,$2(a0)
no_moves_p	move.l	$2(a0),d1
		addq.w	#8,d1		;offset bellow pie
		bsr	bget_senermy	;solid to me?
		beq.s	no_no_hard	;objhit_hard	;I've !hit something hard
		add.l	#$000e0000,d1
		bsr	bget_senermy
		beq.s	no_no_hard
objhit_hard	clr.b	$1(a0)		;and again it hard
		clr.b	$d(a0)
		move.b	#2,$1(a0)
no_no_hard	rts


ani_sspikes	dc.l	system_blk+$7d00+$6998
		dc.l	system_blk+$7d00+$6990
		dc.l	system_blk+$7d00+$6988
		dc.l	system_blk+$7d00+$6980
		dc.l	system_blk+$7d00+$6980
		dc.l	system_blk+$7d00+$6988
		dc.l	system_blk+$7d00+$6990
		dc.l	system_blk+$7d00+$6998

sliding_spikes	move.w	#15,d7
		move.w	$e(a0),d1
		and.w	#31,d1
		lea	ani_sspikes,a2
		move.l	0(a2,d1.w),spdata
		bsr	is_it_held
		addq.w	#4,$e(a0)
		cmp.w	#7,$8(a0)
		bne.s	na_ai_sspike
		cmp.b	#20,priority
		ble.s	na_ai_sspike
		move.w	$4(a0),d2
		move.w	many,d3
		add.w	#15,d3
		cmp.w	d3,d2
		bgt.s	na_ai_sspike
		move.l	$2(a0),d1
		add.w	#30,d2
		cmp.w	d3,d2
		blt.s	na_ai_sspike
		move.w	manx,d2
		cmp.w	$2(a0),d2
		beq.s	na_ai_sspike
		bgt.s	slide_ss_r
slide_ss_l	sub.l	#$10000,d1
		bsr	bget_senermy
		beq.s	na_ai_sspike
		addq.w	#8,d1
slide_ss_l2	bsr	bget_senermy
		beq.s	na_ai_sspike
		subq.w	#1,$2(a0)
		rts
slide_ss_r	add.l	#$100000,d1
		bsr	bget_senermy
		beq.s	na_ai_sspike
		addq.w	#8,d1
slide_ss_r2	bsr	bget_senermy
		beq.s	na_ai_sspike
		addq.w	#1,$2(a0)
na_ai_sspike	rts

sucking_spikes	move.l	#$7d00+system_blk+$6960,spdata
		move.w	#15,d7
		cmp.w	#7,$8(a0)
		bne	no_suck
		cmp.b	#20,priority
		blt	no_suck
		bsr	is_it_held
		move.w	$4(a0),d2
		move.w	many,d3
		add.w	#15,d3
		cmp.w	d3,d2
		bgt.s	no_suck
		move.l	$2(a0),d1
		add.w	#30,d2
		cmp.w	d3,d2
		blt.s	no_suck
		lea	suck_ani,a2
		move.w	$e(a0),d2
		move.b	sys_not,d0
		andi.b	#1,d0
		bne.s	no_suckinc
		addq.w	#4,$e(a0)
no_suckinc	and.w	#15,d2
		move.l	0(a2,d2.w),spdata
		tst.b	man_fall
		beq.s	do_suck_it
		cmp.b	#20,man_fall
		bgt.s	do_suck_it
		tst.b	d0
		bne.s	exit_suck
do_suck_it	tst.w	joy_climb
		bne.s	exit_suck
		move.w	#1,suck_mode
		move.w	$2(a0),d0
		cmp.w	manx,d0
		blt.s	exit_suck
		addq.w	#1,suck_mode
exit_suck	rts
no_suck		clr.w	$e(a0)
		rts

suck_mode	dc.w	0

suck_ani	dc.l	system_blk+$7d00+$6968
		dc.l	system_blk+$7d00+$6970
		dc.l	system_blk+$7d00+$6978
		dc.l	system_blk+$7d00+$6970

is_it_held	tst.w	held_icon
		beq.s	not_helded
		tst.b	stop_icon
		bne.s	not_helded
		addq.l	#4,sp
not_helded	rts

homing_ghost	move.l	#system_blk+$7d00+$6950,spdata
		move.w	#15,d7
		clr.l	d0
		move.b	sys_not,d0
		move.b	d0,d2
		and.b	#1,d0
		lsl.b	#3,d0
		add.l	d0,spdata
		cmp.w	#7,$8(a0)
		bne.s	no_ghost
		bsr	is_it_held
		cmp.b	#20,priority
		ble.s	no_ghost
		andi.b	#7,d2
		bne.s	no_ghost
		move.w	manx,d0
		move.w	many,d1
		cmp.w	$2(a0),d0
		bgt.s	it_x_ghost
		tst.w	$2(a0)
		beq.s	no_x_ghost
		subq.w	#2,$2(a0)
		bra.s	no_x_ghost
it_x_ghost	cmpi.w	#304,$2(a0)
		beq.s	no_x_ghost
		addq.w	#2,$2(a0)
no_x_ghost	cmp.w	$4(a0),d1
		bgt.s	it_y_ghost
		subq.w	#1,$4(a0)
		rts
it_y_ghost	addq.w	#1,$4(a0)
no_ghost	rts


rolling_barrel	clr.w	d1
		move.b	$e(a0),d1
		and.b	#%1100,d1
		cmp.b	#-1,$6(a0)
		beq.s	roll_l
		lea	rolling_defs_r,a1
		bra.s	roll_r
roll_l		lea	rolling_defs_l,a1
roll_r		move.l	0(a1,d1.w),d1
		move.l	d1,spdata
		move.w	#7,d7
		addq.b	#2,$e(a0)
		cmp.w	#7,$8(a0)
		beq.s	ai_roll
		rts

AI_roll		tst.b	$d(a0)
		beq.s	true_roll
		subq.b	#4,$d(a0)

		clr.w	d1
		move.b	$d(a0),d1
		lea	grow_roll,a1
		move.l	0(a1,d1.w),spdata
		rts
true_roll	cmp.b	#5,$f(a0)
		bge.s	break_roll
		move.l	$2(a0),d1
		addq.l	#8,d1
		bsr	bget_stand
		beq.s	a_sol_roll
		add.l	#$000a0000,d1
		bsr	bget_stand
		beq.s	a_sol_roll
		addq.w	#1,$4(a0)
		clr.b	$f(a0)
		rts

a_sol_roll	cmp.b	#-1,$6(a0)
		beq.s	do_roll_l
		addq.w	#2,$2(a0)
		move.l	$2(a0),d1
		add.l	#$a0000,d1
		bsr	bget_senermy
		bne.s	cont_roll_r
		move.b	#-1,$6(a0)
		addq.b	#1,$f(a0)
		cmp.b	#5,$f(a0)
		beq.s	break_roll
cont_roll_r	rts
do_roll_l	subq.w	#2,$2(a0)
		move.l	$2(a0),d1
		sub.l	#$20000,d1
		bsr	bget_senermy
		bne.s	cont_roll_l
		addq.b	#1,$f(a0)
		move.b	#1,$6(a0)
		cmp.b	#5,$f(a0)
		beq.s	break_roll
cont_roll_l	rts

break_roll	lea	rolling_break,a1
		clr.w	d1
		move.b	$f(a0),d1
		subq.w	#5,d1
		lsl.w	#1,d1
		and.w	#%111100,d1
		move.l	0(a1,d1.w),spdata
		addq.b	#1,$f(a0)
		cmp.b	#21,$f(a0)
		bne.s	free_roll
		clr.b	$f(a0)
		clr.w	d1
		move.b	$a(a0),d1
		subq.w	#1,d1
		lsl.w	#4,d1
		add.w	#2,d1
		move.w	d1,$2(a0)
		clr.w	d1
		move.b	$b(a0),d1
		subq.b	#1,d1
		lsl.w	#3,d1
		move.w	d1,$4(a0)
		move.b	#1,$6(a0)
		move.b	#16,$d(a0)
free_roll	rts
		

rolling_defs_r	dc.l	system_blk+$7d00+$8c0
		dc.l	system_blk+$7d00+$8c8
		dc.l	system_blk+$7d00+$8d0
		dc.l	system_blk+$7d00+$8d8

rolling_defs_l	dc.l	system_blk+$7d00+$8d8
		dc.l	system_blk+$7d00+$8d0
		dc.l	system_blk+$7d00+$8c8
		dc.l	system_blk+$7d00+$8c0

rolling_break	dc.l	system_blk+$7d00+$2120
		dc.l	system_blk+$7d00+$2128
		dc.l	system_blk+$7d00+$2130
		dc.l	system_blk+$7d00+$2138

		dc.l	system_blk+$7d00+$2620
		dc.l	system_blk+$7d00+$2628
		dc.l	system_blk+$7d00+$2630
		dc.l	system_blk+$7d00+$2638

grow_roll	dc.l	system_blk+$7d00+$2b38
		dc.l	system_blk+$7d00+$2b30
		dc.l	system_blk+$7d00+$2b28
		dc.l	system_blk+$7d00+$2b20


push_jump	move.w	#7,d7
		move.l	#system_blk+$7d00+$1220,spdata
		bsr	wobble
		cmpi.w	#7,$8(a0)
		bne.s	jno_hard_push
		move.l	#jna_ai_push,auto_hard
		bsr	auto_fall
jno_hard_push	rts

wobble_defs	dc.l	system_blk+$7d00+$dc0
		dc.l	system_blk+$7d00+$1220
		dc.l	system_blk+$7d00+$1720
		dc.l	system_blk+$7d00+$1c20

jna_ai_push
		move.l	$2(a0),d1	;pie x,y
		move.w	manx,d2
		move.w	$2(a0),d3
		add.w	#6,d2
		cmp.w	d3,d2
		blt.s	jno_moves_p
		sub.w	#6,d2
		add.w	#12,d3
		cmp.w	d3,d2
		bgt.s	jno_moves_p
		move.w	many,d2
		move.w	d1,d3
		add.w	#16,d2
		cmp.w	d3,d2
		ble.s	jno_moves_p
		sub.w	#16,d2
		addq.w	#8,d3
		cmp.w	d3,d2
		bge.s	jno_moves_p
		move.w	old_man_x,d2
		sub.w	manx,d2
		tst.w	d2
		beq.s	jno_moves_p
		bpl.s	jmove_r_p
		add.l	#$100000,d1
		bsr	bget_senermy
		beq.s	jno_moves_p
		addq.w	#2,$2(a0)
		bra.s	jno_moves_p
jmove_r_p	sub.l	#$20000,d1
		bsr	bget_senermy
		beq.s	jno_moves_p
		subq.w	#2,$2(a0)
jno_moves_p	move.l	$2(a0),d1
		addq.w	#8,d1		;offset bellow pie
		bsr	bget_senermy	;solid to me?
		beq.s	jno_no_hard	;objhit_hard	;I've !hit something hard
		add.l	#$000e0000,d1
		bsr	bget_senermy
		beq.s	jno_no_hard
jobjhit_hard	clr.b	$1(a0)		;and again it hard
		rts

wobble		tst.b	$f(a0)
		beq.s	jno_no_hard
		clr.w	d1
		subq.b	#4,$f(a0)
		move.b	$f(a0),d1
		lea	wobble_defs,a1
		move.l	0(a1,d1.w),spdata
jno_no_hard	rts


shadow_murders	move.w	#15,d7
		lea	murder_defs,a1
		move.l	(a1),spdata
		cmp.w	#7,$8(a0)
		bne.s	nstatic_shadow
		tst.w	started_shadow
		beq.s	no_shadow
		tst.w	shadow_count
		beq.s	no_shadow
		clr.w	shadow_count
		lea	man_lastxy,a1
		move.w	shadow_ptr,d1
		lea	murder_defs,a2
		move.l	0(a1,d1.w),xxx
		clr.l	d7
		move.b	4(a1,d1.w),d7
		clr.l	d2
		move.b	5(a1,d1.w),d2
		lsl.w	#2,d2
		add.l	d2,a2
		move.l	(a2),spdata
		rts
no_shadow	move.w	#-1,d7
		rts

nstatic_shadow	tst.b	6(a0)
		bpl.s	forward_shadow
		lea	murder_defs2,a1
forward_shadow	addq.w	#4,$e(a0)
		cmp.w	#4*5,$e(a0)
		blt.s	no_reset_shadow
		clr.w	$e(a0)
no_reset_shadow	move.w	$e(a0),d1
		move.l	0(a1,d1.w),spdata
		rts

started_shadow	dc.w	0
shadow_count	dc.w	0
shadow_ptr	dc.w	0
old_shadow_ptr	dc.w	0

murder_defs	dc.l	system_blk+$7d00+$5000	;going right 0
		dc.l	system_blk+$7d00+$5008
		dc.l	system_blk+$7d00+$5010
		dc.l	system_blk+$7d00+$5018
		dc.l	system_blk+$7d00+$5020

murder_defs2	dc.l	system_blk+$7d00+$5028	;going left 5
		dc.l	system_blk+$7d00+$5030
		dc.l	system_blk+$7d00+$5038
		dc.l	system_blk+$7d00+$5040
		dc.l	system_blk+$7d00+$5048

		dc.l	system_blk+$7d00+$5050	;duck 10
		dc.l	system_blk+$7d00+$5058
		
		dc.l	system_blk+$7d00+$5060	;climb 12
		dc.l	system_blk+$7d00+$5068

falling_gate	move.w	#15,d7
		addq.w	#8,$4(a0)
		move.l	#system_blk+$7d00+$78,spdata
		cmpi.w	#7,$8(a0)
		bne.s	jno_hard_push2
		move.l	#dont_budge,auto_hard
		bsr	auto_fall
jno_hard_push2	subq.w	#8,$4(a0)
		rts

;JOHN


shoot_postl	cmp.w	#7,$8(a0)
		bne	no_post_bomb
		tst.b	$1(a0)
		bne.s	exec_ex_postlx
		move.w	2(a0),d5
		add.w	$e(a0),d5
		cmp.w	#320-16,d5
		bge.s	hit_postl
		addq.w	#4,$e(a0)
		move.l	#system_blk+$7d00+160*22+$8,spdata
		move.l	2(a0),xxx
		move.w	$e(a0),d3
		add.w	d3,xxx
		moveq.l	#7,d7
		jsr	ssprite

		move.l	$2(a0),d1
		clr.l	d3
		move.w	$e(a0),d3
		swap	d3
		add.l	d3,d1
		add.l	#$100000,d1
		bsr	bget_senermy
		beq.s	hit_postl
		addq.l	#$00006,d1
		bsr	bget_senermy
		bne.s	no_post_bomb

hit_postl	bsr	init_hit_p
		bra	no_post_bomb

init_hit_p	move.l	$2(a0),d1
		move.w	$e(a0),d2
		swap	d2
		clr.w	d2
		add.l	d2,d1
		move.b	#4,$1(a0)
		rts

exec_ex_postlx	bsr	exec_ex_postl
		add.w	d3,xxx
		bsr	exec_ex_postl2
		bra	no_post_bomb

exec_ex_postl	lea	explode_defs,a1
		clr.w	d1
		move.b	$1(a0),d1
		subq.w	#4,d1
		move.l	0(a1,d1.w),spdata
		move.l	#$00000007,d7

		move.l	2(a0),xxx
		move.w	$e(a0),d3
		rts

exec_ex_postl2	jsr	ssprite
		addq.b	#4,$1(a0)
		cmp.b	#24,$1(a0)
		bne.s	no_post_bombx
		clr.w	$e(a0)
		clr.b	$1(a0)
no_post_bombx	rts

no_post_bomb	move.w	2(a0),xxx
		moveq.l	#7,d7
		move.l	#system_blk+$7d00+160*22+$10,spdata
		rts

shoot_postr	cmp.w	#7,$8(a0)
		bne	no_post_bombr
		tst.b	$1(a0)
		bne.s	exec_ex_postrx
		move.w	2(a0),d5
		sub.w	$e(a0),d5
		tst.w	d5
		beq.s	hit_postr

		addq.w	#4,$e(a0)
		move.l	#system_blk+$7d00+160*22+$8,spdata
		move.l	2(a0),xxx
		move.w	$e(a0),d3
		sub.w	d3,xxx
		moveq.l	#7,d7
		jsr	ssprite

		move.l	$2(a0),d1
		clr.l	d3
		move.w	$e(a0),d3
		swap	d3
		sub.l	d3,d1
		sub.l	#$20000,d1
		bsr	bget_senermy
		beq.s	hit_postr
		addq.l	#$00006,d1
		bsr	bget_senermy
		bne.s	no_post_bombr

hit_postr	bsr	init_hit_p
		bra	no_post_bombr

exec_ex_postrx	bsr	exec_ex_postl
		sub.w	d3,xxx
		bsr	exec_ex_postl2
		bra	no_post_bombr

no_post_bombr	move.l	$2(a0),xxx
		moveq.l	#7,d7
		move.l	#system_blk+$7d00+160*30+$10,spdata
		rts

shoot_postd	cmp.w	#7,$8(a0)
		bne	no_post_bombd
		tst.b	$1(a0)
		bne.s	exec_ex_postdx
		move.w	4(a0),d5
		add.w	$e(a0),d5
		cmp.w	#152,d5
		bge.s	hit_postd

		addq.w	#2,$e(a0)
		move.l	#system_blk+$7d00+160*22+$8,spdata
		move.l	2(a0),xxx
		move.w	$e(a0),d3
		add.w	d3,yyy
		moveq.l	#7,d7
		jsr	ssprite

		move.l	$2(a0),d1
		move.w	$e(a0),d3
		add.w	d3,d1
		addq.w	#8,d1
		bsr	bget_senermy
		beq.s	hit_postd
		add.l	#$e0000,d1
		bsr	bget_senermy
		bne.s	no_post_bombd

hit_postd	bsr	init_hit_p
		bra	no_post_bombd

exec_ex_postdx	bsr	exec_ex_postl
		add.w	d3,yyy
		bsr	exec_ex_postl2
		bra	no_post_bombd

no_post_bombd	move.l	$2(a0),xxx
		moveq.l	#7,d7
		move.l	#system_blk+$7d00+160*38+$10,spdata
		rts

shoot_postu	cmp.w	#7,$8(a0)
		bne	no_post_bombu
		tst.b	$1(a0)
		bne.s	exec_ex_postux
		move.w	4(a0),d5
		sub.w	$e(a0),d5
		tst.w	d5
		beq.s	hit_postu

		addq.w	#2,$e(a0)
		move.l	#system_blk+$7d00+160*22+$8,spdata
		move.l	2(a0),xxx
		move.w	$e(a0),d3
		sub.w	d3,yyy
		moveq.l	#7,d7
		jsr	ssprite

		move.l	$2(a0),d1
		move.w	$e(a0),d3
		sub.w	d3,d1
		subq.l	#2,d1
		bsr	bget_senermy
		beq.s	hit_postu
		add.l	#$c0000,d1
		bsr	bget_senermy
		bne.s	no_post_bombu

hit_postu	bsr	init_hit_p
		bra	no_post_bombu

exec_ex_postux	bsr	exec_ex_postl
		sub.w	d3,yyy
		bsr	exec_ex_postl2
		bra	no_post_bombu

no_post_bombu	move.l	$2(a0),xxx
		moveq.l	#7,d7
		move.l	#system_blk+$7d00+160*45+$10,spdata
		rts

dont_budge	jmp	jno_moves_p

no_keys_allowed	lea	tmagic_keys,a1
		move.w	$e(a0),d1
		and.w	#%11111100,d1
		moveq.l	#15,d7
		move.l	0(a1,d1),spdata
		addq.w	#4,$e(a0)
		cmp.w	#12*4,$e(a0)
		bne.s	no_reset_keys2
		clr.w	$e(a0)
no_reset_keys2	move.w	manx,d1
		move.w	$2(a0),d2
		add.w	#10,d1
		cmp.w	d2,d1
		blt	no_bad_keys
		add.w	#16,d2
		sub.w	#10,d1
		cmp.w	d2,d1
		bgt	no_bad_keys
		move.w	many,d1
		move.w	$4(a0),d2
		add.w	#16,d1
		cmp.w	d2,d1
		blt	no_bad_keys
		add.w	#16,d2
		sub.w	#16,d1
		cmp.w	d2,d1
		bgt	no_bad_keys
		tst.w	inter_level
		bne	no_bad_keys
		clr.l	total_keys
		clr.l	temp_keys
		rts

magic_key	lea	table_magic_key,a1
		move.w	$e(a0),d1
		and.w	#%11111100,d1
		moveq.l	#15,d7
		move.l	0(a1,d1),spdata
		addq.w	#4,$e(a0)
		cmp.w	#6*4,$e(a0)
		bne.s	no_reset_keys
		clr.w	$e(a0)
no_reset_keys	move.w	manx,d1
		move.w	$2(a0),d2
		add.w	#10,d1
		sub.w	#16,d2
		cmp.w	d2,d1
		blt.s	no_bad_keys
		add.w	#10,d2
		add.w	#48,d2
		cmp.w	d2,d1
		bgt.s	no_bad_keys
		move.w	many,d1
		move.w	$4(a0),d2
		add.w	#16,d1
		sub.w	#8,d2
		cmp.w	d2,d1
		blt.s	no_bad_keys
		add.w	#32,d2
		sub.w	#16,d1
		cmp.w	d2,d1
		bgt.s	no_bad_keys
		tst.w	inter_level
		bne.s	no_bad_keys
		move.l	total_keys,temp_keys
		clr.l	total_keys
no_bad_keys	rts

tmagic_keys	dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6940
		dc.l	system_blk+$7d00+$6948
		dc.l	system_blk+$7d00+$6948
		dc.l	system_blk+$7d00+$6948
		dc.l	system_blk+$7d00+$6948
		dc.l	system_blk+$7d00+$6948
		dc.l	system_blk+$7d00+$6948



temp_keys	dc.l	0

table_magic_key	dc.l	system_blk+$7d00+$6910
		dc.l	system_blk+$7d00+$6918
		dc.l	system_blk+$7d00+$6920
		dc.l	system_blk+$7d00+$6928
		dc.l	system_blk+$7d00+$6930
		dc.l	system_blk+$7d00+$6938

void_icon	move.l	#system_blk+$7d00*2,spdata
		moveq.l	#7,d7
		rts


show_switch	move.l	switch_ptr,a1
		move.l	#system_blk+$7d00+$58,spdata
		move.b	(a1),d4
		and.b	#1,d4
		tst.b	d4
		bne.s	no_other_sw
		move.l	#system_blk+$7d00+$58+$500*2,spdata 
no_other_sw	moveq.l	#7,d7
		tst.w	$8(a0)
		bne.s	no_flippy_sw
		tst.b	$f(a0)
		bne.s	no_adddy_sw
		add.l	#$500,spdata
no_adddy_sw	addq.b	#1,$e(a0)
		move.b	$e(a0),d2
		andi.b	#15,d2
		tst.b	d2
		bne.s	no_auto_flip
		eor.b	#1,$f(a0)
no_auto_flip	rts
no_flippy_sw	move.b	(a1),d1
		and.b	#%10,d1
		tst.b	d1
		beq.s	no_held_down
		add.l	#$500,spdata
no_held_down	move.w	$2(a0),d2
		cmp.b	#20,priority
		ble.s	no_show_switch
		move.w	manx,d3
		add.w	#10,d3
		add.w	#4,d2
		cmp.w	d2,d3
		blt.s	no_show_switch
		add.w	#$8,d2
		sub.w	#10,d3
		cmp.w	d2,d3
		bgt.s	no_show_switch
		move.w	many,d2
		move.w	$4(a0),d3
		add.w	#16,d2
		cmp.w	d3,d2
		blt.s	no_show_switch
		sub.w	#16,d2
		add.w	#8,d3
		cmp.w	d3,d2
		bgt.s	no_show_switch
		move.b	tjoy_byte,d2
		and.b	#%10000010,d2
		cmp.b	#%10000010,d2
		bne.s	no_show_switch
		and.b	#%01111111,tjoy_byte
		cmp.b	#36,(a0)
		bne.s	xor_switch
		or.b	#%10,(a1)
		bra.s	nor_switch
xor_switch	eor.b	#%10,(a1)
nor_switch	clr.l	d1
		move.b	(a0),d1
		sub.w	#31,d1
		lsl.w	#2,d1
		lea	the_switches,a2
		add.l	d1,a2
		move.l	(a2),a2
		jmp	(a2)
no_show_switch	rts

		even

the_switches	dc.l	switch_light
		dc.l	cause_both
		dc.l	cause_walls
		dc.l	move_switch
		dc.l	cause_ladder
		dc.l	kill_switch
		dc.l	cause_gates
		dc.l	cause_secret
		dc.l	cause_one_way
		dc.l	cause_convery

cause_one_way	addq.b	#1,want_flips
		rts
cause_convery	addq.b	#1,want_convery
		rts
cause_secret	addq.b	#1,want_secret
		rts
cause_ladder	addq.b	#1,want_ladder
		rts

flipped_kill	dc.w	-1

kill_switch	move.w	saved0s,flipped_kill
		rts

move_switch	move.w	saved0s,d7
		lsr.w	#2,d7
		lea	switch_buf,a2
		lea	switch_move,a1
		move.l	0(a2,d7.w),d0
		move.w	#9,d1
clr_bitsm	lsr.w	#1,d0
		move.w	d0,d2
		andi.w	#1,d2
		eor.b	d2,(a1)
		add.l	#1,a1
		dbra	d1,clr_bitsm
		move.w	#7,d7
		rts

flip_kill	
*		move.l	spdata,-(sp)
*		movem.l	d0-d7/a0-a6,-(sp)
		move.w	saved0s,d7
		lsr.w	#2,d7
		lea	switch_buf,a2
		lea	act_buf,a1
		move.l	0(a2,d7.w),d0
		move.w	#9,d1
		lsr.w	#1,d0
		lea	main_sprite_def,a2
		lea	main_sprite_hi,a3
clr_bits	move.w	d0,d2
		btst	#0,d2
		beq.s	no_killing
		movem.l	d0-d2/a1-a3,-(sp)
		move.l	a1,a0
		move.l	(a2),spdata
		move.l	(a3),d7
		bsr	enermy_die
		movem.l	(sp)+,d0-d2/a1-a3
no_killing	add.l	#16,a1
		addq.l	#4,a2
		addq.l	#4,a3
		lsr.w	#1,d0
		dbra	d1,clr_bits
*		movem.l	(sp)+,d0-d7/a0-a6
*		move.l	(sp)+,spdata
		rts

cause_gates	addq.b	#1,want_gate
		rts
cause_walls	addq.b	#1,want_walls
		rts
cause_both	addq.b	#1,want_secret
		addq.b	#1,want_walls
		rts

switch_light	move.b	(a1),d1
*		and.b	#%10,d1
		btst	#1,d1
		beq.s	sub_light
		addq.w	#1,light_on
		rts
sub_light	subq.w	#1,light_on
		rts

want_flips	dc.b	0
want_convery	dc.b	0
want_secret	dc.b	0
want_ladder	dc.b	0
want_gate	dc.b	0
want_walls	dc.b	0
		even

oppo_direct	move.b	#41,d0
		bsr	valid_moves
		move.w	old_man_x,d0
		move.l	$2(a0),d1
		cmp.w	manx,d0
		beq.s	do_user
		blt.s	oppo_dirl
		add.l	#$100000,d1
		bsr	slide_ss_r2
		move.l	$2(a0),xxx
		jmp	user_control
oppo_dirl	sub.l	#$10000,d1
		bsr	slide_ss_l2
		move.l	$2(a0),xxx
do_user		jmp	user_control

autorise	move.w	#-1,d2
		bsr	permit_vup
		move.b	#42,d0
		bsr	valid_moves2
		cmp.w	#8,$4(a0)
		ble.s	no_autorisie
		subq.w	#1,$4(a0)
no_autorisie	jmp	user_control

autofall	move.b	#43,d0
		bsr	valid_moves2
		subq.l	#4,sp
		bsr	valid_falls
		addq.l	#4,sp
		addq.w	#1,$4(a0)
		jmp	user_control

spring_fall	cmp.b	#20,priority
		blt	do_user
		cmp.w	#7,8(a0)
		bne	do_user
		pea	spring_fallup
		move.b	#44,d0
		bsr	valid_moves2
		bsr	valid_falls
		addq.w	#1,$4(a0)
halt_fall	add.l	#4,sp
		jmp	user_control

permit_vup	move.l	manx,d1
		subq.w	#1,d1
		movem.l	a0-a3/d0,-(sp)
		bsr	bget_syou
		beq.s	not_ok_vrise
		add.l	#$00080000,d1
		bsr	bget_syou
		bne.s	ok_vrise
		bra.s	not_ok_vrise

permit_vdown	move.l	manx,d1
		add.w	#16,d1
		movem.l	a0-a3/d0,-(sp)
		move.w	d1,d2
		andi.w	#7,d2
		tst.w	d2
		bne.s	ok_vrise
		bsr	get_element2
		cmp.w	#27,d2
		beq.s	ok_vrise
		cmp.w	#248,d2
		bge.s	ok_vrise
		not.b	d3
		and.b	#%0000101,d3
		tst.b	d3
		bne.s	not_ok_vrise
		add.l	#$00080000,d1
		bsr	get_element2
		cmp.w	#27,d2
		beq.s	ok_vrise
		cmp.w	#248,d2
		bge.s	ok_vrise
		not.b	d3
		and.b	#%0000101,d3
		tst.b	d3
		beq.s	ok_vrise
not_ok_vrise	movem.l	(sp)+,a0-a3/d0
		move.l	(sp)+,d1
		jmp	user_control
ok_vrise	movem.l	(sp)+,a0-a3/d0
		rts

spring_fallup	clr.w	d0
		move.b	$b(a0),d0
		subq.b	#1,d0
		lsl.w	#3,d0
		cmp.w	$4(a0),d0
		beq.s	same_fallup
		move.l	$2(a0),d1
		subq.w	#1,d1
		bsr	bget_senermy
		beq.s	same_fallup
		cmp.w	#$7,8(a0)
		bne.s	same_fallup
		subq.w	#1,$4(a0)
same_fallup	rts

spring_rise	cmp.b	#20,priority
		blt	do_user
		pea	spring_risedown
		move.b	#45,d0
		bsr	valid_moves2
		move.l	manx,d1
		subq.w	#1,d1
		bmi	halt_fall
		bsr	bget_syou
		beq	halt_fall
		add.l	#$80000,d1
		bsr	bget_syou
		beq	halt_fall
		subq.w	#1,$4(a0)
		add.l	#4,sp
		jmp	user_control

spring_risedown	clr.w	d0
		move.b	$b(a0),d0
		subq.b	#1,d0
		lsl.w	#3,d0
		cmp.w	$4(a0),d0
		beq.s	same_fallup
		move.l	$2(a0),d1
		addq.w	#8,d1
		bsr	bget_senermy
		beq.s	same_fallup
		cmp.w	#7,$8(a0)
		bne.s	same_fallup
		addq.w	#1,$4(a0)
		rts

valid_falls	move.l	$2(a0),d1
		bsr	bget_stand
		beq.s	halt_fall2
		addq.w	#8,d1
		bsr	bget_senermy
		beq.s	halt_fall2
		move.l	manx,d1
		add.w	#16,d1
		bsr	bget_stand
		beq.s	halt_fall2
		add.l	#$80000,d1
		bsr	bget_stand
		beq.s	halt_fall2
		rts

halt_fall2	addq.l	#4,sp
		bra	halt_fall

valid_moves2

valid_moves	cmp.w	#7,$8(a0)
		bne.s	do_user2
yes_validm	cmp.b	which_obj,d0	
		bne.s	do_user2
		tst.b	old_fall
		bne.s	do_user2
		tst.w	held_icon
		bne.s	do_user2
		tst.b	stop_icon
		bne.s 	do_user2
		move.w	saved0s,d1
		cmp.w	which_ico,d1
		bne.s	do_user2
		clr.b	which_obj
		rts
do_user2	addq.l	#4,sp
		jmp	user_control

stop_me		cmpi.b	#46,which_obj
		bne	do_user
		move.w	saved0s,d1
		cmp.w	which_ico,d1
		bne	do_user
		addq.b	#1,hold_it
		jmp	user_control


oppo_foll	move.b	#47,d0
		bsr	valid_moves
		move.b	a_joy,d5
		move.b	d5,d1
		and.b	#%10,d1
		bne.s	oppo_dn
dppo_dn		move.b	d5,d1
		and.b	#%1,d1
		bne.s	oppo_up
dppo_up		move.b	d5,d1
		and.b	#%100,d1
		bne	oppo_le
dppo_le		and.b	#%1000,d5
		beq	do_user
		move.l	$2(a0),d1
		add.l	#$100000,d1
		bsr	bget_senermy
		beq	do_user
		addq.w	#7,d1
		bsr	bget_senermy
		beq	do_user
		addq.w	#2,$2(a0)
		addq.w	#2,xxx
		jmp	user_control
oppo_dn		move.w	#16,d2
		bsr	permit_vdown
		move.l	$2(a0),d1
		addq.w	#8,d1
		bsr	bget_senermy
		beq.s	dppo_dn
		add.l	#$e0000,d1
		bsr	bget_senermy
		beq.s	dppo_dn
		addq.w	#1,$4(a0)
		bra.s	dppo_dn
oppo_up		bsr	permit_vup
		cmp.w	#$8,$4(a0)
		ble.s	dppo_up
		subq.w	#1,$4(a0)
		bra.s	dppo_up
oppo_le		move.l	$2(a0),d1
		sub.l	#$10000,d1
		bsr	bget_senermy
		beq.s	dppo_le
		addq.w	#7,d1
		bsr	bget_senermy
		beq	dppo_le
		subq.w	#2,$2(a0)
		subq.w	#2,xxx
		bra	dppo_le

oppo_updn	move.b	#48,d0
		bsr	valid_moves
		move.b	a_joy,d5
		move.b	d5,d1
		and.b	#%10,d1
		bne.s	doppo_up
		bsr	permit_vdown
		move.b	d5,d1
		and.b	#%1,d1
		beq	do_user
		move.l	$2(a0),d1
		addq.w	#8,d1
		bsr	bget_senermy
		beq	do_user
		add.l	#$e0000,d1
		bsr	bget_senermy
		beq	do_user
		addq.w	#1,$4(a0)
		jmp	user_control
doppo_up	bsr	permit_vup
		cmp.w	#8,$4(a0)
		ble.s	me_user_cont
		subq.w	#1,$4(a0)
me_user_cont	jmp	user_control


go_when_on	move.b	#1,hold_it
		cmpi.b	#49,which_obj		;checked
		bne	do_user
		clr.b	hold_it
		move.w	saved0s,d1
		cmp.w	which_ico,d1
		bne	do_user
		jmp	user_control

slip_when_on	move.w	saved0s,d1
		cmp.w	which_ico,d1
		bne	do_user
		cmpi.b	#50,which_obj
		bne	do_user
		addq.b	#1,thy_slip
		jmp	user_control

which_ico	dc.w	0
hold_it		dc.b	0
thy_slip	dc.b	0
a_joy		dc.b	0
		even

*branch		dc.w	0
*		dc.b	'Loader'
*		dc.w	0
*		dc.b	0
*		dc.w	512
*		dc.b	2
*		dc.w	1
*		dc.b	2
*		dc.w	112
*		dc.w	720
*		dc.b	248
*		dc.w	5
*		dc.w	9
*		dc.w	1
*		dc.w	0

display_help	move.l	#wait,-(sp)
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp
*		move.w	#-1,-(sp)
*		move.w	#-1,-(sp)
*		move.w	#35,-(sp)
*		trap	#14
*		addq.l	#6,sp

*		lsr.w	#8,d0
*		move.w	#5,-(sp)
*		move.w	#5,-(sp)
*		move.w	#35,-(sp)
*		trap	#14
*		addq.l	#6,sp

*		move.w	#11,help_no
*		bsr	display_help

*		move.w	#0,-(sp)
*		trap	#1

		tst.w	help_no
		beq	bad_help

		lea	filename+1,a0

		move.w	help_no,d0
		move.w	d0,d1
		cmp.w	#10,d0
		blt.s	write_u
write_t		and.l	#$ffff,d0
		divu	#10,d0
		add.b	#'0',d0
		move.b	d0,(a0)+
		sub.b	#'0',d0
		mulu	#10,d0
		sub.w	d0,d1
write_u		add.b	#'0',d1
		move.b	d1,(a0)+
		move.b	#'.',(a0)+
		move.b	#'D',(a0)+
		move.b	#'A',(a0)+
		move.b	#'T',(a0)+
		move.b	#0,(a0)+

		move.w	#0,-(sp)
		move.l	#filename,-(sp)
		move.w	#$3d,-(sp)
		trap	#1
		addq.l	#8,sp
		tst.l	d0
		bmi	bad_help
		move.w	d0,d7

		move.l	#help_buffer,-(sp)
		move.l	#10000,-(sp)
		move.w	d7,-(sp)
		move.w	#$3f,-(sp)
		trap	#1
		add.l	#12,sp
		tst.l	d0
		bmi	bad_help

		move.w	d7,-(sp)
		move.w	#$3e,-(sp)
		trap	#1
		addq.l	#4,sp
		pea	cls_help
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp

		lea	help_buffer,a0
		clr.w	d5
help_terminate	move.b	(a0)+,d0
		cmp.b	#13,d0
		bne.s	no_count_ln
		addq.w	#1,d5
no_count_ln	cmp.b	#'[',d0
		bne.s	no_escape_code
		move.l	a0,a1
		subq.l	#1,a1
		move.b	#27,(a1)
no_escape_code	cmp.b	#'@',d0
		bne.s	help_terminate
		subq.l	#1,a0
		clr.b	(a0)

		move.w	help_no,d0
		lea	lines,a0
		lsl.w	#1,d0
		move.w	0(a0,d0.w),d6
*		clr.w	d6

show_next25	move.w	d6,d0
		bsr	show_25
		sub.w	#26,d5

keys		move.w	#255,-(sp)
		move.w	#6,-(sp)
		trap	#1
		addq.l	#4,sp

		cmp.b	#1,d0
		bne.s	no_hescape
		move.w	help_no,d0
		lea	lines,a0
		lsl.w	#1,d0
		move.w	d6,0(a0,d0.w)
		rts

no_hescape	cmp.b	#10,d0
		bne	not_hdown
		cmp.w	d5,d6
		bgt.s	keys
		addq.w	#1,d6
		pea	move_down
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp

		move.w	d6,d0
		add.w	#24,d0
		bsr	show_25x
		move.w	#1,d0
		bsr	find_term
		bsr	ok_firstln
		bra	keys
not_hdown	cmp.b	#9,d0
		bne	keys
		cmp.b	#0,d6
		beq	keys
		subq.w	#1,d6
		pea	move_up
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp

		move.w	d6,d0
		bsr	show_25x
		move.w	#1,d0
		bsr	show_string
		bra	keys

show_25		move.w	d6,d0
		bsr	show_25x
		move.w	#25,d0
show_string	bsr	find_term
		cmp.w	#0,d6
		beq.s	ok_firstln
		addq.l	#1,a3
ok_firstln	move.l	a3,-(sp)
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp
		move.b	#13,(a6)
		rts

show_25x	lea	help_buffer,a0
check_hline	tst.w	d0
		beq.s	found_line
		cmp.b	#13,(a0)
		bne.s	next_hchar
		subq.w	#1,d0

next_hchar	addq.l	#1,a0
		bra.s	check_hline

found_line	rts

find_term	move.l	a0,a3
check_hline2	tst.w	d0
		beq.s	found_line2
		cmp.b	#13,(a0)
		bne.s	next_hchar2
		subq.w	#1,d0
next_hchar2	addq.l	#1,a0
		bra.s	check_hline2

found_line2	move.l	a0,a6
		subq.l	#1,a6
		clr.b	(a6)
		rts
bad_help	move.l	#failed_help,-(sp)
		move.w	#9,-(sp)
		trap	#1
		addq.l	#6,sp
help_esc	move.w	#255,-(sp)
		move.w	#6,-(sp)
		trap	#1
		addq.l	#4,sp

		cmp.b	#1,d0
		bne.s	help_esc
		rts

lines		ds.w	30

wait		dc.b	27,'Y',32+8,32+23,27,'p LOADING HELP FILE PLEASE WAIT ',27,'q',0
cls_help	dc.b	27,'E',0
failed_help	dc.b	27,'Y',32+15,32+4,'HELP FILE NOT FOUND! - PLEASE INSERT MASTER DISK BEFORE PRESSING F1 AGAIN'
		dc.b	27,'Y',32+17,32+25,'PRESS ESCAPE TO RETURN TO GAME',0
filename	dc.b	'Hxx.DAT',0
move_down	dc.b	27,'Y',32+24,32,13,10,27,'I',0
move_up		dc.b	27,'H',27,'I',27,'H',0
		even
*		ds.l	40 
*my_stack	ds.l	1
help_no		dc.w	0
help_buffer	equ	$78000-$7d00+mem
begin
public		equ	*	
*size		equ	2100+40000+42000+106+16800+100+1560+30720+60+1260+60+2+106+(60*8)+4240+2
char_id		equ	system_blk+$7d00*2+$4100

header		equ	public+16
names		equ	header
path_def	equ	names+2100		;2100
room		equ	path_def+40000		;40000
txt_col		equ	room+42000		;42000
sprite_buf	equ	txt_col+106		;106
object_id	equ	sprite_buf+16800	;16800
icons_name	equ	object_id+100		;100
use_bad_def	equ	icons_name+1560		;1560
user_path_def	equ	use_bad_def+30720	;30720
ani_path	equ	user_path_def+60	;60
user_hi		equ	ani_path+1260		;1260
game_play_mode	equ	user_hi+60		;60
rooms_here_id	equ	game_play_mode+2	;2
hit_man_top	equ	rooms_here_id+106	;106
hit_man_bottom	equ	hit_man_top+(60*4)	;60x4
true_switches	equ	hit_man_bottom+(60*4)	;60x4
start_room	equ	true_switches+4240	;2
head_end	equ	start_room+2

size		equ	head_end-begin

room_backup	equ	head_end+16
sprite_backup	equ	room_backup+400
name_backup	equ	sprite_backup+160
switch_backup	equ	name_backup+20
the_end		equ	switch_backup+40


rec_buf		equ	the_end
save_pos	equ	rec_buf+1040
false_switches	equ	save_pos+16800
switch_buf	equ	false_switches+4240
syst_buf	equ	switch_buf+40
act_buf		equ	syst_buf+528
save_old_buf	equ	act_buf+320
create_fades	equ	save_old_buf+160
bonus_buf	equ	create_fades+288
astrib		equ	bonus_buf+364
gate_open_buf	equ	astrib+528
top_stand	equ	gate_open_buf+80
remove_buf	equ	top_stand+160
man_lastxy	equ	remove_buf+144
magic_buffer	equ	man_lastxy+80*6
format_buffer	equ	magic_buffer+10944
dummy		equ	format_buffer+$100
fend		equ	dummy
end
* the end of file
