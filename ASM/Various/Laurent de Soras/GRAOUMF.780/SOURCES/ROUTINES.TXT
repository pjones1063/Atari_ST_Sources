******************************************************************************
**                                                                          **
*                   EXPLICATION DES ROUTINES DE SOUNDTRACK                   *
*                   Sources en assembleur et en GfA Basic                    *
**                                                                          **
******************************************************************************



Pr‚liminaires
-------------

            Tout d'abord, v‚rifiez que vous poss‚dez bien les fichiers
        suivants:

            - ROUTINES.TXT
            - EXEMPLE1.S
            - EXEMPLE2.S
            - REPLAY.S
            - COOKIE.S
            - GT2PLAYR.S
            - SNDKERNL.S
            - INST_KER.S
            - PLAYDSP.ASM
            - PLAYDSP.P56
            - REPLAY.PGT
            - EXEMPLE1.LST
            - GENEINCL.LST
            - PERTABLE.BIN
            - VEXP2LIN.BIN
            - VLIN2EXP.BIN
            - V_E2L_M.BIN

            S'il vous manque l'un des fichiers .BIN, .PGT ou .P56, ce n'est
        pas trŠs grave puisque ce sont des fichiers g‚n‚r‚s par les sources.
        En revanche, vous devez imp‚rativement avoir les autres fichiers. Si
        ce n'est pas le cas, vous pouvez me les demander, en envoyant une
        disquette et un timbre pour le retour … cet adresse:

                        Laurent de SORAS
                        92 avenue Albert 1er
                        92500 Rueil-Malmaison
                        FRANCE

            Ces fichiers peuvent ˆtre distribu‚es librement, mais TOUS les
        fichiers cit‚s ci-dessus doivent ˆtre pr‚sents. Si vous utilisez ces
        routines dans un but non lucratif, ce serait sympa de me le signaler,
        juste pour que je sois au courant de ce qui se fait. Par contre, si
        vous les utilisez dans un programme commercial, vous devez me demander
        mon autorisation.

            Ces routines permettent donc de rejouer des modules .GT2, issus du
        Graoumf Tracker. Le fichier d‚crivant ce format est inclu dans ce
        logiciel, et si vous ne l'avez pas, vous pouvez toujours me commander
        la version d‚mo, toujours … la mˆme adresse.
            Mais elles perettent bien plus: le player est en fait constitu‚
        d'un "noyau", qui prend en charge les sons pour les jouer … la bonne
        fr‚quence, les mixer, etc..., et du soundtracker proprement dit, qui
        s'occupe de g‚rer la partition. Il est ‚galement possible de mettre
        le noyau en r‚sident pour permettre … plusieurs applications de s'en
        servir, mˆme simultan‚ment si c'est n‚cessaire.



Les diff‚rents sources
----------------------

            SNDKERNL.S est le source du noyau et GT2PLAYR.S celui du tracker.
        Bien ‚videmment vous ne pouvez pas utiliser le tracker sans le noyau.
        Ces deux fichiers sont regroup‚s par REPLAY.S qui va g‚n‚rer le
        fichier REPLAY.PGT, que vous pourrez utiliser dans vos programme,
        quelque soit le langage utilis‚. Il contient le tracker et le noyau
        non r‚sident.
            INST_KER.S g‚nŠre le programme d'installation du noyau en r‚sident
        (vous pouvez mettre INST_KER.PRG dans votre dossier AUTO). Il n‚ces-
        site l'inclusion de SNDKERNL.S et COOKIE.S.
            EXEMPLE1.S et ~.LST sont des exemples d'utilisation du tracker
        avec noyau non r‚sident. ~.S n‚cessite SNDKERNEL.S et GT2PLAYR.S qui
        sont utilis‚s en Include tandis que ~.LST n‚cessite REPLAY.PGT, qui
        est charg‚ au d‚but du programme.
            EXEMPLE2.S est un exemple d'utilisation du noyau r‚sident. Ce
        source a besoin de COOKIE.S et de GT2PLAYR.S puisqu'il joue un sound-
        track. Le programme ne devra ˆtre lanc‚ qu'aprŠs INST_KER.PRG.
            Il y a ‚galement tous les g‚n‚rateurs de tables etc. PLAYDSP.ASM
        est un source en code DSP qui doit g‚nŠrer PLAYDSP.P56 et GENEINCL.LST
        produit les 4 fichiers .BIN (tables de p‚riodes et de volumes).



Sch‚mas des inclusions
----------------------

        EXEMPLE1.S -+--- REPLAY.S -+--- SNDKERNL.S ----- PLAYDSP.P56
                    |              |
                    |              '--- GT2PLAYR.S -+--- PERTABLE.BIN
                    |                               +--- VEXP2LIN.BIN
                    |                               +--- VLIN2EXP.BIN
                    |                               '--- V_E2L_M.BIN
                    '--- *.GT2

        EXEMPLE2.S -+--- GT2PLAYR.S -+--- PERTABLE.BIN
                    |                +--- VEXP2LIN.BIN
                    |                +--- VLIN2EXP.BIN
                    |                '--- V_E2L_M.BIN
                    +--- COOKIE.S
                    '--- *.GT2

        INST_KER.S -+--- SNDKERNL.S ----- PLAYDSP.P56
                    |
                    '--- COOKIE.S

        EXEMPLE1.LST -+--- REPLAY.PGT
                      |
                      '--- *.GT2



Utilisation des routines en mode non r‚sident
---------------------------------------------

            Le noyau (ainsi que le tracker) fonctionne par un systŠme d'appel
        de fonctions. Elles sont document‚es un peu plus loin dans ce texte.
        Cependant vous ne pouvez pas les utiliser n'importe comment. Voici la
        marche … suivre pour utiliser le noyau:
            * Activation du noyau
            * R‚servation d'autant de voies que vous en avez besoin
            * Utilisation des voies pr‚c‚demment r‚serv‚es, et UNIQUEMENT
              celles que vous avez r‚serv‚es. Pour tous les samples utilis‚s,
              on devra avoir calcul‚ un buffer de bouclage au pr‚alable.
            * Lib‚ration des voies r‚serv‚es
            * D‚sactivation du noyau

            Pour le tracker, la marche … suivre est similaire:
            * Activation du noyau
            * Activation du player
                Pour chaque nouveau module:
                - Conversion du module au format interne (s'il ne l'est pas
                  d‚j…)
                - Fabrication des buffers de bouclage
                - Lancement du module
                - Manipulations (pause, reprise, changement de position...)
                - Arrˆt du module
            * D‚sactivation du player
            * D‚sactivation du noyau

            Vous pouvez utiliser en mˆme temps le noyau pour le soundtrack ou
        pour vos prores samples. Si vous respectez correctement les processus
        d‚crit ci-dessus, vous n'aurez pas de conflits de voies ou autres
        problŠmes. Si ‡a n'est pas clair, regardez les fonctions et surtout
        les sources d'exemple.
            AprŠs chaque op‚ration, testez si une erreur s'est produite et
        pr‚voyez comment agir en cons‚quence. On n'est jamais … l'abris d'un
        Sound Sub-System occup‚ ou d'un module erron‚.
            A propos des samples, ils doivent tous avoir un buffer de bou-
        clage, mˆme s'ils ne sont pas boucl‚s. Une fonction s'occupe du
        calcul, mais vous devez pr‚voir 1 Kb par sample. Pour les modules,
        tous les buffers sont calcul‚s en mˆme temps. Si vous changez l'adres-
        se de votre module entre temps (avant le replay), n'oubliez pas de
        signaler le changement en demandant les adresses calcul‚es pr‚c‚dem-
        ment puis en les renvoyant aprŠs les avoir relog‚es.

            Les fonctions seront appel‚es en d‚posant les paramŠtres …
        l'envers sur la pile (comme d'habitude en C) puis en effectuant un
        saut … l'adresse avec un Bsr. Le registre d0 recevra le r‚sultat. Les
        erreurs sont signal‚es par un mot long n‚gatif. Les routines du noyau
        doivent ˆtre pr‚c‚d‚es de "gtkr_", et de "gtkpl_" pour les routines du
        soundtracker.
            Pour les programmeurs en GfA Basic, il faut faire des appels de
        la forme :

            Resultat% = C:routine%( w:num‚ro, ?:para1, ?:para2, ...paraN)

            O— routine% est l'adresse de la bibliothŠque de routines, num‚ro
        est le num‚ro de la fonction appel‚e, para1,...N les paramŠtres, dans
        l'ordre cette fois-ci, et ?: le format de chaque paramŠtre (W: pour un
        mot simple, L: pour un mot long). Il faut Faire bien attention … ne
        pas oublier ce dernier point.            

            Au point de vue les labels, tous les labels du noyaux sont pr‚-
        c‚d‚s de "gtkr_". Ceux du soundtrackers sont pr‚c‚d‚s de "gtkpl_" ou
        de "fx_". Les diff‚rentes structures utilis‚es se terminent par "_t",
        "_s", "_i", "_p" ou commencent par "adr_" et "mod_"



Utilisation des routines en mode r‚sident
-----------------------------------------

            La marche … suivre est identique au mode non r‚sident, … part pour
        l'appel, qui ne se fait plus avec des Bsr mais avec des Trap #8. Il
        suffit d'empiler le num‚ro de fonction aprŠs les paramŠtres, comme
        pour un vulgaire appel systŠme.
            Vous devrez tester au d‚but de votre programme si le noyau est
        bien en m‚moire (il d‚pose le cookie "SKER"), et s'il est d‚j… actif.
        Il est possible que d'autres applications l'utilisent, donc faites
        bien attention … la r‚servation des pistes, combien sont disponibles,
        etc.
            De mˆme en partant, vous ne devez d‚sactiver le noyau que si plus
        personne ne l'utilise. Mais ce n'est pas une raison pour le laisser
        activ‚ en permanence car le systŠme sonore du Falcon serait bloqu‚
        inutilement.

            Voici une fa‡on typique d'utiliser le noyau en mode r‚sident:
            * Tester si le noyau est l… grƒce au cookie "SKER", l'installer si
              besoin est.
            * Activer le noyau s'il n'est pas actif.
            * Tester si le nombre de voies disponibles est suffisant.
            * D‚poser si vous voulez un identificateur d'application (voir
              plus bas).
            * R‚server le nombre de voies n‚cessaires … l'application
            * Utilisation des voies pr‚c‚demment r‚serv‚es, et UNIQUEMENT
              celles que vous avez r‚serv‚es. Pour tous les samples utilis‚s,
              on devra avoir calcul‚ un buffer de bouclage au pr‚alable.
            * Lib‚ration des voies r‚serv‚es.
            * Retirer l'identificateur d'application si vous en aviez d‚pos‚
              un.
            * Optionnel: d‚sactivation du noyau. Tester d'abord si d'autres
              applications utilisent le noyau, en comparant le nombre de voies
              libres et le nombre total de voies, puis en regardant le nombre
              d'identificateurs. Si le noyau est totalement libre, on peut le
              d‚sactiver.

            Les identificateurs d'applications sont comme les cookies, ils
        permettent de savoir si tel ou tel programme utilise le noyau. Chaque
        identificateur est suivi d'une valeur propre … l'application. Elle
        pourra par exemple contenir l'adresse d'un bloc de donn‚es servant …
        un protocole inter-application, ou contenant diff‚rentes informations
        sur le programme.





*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷*
*                                                                            *
*       DESCRIPTION DES FONCTIONS DE CONTROLE DU NOYAU SONORE                *
*                                                                            *
*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷*

------------------------------------------------------------------------------
$001    kernel_status

            Demande si le noyau est install‚. Renvoie 0 s'il ne l'est pas.

------------------------------------------------------------------------------
$002    kernel_on (nbrtrack.w, adrbloc.l)

            Installe le noyau. Nbrtrack indique le nombre de voies … g‚rer
        (maximum 32 normalement). Adrbloc est l'adresse du bloc des informa-
        tions sur les voies. Chaque voie prend au plus 256 octets.
            Retourne -1 si le noyau ‚tait d‚j… install‚, et 0 s'il n'y a pas
        eu d'erreur.

------------------------------------------------------------------------------
$003    kernel_off

            D‚sinstalle le noyau. Renvoie -1 si le noyau n'‚tait pas install‚,
        0 sinon.

------------------------------------------------------------------------------
$004    reset_kernel_tracks

            Effectue le reset de toutes le voies du noyau, arrˆte donc tous
        les sons en cours de replay.

------------------------------------------------------------------------------
$005    reserve_track (id.w)

            R‚serve une piste. Id.w correspond a un indicateur que l'utilisa-
        teur peut attribuer … sa piste. $FFFF correspond … aucune identifica-
        tion particuliŠre.
            Le num‚ro.w de la voie r‚serv‚e est alors renvoy‚. L'utilisateur
        ne pourra utiliser que des voies r‚serv‚es, il faut donc conserver ce
        num‚ro. Si -1 est renvoy‚, c'est qu'il n'y avait plus de voie disponi-
        ble.

------------------------------------------------------------------------------
$006    free_track

            C'est l'inverse de la fonction pr‚c‚dente, elle libŠre une voie
        qui a ‚t‚ r‚serv‚e au paravant.

------------------------------------------------------------------------------
$007    make_rbuffer (adrspl.l, adrbuf.l, length.l, reppos.l, replen.l,
                      resol.w)

            Fabrique un buffer de r‚p‚tition pour un sample. Chaque sample
        doit avoir un buffer de bouclage, mˆme ceux qui ne sont pas boucl‚s.
        Adrspl est l'adresse du sample, adrbuf l'adresse du buffer, qui fait
        1024 octets. Length est la longueur du sample, reppos la position de
        r‚p‚tition et replen la longueur de la boucle, tout ‡a PAIR et en
        OCTETS. Un sample non boucl‚ devra avoir reppos = 0 et replen = 2.
        Resol est la r‚solution du sample (1 = 8 bits, 2 = 16 bits).

------------------------------------------------------------------------------
$008    play_sample (track.w, adrspl.l, lonspl.l, posspl.l, volume.w,
                     balance.w, freq.w, resol.w, flags.w, adrbuf.l
                     [, reppos.l, replen.l] )

            Joue un sample. Si la voie est en pause, elle repasse automatique-
        ment en marche. Les valeurs entre parenthŠses sont les valeurs qui ne
        modifient pas les paramŠtres qu'elles concernent. D'autre part, toutes
        les longueurs et adresses sont paires et en octets.
            - Track indique la piste sur laquelle le sample doit ˆtre jou‚.
            - Adrspl (-1) est l'adresse du sample,
            - lonspl (-1) sa longueur, qui est en fait ignor‚e si le sample
              est boucl‚.
            - Posspl (-1) est la position de d‚part dans le sample (pour
              commencer … le jouer … partir du milieu par exemple).
            - Volume (-1) est son volume (0..$800) et
            - balance (-1) sa position panoramique dans l'espace
              (0..$800..$FFF).
            - Freq (0) est la fr‚quence d'‚chantillonnage du sample, en Hz.
            - Resol (-1) est la r‚solution du sample (1 = 8 bits, 2 = 16 bits)
            - Flags contient 2 indicateurs : le bit 0 s'il est mis demande …
              ce que le sample soit boucl‚, et le bit 1 demande le calcul du
              buffer de bouclage avant le replay, si celui-ci n'a pas d‚j… ‚t‚
              effectu‚.
            - Adrbuf (-1) en est son adresse.
            Si le bit 0 de flag est mis, il y a deux autres paramŠtres :
            - reppos qui est la position de r‚p‚tition, et
            - replen qui est la longueur de la boucle. Ces paramŠtres sont
              ignor‚s si le bit 0 est nul.

------------------------------------------------------------------------------
$009    stop_track (track.w)

            Arrˆte une voie et effectue son reset, sans cependant la lib‚rer.

------------------------------------------------------------------------------
$00A    pause_track (track.w)

            Met une voie en pause. Son ‚tat est suspendu jusqu'… ce qu'on lui
        ordonne de reprendre.

------------------------------------------------------------------------------
$00B    cont_track (track.w)

            Reprise d'une voie mise en pause.

------------------------------------------------------------------------------
$00C    add_routine (adrrout.l)

            Ajoute une routine dans le noyau, adrrout est son adresse. Renvoie
        le nombre de fois qu'est pr‚sente cette routine dans le noyau. Cette
        routine sera appel‚e … chaque interruption venant du DSP, c'est … dire
        environ toutes les 50Šmes de seconde (mais cette p‚riode peut ˆtre
        modifiŠe).

------------------------------------------------------------------------------
$00D    remove_routine (adrrout.l)

            EnlŠve une routine du noyau. Si elle ‚tait l… plusieurs fois, elle
        n'est retir‚e qu'une fois. Si elle n'a pas ‚t‚ trouv‚e, -1 est
        renvoy‚.

------------------------------------------------------------------------------
$00E    get_master_vol

            Renvoie le Master volume.

------------------------------------------------------------------------------
$00F    set_master_vol (master.w)

            Fixe le nouveau Master volume (0-$1000). Plus le nombre de voies
        est ‚lev‚, plus celui-ci doit ˆtre faible pour ‚viter les risques de
        saturation. En g‚n‚ral, on le fixe … 4096 / nbrvoies, mais en g‚n‚ral
        12288 / (nbrvoies + 4) convient.

------------------------------------------------------------------------------
$010    get_vblsize

            Renvoie le nombre d'‚chantillons envoy‚s par pseudo-vbl.

------------------------------------------------------------------------------
$011    set_vblsize (nbr.w)

            Fixe le nouveau nombre d'‚chantillons envoy‚s par pseudo-vbl.
        Cette valeur peut ˆtre entre 100 et 1200, mais 983 est une valeur
        moyenne qui correspond … des interruptions de 50 Hz pour une fr‚quence
        de replay de 49.17 KHz.

------------------------------------------------------------------------------
$012    get_track_adr

            Demande l'adresse des informations sur les voies (en fait celle
        qui a ‚t‚ communiqu‚e … l'initialisation du noyau). Ceci permet de
        modifier directement l'‚tat de chaque voies sans passer par les
        routines.

------------------------------------------------------------------------------
$013    set_track_adr (adr.l)

            Fixe la nouvelle adresse des infos sur les voies. Cette adresse ne
        doit ˆtre modifi‚e que si une seule application utilise le noyau lors
        de cette op‚ration, c.a.d s'il n'y a aucune voie r‚serv‚e, ou
        seulement par l'application en question. Lorsque l'app se termine,
        elle doit restituer l'ancienne adresse, toujours dans les mˆmes condi-
        tions, ou laisser l'espace m‚moire r‚serv‚. Retourne l'ancienne
        adresse.

------------------------------------------------------------------------------
$014    get_replay_freq

            Renvoie la fr‚quence de replay du player, en Hz.

------------------------------------------------------------------------------
$015    set_replay_freq (prediv.w)

            Change la fr‚quence de restitution du noyau. Cette routine peut
        ˆtre appel‚e alors que le noyau est d‚sactiv‚. Attention, la taille
        d'une pseudo-vbl n'est pas recalcul‚e. Prediv est le pr‚diviseur de
        l'horloge du CoDec. Les valeurs normalement autoris‚es sont 1, 2, 3,
        4, 5, 7, 9 et 11, correspondant aux fr‚quences  49170, 32780, 24585,
        19668, 16390, 12292, 9834 et 8195 Hz.
            Renvoie l'erreur -1 si le pr‚diviseur n'est pas compris entre 1 et
        15 (inclus).

------------------------------------------------------------------------------
$016    total_nbr_of_tracks

            Renvoie le nombre total de voies du noyau.

------------------------------------------------------------------------------
$017    nbr_of_free_tracks

            Renvoie le nombre de voies libres.

------------------------------------------------------------------------------
$018    put_new_app_id (ident.l, value.l)

            InsŠre un identificateur d'application dans le noyau. Cet identi-
        ficateur sert surtout, quand le noyau est r‚sident, … sigaler la
        pr‚sence de telle application … telle autre, comme les cookies du
        systŠme. L'identificateur doit ˆtre suivi d'une valeur sur un mot
        long, contenant des informations propres … l'application, comme par
        exemple l'adresse d'une table de donn‚es servant … un protocole de
        communication inter-application.
            Renvoie 0 si tout s'est pass‚ correctement, 1 si l'identificateur
        ‚tait d‚j… l… (il est cependant r‚install‚), et -1 s'il n'y a plus de
        place sur la table des identificateurs (cela ne devrait normalement
        pas se produire).
            
------------------------------------------------------------------------------
$019    get_app_id (ident.l)

            Demande si l'identificateur ident est pr‚sent sur le noyau. S'il
        ne l'est pas, 0 est renvoy‚. S'il l'est, une adresse pointant sur
        l'identificateur suivi de sa valeur est renvoy‚e. Il faudra alors
        chercher imm‚diatement la valeur de l'id, car l'adresse peut bouger
        (comme pour les cookies).
------------------------------------------------------------------------------
$01A    remove_app_id (ident.l)

            EnlŠve l'identificateur de la table. Si celui-ci n'‚tait pas l…,
        renvoie -1. Si l'id ‚tait le seul, renvoie 1. Sinon renvoie 0.

------------------------------------------------------------------------------
$01B    nbr_of_app_id

            Renvoie le nombre d'identificateurs d'application pr‚sents sur la
        table.

------------------------------------------------------------------------------
$01C    interpolate_track (track.w, state.w)

            Interpole une piste, ce qui augmente la qualit‚ des samples en
        basse fr‚quence, mais prend beaucoup plus de temps machine (pour le
        DSP). Track repr‚sente le num‚ro de piste, et state l'‚tat: 0 pour
        ne pas avoir d'interpolation (par d‚faut), et n'importe quel autre
        nombre pour activer l'interpolation.

------------------------------------------------------------------------------



*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷*
*                                                                            *
*       DESCRIPTION DES FONCTIONS DE CONTROLE DU SOUNDTRACKER                *
*                                                                            *
*÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷÷*

            Pour utiliser ces routines, le noyau doit ˆtre install‚.

------------------------------------------------------------------------------
$102    player_on

            Installe le soundtracker. Renvoie 0 si pas d'erreur, -1 si le
        player ‚tait d‚j… install‚ et -2 s'il n'y a plus de voies disponibles.

------------------------------------------------------------------------------
$103    player_off

            D‚sinstalle le soundtracker. Renvoie -1 si le soundtracker n'‚tait
        pas encore install‚.

------------------------------------------------------------------------------
$104    reset_sndtrk_tracks

            Reset de toutes les pistes du soundtrack

------------------------------------------------------------------------------
$105    convert_module (type.w, adrmod.l, adrconv.l)

            Convertit un module GT2 de type quelconque en un module GT2
        jouable par la routine. Il s'agit en fait de convertir les versions
        inf‚rieures … 3 en version 3, et pour des versions sup‚rieures, de
        d‚compacter ‚ventuellement les patterns, samples, etc. (ce seront des
        am‚liorations futures). Ici, type vaut toujours 0. Adrmod est l'adres-
        se du module … convertir et adrconv l'adresse du module converti. Ces
        deux adresses peuvent ˆtre identiques pour effectuer une conversion
        "sur place". Attention tout de mˆme, le module converti va prendre
        plus de place. Pr‚voir large, et r‚duire si n‚cessaire l'espace avec
        la taille du nouveau module qui est renvoy‚e par la fonction.
            Si le type du module n'est pas reconnu (C.….d diff‚rent de 0), la
        fonction retourne -1. Si le module n'est pas un GT2, elle retourne -4.
            Tout module doit ˆtre converti avant d'ˆtre jou‚.

------------------------------------------------------------------------------
$106    make_rb_module (adrmod.l, adrbuf.l, adradrbuf.l)

            Effectue le bouclage de tous les samples d'un module au format
        interne. Adrmod est l'adresse du module, adrbuf est l'adresse d'une
        zone pour les buffers (256Ko maxi) et adradrbuf est l'adresse d'un
        tableau de 256 mots longs destin‚ … contenir les adresses des buffers.
        Si cette adresse est nulle, les buffers sont directement assign‚s au
        module en cours de replay, ainsi que les adresses des samples

------------------------------------------------------------------------------
$107    get_adr_samples (ptr.l)

            Demande les adresses des samples et de leurs buffers de bouclage
        du module en cours. Ptr pointe sur une zone de 2048 octets contenant
        les 256 adresses des samples puis les 256 adresses des buffers. Cette
        zone commence avec sample num‚ro 0.

------------------------------------------------------------------------------
$108    set_adr_samples (ptr.l)

            Fixe toutes les adresses des samples et de leurs buffers de
        bouclage pour le module en cours. Ptr pointe sur une zone de 2048
        octets contenant les 256 adresses des samples puis les 256 adresses
        des buffers. Si une adresse est nulle, elle n'est pas modifi‚e.

------------------------------------------------------------------------------
$109    new_module (adrmod.l, adrrep.l, songpos.w, linepos.w)

            Initialise un module au format interne et commence le replay.
        Adrmod est l'adresse du module, adrrep est l'adresses des buffers
        de r‚p‚titions destin‚s … ˆtre calcul‚s (1 Ko/sample, 256 samples
        maximum).
        Si cette adresse est nulle, rien n'est chang‚.
            Songpos et linepos sont respectivement les positions et lignes de
        d‚part du replay.
            La fonction renvoie -1 si le module n'‚tait pas au format interne
        et -2 s'il n'y avait pas assez de voies disponibles.

------------------------------------------------------------------------------
$10A    stop_module

            Arrˆte de jouer le module en cours. Un nouveau module devra ˆtre
        r‚initialis‚ si on veut jouer quelque chose aprŠs.

------------------------------------------------------------------------------
$10B    pause_module

            Met le module en pause. Renvoie -1 si on ‚tait d‚j… en pause.

------------------------------------------------------------------------------
$10C    cont_module

            Reprend un module en pause. Renvoie -1 si on n'‚tait pas en pause.


------------------------------------------------------------------------------
$10D    change_modpos (songpos.w, linepos.w)

            Change la position de replay d'un module. Songpos et linepos sont
        respectivement la nouvelle position et la nouvelle ligne de replay.
        Renvoie -1 si la position est hors song, -2 si le num‚ro de ligne est
        hors pattern.

------------------------------------------------------------------------------
$10E    get_modsongpos

            Renvoie le num‚ro de la position qui est jou‚e actuellement dans
        le module.

------------------------------------------------------------------------------
$10F    get_modlinepos

            Renvoie le num‚ro de ligne de pattern qui est jou‚e actuellement
        dans le module.

------------------------------------------------------------------------------
$110    get_tempo

            Renvoie le tempo du module

------------------------------------------------------------------------------
$111    set_tempo (tempo.w)

            Permet de fixer un nouveau tempo au module.

------------------------------------------------------------------------------



Mes A coulent pas: bugs de l'ancien player (de .GTK)
----------------------------------------------------

    Pour ceux qui utiliseraient les anciennes routines et qui ne peuvent pas,
ou ne veulent pas passer aux nouvelles routines, voici une liste de bugs trŠs
gˆnants que vous pouvez corriger:
    - Dans la fonction grtk_pause_module, il y a une erreur dans la ligne sous
le label .wait2: transformez "bne.s .wait" en "bne.s .wait2". Ce bug provo-
quait un bloquage du programme, mais passait inaper‡u sous debugger.
    - Dans la fonction gtkr_stop_module, il y a un problŠme de registres
d'adresse aux lignes "lea gtkpl_num_track+2,a0" et "move.w (a0)+,-(sp)".
Remplacez les "a0" par "a2". Ce bug ne stopait pas tout le temps le module!
    - Dans la routine gtkr_kernel_interruption, … la fin de la routine d'envoi
de samples 16 bits (juste avant la ligne "R‚‚chantillonnage au 030 ..."), il
manque un "bra sendsam_next". Ce bug provoquait un plantage lors du replay de
samples 16 bits.
    - La fonction gtkr_add_routine marche mais renvoie n'importe quoi...
