***********************************************************************
***********										***********
***********										***********
***********		    DSP-Replay Soundtracker			***********
***********			   x voies … 49Khz				***********
***********										***********
***********		 Transmission par le port Host		***********
***********										***********
***********		    par Simplet / ABSTRACT			***********
***********										***********
***********************************************************************

				RsReset

Sample_Name		rs.b		22
Sample_Length		rs.w		1
Sample_FineTune	rs.b		1
Sample_Volume		rs.b		1
Sample_RepeatStart	rs.w		1
Sample_RepeatLength	rs.w		1

Sample_Size		rs.b		1


				RsReset

Simplet_Start		rs.l		1
Simplet_Length		rs.l		1
Simplet_Pos		rs.l		1
Simplet_Repeat		rs.l		1
Simplet_Volume		rs.w		1
Simplet_Period		rs.w		1

Simplet_Size		rs.b		1


				RsReset

Sam_Start			rs.l		1
Sam_Length		rs.w		1
Sam_Period		rs.w		1
Sam_Vol			rs.w		1
Sam_LpStart		rs.l		1
Sam_LpLength		rs.w		1

Sam_Size			rs.b		1


				RsReset

N_Note			rs.w		1
N_Cmd			rs.b		1
N_CmdLow			rs.b		1
N_Start			rs.l		1
N_Length			rs.w		1
N_LoopStart		rs.l		1
N_RepLen			rs.w		1
N_Period			rs.w		1
N_FineTune		rs.b		1
N_Volume			rs.b		1
N_DMABit			rs.l		1
N_TonePortDirec	rs.b		1
N_TonePortSpeed	rs.b		1
N_WantedPeriod		rs.w		1
N_VibratoCmd		rs.b		1
N_VibratoPos		rs.b		1
N_TremoloCmd		rs.b		1
N_TremoloPos		rs.b		1
N_WaveControl		rs.b		1
N_GlissFunk		rs.b		1
N_SampleOffset		rs.b		1
N_PattPos			rs.b		1
N_LoopCount		rs.b		1
N_FunkOffset		rs.b		1
N_WaveStart		rs.l		1
N_RealLength		rs.l		1

N_Size			rs.b		1

***********************************************************************
***********				Initialisations			***********
***********************************************************************

		Section	TEXT

Init_Music
		bsr		Init_Module
		bsr		Init_Voices
		bra		Init_Sound

Stop_Music
		clr.l	$ffffa204.w		; DSP : on a plus besoin de toi
		rts

***********************************************************************
***********		Routine VBL ou interruption Timer		***********
***********************************************************************

SndTrack_IT
		movem.l	d0-a6,-(sp)

; Base des registres du port Host
		lea.l	$ffffa204.w,a6

; Signale au DSP qu'on veut lui causer
; et on lui dit le nombre de samples … calculer par interruption
		move.l	#983,(a6)			; en 50 Hz … 49 KHz

		move.w	Simplet_Voices_Nb(pc),d4
		subq.w	#1,d4
		lsr.w	d4
		ext.l	d4
		move.l	d4,(a6)	; Nombre de paires de voies suppl‚mentaires

		lea.l	Simplet_Voices(pc),a5		; Gauche
		bsr.s	Play_Voice
		lea.l	Simplet_Size(a5),a5			; Droite
		bsr.s	Play_Voice

		subq.w	#1,d4

Play_All_Voices
		lea.l	2*Simplet_Size(a5),a5		; Gauche
		bsr.s	Play_Voice
		lea.l	-Simplet_Size(a5),a5		; Droite
		bsr.s	Play_Voice

		subq.w	#1,d4
		bmi.s	No_More_Voices

		lea.l	2*Simplet_Size(a5),a5		; Gauche
		bsr.s	Play_Voice
		lea.l	Simplet_Size(a5),a5			; Droite
		bsr.s	Play_Voice

		subq.w	#1,d4
		bpl.s	Play_All_Voices

No_More_Voices

; S'occupe de la partition
		CPUTimeColor		#$99990099
		bsr		Play_Patterns

; Attend la fin du calcul du DSP
		CPUTimeColor		#$ffff00ff
		WaitDSPToGet
		move.l	$ffffa204.w,d0

		movem.l	(sp)+,d0-a6
		rts


; S'occupe d'une voie : envoie volume, fr‚quence et les samples

Play_Voice
; Envoie volume
		move.w	Simplet_Volume(a5),d0
		ext.l	d0
		mulu.l	#$7fffff/64*2,d0
		move.w	Simplet_Voices_Nb(pc),d1
		ext.l	d1
		addq.l	#1,d1
		divu.l	d1,d0
		move.l	d0,(a6)

; Envoie fr‚quence relative
		move.l	#610697964,d0			; $800000*3579546/49169
		move.w	Simplet_Period(a5),d1
		ext.l	d1
		divu.l	d1,d0
		move.l	d0,(a6)

; Recoie longueur du sample … envoyer
		WaitDSPToGet
		move.l	(a6),d0

		movea.l	Simplet_Start(a5),a0	; Adresse du d‚but sample
		move.l	Simplet_Pos(a5),d2		; Position
		adda.l	d2,a0				; Adresse courante
		add.l	d0,d2				; Nouvelle position d'arriv‚e

		cmp.l	Simplet_Length(a5),d2	; A-t'on d‚pass‚ la fin du sample ?
		blt.s	No_Repeat				; Si Non pas de probleme
		sub.l	Simplet_Repeat(a5),d2	; Si Oui, boucle

No_Repeat	move.l	d2,Simplet_Pos(a5)		; Nouvelle position

		ext.l	d0
		divu.w	#3,d0				; Envoi par paquet de 3
		addq.w	#1,d0				; un de plus car on tombe
		ext.l	d0					; par forc‚ment pile
		move.l	d0,(a6)				; Nombre de paquets

		subq.w	#1,d0				; pour le dbra
		subq.l	#1,a0				; Cale les samples

Send_Samples
		move.l	(a0),(a6)
		addq.l	#3,a0
		dbra		d0,Send_Samples
		rts


***********************************************************************
***********		   Initialisations Son et DSP			***********
***********************************************************************

Init_Sound
* Stoppe la lecture DMA au cas o—...
		clr.b	$ffff8901.w

* DAC sur piste 0 (quartet fort)
		move.b	#$0f,$ffff8920.w

* Source DSP Xmit sur Horloge Interne 25.175 MHz, DSP connect‚ (Enable)
		move.w	#%10010000,$ffff8930.w

* Destination DAC connect‚ sur source DSP Xmit, Handshaking Off
		move.w	#%0010000000000000,$ffff8932.w

* Fr‚quence 49169 Hz
		move.b	#1,$ffff8935.w

* Programme DSP
		move.w	#113,-(sp)				; DSP_RequestUniqueAbility
		trap		#14						; XBios
		addq.l	#2,sp

		move.w	d0,-(sp)					; No Ability
		move.l	#726/3,-(sp)				; Longueur en Mots DSP
		pea.l	DSP_Code(pc)				; Adresse du code binaire
		move.w	#109,-(sp)				; Dsp_ExecProg
		trap		#14						; XBios
		lea.l	12(sp),sp


Connect	move.l	#87654321,$ffffa204.w
		moveq.l	#0,d0

Conct_Get	btst.b	#0,$ffffa202.w
		bne.s	DSP_Test
		addq.l	#1,d0
		cmp.l	#100000,d0
		beq.s	DSP_Error
		bra.s	Conct_Get

DSP_Test	move.l	$ffffa204.w,d0
		cmp.l	#12345678,d0
		beq.s	DSP_Ok

DSP_Error	moveq.l	#-1,d0
DSP_Ok	rts

***********************************************************************
***********			Initialisations du Module		***********
***********************************************************************

Init_Module
		lea.l	Module,a0

		lea.l	20+31*30+2(a0),a1		; Par d‚faut
		lea.l	4+128(a1),a2			; Type
		moveq.l	#31-1,d0				; 31 instruments

		moveq.l	#64,d2				; 64 lignes par pattern
		move.b	#125,Simplet_Tempo		; Tempo par d‚faut
		move.b	#6,Simplet_Speed		; Vitesse par d‚faut

		move.l	$438(a0),d3			; ModFile Chunk

; Formats 4 voies
		moveq.l	#4-1,d1

		cmp.l	#"M.K.",d3
		beq.s	Format_Ok
		cmp.l	#"M!K!",d3
		beq.s	Format_Ok
		cmp.l	#"M&K&",d3
		beq.s	Format_Ok
		cmp.l	#"FA04",d3
		beq.s	Format_Ok
		cmp.l	#"FLT4",d3
		beq.s	Format_Ok

; Formats 6 voies
		moveq.l	#6-1,d1

		cmp.l	#"FA06",d3
		beq.s	Format_Ok
		cmp.l	#"6CHN",d3
		beq.s	Format_Ok
		cmp.l	#"FLT6",d3
		beq.s	Format_Ok

; Formats 8 voies
		moveq.l	#8-1,d1

		cmp.l	#"FA08",d3
		beq.s	Format_Ok
		cmp.l	#"8CHN",d3
		beq.s	Format_Ok
		cmp.l	#"FLT8",d3
		beq.s	Format_Ok
		cmp.l	#"OCTA",d3
		beq.s	Format_Ok

; Formats 16 voies
		moveq.l	#16-1,d1
		cmp.l	#"16CH",d3
		beq.s	Format_Ok

; Formats 32 voies
		moveq.l	#32-1,d1
		cmp.l	#"32CH",d3
		beq.s	Format_Ok

; Si rien de sp‚cial alors c'est un ancien module 15 instruments
		lea.l	20+15*30+2(a0),a1
		lea.l	128(a1),a2
		moveq.l	#15-1,d0
		moveq.l	#4-1,d1


Format_Ok	move.l	a1,Simplet_Sequence_Adr	; Adresse de la s‚quence
		move.l	a2,Simplet_Patterns_Adr	; Adresse des patterns
		move.w	d0,Simplet_Samples_Nb	; Nombre d'instruments
		move.w	d1,Simplet_Voices_Nb	; Nombre de voies
		move.b	d2,Simplet_Pattern_Length

		addq.w	#1,d1
		lsl.w	#2,d1
		move.w	d1,Simplet_Line_Size	; Taille d'une 'ligne'
		mulu.w	d2,d1
		move.w	d1,Simplet_Pattern_Size	; Taille d'un pattern

		move.b	-2(a1),d0
		move.w	d0,Simplet_Song_Length
		move.b	-1(a1),d2
		cmp.b	d0,d2
		blo.s	Simplet_Restart_Ok
		moveq.l	#0,d2
Simplet_Restart_Ok
		move.w	d2,Simplet_Song_Restart

		subq.w	#1,d0				; Parcours la s‚quence
		moveq.l	#0,d1				; jusqu'… la derniŠre
Simplet_Sequence_Loop					; position
		move.b	(a1)+,d2				; No Pattern
		cmp.b	d1,d2				; Plus grand
		blo.s	Simplet_Seq_No_Max		; que le maximum ?
		move.b	d2,d1				; alors Nouveau maximum
Simplet_Seq_No_Max
		dbra		d0,Simplet_Sequence_Loop


		addq.w	#1,d1					; Nombre de patterns
		mulu.w	Simplet_Pattern_Size(pc),d1	; Taille totale

		move.l	Simplet_Patterns_Adr(pc),a1	; Adresse du d‚but
		lea.l	(a1,d1.l),a1				; Des samples

		lea.l	20(a0),a2				; Pointe sur Sample 1
		moveq.l	#0,d2
		move.w	Simplet_Samples_Nb(pc),d0

Simplet_Total_Length
		move.w	Sample_Length(a2),d3	; Longueur
		ext.l	d3					; du sample
		add.l	d3,d3				; * 2 car stock‚ en words
		add.l	d3,d2				; Ajoute au total
		lea.l	Sample_Size(a2),a2		; Instrument suivant
		dbra		d0,Simplet_Total_Length	; Calcule longueur totale


; Recopie les samples … la fin de la zone de travail temporaire
; pour justement pouvoir travailler dessus, les pr‚parer au bouclage
		lea.l	WorkSpace,a2

		move.l	a1,a3
		add.l	d2,a1
Simplet_Move_Samples
		move.w	-(a1),-(a2)
		subq.l	#2,d2
		bne.s	Simplet_Move_Samples


; Maintenant, on bosse sur les samples
		lea.l	20(a0),a0					; Pointe sur 1er Sample
		lea.l	Simplet_Samples_Adr(pc),a1	; Adresse des samples

		move.w	Simplet_Samples_Nb(pc),d0

Simplet_Next_Sample
		move.l	a3,(a1)+					; Note Adresse

		move.w	Sample_Length(a0),d3		; Longueur Nulle ?
		beq		Simplet_NextSample			; Alors pas d'instrument

		move.w	Sample_RepeatLength(a0),d4	; Longueur de Boucle
		cmp.w	#1,d4					; sup‚rieure … 1 ?
		bhi.s	Simplet_Repeat_Length		; Alors il y a bouclage


Simplet_No_Repeat_Length
		move.w	d3,d1				; Longueur
		subq.w	#1,d1
Simplet_Copy_1
		move.w	(a2)+,(a3)+			; Recopie simplement
		dbra		d1,Simplet_Copy_1		; le sample

		move.w	#680-1,d2
Simplet_Copy_2
		clr.w	(a3)+				; et met du vide aprŠs
		dbra		d2,Simplet_Copy_2		; car ne boucle pas

		move.w	#680,d1				; Repeat Length pour
		bra.s	Simplet_Sample_Ok		; boucler dans le vide


Simplet_Repeat_Length
		tst.w	Sample_RepeatStart(a0)	; Y'a t'il un d‚but de boucle?
		bne.s	Simplet_Repeat_Start	; Oui


		move.l	a3,a4				; Note le d‚but du sample

		move.w	d3,d1				; Longueur
		subq.w	#1,d1
Simplet_Copy_3
		move.w	(a2)+,(a3)+			; Recopie le sample jusqu'…
		dbra		d1,Simplet_Copy_3		; La fin de la boucle
		bra.s	Simplet_No_Repeat_Start


Simplet_Repeat_Start
		move.w	Sample_RepeatStart(a0),d1	; On prend le sample
		move.w	d1,d3					; jusqu'au d‚but de la
		move.l	a2,a4					; boucle

		subq.w	#1,d1
Simplet_Copy_4
		move.w	(a4)+,(a3)+
		dbra		d1,Simplet_Copy_4

		add.w	Sample_Length(a0),a2
		add.w	Sample_Length(a0),a2

Simplet_No_Repeat_Start
		move.l	a3,a5
		moveq.l	#0,d1

Simplet_Too_Small
		move.l	a4,a6
		move.w	d4,d2
		subq.w	#1,d2

Simplet_Copy_5
		move.w	(a6)+,(a3)+
		addq.w	#2,d1
		dbra		d2,Simplet_Copy_5

		cmp.w	#680,d1
		blo.s	Simplet_Too_Small

		move.w	#680/2-1,d2
Simplet_Copy_6
		move.w	(a5)+,(a3)+
		dbra		d2,Simplet_Copy_6


Simplet_Sample_Ok
		lsl.w	d3
		move.w	d3,Sample_Length(a0)
		move.w	d1,Sample_RepeatLength(a0)
		clr.w	Sample_RepeatStart(a0)

Simplet_NextSample
		lea.l	Sample_Size(a0),a0
		dbra		d0,Simplet_Next_Sample
		rts

***********************************************************************
***********			Remet les voies … z‚ro			***********
***********************************************************************

Init_Voices
		lea.l	WorkSpace,a1
		move.l	#2000,d1
		move.w	#800,d2
		move.w	#680,d3

		lea.l	Simplet_Voices(pc),a4
		lea.l	Channels(pc),a5
		lea.l	Mt_Channels_Temp(pc),a6
		moveq.l	#1,d0
		move.w	Simplet_Voices_Nb(pc),d7

Init_A_Voice
		move.l	a1,Simplet_Start(a4)
		move.l	d1,Simplet_Length(a4)
		clr.l	Simplet_Pos(a4)
		move.w	d3,Simplet_Repeat(a4)
		clr.w	Simplet_Volume(a4)
		move.w	d2,Simplet_Period(a4)

		move.l	a1,Sam_Start(a5)
		move.l	d1,Sam_Length(a5)
		move.w	d2,Sam_Period(a5)
		clr.w	Sam_Vol(a5)

		move.l	a1,N_Start(a6)
		move.l	d1,N_Length(a6)
		move.w	d3,N_RepLen(a6)
		move.w	d2,N_Period(a6)
		clr.w	N_Volume(a6)
		move.l	d0,N_DMABit(a6)

		lea.l	Simplet_Size(a4),a4
		lea.l	Sam_Size(a5),a5
		lea.l	N_Size(a6),a6
		lsl.l	d0
		dbra		d7,Init_A_Voice
		rts

***********************************************************************
***********			Gestion du Soundtrack			***********
***********************************************************************

Play_Patterns
		lea.l	Module,a0
		addq.b	#1,Simplet_Counter
		move.b	Simplet_Counter(pc),d0
		cmp.b	Simplet_Speed(pc),d0
		bne.s	Mt_NoNewNote

		clr.b	Simplet_Counter

		tst.b	Mt_PattDelTime2
		beq.s	Mt_GetNewNote

		bsr.s	Mt_NoNewAllChannels
		bra		Mt_DSkip

Mt_NoNewNote
		bsr.s	Mt_NoNewAllChannels
		bra		Mt_NoNewPosYet


Mt_NoNewAllChannels
		lea.l	Channels(pc),a5
		lea.l	Mt_Channels_Temp(pc),a6
		move.w	Simplet_Voices_Nb(pc),d7

Simplet_Check_Efx
		bsr		Mt_CheckEfx

		lea.l	Sam_Size(a5),a5
		lea.l	N_Size(a6),a6
		dbra		d7,Simplet_Check_Efx
		rts


Mt_GetNewNote
		lea.l	20(a0),a3				; Pointe sur infos samples
		move.l	Simplet_Sequence_Adr(pc),a2
		move.l	Simplet_Patterns_Adr(pc),a0
		moveq.l	#0,d1
		move.w	Simplet_Song_Position(pc),d0
		move.b	(a2,d0.w),d1
		mulu.w	Simplet_Pattern_Size(pc),d1
		moveq.l	#0,d0
		move.b	Simplet_Pattern_Position(pc),d0
		mulu.w	Simplet_Line_Size(pc),d0
		add.w	d0,d1				; Offset des donn‚es Pattern


		lea.l	Channels(pc),a5
		lea.l	Mt_Channels_Temp(pc),a6
		clr.l	Mt_DMACONtemp
		move.w	Simplet_Voices_Nb(pc),d7

Simplet_Play_A_Voice
		bsr.s	Mt_PlayVoice

		lea.l	Sam_Size(a5),a5
		lea.l	N_Size(a6),a6
		dbra		d7,Simplet_Play_A_Voice

		bra		Mt_SetDMA


Mt_PlayVoice
		tst.l	N_Note(a6)
		bne.s	Mt_PlVSkip
		bsr		Mt_PerNop

Mt_PlVSkip
		move.l	(a0,d1.l),N_Note(a6)	; Donn‚es de la voie courante
		addq.l	#4,d1				; Voie suivante

		moveq.l	#0,d2
		move.b	N_Cmd(a6),d2
		and.b	#$f0,d2
		lsr.b	#4,d2
		move.b	N_Note(a6),d0
		and.b	#$f0,d0
		or.b		d0,d2
		tst.b	d2
		beq.s	Mt_SetRegs

		subq.l	#1,d2				; Num‚ro de sample

		lea.l	Simplet_Samples_Adr(pc),a1
		move.l	(a1,d2.w*4),N_Start(a6)	; Adresse du sample

		mulu.w	#Sample_Size,d2		; offset dans les infos samples
		move.w	Sample_Length(a3,d2.w),N_Length(a6)
		move.w	Sample_Length(a3,d2.w),N_RealLength(a6)
		move.b	Sample_FineTune(a3,d2.w),N_FineTune(a6)
		move.b	Sample_Volume(a3,d2.w),N_Volume(a6)

		move.w	Sample_RepeatLength(a3,d2.w),N_RepLen(a6)
		moveq.l	#0,d0
		move.b	N_Volume(a6),d0
		move.w	d0,Sam_Vol(a5)

		move.l	N_Start(a6),d4
		moveq.l	#0,d3
		move.w	Sample_RepeatStart(a3,d2.w),d3

		tst.w	d3
		beq.s	Simplet_No_Loop

		asl.l	d3
		add.l	d3,d4
		move.w	Sample_RepeatStart(a3,d2.w),d0
		add.w	Sample_RepeatLength(a3,d2.w),d0
		move.w	d0,N_Length(a6)

Simplet_No_Loop
		move.l	d4,N_LoopStart(a6)
		move.l	d4,N_WaveStart(a6)

Mt_SetRegs
		move.w	N_Note(a6),d0
		and.w	#$0fff,d0
		beq		Mt_CheckMoreEfx					; If no note
		move.w	N_Cmd(a6),d0
		and.w	#$0ff0,d0
		cmp.w	#$0e50,d0
		beq.s	Mt_DoSetFineTune
		move.b	N_Cmd(a6),d0
		and.b	#$0f,d0
		cmp.b	#3,d0													; TonePortamento
		beq.s	Mt_ChkTonePorta
		cmp.b	#5,d0
		beq.s	Mt_ChkTonePorta
		cmp.b	#9,d0														; Sample Offset
		bne.s	Mt_SetPeriod

		bsr		Mt_CheckMoreEfx
		bra.s	Mt_SetPeriod

Mt_DoSetFineTune
		bsr		Mt_SetFineTune
		bra.s	Mt_SetPeriod

Mt_ChkTonePorta
		bsr		Mt_SetTonePorta
		bra		Mt_CheckMoreEfx

Mt_SetPeriod
		movem.l	d0-d1/a0-a1,-(sp)
		move.w	N_Note(a6),d1
		and.w	#$0fff,d1
		lea.l	Mt_PeriodTable(pc),a1
		moveq.l	#0,d0
		moveq.l	#36,d2
Mt_FtuLoop
		cmp.w	(a1,d0.w),d1
		bhs.s	Mt_FtuFound
		addq.l	#2,d0
		dbra		d2,Mt_FtuLoop
Mt_FtuFound
		moveq.l	#0,d1
		move.b	N_FineTune(a6),d1
		mulu		#36*2,d1
		add.l	d1,a1
		move.w	(a1,d0.w),N_Period(a6)
		movem.l	(sp)+,d0-d1/a0-a1

		move.w	N_Cmd(a6),d0
		and.w	#$0ff0,d0
		cmp.w	#$0ed0,d0 											; Notedelay
		beq		Mt_CheckMoreEfx

		btst		#2,N_WaveControl(a6)
		bne.s	Mt_VibnOc
		clr.b	N_VibratoPos(a6)

Mt_VibnOc	btst		#6,N_WaveControl(a6)
		bne.s	Mt_TrenOc
		clr.b	N_TremoloPos(a6)

Mt_TrenOc	move.l	N_Start(a6),Sam_Start(a5)		; Set start
		move.w	N_Length(a6),Sam_Length(a5)		; Set length
		move.w	N_Period(a6),Sam_Period(a5)		; Set period
		move.l	N_DMABit(a6),d0
		or.l		d0,Mt_DMACONtemp
		bra		Mt_CheckMoreEfx


	
Mt_SetDMA	move.l	Mt_DMACONtemp(pc),d0
		moveq.l	#0,d7

		lea.l	Channels(pc),a5
		lea.l	Mt_Channels_Temp(pc),a6
		lea.l	Simplet_Voices,a4

Simplet_Ch_Loop
		btst		d7,d0
		beq.s	Simplet_Ch_Off

		move.l	Sam_Start(a5),Simplet_Start(a4)
		moveq.l	#0,d1
		moveq.l	#0,d2
		move.w	Sam_Length(a5),d1
		move.w	N_RepLen(a6),d2
		add.l	d2,d1
		move.l	d1,Simplet_Length(a4)
		move.l	d2,Simplet_Repeat(a4)
		clr.l	Simplet_Pos(a4)

Simplet_Ch_Off
		lea.l	Simplet_Size(a4),a4
		lea.l	Sam_Size(a5),a5
		lea.l	N_Size(a6),a6

		addq.w	#1,d7
		cmp.w	Simplet_Voices_Nb(pc),d7
		ble.s	Simplet_Ch_Loop



Mt_DSkip	addq.b	#1,Simplet_Pattern_Position

		move.b	Mt_PattDelTime(pc),d0
		beq.s	Mt_dskc
		move.b	d0,Mt_PattDelTime2
		clr.b	Mt_PattDelTime

Mt_dskc	tst.b	Mt_PattDelTime2(pc)
		beq.s	Mt_dska
		subq.b	#1,Mt_PattDelTime2
		beq.s	Mt_dska

		subq.b	#1,Simplet_Pattern_Position

Mt_dska	tst.b	Simplet_Pattern_Break_Flag(pc)
		beq.s	Mt_nnpysk

		sf		Simplet_Pattern_Break_Flag
		moveq.l	#0,d0
		move.b	Simplet_Pattern_Break_Pos(pc),Simplet_Pattern_Position
		clr.b	Simplet_Pattern_Break_Pos

Mt_nnpysk	move.b	Simplet_Pattern_Length(pc),d0
		cmp.b	Simplet_Pattern_Position(pc),d0
		bhi.s	Mt_NoNewPosYet


Mt_NextPosition
		move.b	Simplet_Pattern_Break_Pos(pc),Simplet_Pattern_Position

		clr.b	Simplet_Pattern_Break_Pos
		sf		Simplet_Position_Jump_Flag

		addq.w	#1,Simplet_Song_Position
		move.w	Simplet_Song_Position(pc),d1

		cmp.w	Simplet_Song_Length(pc),d1
		blo.s	Mt_NoNewPosYet

		move.w	Simplet_Song_Restart(pc),Simplet_Song_Position


Mt_NoNewPosYet
		tst.b	Simplet_Position_Jump_Flag(pc)
		bne.s	Mt_NextPosition


		lea.l	Channels(pc),a5
		lea.l	Simplet_Voices(pc),a4
		move.w	Simplet_Voices_Nb(pc),d7

Simplet_Copy_Voices
		move.w	Sam_Period(a5),Simplet_Period(a4)
		move.w	Sam_Vol(a5),Simplet_Volume(a4)

		lea.l	Sam_Size(a5),a5
		lea.l	Simplet_Size(a4),a4
		dbra		d7,Simplet_Copy_Voices

Mt_Exit	rts



Mt_CheckEfx
		bsr		Mt_UpdateFunk
		move.w	N_Cmd(a6),d0
		and.w	#$0fff,d0
		beq.s	Mt_PerNop

		move.b	N_Cmd(a6),d0
		and.b	#$0f,d0
		beq.s	Mt_Arpeggio
		cmp.b	#1,d0
		beq		Mt_PortaUp
		cmp.b	#2,d0
		beq		Mt_PortaDown
		cmp.b	#3,d0
		beq		Mt_TonePortamento
		cmp.b	#4,d0
		beq		Mt_Vibrato
		cmp.b	#5,d0
		beq		Mt_TonePlusVolSlide
		cmp.b	#6,d0
		beq		Mt_VibratoPlusVolSlide
		cmp.b	#$e,d0
		beq		Mt_E_Commands

SetBack	move.w	N_Period(a6),Sam_Period(a5)
		cmp.b	#7,d0
		beq		Mt_Tremolo
		cmp.b	#$A,d0
		beq		Mt_VolumeSlide
Mt_Return	rts

Mt_PerNop	move.w	N_Period(a6),Sam_Period(a5)
		rts

Mt_Arpeggio
		moveq.l	#0,d0
		move.b	Simplet_Counter(pc),d0
		divs.w	#3,d0
		swap.w	d0
		cmp.w	#0,d0
		beq.s	Mt_Arpeggio2
		cmp.w	#2,d0
		beq.s	Mt_Arpeggio1
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		lsr.b	#4,d0
		bra.s	Mt_Arpeggio3

Mt_Arpeggio1
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#15,d0
		bra.s	Mt_Arpeggio3

Mt_Arpeggio2
		move.w	N_Period(a6),d2
		bra.s	Mt_Arpeggio4

Mt_Arpeggio3
		asl.w	#1,d0
		moveq.l	#0,d1
		move.b	N_FineTune(a6),d1
		mulu.w	#36*2,d1
		lea.l	Mt_PeriodTable(pc),a0
		add.l	d1,a0
		moveq.l	#0,d1
		move.w	N_Period(a6),d1
		moveq.l	#36,d3
Mt_arploop
		move.w	(a0,d0.w),d2
		cmp.w	(a0),d1
		bhs.s	Mt_Arpeggio4
		addq.l	#2,a0
		dbra		d3,Mt_arploop
		rts

Mt_Arpeggio4
		move.w	d2,Sam_Period(a5)
		rts

Mt_FinePortaUp
		tst.b	Simplet_Counter(pc)
		bne.s	Mt_Return
		move.b	#$0f,Mt_LowMask
Mt_PortaUp
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	Mt_LowMask(pc),d0
		move.b	#$ff,Mt_LowMask
		sub.w	d0,N_Period(a6)
		move.w	N_Period(a6),d0
		and.w	#$0fff,d0
		cmp.w	#113,d0
		bpl.s	Mt_PortaUskip
		and.w	#$f000,N_Period(a6)
		or.w		#113,N_Period(a6)
Mt_PortaUskip
		move.w	N_Period(a6),d0
		and.w	#$0fff,d0
		move.w	d0,Sam_Period(a5)
		rts	
 
Mt_FinePortaDown
		tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		move.b	#$0f,Mt_LowMask
Mt_PortaDown
		clr.w	d0
		move.b	N_CmdLow(a6),d0
		and.b	Mt_LowMask(pc),d0
		move.b	#$ff,Mt_LowMask
		add.w	d0,N_Period(a6)
		move.w	N_Period(a6),d0
		and.w	#$0fff,d0
		cmp.w	#856,d0
		bmi.s	Mt_PortaDskip
		and.w	#$f000,N_Period(a6)
		or.w		#856,N_Period(a6)
Mt_PortaDskip
		move.w	N_Period(a6),d0
		and.w	#$0fff,d0
		move.w	d0,Sam_Period(a5)
		rts

Mt_SetTonePorta
		move.l	a0,-(sp)
		move.w	N_Note(a6),d2
		and.w	#$0fff,d2
		moveq.l	#0,d0
		move.b	N_FineTune(a6),d0
		mulu.w	#37*2,d0
		lea.l	Mt_PeriodTable(pc),a0
		add.l	d0,a0
		moveq.l	#0,d0
Mt_StpLoop
		cmp.w	(a0,d0.w),d2
		bhs.s	Mt_StpFound
		addq.w	#2,d0
		cmp.w	#37*2,d0
		blo.s	Mt_StpLoop
		moveq.l	#35*2,d0
Mt_StpFound
		move.b	N_FineTune(a6),d2
		and.b	#8,d2
		beq.s	Mt_StpGoss
		tst.w	d0
		beq.s	Mt_StpGoss
		subq.w	#2,d0
Mt_StpGoss
		move.w	(a0,d0.w),d2
		move.l	(sp)+,a0
		move.w	d2,N_WantedPeriod(a6)
		move.w	N_Period(a6),d0
		clr.b	N_TonePortDirec(a6)
		cmp.w	d0,d2
		beq.s	Mt_ClearTonePorta
		bge		Mt_Return
		move.b	#1,N_TonePortDirec(a6)
		rts

Mt_ClearTonePorta
		clr.w	N_WantedPeriod(a6)
		rts

Mt_TonePortamento
		move.b	N_CmdLow(a6),d0
		beq.s	Mt_TonePortNoChange
		move.b	d0,N_TonePortSpeed(a6)
		clr.b	N_CmdLow(a6)
Mt_TonePortNoChange
		tst.w	N_WantedPeriod(a6)
		beq		Mt_Return
		moveq.l	#0,d0
		move.b	N_TonePortSpeed(a6),d0
		tst.b	N_TonePortDirec(a6)
		bne.s	Mt_TonePortaUp
Mt_TonePortaDown
		add.w	d0,N_Period(a6)
		move.w	N_WantedPeriod(a6),d0
		cmp.w	N_Period(a6),d0
		bgt.s	Mt_TonePortaSetPer
		move.w	N_WantedPeriod(a6),N_Period(a6)
		clr.w	N_WantedPeriod(a6)
		bra.s	Mt_TonePortaSetPer

Mt_TonePortaUp
		sub.w	d0,N_Period(a6)
		move.w	N_WantedPeriod(a6),d0
		cmp.w	N_Period(a6),d0
		blt.s	Mt_TonePortaSetPer
		move.w	N_WantedPeriod(a6),N_Period(a6)
		clr.w	N_WantedPeriod(a6)

Mt_TonePortaSetPer
		move.w	N_Period(a6),d2
		move.b	N_GlissFunk(a6),d0
		and.b	#$0F,d0
		beq.s	Mt_GlissSkip
		moveq.l	#0,d0
		move.b	N_FineTune(a6),d0
		mulu.w	#36*2,d0
		lea.l	Mt_PeriodTable(pc),a0
		add.l	d0,a0
		moveq.l	#0,d0
Mt_GlissLoop
		cmp.w	(a0,d0.w),d2
		bhs.s	Mt_GlissFound
		addq.w	#2,d0
		cmp.w	#36*2,d0
		blo.s	Mt_GlissLoop
		moveq.l	#35*2,d0
Mt_GlissFound
		move.w	(a0,d0.w),d2
Mt_GlissSkip
		move.w	d2,Sam_Period(a5)					; Set period
		rts

Mt_Vibrato
		move.b	N_CmdLow(a6),d0
		beq.s	Mt_Vibrato2
		move.b	N_VibratoCmd(a6),d2
		and.b	#$0f,d0
		beq.s	Mt_VibSkip
		and.b	#$f0,d2
		or.b		d0,d2
Mt_VibSkip
		move.b	N_CmdLow(a6),d0
		and.b	#$f0,d0
		beq.s	Mt_vibskip2
		and.b	#$0f,d2
		or.b		d0,d2
Mt_vibskip2
		move.b	d2,N_VibratoCmd(a6)
Mt_Vibrato2
		move.b	N_VibratoPos(a6),d0
		lea.l	Mt_VibratoTable(pc),a4
		lsr.w	#2,d0
		and.w	#$001f,d0
		moveq.l	#0,d2
		move.b	N_WaveControl(a6),d2
		and.b	#$03,d2
		beq.s	Mt_Vib_Sine
		lsl.b	#3,d0
		cmp.b	#1,d2
		beq.s	Mt_Vib_RampDown
		move.b	#255,d2
		bra.s	Mt_Vib_Set
Mt_Vib_RampDown
		tst.b	N_VibratoPos(a6)
		bpl.s	Mt_Vib_RampDown2
		move.b	#255,d2
		sub.b	d0,d2
		bra.s	Mt_Vib_Set
Mt_Vib_RampDown2
		move.b	d0,d2
		bra.s	Mt_Vib_Set
Mt_Vib_Sine
		move.b	(a4,d0.w),d2
Mt_Vib_Set
		move.b	N_VibratoCmd(a6),d0
		and.w	#15,d0
		mulu.w	d0,d2
		lsr.w	#7,d2
		move.w	N_Period(a6),d0
		tst.b	N_VibratoPos(a6)
		bmi.s	Mt_VibratoNeg
		add.w	d2,d0
		bra.s	Mt_Vibrato3
Mt_VibratoNeg
		sub.w	d2,d0
Mt_Vibrato3
		move.w	d0,Sam_Period(a5)
		move.b	N_VibratoCmd(a6),d0
		lsr.w	#2,d0
		and.w	#$003c,d0
		add.b	d0,N_VibratoPos(a6)
		rts

Mt_TonePlusVolSlide
		bsr		Mt_TonePortNoChange
		bra		Mt_VolumeSlide

Mt_VibratoPlusVolSlide
		bsr.s	Mt_Vibrato2
		bra		Mt_VolumeSlide

Mt_Tremolo
		move.b	N_CmdLow(a6),d0
		beq.s	Mt_Tremolo2
		move.b	N_TremoloCmd(a6),d2
		and.b	#$0f,d0
		beq.s	Mt_treskip
		and.b	#$f0,d2
		or.b		d0,d2
Mt_treskip
		move.b	N_CmdLow(a6),d0
		and.b	#$f0,d0
		beq.s	Mt_treskip2
		and.b	#$0f,d2
		or.b		d0,d2
Mt_treskip2
		move.b	d2,N_TremoloCmd(a6)
Mt_Tremolo2
		move.b	N_TremoloPos(a6),d0
		lea.l	Mt_VibratoTable(pc),a4
		lsr.w	#2,d0
		and.w	#$001f,d0
		moveq.l	#0,d2
		move.b	N_WaveControl(a6),d2
		lsr.b	#4,d2
		and.b	#$03,d2
		beq.s	Mt_tre_sine
		lsl.b	#3,d0
		cmp.b	#1,d2
		beq.s	Mt_tre_rampdown
		move.b	#255,d2
		bra.s	Mt_tre_set
Mt_tre_rampdown
		tst.b	N_VibratoPos(a6)
		bpl.s	Mt_tre_rampdown2
		move.b	#255,d2
		sub.b	d0,d2
		bra.s	Mt_tre_set
Mt_tre_rampdown2
		move.b	d0,d2
		bra.s	Mt_tre_set
Mt_tre_sine
		move.b	(a4,d0.w),d2
Mt_tre_set
		move.b	N_TremoloCmd(a6),d0
		and.w	#15,d0
		mulu.w	d0,d2
		lsr.w	#6,d2
		moveq.l	#0,d0
		move.b	N_Volume(a6),d0
		tst.b	N_TremoloPos(a6)
		bmi.s	Mt_TremoloNeg
		add.w	d2,d0
		bra.s	Mt_Tremolo3
Mt_TremoloNeg
		sub.w	d2,d0
Mt_Tremolo3
		bpl.s	Mt_TremoloSkip
		clr.w	d0
Mt_TremoloSkip
		cmp.w	#$40,d0
		bls.s	Mt_TremoloOk
		move.w	#$40,d0
Mt_TremoloOk
		move.w	d0,Sam_Vol(a5)
		move.b	N_TremoloCmd(a6),d0
		lsr.w	#2,d0
		and.w	#$003c,d0
		add.b	d0,N_TremoloPos(a6)
		rts

Mt_SampleOffset
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		beq.s	Mt_SoNoNew
		move.b	d0,N_SampleOffset(a6)
Mt_SoNoNew
		move.b	N_SampleOffset(a6),d0
		lsl.w	#8,d0
		cmp.w	N_Length(a6),d0
		bge.s	Mt_SoFSkip
		sub.w	d0,N_Length(a6)
		add.l	d0,N_Start(a6)
		rts

Mt_SoFSkip
		rts
; Mais qui c'est qui avait cod‚ cet effet 9 !!!
; c'‚tait vachement bugg‚ et dire que j'ai cherch‚ pendant un paquet
; de temps pourquoi le module HUMANTARGET d‚lirait un peu
; Y'avais aussi un autre truc qui marchait pas du tout avec CYBERRIDE
; ah la la, j'vous jure, les routines Protracker, c'est la super joie !!


Mt_VolumeSlide
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		lsr.b	#4,d0
		tst.b	d0
		beq.s	Mt_VolSlideDown
Mt_VolSlideUp
		add.b	d0,N_Volume(a6)
		cmp.b	#$40,N_Volume(a6)
		bmi.s	Mt_VSUSkip
		move.b	#$40,N_Volume(a6)

Mt_VSUSkip
		moveq.l	#0,d0
		move.b	N_Volume(a6),d0
		move.w	d0,Sam_Vol(a5)
		rts

Mt_VolSlideDown
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0F,d0

Mt_VolSlideDown2
		sub.b	d0,N_Volume(a6)
		bpl.s	Mt_VSDSkip
		clr.b	N_Volume(a6)
Mt_VSDSkip
		moveq.l	#0,d0
		move.b	N_Volume(a6),d0
		move.w	d0,Sam_Vol(a5)
		rts

Mt_PositionJump
		move.b	N_CmdLow(a6),d0
		ext.w	d0
		subq.w	#1,d0
		move.w	d0,Simplet_Song_Position

Mt_PJ2	clr.b	Simplet_Pattern_Break_Pos
		st		Simplet_Position_Jump_Flag
		rts

Mt_VolumeChange
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		cmp.b	#$40,d0
		bls.s	Mt_VolumeOk
		moveq.l	#$40,d0
Mt_VolumeOk
		move.b	d0,N_Volume(a6)
		move.w	d0,Sam_Vol(a5)
		rts

Mt_PatternBreak
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0

		move.l	d0,d2			; Codage en BCD
		lsr.b	#4,d0			; premier chiffre
		mulu.w	#10,d0			; les dizaines
		and.b	#$0f,d2			; deuxiŠme chiffre
		add.b	d2,d0			; les unit‚s

		move.b	Simplet_Pattern_Length(pc),d1
		subq.b	#1,d1
		cmp.b	d1,d0				; Fo pas d‚passer
		bhi.s	Mt_PJ2				; la longueur d'un pattern !!

		move.b	d0,Simplet_Pattern_Break_Pos
		st		Simplet_Position_Jump_Flag
		rts


Mt_SetSpeed
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		beq.s	Mt_End
		cmp.b	#31,d0
		bhi.s	Simplet_Set_Tempo
		move.b	d0,Simplet_Speed	
Mt_End	rts

Simplet_Set_Tempo
		move.b	d0,Simplet_Tempo
		rts
; Pas encore impl‚ment‚ mais c'est pour bient“t car c'est facile
; … faire avec la routine au DSP, Il suffit de la mettre en timer A
; et de calculer la fr‚quence du timer en fonction du tempo et modifier
; le nombre de samples … calculer par interruption pour la routine DSP
; attention, toutefois, si le tempo est plus lent que 50 Hz, il
; faudrait essayer de r‚partir les transferts en plusieurs fois
; pour pas r‚server trop de place pour les samples, car on risquerait
; de saturer la place dans le DSP...


Mt_CheckMoreEfx
		bsr		Mt_UpdateFunk
		move.b	N_Cmd(a6),d0

		and.b	#$0f,d0
		cmp.b	#$9,d0
		beq		Mt_SampleOffset
		cmp.b	#$b,d0
		beq		Mt_PositionJump
		cmp.b	#$d,d0
		beq.s	Mt_PatternBreak
		cmp.b	#$e,d0
		beq.s	Mt_E_Commands
		cmp.b	#$f,d0
		beq.s	Mt_SetSpeed
		cmp.b	#$c,d0
		beq		Mt_VolumeChange
		bra		Mt_PerNop

Mt_E_Commands
		move.b	N_CmdLow(a6),d0
		and.b	#$f0,d0
		lsr.b	#4,d0
		beq.s	Mt_FilterOnOff
		cmp.b	#1,d0
		beq		Mt_FinePortaUp
		cmp.b	#2,d0
		beq		Mt_FinePortaDown
		cmp.b	#3,d0
		beq.s	Mt_SetGlissControl
		cmp.b	#4,d0
		beq.s	Mt_SetVibratoControl
		cmp.b	#5,d0
		beq.s	Mt_SetFineTune
		cmp.b	#6,d0
		beq.s	Mt_JumpLoop
		cmp.b	#7,d0
		beq		Mt_SetTremoloControl
		cmp.b	#9,d0
		beq		Mt_RetrigNote
		cmp.b	#$a,d0
		beq		Mt_VolumeFineUp
		cmp.b	#$b,d0
		beq		Mt_VolumeFineDown
		cmp.b	#$c,d0
		beq		Mt_NoteCut
		cmp.b	#$d,d0
		beq		Mt_NoteDelay
		cmp.b	#$e,d0
		beq		Mt_PatternDelay
		cmp.b	#$f,d0
		beq		Mt_FunkIt
		rts

Mt_FilterOnOff
		rts	

Mt_SetGlissControl
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		and.b	#$f0,N_GlissFunk(a6)
		or.b		d0,N_GlissFunk(a6)
		rts

Mt_SetVibratoControl
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		and.b	#$f0,N_WaveControl(a6)
		or.b		d0,N_WaveControl(a6)
		rts

Mt_SetFineTune
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		move.b	d0,N_FineTune(a6)
		rts

Mt_JumpLoop
		tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		beq.s	Mt_SetLoop
		tst.b	N_LoopCount(a6)
		beq.s	Mt_JumpCnt
		subq.b	#1,N_LoopCount(a6)
		beq		Mt_Return
Mt_JmpLoop	
		move.b	N_PattPos(a6),Simplet_Pattern_Break_Pos
		st		Simplet_Pattern_Break_Flag
		rts

Mt_JumpCnt
		move.b	d0,N_LoopCount(a6)
		bra.s	Mt_JmpLoop

Mt_SetLoop
		move.b	Simplet_Pattern_Position(pc),N_PattPos(a6)
		rts

Mt_SetTremoloControl
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		lsl.b	#4,d0
		and.b	#$0f,N_WaveControl(a6)
		or.b		d0,N_WaveControl(a6)
		rts

Mt_RetrigNote
		move.l	d1,-(sp)
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		beq.s	Mt_RtNEnd
		moveq.l	#0,d1
		move.b	Simplet_Counter(pc),d1
		bne.s	Mt_RtNSkp
		move.w	N_Note(a6),d1
		and.w	#$0fff,d1
		bne.s	Mt_RtNEnd
		moveq.l	#0,d1
		move.b	Simplet_Counter(pc),d1

Mt_RtNSkp	divu.w	d0,d1
		swap.w	d1
		tst.w	d1
		bne.s	Mt_RtNEnd

Mt_DoRetrig
		move.l	N_Start(a6),Sam_Start(a5)	; Set sampledata pointer
		move.w	N_Length(a6),Sam_Length(a5)	; Set length
		move.l	N_LoopStart(a6),Sam_LpStart(a5)
		move.l	N_RepLen(a6),Sam_LpLength(a5)
		move.w	N_Period(a6),Sam_Period(a5)

Mt_RtNEnd	move.l (sp)+,d1
		rts


Mt_VolumeFineUp
		tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$f,d0
		bra		Mt_VolSlideUp

Mt_VolumeFineDown
		tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		bra		Mt_VolSlideDown2

Mt_NoteCut
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		cmp.b	Simplet_Counter(pc),d0
		bne		Mt_Return
		clr.b	N_Volume(a6)
		move.w	#0,Sam_Vol(a5)
		rts

Mt_NoteDelay
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		cmp.b	Simplet_Counter(pc),d0
		bne		Mt_Return
		move.w	N_Note(a6),d0
		beq		Mt_Return
		move.l	d1,-(sp)
		bra		Mt_DoRetrig

Mt_PatternDelay
		tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		moveq.l	#0,d0
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		tst.b	Mt_PattDelTime2
		bne		Mt_Return
		addq.b	#1,d0
		move.b	d0,Mt_PattDelTime
		rts

Mt_FunkIt	tst.b	Simplet_Counter(pc)
		bne		Mt_Return
		move.b	N_CmdLow(a6),d0
		and.b	#$0f,d0
		lsl.b	#4,d0
		and.b	#$0f,N_GlissFunk(a6)
		or.b		d0,N_GlissFunk(a6)
		tst.b	d0
		beq		Mt_Return

Mt_UpdateFunk
		movem.l	a0/d1,-(sp)
		moveq.l	#0,d0
		move.b	N_GlissFunk(a6),d0
		lsr.b	#4,d0
		beq.s	Mt_FunkEnd
		lea.l	Mt_FunkTable(pc),a0
		move.b	(a0,d0.w),d0
		add.b	d0,N_FunkOffset(a6)
		btst		#7,N_FunkOffset(a6)
		beq.s	Mt_FunkEnd
		clr.b	N_FunkOffset(a6)
		move.l	N_LoopStart(a6),d0
		moveq.l	#0,d1
		move.w	N_RepLen(a6),d1
		add.l	d1,d0
		add.l	d1,d0
		move.l	N_WaveStart(a6),a0
		addq.l	#1,a0
		cmp.l	d0,a0
		blo.s	Mt_FunkOk
		move.l	N_LoopStart(a6),a0

Mt_FunkOk	move.l	a0,N_WaveStart(a6)
		moveq.l	#-1,d0
		sub.b	(a0),d0
		move.b	d0,(a0)
Mt_FunkEnd
		movem.l	(sp)+,a0/d1
		rts


Mt_FunkTable
		dc.b 0,5,6,7,8,10,11,13,16,19,22,26,32,43,64,128

Mt_VibratoTable	
		dc.b 0,24,49,74,97,120,141,161,180,197,212,224
		dc.b 235,244,250,253,255,253,250,244,235,224
		dc.b 212,197,180,161,141,120,97,74,49,24

Mt_PeriodTable
; Tuning 0, Normal
		dc.w 856,808,762,720,678,640,604,570,538,508,480,453
		dc.w 428,404,381,360,339,320,302,285,269,254,240,226
		dc.w 214,202,190,180,170,160,151,143,135,127,120,113
; Tuning 1
		dc.w 850,802,757,715,674,637,601,567,535,505,477,450
		dc.w 425,401,379,357,337,318,300,284,268,253,239,225
		dc.w 213,201,189,179,169,159,150,142,134,126,119,113
; Tuning 2
		dc.w 844,796,752,709,670,632,597,563,532,502,474,447
		dc.w 422,398,376,355,335,316,298,282,266,251,237,224
		dc.w 211,199,188,177,167,158,149,141,133,125,118,112
; Tuning 3
		dc.w 838,791,746,704,665,628,592,559,528,498,470,444
		dc.w 419,395,373,352,332,314,296,280,264,249,235,222
		dc.w 209,198,187,176,166,157,148,140,132,125,118,111
; Tuning 4
		dc.w 832,785,741,699,660,623,588,555,524,495,467,441
		dc.w 416,392,370,350,330,312,294,278,262,247,233,220
		dc.w 208,196,185,175,165,156,147,139,131,124,117,110
; Tuning 5
		dc.w 826,779,736,694,655,619,584,551,520,491,463,437
		dc.w 413,390,368,347,328,309,292,276,260,245,232,219
		dc.w 206,195,184,174,164,155,146,138,130,123,116,109
; Tuning 6
		dc.w 820,774,730,689,651,614,580,547,516,487,460,434
		dc.w 410,387,365,345,325,307,290,274,258,244,230,217
		dc.w 205,193,183,172,163,154,145,137,129,122,115,109
; Tuning 7
		dc.w 814,768,725,684,646,610,575,543,513,484,457,431
		dc.w 407,384,363,342,323,305,288,272,256,242,228,216
		dc.w 204,192,181,171,161,152,144,136,128,121,114,108
; Tuning -8
		dc.w 907,856,808,762,720,678,640,604,570,538,508,480
		dc.w 453,428,404,381,360,339,320,302,285,269,254,240
		dc.w 226,214,202,190,180,170,160,151,143,135,127,120
; Tuning -7
		dc.w 900,850,802,757,715,675,636,601,567,535,505,477
		dc.w 450,425,401,379,357,337,318,300,284,268,253,238
		dc.w 225,212,200,189,179,169,159,150,142,134,126,119
; Tuning -6
		dc.w 894,844,796,752,709,670,632,597,563,532,502,474
		dc.w 447,422,398,376,355,335,316,298,282,266,251,237
		dc.w 223,211,199,188,177,167,158,149,141,133,125,118
; Tuning -5
		dc.w 887,838,791,746,704,665,628,592,559,528,498,470
		dc.w 444,419,395,373,352,332,314,296,280,264,249,235
		dc.w 222,209,198,187,176,166,157,148,140,132,125,118
; Tuning -4
		dc.w 881,832,785,741,699,660,623,588,555,524,494,467
		dc.w 441,416,392,370,350,330,312,294,278,262,247,233
		dc.w 220,208,196,185,175,165,156,147,139,131,123,117
; Tuning -3
		dc.w 875,826,779,736,694,655,619,584,551,520,491,463
		dc.w 437,413,390,368,347,328,309,292,276,260,245,232
		dc.w 219,206,195,184,174,164,155,146,138,130,123,116
; Tuning -2
		dc.w 868,820,774,730,689,651,614,580,547,516,487,460
		dc.w 434,410,387,365,345,325,307,290,274,258,244,230
		dc.w 217,205,193,183,172,163,154,145,137,129,122,115
; Tuning -1
		dc.w 862,814,768,725,684,646,610,575,543,513,484,457
		dc.w 431,407,384,363,342,323,305,288,272,256,242,228
		dc.w 216,203,192,181,171,161,152,144,136,128,121,114


Simplet_Line_Size			ds.w		1
Simplet_Pattern_Size		ds.w		1
Simplet_Voices_Nb			ds.w		1
Simplet_Samples_Nb			ds.w		1
Simplet_Samples_Adr			ds.l		32
Simplet_Patterns_Adr		ds.l		1
Simplet_Sequence_Adr		ds.l		1
Simplet_Song_Position		ds.w		1
Simplet_Song_Length			ds.w		1
Simplet_Song_Restart		ds.w		1
Simplet_Tempo				ds.b		1
Simplet_Speed				ds.b		1
Simplet_Counter			ds.b		1
Simplet_Pattern_Position		ds.b		1
Simplet_Pattern_Length		ds.b		1
Simplet_Pattern_Break_Flag	ds.b		1
Simplet_Pattern_Break_Pos	ds.b		1
Simplet_Position_Jump_Flag	ds.b		1
Mt_PattDelTime				ds.b		1
Mt_PattDelTime2			ds.b		1
Mt_LowMask				ds.b		1
						Even
Mt_DMACONtemp				ds.l		1

Channels					ds.b		32*Sam_Size
Simplet_Voices				ds.b		32*Simplet_Size
Mt_Channels_Temp			ds.b		32*N_Size

***********************************************************************
***********				Routine DSP				***********
***********************************************************************

DSP_Code		IncBin	'HOST.P56'
			Even

***********************************************************************
***********				Section BSS				***********
***********************************************************************

			Section	BSS

			ds.b		150*1024			; WorkSpace
WorkSpace		ds.w		1				; premier de la section BSS
