This folder contains utilities and programs
dealing with the boot sector.

The boot sector can be used to load a picture,
set colours, check for viruses, or even launch a program.
Boot code must be written in PC relative mode.
The first two bytes on the boot sector will normally be
$60 $38, meaning branch 56 bytes ahead.
At that point, your first instruction will begin.
You will automatically be placed in supervisor mode, which
means that all the chips registers ($FF8240 etc...) may be
accessed and systems variables (such as $44e) may be called.

While programs can be easily launched from the boot sector,
and indeed a lot of commercial games start this way,
it must be remembered that certain limitations are present.

First, any program that calls gem vdi/aes routines will not work
as at that point in the sequence, gem hasn't been installed yet.

Second, when the time comes to terminate the launched program,
it is unlikely that a clean exit to the desktop will be achieved.
Bombs are more likely to appear.
With games, this is usually no problem, as games are usually terminated
by switching off the computer.

Third, code placed on the boot sector is very prone to detection
by virus killers, who will probably destroy it indiscriminately.

With these provisos, the boot sector will happily launch any program.
STOS programs are particularly easy to launch from the boot sector
as STOS makes no use of GEM.

Ascii files can be easily displayed from a boot code.
So can pictures. 
There is an example in this folder, called BOOT_PIC.PRG
that will create an executable boot-sector whose task
will be to load a PI1 picture from disk.
First, run BOOT_PIC.PRG.  Insert destination disk in A.
Boot sector will be created. Next time, this disk is loaded,
it will automatically display any PI1 picture.
The assembler source code is included.

One such application was in the launch sequence of FOOTBALL CRAZY:
the boot sector was used to display the 'welcome message'. Control
then passed to 'startgem.prg' inside the auto folder, which called
a program called 'chainer.prg'. Chainer.prg first launched
Gary Wheaton's title tune, then launched the main program
'Football.prg'.
 If any help is needed, or for the further code, please contact Budgie UK.


Another program is this folder is EXECUTE.PRG
Again assembler source code is included.
This little one will work out the magic check-sum required to
make your boot sector executable.
Of course, you'll have to have some code on it in the first place.
EXECUTE.PRG is mainly used to make executable boot code that
was once executable, but got modified with a disk editor. (when
changing a greeting message for instance).  Any byte in the boot
sector that is changed, automatically inhibits the execute ability.
Use EXECUTE.PRG to restore it.


Another boot program, GUARDIAN.PRG  will be found in a separate folder.
The principle is the same: 
A PC relative piece of code is slotted on the boot sector.
(In this case a flashing welcome message)
The sector is then made executable.
All further resets and cold starts will activate the guardian.
GUARDIAN.PRG is used to detect whether an uninvited guest
has taken up residence on your boot sector.

Another program, BOOTER.PRG by Jim Holmwood will slot any executable
program (PRG) into the boot sector, and make that sector executable.
The program to be slotted must be written in PC relative code,
less than 450 bytes long and must end with an 'RTS'
rather than the usual TRAP #1 exit.
Three examples of mini boot progs are included: bootdem 1,2 and 3 

----------------------------------------------------------------

The boot sector can be used to launch a program by using the
$4b exec trap call.  Write to Budgie for details.

However, please remember that any program that needs gem
should be auto booted in a different manner:
* place 'startgem.prg' in an auto folder
* place an ascii file called 'startgem.inf' on root directory
  this file contains the path and name of the program needed.
* place program to auto boot ALSO on root directory.
* There is an example of a 'startgem.inf' file on this disk

The only real purpose of boot-sector auto-load is to stop
users interfering with loaders placed in directory.
Also, it occupies no valuable disk space or directory entry
But of course, it is extremely vulnerable to viruses and virus
killers.

--------------------------------------------------------------

