Machine Code in Plain English
-----------------------------

Programming in machine code has always carried mysterious
connotations. Probably because the instructions, being 
executed, one for one, by the main processor, have always
been typically non-English like.

Programmers who think nothing of handling Basic commands like
goto or a=a+1, simply go numb when confronted with austere
and stern codes such as jmp or add.w #1,a.

Yet, they are one and the same. They do precisely the same thing.

Being cryptic is not the only machine code shortcoming. 
Machine instructions are also notoriously simple. They only
do one thing. No elaborate routines, just one simple operation
at a time. They add, jump, compare or shift things.
To execute a command like PRINT "HELLO", dozens, possibly
hundreds of machine operations are required: the address of the
string "hello" has to be found, the shape of the letter H has to
be ascertained, the location of the screen has to be looked up,
the position, height and width of the cursor has to be calculated,
and the colour of the ink established. Then pixels have to be lit
up for the top row of the letter H, and then the next row, and
so on. All in all, a daunting task!

Fortunately, such a complex programming feat need only be undertaken
once. And more often then not, it's been done by somebody else
already. So all you have to do, is to call a proven, established
routine to do the job for you.   Printing the letter H to the
screen, for instance, has already been programmed by the Atari and
GEM systems programmers. The routine is already in the Operating
system, somewhere in ROM. Our task is now simpler.

This is how a machine code programmer would print the string "hello"
on the screen:

move.l	#string,-(sp)   get address of string and push it on stack
move.w	#9,-(sp)	call 9th gemdos routine
trap	#1		tell the 68000 processor to go to it
addq.l	#6,sp		restore the stack as we found it
.......
string	dc.b "hello",0	our string!

It can be seen from the above example that a vast number of
instructions has been reduced to just four. 
The actual machine work of course hasn't changed. All we are
doing is to tell someone who knows how to write a string to the
screen to do it for us. The number of machine cycles remains
the same: literally thousands of operations, but the number
of instructions needed to activate them was down to four.

We can even reduce the number of instructions further, right
down to one in fact, and remedy the first problem associated
with low level languages at the same time.

First, we'll give our print routine a name, say print_hello.

Each time, we want the word "hello" to appear on screen, all
we have to type is    BSR print_hello
This means Branch Sub Routine print_hello
The subroutine is usually terminated with a RTS instruction,
ie RETURN

Suitably labelled subroutines are a giant step towards
the clarity offered by a high level language, such as Basic.

Macros are another way or making your code plainer:
macros are a name given to a set of pre-defined instructions.
Many programmers, including the ones at Budgie UK, no longer
use system calls (TRAP) like the one above, or even
subroutines (like BSR print_hello).
Instead we merely say PRINT hello.

How close to plain English Basic can you get...
Except of course, that our 'plain' instruction will be executed
at eight million cycles a second, in glorious machine code!

I hope to bring you more examples of to-days human face
of machine code in another article.


Camy Maertens

July 1989

 