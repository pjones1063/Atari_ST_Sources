
PLOTTING MOVING SPRITES
-----------------------

First, at the begining of the program, sprites have to be initialized.
We have to declare where they are stored, how wide they are,
how tall etc.. starting x - y coordinates, etc.
This information about sprites is held in an array called
'sprites'. Each sprite occupies a 32 byte parameter block.
Therefore, information about the second sprite can be found 
at sprites+32 , and so on
Sprites can be any reasonable size. The larger they are,
the greater the likelihood of missing a vertical blank.
Missing one frame (1/50th sec) means jerky display.
missing two frames means STOS graphics
missing three is unforgivable.
To find out where the horizontal raster is on the screen, 
press * (star)    the answer is under 'after interrupt'
alternatively, press fire continuously... 

So, let's initialize that lot:
See jsr initialize_sprites.

All sprites are numbered, the first (sprite zero) being the
joystick sprite.

As sprites move around, their x - y coordinates have to be updated.

Coordinates for joystick sprite are only updated if stick has moved
(jsr bittest)

Coordinates for all the other sprites are updated each v/blank
(jsr coord_sprite_1   and so on)

In all cases, sprites will be re-drawn whether their coordinates
have changed or not.

Now that we have updated the coordinates, comes the business
of actually drawing the sprites.
Budgie has several systems, depending on the need for ease or speed

Let's consider the first one, perfectly adequate for most
occasions. It's based on the
   RESTORE - SAVE - DRAW   principle

The verticle blank has arrived. Coordinates have been updated,
We now temporarily erase the old (obsolete) sprite, in order
to replace it with the new, updated one. The is called
'restoring' (restoring the background as we found it)
the macro is     BACK 5,buffer_5

"get scenery stored in buffer_5 (or whichever)
and put it back where it shouhd be."

Next, just before drawing the sprite, is the SAVE operation.
These two operations are usually done in one go.
We will split them and do one at a time: first SAVE.
the macros is    SAVE 5,logical_screen,buffer_5 

"save background from logical_screen into a buffer"

Finally, DRAW!

ex: DRAW 5,spr_screen,logical_screen

"look up the details of sprite #5, and copy it from spr_screen to logical"

At this point the sprite has been re-drawn in its new position!



More about sprites to follow.

Budgie UK  Sept 23, 1989



 
