Sept 23, 1989

SCREENS
--------------
Two video screens are kept and shown alternatively.
We call them logical_screen and physical_screen, (screen_0/screen_1)
They are usually stored right at the top of ram, just before
the operating system.
Say one of them is stored at $78000. The other (its twin brother),
will be stored at $78000 minus 32000
One moment, we will display one of them, the next moment,
it will be the other's turn. And so on.
A video screen is where we assemble our image prior to displaying.
Whatever we assemble in a video screen (backdrops, sprites, scores..)
will be displayed by the video shifter precisely 1/50th sec LATER.

In order to assemble (construct) a picture in a video screen,
we need to find the various components somewhere in memory.

The components are also stored as 'screens'. These screens, all 32k long,
are usually degas pictures. The ideal place for storing these screens
in memory is just after the end of the program, in a place called 'heap'

Let's view our memory to see where everything is,
starting from location zero:

*          system variables, vectors etc..
*          more operating system variables
*          gem, accessories, and other resident material
-------------------------------
*          start of our program
*          end of our program
-------------------------------
*   the heap, in which we will store, in this ascending order:
*          utility_screen (32k) to display messages, etc..
*          spr_screen (32k) sprites, held in a degas picture
*          back_screen (32k) backdrops as a degas picture
*          screen_3 (32k) room for more sprites if needed
*          buffer_screen (32k) to store anything we want to preserve
*          lady_screen (32k) all-purpose area (usually a bonus screen)
*          fonts (2k and 4k) (8 and 16 c/sets)
*          music (usually digitized) (34k+)
*   then we have the really spare, unused, part of the heap...
*   ...all the way up to...
*          screen_1 (one of the two video screen)
*          screen_0 (the other)
*   then comes cartridge area, rom operating system, etc...



Whatever you see on screen at any one time, had to be constructed
in the first place.

The backdrops are blocks of degas copied from the back_screen
onto logical_screen,
the sprites are also blocks of degas, copied from spr_screen
onto logical_screen

All that copying has to be done in 1/50th sec.

Here is the timetable:

- wait for vertical sync
- copy any backdrops that need changing onto logical_screen
- copy any sprites that need showing onto logical_screen
- read joystick, and update coordinates if necessary
- read keyboard and take appropriate action if hit
- update all automatic sprites coordinates
- check for collisions
- hope that 1/50th sec hasn't gone yet
- toggle the screens
- go back to vertical sync

sprites
-------
It is now obvious that in order to display a sprite,
we have to COPY (duplicate) it from its spr_screen onto logical.
The same applies to the backdrops.
Copying something in assembler is done with 'move'
example:
	move.l	spr_screen,a0		a0 now points to origin screen
	move.l	logical_screen,a1	a1 now points to destination
	move.w	#20-1,d0		say it's 20 heigh, by 16 wide
.loop	move.l	(a0)+,(a1)+		copy 8 pixels
	move.l	(a0)+,(a1)+ 		and another 8 pixels
	add.l	#152,a0			jump to next line (orig)
	add.l	#152,a1			jump to next line (dest)
	dbra	d0,.loop		repeat 20 times

and there is it. All done.

Suppose the sprite was located half way down the degas origin,
suppose we want to display it at the bottom of logical_screen:

	move.l	spr_screen,a0	
	add.l	#16000,a0		precise origin
	move.l	logical_screen,a1	
	add.l	#180*160,a1		precise destination
	move.w	#20-1,d0		20 heigh, 16 wide
.loop	move.l	(a0)+,(a1)+	
	move.l	(a0)+,(a1)+
	add.l	#152,a0			go 152 bytes further on
	add.l	#152,a1			(ie 160-8)	 
	dbra	d0,.loop	

What we have done, is copy a part of memory from somewhere
to somewhere else. The fact that the memory copied contained
graphic data was irrelevant. We call this sort of operation
'block-copying'. (Grab a block, and copy it somewhere..)

The sprite we have just copied is very simple.
It will overwrite anything that was already at that particular
location. It will not save it first. Nor will it blend nicely
with that background. It will be a squarish sort of block.

We have macros to perform block copying.
The simple macros will just copy a block from a to b.
Others, more elaborate, will do it while merging with the background.

Some will insist that whatever you copy, should be stored on
a 16 pixel boundary, and copied onto another 16-pixel destination.

Remember, your ST loves things to be on 16 boundaries.
Sprites on a degas picture must always start on a 16 boundary
Their width should be 16 pixels, or 32 or 48.. Never 15!!!
We call 16 pixels a chunk. Therefore, a sprite 32 pixels wide
is said to be 2 chunks wide.


The Budgie shell.s provides for drawing these objects.
in a variety of ways.  In all cases, macros are used.

Here is one macros, the best of the lot: TAKE
TAKE will take a block from a degas picture
held somewhere in memory, and reproduce it, on screen or wherever.
If destination is logical_screen, then the TAKE action must be
performed TWICE! Once on screen_0, once on screen_1.
The reason is that each is toggled every v/blank

ex: TAKE spr_screen,buffer_screen,320,16000,57,48

"take from spr_screen, loc 320, to buffer_screen, loc 16000,
a block 57 high by 48 wide"

the only restrictions on the use of TAKE is that only boundaries of 16
may be addressed. Also there will be no merging with background.
If merging is required, the BLOCK macro must be used instead.

ex: BLOCK spr_screen,$44e,16080,960,3,11

"copy from spr_screen, loc 16080, to current screen, loc 960,
a block 3 chunks wide, by 11 pixel high"

BLOCK is also restricted to 16 pixel boundaries

A more precise, merging, way of drawing graphics is the
DRAW macro. This will put a PRE-DEFINED sprite from anywhere to anywhere
This macro should only be used once the two above (TAKE/BLOCK)
have been fully mastered.

ex: DRAW 5,spr_screen,utility_screen

"look up the details of sprite #5, and copy it from spr_screen to utility"
Full details about this sprite will be found in its parameter block:
size, precise origin, precise destination, x,y, etc...
If destination background is to be saved for later restoration
the macro is

SAVE 5,utility_screen,buffer_5 

"save background from utility_screen into a buffer"
later, if original background needs restoring, the command is

BACK 5,buffer_5





to be continued.....
