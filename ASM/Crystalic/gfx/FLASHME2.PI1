 section text

        move.l    #palett,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett1,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett2,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett3,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett4,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett5,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett6,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        move.l    #palett7,-(sp)
        move.w    #6,-(sp)
        trap      #14
        addq.l    #6,sp
        jsr       frlang
        jsr       frlang
        jmp       START
frlang:
        move.l  #$ffff,d0
frlang1:
        dbf.w   d0,frlang1
frlang2:
        move.l  #$3fff,d0
frlang3:
        dbf.w   d0,frlang3
        rts
START:
  MOVE.L A7,A5
  MOVE.L #UNDERSTACK,A7
  MOVE.L 4(A5),A5
  MOVE.L A5,BEGIN_BASE
  MOVE.L #PROEND,A4
  SUB.L #START,A4
  ADD.L #$100,A4
  MOVE.L A4,LANG_PROG
  MOVE.L LANG_PROG,-(SP)
  MOVE.L BEGIN_BASE,-(SP)
  CLR.W -(SP)
  MOVE.W #$4A,-(SP)
  TRAP #1
  ADD.L #12,SP

	jsr	SetSuper
	jsr	SaveOldColors
	jsr	SaveOldRez
	jsr	SaveOldScreen
 	jsr	SetLowRez
	jsr	StoppaMus
	jsr	MpfMuck
        jsr     PutDegasColors

	move.b	#4,CharCnt
	move.b	#1,Stoppad

	moveq	#1,d0
*	clr.l	$4d2
	jsr	Musik

MainLoop:
        jsr     Copy1
	cmp.b	#0,CharCnt
	bne	NoChar
NoChar:
*	move.w	#$000,$ff8240	*Protime matning
	subq.b	#1,CharCnt

	move.b	$fffc02,d0
n1: 
        
	move.b	$fffc02,d0
        cmpi.b  #$02,d0
        bne     n2
        jsr     CleanUp
        move.l  #NUL,-(sp)
        move.l  #NUL,-(sp)
        move.l  #filnamn1,-(sp)
        clr.w   -(sp)
        move.w  #$4b,-(sp)
        trap    #1
        add.l   #16,sp
n2: 
        cmpi.b  #$03,d0
        bne     n3
        jsr     CleanUp
        move.l  #NUL,-(sp)
        move.l  #NUL,-(sp)
        move.l  #filnamn2,-(sp)
        clr.w   -(sp)
        move.w  #$4b,-(sp)
        trap    #1
        add.l   #16,sp
n3: 
        cmpi.b  #$04,d0
        bne     NoKeypress
        jsr     CleanUp
        clr.l   -(sp)
        trap    #1
NoKeypress:
	bra	MainLoop

PROEND:
*************************************************
*						*
*	        Interupt Rutiner		*
*						*
*************************************************
newVBI:
	movem.l	d0-d7/a0-a6,-(sp)
	lea	SavePal,a0
	lea	$ff8240,a1
	rept	8
	move.l	(a0)+,(a1)+
	endr
	jsr	Musik+8

*	bset	#1,$ff820a
	clr.b	$fffa1b
	move.b	#199,$fffa21
	clr.b	VBIFlag
	move.l	#BorderHBI1,$120

	move.b	#8,$fffa1b
	bclr	#0,$fffa0f
	movem.l	(sp)+,d0-d7/a0-a6
	rte
newVBIb:
		jmp	$11111111
BorderHBI1:
	
	rte
BorderHBI2:
	
	rte
PalHBI:
	
	rte

SaveOldRez:
	move.w	#4,-(sp)
	trap	#14
	move.w	d0,SaveRez
	addq.l	#2,sp
	rts
SaveOldScreen:
	move.w	#2,-(sp)
	trap	#14
	move.l	d0,SaveScreen
	addq.l	#2,sp
	rts
SetLowRez:
	move.l	#Skarmminne,d0
	add.l	#256,d0
	and.l	#$ffffff00,d0
	move.l	d0,ScreenPtr
	move.w	#0,-(sp)
	move.l	d0,-(sp)
	move.l	#-1,-(sp)
	move.w	#5,-(sp)
	trap	#14
	add.l	#12,sp
	rts
RestoreRezAndScreen:
	move.w	SaveRez,-(sp)
	move.l	SaveScreen,-(sp)
	move.l	#-1,-(sp)
	move.w	#5,-(sp)
	trap	#14
	add.l	#12,sp
	rts
SaveOldColors:
	movem.l	d0-d7,-(sp)
	movem.l	$ff8240,d0-d7
	movem.l	d0-d7,SaveColors
	movem.l	(sp)+,d0-d7
	rts
RestoreColors:
	movem.l	d0-d7,-(sp)
	movem.l	SaveColors,d0-d7
	movem.l	d0-d7,$ff8240
	movem.l	(sp)+,d0-d7
	rts
SetSuper:
	move.l  #0,-(sp)
	move.w	#32,-(sp)
	trap	#1
	move.l	d0,SaveSuper
	addq.l	#6,sp
	rts
LeaveSuper:
	move.l  SaveSuper,-(sp)
	move.w	#32,-(sp)
	trap	#1
	addq.l	#6,sp
	rts
********** Wait for key ***********
WaitForKey:
    movem.l d0-d7/a0-a7,-(SP)    ; save org value on stack
    move.w #2,-(SP)              ; read from keyboard
    move.w #2,-(SP)
    trap   #13                   ; Bios(2)=read charter

    addq.l #4,SP                 ; clean up
    movem.l (sp)+,d0-d7/a0-a7    ; restore old value
 rts
StartaMus:
	move.l	#MusDc2,-(sp)
	clr.w	-(sp)
	move.w	#25,-(sp)
	trap	#14
	addq.l	#8,sp
	rts
StoppaMus:
	move.l	#MusDc1,-(sp)
	clr.w	-(sp)
	move.w	#25,-(sp)
	trap	#14
	addq.l	#8,sp
	rts
CleanUp:
	jsr	MpfMuck2
	jsr	StartaMus
	jsr	RestoreColors
	jsr	RestoreRezAndScreen
	jsr	LeaveSuper
	rts
PutDegasColors:
	lea	Bild,a0
	add.l	#2,a0			; first to bytes of deags is reserved
	lea	$FF8240,A1		; $FF8240 is hardware pallete 
	lea	SavePal,a2

	move.l	#15,D0			; 16 color to copy
.CopyPal:
	MOVE.W	(A0),(A2)+		; copy color 
	MOVE.W	(A0)+,(A1)+		; copy color 
	DBRA	D0,.CopyPal
ScreenS: 
        move.w    #2,-(sp)
        trap      #14
        addq.l    #2,sp
        lea       gemscrn,a5
        move.l    d0,(a5)
bits:
        lea       Bild+34(pc),a4
        move.l    gemscrn(pc),a5
        move.l    #$7d00,d0

Screenloop:
        move.b    (a4)+,(a5)+
        dbf.w     d0,Screenloop 
        rts


*********************************************
Copy1:
        move.l  mem2,d6
        lea     Bildstart2+34,a0
        add.l   d6,a0
        add.l   #160,d6
        lea     mem2,a6
        move.l  d6,(a6)
        lea     mem1,a1
        move.l  #159,d0
Cloop1:
        move.b  (a0)+,(a1)+
        dbf.w   d0,Cloop1
Copy2:
        move.l  gemscrn,a0
        add.l   #27360,a0
        move.l  gemscrn,a1
        add.l   #27200,a1
        move.l  #4640,d0
Cloop2:
        move.b  (a0)+,(a1)+
        dbf.w   d0,Cloop2
Copy3:
        lea     mem1,a0
        move.l  gemscrn,a1
        add.l   #31840,a1
        move.l  #159,d0
Cloop3:
        move.b  (a0)+,(a1)+
        dbf.w   d0,Cloop3
        cmpi.l  #31840,d6
        beq     nollstall
Copy4:
        rts
nollstall:
        move.l  #0,d6
        lea     mem2,a6
        move.l  d6,(a6)
        jmp     Copy4
MpfMuck:
	

	move.l	$70,oldVBI
	move.l	$70,newVBIb+2
	move.b	$fffffa07,old07
	move.b	$fffffa09,old09
	move.b	$fffffa0f,old0f
	move.b	$fffffa11,old11
	move.b	$fffffa1b,old1b
	and.b 	#$df,$fffa09
	and.b 	#$fe,$fffa07
	move.l	#BorderHBI1,$120
	move.l	#newVBI,$70
	or.b  	#1,$fffffa07
	or.b  	#1,$fffffa13
	rts
MpfMuck2:
	move.w	sr,-(sp)
	move.w	#$2700,sr
	Move.b	old07,$fffffa07
	move.b	old09,$fffffa09
	move.b	old0f,$fffffa0f
	move.b	old11,$fffffa11
	move.b	old1b,$fffffa1b
	
	move.l	oldVBI,$70
	move.w	(sp)+,sr

	MOVE.W	#$FFF,$FFFF8240.W
	MOVE.W	#0,$FFFF825E.W
	rts


 even

 section data

filnamn1:       dc.b    "a:\cac.1",0
filnamn2:       dc.b    "a:\cac.2",0
filnamn3:       dc.b    "a:\cac.3",0
filnamn4:       dc.b    "a:\cac.4",0
filnamn5:       dc.b    "a:\cac.5",0
LANG_PROG:	DC.L	0
BEGIN_BASE:	DC.L	0
NUL:		dc.w 0
MusDc1:		dc.b	$12
MusDc2:		dc.b	$8

gemscrn:
        dc.l      0
nul:    dc.w    0
bebase:  dc.l    0
laprg:   dc.l    0
sta:     dc.w   0

palett:
        dc.w      $777,$777,$777,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$000
palett1:
        dc.w      $666,$070,$666,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett2:
        dc.w      $555,$070,$555,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett3:
        dc.w      $444,$070,$444,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett4:
        dc.w      $333,$070,$333,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett5:
        dc.w      $222,$070,$222,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett6:
        dc.w      $111,$070,$111,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060
palett7:
        dc.w      $000,$070,$000,$050,$040,$030,$020,$010,$606,$505,$777,$404,$303,$555,$202,$060

Musik:		incbin	A:\cuddly3.mus
Bild:           incbin  A:\dragon.pi1
mem1:           ds.b    160
Bildstart2:     incbin  A:\DRAGON2.pi1
mem2:           dc.l    0
 
 section bss

SaveRez:	ds.l	1
SaveSuper:	ds.l	1
SaveScreen:	ds.l	1
ScreenPtr:	ds.l	1
RasterPtr:	ds.l	1
TextPtr:	ds.l	1
CharCnt:	ds.b	1
SaveColors:	ds.w	16
SavePal:	ds.w	16
ScrollPal:	ds.w	16
VirScreen:	ds.b	32*8*23
Skarmminne:	ds.b	40000
Stoppad:	ds.b	1
OVERSTACK:	DS.W	$1000
UNDERSTACK:	DS.W	$10
VBIFlag:	ds.b	1
old07:		ds.b	1
old09:		ds.b	1
old0f:		ds.b	1
 old11:		ds.b	1
old1b:		ds.b	1
oldHBI:		ds.l	1
 oldVBI:		ds.l	1
end
                                                                                                    