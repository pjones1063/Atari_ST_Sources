; compression CRAM

; version 3.0
; j'ai d‚cider d'essayer les pr‚calculs … la Denis Huguet, parce que j'ai
; du mal … croire que son ignoble routine (c'est vraiment de la merde, son truc)
; puisse aller plus vite que ma v2.1 avec 'car_race.avi'.
; je pense donc que ‡a vaut le coup d'essayer.
; En effet, ‡a vaut le coup !!! C'est plus rapide que la v2.1 en mode TV.
; C'est mˆme fulgurant (moon3.avi et car_race.avi) !!!
; Cependant, les performances s'effondrent en mode VGA : la v2.1 qui tient
; dans le cache reprend ses droits.

; Stabylo / The Removers

********************************************************************************
	TEXT
********************************************************************************
;precalculs_cram
;	rts
decompresse_cram8
	; a0 : pointe sur le buffer de l'image compress‚e
	; d0 : taille du chunk
	; variables utilis‚es :
	;	palette_tc
	;	fin_ecran
	;	passe_ligne_cram:taille_ligne
	;	nb_blocs_par_ligne
	add.l	a0,d0		; fin du chunk
	move.l	d0,fin_chunk
	lea	palette_tc(pc),a1
	move.l	fin_ecran(pc),a2
	move.l	passe_ligne_cram(pc),d5
	move.w	height(pc),d4
	subq.w	#4,d4	; un bloc fait 4 lignes de hauteur !!!
	swap	d4
	move.w	d5,d4
	lsl.w	#2,d4	; taille de 4 lignes
	move.l	a2,a3
	sub.w	d5,a3
;	lea	(a2,d5.w),a3	; une ligne plus bas
	move.l	a2,a5
	move.w	width(pc),d0
	lea	(a5,d0.w*2),a5	; fin de la ligne courante
	add.w	d5,d5		; taille de deux lignes
	lea	_256_routines_cram,a4
	move.w	d0,d3		; nombre de blocs par ligne
	lsr.w	#2,d3
	swap	d3
	clr.l	d0
	bra.s	entree_boucle_blocs
***********************
code_nul
	cmp.l	fin_chunk(pc),a0
	blo.s	code_2_couleurs
fini	rts
***********************
code_1_couleur		; 40 octets
	bfextu	d0{24:8},d1
	move.w	(a1,d1.w*2),d2
	bfins	d2,d2{0:16}
	move.l	d2,(a2)+
	move.l	d2,(a2)+
	sub.w	d5,a2
	move.l	d2,(a3)+
	subq.w	#8,a2
	move.l	d2,(a3)+
	sub.w	d5,a3
	move.l	d2,(a2)+
	subq.w	#8,a3
	move.l	d2,(a2)+
	add.w	d5,a2
	move.l	d2,(a3)+
	move.l	d2,(a3)+
	add.w	d5,a3
***********************
		; 40+14+22+30+64+120 = 290 octets
boucle_blocs		; 16 octets
	cmp.l	a2,a5
	bhi.s	entree_boucle_blocs
	sub.l	#$40000,d4
	bmi.s	fini
	sub.w	d4,a5	; 4 lignes plus haut
	swap	d5
	sub.w	d5,a2	; passe … la ligne (4 lignes, plus le retour chariot)
	sub.w	d5,a3
	swap	d5
entree_boucle_blocs	; 22 octets
	move.w	(a0)+,d0	; code0:code1 format intel 
	beq.s	code_nul
	rol.w	#8,d0
	bpl.s	code_2_couleurs	; teste si d0<$8000 non sign‚.
	cmp.w	#$9000,d0
	bpl.s	code_8_couleurs
;	move.w	d0,d1
;	and.w	#$fc00,d1
;	cmp.w	#$8400,d1	; teste si $84 <= code1 <= $87
	bfextu	d0{17:5},d1	; (on sait que le bit 15 est mis, il suffit
	subq.w	#1,d1		;  donc de tester si le champ d0{17:5} vaut 1)
	bne.s	code_1_couleur
***********************
saute_blocs		; 30 octets
	; on saute d0.w-$8400 blocs
	swap	d3	; nombre de blocs par ligne
	sub.w	#$8400,d0	; nombre de blocs … sauter
	bra.s	.tst
.bcl	sub.w	d3,d0	; saute 4 lignes tant qu'on peut
	sub.w	d4,a2
	sub.w	d4,a3
	sub.w	d4,a5
	sub.l	#$40000,d4
	bmi.s	fini
.tst	cmp.w	d3,d0	; reste-t-il assez pour une ligne ?
	bpl.s	.bcl
	lsl.w	#3,d0	; un bloc fait 8 octet de large
	add.w	d0,a2
	add.w	d0,a3
	swap	d3
	bra.s	boucle_blocs
***********************
code_2_couleurs		; 74 octets
	; le 16 bits de poids fort de d0 sont nuls
	clr.l	d1
	roxl.w	#1,d1 ; on annule le bit X (d1.w sera ensuite ‚cras‚, on s'en fiche)
	clr.l	d2
	move.b	(a0)+,d1
	move.b	(a0)+,d2
	move.w	(a1,d1.w*2),d1
	move.w	d1,d6
	move.w	(a1,d2.w*2),d2
	move.w	d2,d7

	move.w	d6,d3
	roxr.l	#8,d0	; 8 bits de poids fort (‡a permet d'‚liminer le bit 7,
	; mais on suppose que le bit X est effac‚)
	bcs.s	.bit_7_mis
	move.w	d7,d3
.bit_7_mis
	lsl.w	#8,d0
	rol.l	#8,d0	; 7 bits de poids faible *2
	lea	.retour1(pc),a6
	jmp	(a4,d0.w*8)	; d0.w*8, c'est bien les 7 bits de poids faible *16
.retour1
	bfextu	d0{9:7+4},d0	; voici les 7 autres bits *16
	move.w	d3,(a3)+
	sub.w	d5,a2
	sub.w	d5,a3
	subq.l	#8,a2
	subq.l	#8,a3
	lea	.retour2(pc),a6
	jmp	(a4,d0.w)
.retour2
	move.w	d7,(a3)+	; on sait que le bit 15 n'est pas mis.
	add.w	d5,a2
	add.w	d5,a3
	bra	boucle_blocs
***********************
code_8_couleurs		; 120 octets
	; d0 : code1:code0			a0 : flux entrant (buffer)
	; d1 : couleur 1			a1 : palette_tc
	; d2 : couleur 2			a2 : ecran
	; d3 : couleur choisie … afficher	a3 : ecran, une ligne plus bas
	; d4 : taille_ligne*4			a4 : pr‚calculs entrelas
	; d5 : passe_ligne_cram:taille_ligne*2	a5 : fin de la ligne … l'‚cran
	; d6 : couleur 3			a6 : adresse de saut
	; d7 : couleur 4
	clr.l	d1
	roxl.w	#1,d1	; efface bit X
	clr.l	d2
	move.b	(a0)+,d1
	clr.l	d6
	move.b	(a0)+,d2
	clr.l	d7
	move.w	(a1,d1.w*2),d1
	move.b	(a0)+,d6
	move.w	(a1,d2.w*2),d2
	move.b	(a0)+,d7
	move.w	(a1,d6.w*2),d6
	move.w	(a1,d7.w*2),d7

	move.w	d6,d3
	roxr.l	#8,d0	; 8 bits de poids fort
	bcs.s	.bit_7_mis
	move.w	d7,d3
.bit_7_mis
	lsl.w	#8,d0
	rol.l	#8,d0	; 8 bits de poids faible
	lea	.retour1(pc),a6
	jmp	(a4,d0.w*8)
.retour1
	move.w	d3,(a3)+
	bfextu	d0{9:7+4},d0	; le bfextu me permet d'effacer la partie sup‚rieure de d0
	clr.l	d1
	sub.w	d5,a2
	move.b	(a0)+,d1
	clr.l	d2
	sub.w	d5,a3
	move.b	(a0)+,d2
	clr.l	d6
	move.w	(a1,d1.w*2),d1
	clr.l	d7
	move.w	(a1,d2.w*2),d2
	move.b	(a0)+,d6
	subq.l	#8,a2
	move.b	(a0)+,d7
	subq.l	#8,a3
	move.w	(a1,d6.w*2),d6
	move.w	(a1,d7.w*2),d7
	lea	.retour2(pc),a6
	jmp	(a4,d0.w)
.retour2
	move.w	d6,(a3)+	; on sait que le bit 15 est mis.
	add.w	d5,a2
	add.w	d5,a3
	bra	boucle_blocs
******************************************************
decompresse_cram16
	; a0 : pointe sur le buffer de l'image copress‚e
	; d0 : taille du chunk
	; variables utilis‚es :
	;	precalc_cram16
	;	fin_ecran
	;	passe_ligne_cram:taille_ligne
	; nb_blocs_par_ligne ne sert plus.
	
	; les labels sont les mˆmes qu'avec le CRAM8, donc ils prennent
	; tous un pr‚fixe '_'. Les variables utilis‚es sont les mˆmes
	add.l	a0,d0		; fin du chunk
	move.l	d0,fin_chunk
	lea	precalc_cram16,a1
	move.l	fin_ecran(pc),a2
	move.l	passe_ligne_cram(pc),d5
	move.w	height(pc),d4
	subq.w	#4,d4	; un bloc fait 4 lignes de hauteur !!!
	swap	d4
	move.w	d5,d4
	lsl.w	#2,d4	; taille de 4 lignes
	move.l	a2,a3
	sub.w	d5,a3	; une ligne plus bas
	move.l	a2,a5
	move.w	width(pc),d0
	lea	(a5,d0.w*2),a5	; fin de la ligne courante
	add.w	d5,d5		; taille de deux lignes
	lea	_256_routines_cram,a4
	move.w	d0,d3		; nombre de blocs par ligne
	lsr.w	#2,d3		; un bloc fait 4 pixels de large
	swap	d3
	clr.l	d0
	bra.s	_entree_boucle_blocs
***********************
_code_nul
	cmp.l	fin_chunk(pc),a0
	blo.s	_code_2_ou_8_couleurs
_fini	rts
***********************
_code_1_couleur		; 40 octets
	rol.w	#8,d0
	move.w	(a1,d0.w*2),d2
	bfins	d2,d2{0:16}
	move.l	d2,(a2)+
	move.l	d2,(a2)+
	sub.w	d5,a2
	move.l	d2,(a3)+
	subq.w	#8,a2
	move.l	d2,(a3)+
	sub.w	d5,a3
	move.l	d2,(a2)+
	subq.w	#8,a3
	move.l	d2,(a2)+
	add.w	d5,a2
	move.l	d2,(a3)+
	move.l	d2,(a3)+
	add.w	d5,a3
***********************
		; 40+14+24+30+28+116 = 252 octets, ca passe !
		; et tout est en registre !
		; (sauf la fin du chunk qui ne sert qu'une fois par image)
_boucle_blocs		; 16 octets
	cmp.l	a2,a5
	bhi.s	_entree_boucle_blocs
	sub.l	#$40000,d4
	bmi.s	_fini
	sub.w	d4,a5	; 4 lignes plus haut
	swap	d5
	sub.w	d5,a2	; passe … la ligne (4 lignes, plus le retour chariot)
	sub.w	d5,a3
	swap	d5
_entree_boucle_blocs	; 24 octets
	move.w	(a0)+,d0	; code0:code1
	beq.s	_code_nul
	rol.w	#8,d0		; format intel
	bpl.s	_code_2_ou_8_couleurs	; teste si d0<$8000 non sign‚.
;	move.w	d0,d1
;	and.w	#$fc00,d1
;	cmp.w	#$8400,d1	; teste si $84 <= code1 <= $87
	bfextu	d0{17:5},d1	; (on sait que le bit 15 est mis, il suffit
	subq.w	#1,d1		;  donc de tester si le champ d0{17:5} vaut 1)
	bne.s	_code_1_couleur
***********************
_saute_blocs		; 30 octets
	; on saute d0.w-$8400 blocs
	swap	d3	; nb de blocs par ligne
	sub.w	#$8400,d0	; nombre de blocs … sauter
	bra.s	.tst
.bcl	sub.w	d3,d0	; saute 4 lignes tant qu'on peut
	sub.w	d4,a2
	sub.w	d4,a3
	sub.w	d4,a5
	sub.l	#$40000,d4
	bmi.s	_fini
.tst	cmp.w	d3,d0	; reste-t-il assez pour une ligne ?
	bpl.s	.bcl
	lsl.w	#3,d0	; un bloc fait 8 octets de large
	add.w	d0,a2
	add.w	d0,a3
	swap	d3
	bra.s	_boucle_blocs
***********************
_code_2_ou_8_couleurs		; 28 octets
	move.w	(a0)+,d1	; 2 couleurs format intel
	move.b	#0,ccr	; efface le bit X
	tst.b	d1
	bmi.s	_8_couleurs
	move.w	(a0)+,d2
	move.w	(a1,d1.w*2),d1
	move.w	(a1,d2.w*2),d2
	move.w	d1,d6
	move.w	d2,d7

	move.w	d6,d3
	roxr.l	#8,d0	; 8 bits de poids fort (‡a permet d'‚liminer le bit 7,
	; mais on suppose que le bit X est effac‚)
	bcs.s	.bit_7_mis
	move.w	d7,d3
.bit_7_mis
	lsl.w	#8,d0
	rol.l	#8,d0	; 7 bits de poids faible *2
	lea	.retour1(pc),a6
	jmp	(a4,d0.w*8)	; d0.w*8, c'est bien les 7 bits de poids faible *16
.retour1
	bfextu	d0{9:7+4},d0	; voici les 7 autres bits *16
	move.w	d3,(a3)+
	sub.w	d5,a2
	sub.w	d5,a3
	subq.l	#8,a2
	subq.l	#8,a3
	lea	.retour2(pc),a6
	jmp	(a4,d0.w)
.retour2
	move.w	d7,(a3)+	; on sait que le bit 15 n'est pas mis.
	add.w	d5,a2
	add.w	d5,a3
	bra	_boucle_blocs
***********************		; 116 octets
	; d0 : code1:code0			a0 : flux entrant (buffer)
	; d1 : couleur 1			a1 : palette_tc
	; d2 : couleur 2			a2 : ecran
	; d3 : couleur choisie … afficher	a3 : ecran, une ligne plus bas
	; d4 : taille_ligne*4			a4 : pr‚calculs entrelas
	; d5 : passe_ligne_cram:taille_ligne*2	a5 : fin de la ligne … l'‚cran
	; d6 : compteur dbf 1			a6 : adresse de saut
	; d7 : compteur dbf 2
_8_couleurs
	move.w	(a0)+,d2
	move.w	(a1,d1.w*2),d1
	move.w	(a0)+,d6
	move.w	(a1,d2.w*2),d2
	move.w	(a0)+,d7
	move.w	(a1,d6.w*2),d6
	move.w	(a1,d7.w*2),d7

	move.w	d6,d3
	roxr.l	#8,d0	; 8 bits de poids fort
	bcs.s	.bit_7_mis
	move.w	d7,d3
.bit_7_mis
	lsl.w	#8,d0
	rol.l	#8,d0	; 8 bits de poids faible
	lea	.retour1(pc),a6
	jmp	(a4,d0.w*8)
.retour1
	move.w	d3,(a3)+
	bfextu	d0{9:7+4},d0	; le bfextu me permet d'effacer la partie sup‚rieure de d0
	sub.w	d5,a2
	move.w	(a0)+,d1
	sub.w	d5,a3
	move.w	(a0)+,d2
	move.w	(a1,d1.w*2),d1
	move.w	(a1,d2.w*2),d2
	move.w	(a0)+,d6
	subq.l	#8,a2
	move.w	(a0)+,d7
	subq.l	#8,a3
	move.w	(a1,d6.w*2),d6
	move.w	(a1,d7.w*2),d7
	lea	.retour2(pc),a6
	jmp	(a4,d0.w)
.retour2
	move.w	d7,(a3)+	; on sait que le bit 15 n'est pas mis.
	add.w	d5,a2
	add.w	d5,a3
	bra	_boucle_blocs




******************************************************
_256_routines_cram
COMPTEUR set	0
	REPT	128	;  et pas 256 parce que je traite le bit 7 … part
MASQUE1	set	1
MASQUE2	set	16
	REPT	2
	IFNE	COMPTEUR&MASQUE1
	move.w	d1,(a2)+	; A
	ELSE
	move.w	d2,(a2)+	; B
	ENDC

	IFNE	COMPTEUR&MASQUE2
	move.w	d1,(a3)+
	ELSE
	move.w	d2,(a3)+
	ENDC
MASQUE1	set	MASQUE1<<1
MASQUE2	set	MASQUE2<<1
	ENDR
	
	REPT	2
	IFNE	COMPTEUR&MASQUE1
	move.w	d6,(a2)+	; A
	ELSE
	move.w	d7,(a2)+	; B
	ENDC
	
	IFEQ	MASQUE2==128	; pas la deuxiŠme fois (le bit 7 ne compte donc pas)
	IFNE	COMPTEUR&MASQUE2
	move.w	d6,(a3)+
	ELSE
	move.w	d7,(a3)+
	ENDC
	ENDC
MASQUE1	set	MASQUE1<<1
MASQUE2	set	MASQUE2<<1
	ENDR

	jmp	(a6)
COMPTEUR set	COMPTEUR+1
	ENDR

******************************************************
	BSS
******************************************************
;nb_blocs_par_ligne
;	ds.w	1
;palette_tc	ds.l	1
;width	ds.l	1
;fin_ecran
;	ds.l	1
;fin_chunk
;	ds.l	1
;passe_ligne_cram
;	ds.l	1
