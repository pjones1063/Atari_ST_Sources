Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 1



1                        ;--------------------------------------------
2                        ;        REAL SOUND PLAYER      n voix      -
3                        ;             v1.00                         -
4                        ;       coded by : NEW_FACE                 -
5                        ;                                           -
6                        ;        =95  EXA !!                        -
7                        ;                                           -
8                        ;--------------------------------------------
9                        ;
10                       ;
11                       ;*MEMORY NOTE:
12                       ; we use from y:$3a30 to y:$4000 (from p:$3a50 to p:$40
00)
13                       ;    and from x:$3000 to x:$381e
14                       ;
15                       ;*REGISTERS NOTE
16                       ; we use R7 M7 for SSI transmit !
17                       ;you are free to change them !
18                       ;
19                       ;*DIVERS:
20                       ;you are to use this rout as long as you tell
21                       ;my name: NEW-FACE
22     
23     
24     
25     
26     
27                                 OPT     NOW
28     
29        00FFE0         PBC       equ     $ffe0                             ;Po
rt B Control register
30        00FFE1         PCC       equ     $ffe1                             ;Po
rt C Control register
31        00FFE2         PBDDR     equ     $ffe2                             ;Po
rt B Data Direction Register
32        00FFE3         PCDDR     equ     $ffe3                             ;Po
rt C Data Direction Register
33        00FFE4         PBD       equ     $ffe4                             ;Po
rt B Data register
34        00FFE5         PCD       equ     $ffe5                             ;Po
rt C Data register
35        00FFE8         HCR       equ     $ffe8                             ;Ho
st Control Register
36        00FFE9         HSR       equ     $ffe9                             ;Ho
st Status Register
37        00FFEB         HRX       equ     $ffeb                             ;Ho
st Receive Register
38        00FFEB         HTX       equ     $ffeb                             ;Ho
st Transmit Register
39        00FFEC         CRA       equ     $ffec                             ;SS
I Control Register A
40        00FFED         CRB       equ     $ffed                             ;SS
I Control Register B
41        00FFEE         SSISR     equ     $ffee                             ;SS
I Status Register
42        00FFEE         SSITSR    equ     $ffee                             ;SS
I Time Slot Register
43        00FFEF         RX        equ     $ffef                             ;SS
I Serial Receive data/shift register
44        00FFEF         TX        equ     $ffef                             ;SS
I Serial Transmit data/shift register
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 2



45        00FFF0         SCR       equ     $fff0                             ;SC
I Control Register
46        00FFF1         SSR       equ     $fff1                             ;SC
I Status Register
47        00FFF2         SCCR      equ     $fff2                             ;SC
I Clock Control Register
48        00FFF3         STXA      equ     $fff3                             ;SC
I Transmit data Address Register
49        00FFF4         SRX       equ     $fff4                             ;SC
I Receive data register (4-5-6)
50        00FFF4         STX       equ     $fff4                             ;SC
I Transmit data register (4-5-6)
51        00FFFE         BCR       equ     $fffe                             ;Po
rt A Bus Control Register
52        00FFFF         IPR       equ     $ffff                             ;In
terrupt Priority Register
53     
54                       size_buffer
55        000800                   equ     $800
56     
57                       rhost     MACRO   dest
58   m                             jclr    #0,x:<<HSR,*
59   m                             movep   x:<<HRX,dest
60   m                             ENDM
61                       whost     MACRO   source
62   m                             jclr    #1,x:<<HSR,*
63   m                             movep   source,x:<<HTX
64   m                             ENDM
65     
66     
67        P:0000                   org     p:0
68        P:0000 0AF080            jmp     start_snd
                 003A30
69     
70        P:0010                   org     p:$10
71        P:0010 08DFAF            movep             x:(r7)+,x:<<TX
72        P:0011 000000            nop
73        P:0012 08DFAF            movep             x:(r7)+,x:<<TX          ;ex
ception transmission                         ;(eviter les trop grands REP, sinon 
le son est dgeu )
74        P:0026                   org     p:$26
75        P:0026 0BF080            jsr     cmd
                 003A7E
76        P:0028 0BF080            jsr     loader
                 003A45
77     
78        P:3A30                   org     p:$4000-$5d0
79                       ;--------------------------------------------
80                       start_snd
81        P:3A30 0AA803            bclr    #3,x:<<HCR
82        P:3A31 08F4A0            movep             #1,x:<<PBC              ;Ho
st enable
                 000001
83        P:3A33 08F4A8            movep             #$04,x:<<HCR            ;Ho
st Command
                 000004
84        P:3A35 08F4BF            movep             #>$3800,x:<<IPR         ;SS
I en IPL3, Host en IPL2
                 003800
85        P:3A37 08F4AC            movep             #$4100,x:<<CRA          ;SS
I en 2 mots/frame, 16 bits
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 3



                 004100
86        P:3A39 08F4AD            movep             #$0800,x:<<CRB          ;SS
I off
                 000800
87        P:3A3B 08F4A1            movep             #$01f8,x:<<PCC          ;Po
rt C en SSI
                 0001F8
88        P:3A3D 08F4A3            movep             #$0008,x:<<PCDDR        ;Id
em
                 000008
89        P:3A3F 00F0B8            andi    #%11110000,mr
90        P:3A40 0BF080            jsr     init_buffer
                 003B77
91        P:3A42 0AA823            bset    #3,x:<<HCR                        ;fi
n d'initialisation (sources de plantages...)
92        P:3A43 0AF080            jmp     *
                 003A43
93     
94                       loader
95        P:3A45 00F0B8            andi    #<$F0,mr
96        P:3A46 05F420            move              #>-1,m0
                 FFFFFF
97        P:3A48 70F400            move              #>1,n0
                 000001
98        P:3A4A 0450BB            movec             sp,r0
99        P:3A4B 0001F8            ori     #<1,mr
100       P:3A4C 044010            lua     (r0)-n0,r0
101       P:3A4D 61F400            move              #>load_register,r1
                 003A7A
102       P:3A4F 04D0BB            movec             r0,sp
103                      restart
104       P:3A50 0BE180            jsr     (r1)
105       P:3A51 209A00            move              x0,n2
106       P:3A52 62F400            move              #list_cmd,r2
                 003A59
107       P:3A54 000000            nop
108       P:3A55 07EA92            move              p:(r2+n2),r2
109       P:3A56 000000            nop
110       P:3A57 0AE280            jmp     (r2)
111       P:3A58                   dc      0
112                      list_cmd
113       P:3A59                   dc      memoryp
114       P:3A5A                   dc      memoryx
115       P:3A5B                   dc      memoryy
116                      memoryp
117       P:3A5C 0BE180            jsr     (r1)
118       P:3A5D 209000            move              x0,r0
119       P:3A5E 0BE180            jsr     (r1)
120       P:3A5F 06C400            do      x0,_loop
                 003A63
121                                rhost   p:(r0)+
124                      _loop
125       P:3A64 0AF080            jmp     restart
                 003A50
126    
127                      memoryx
128       P:3A66 0BE180            jsr     (r1)
129       P:3A67 209000            move              x0,r0
130       P:3A68 0BE180            jsr     (r1)
131       P:3A69 06C400            do      x0,_loop
                 003A6D
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 4



132                                rhost   x:(r0)+
135                      _loop
136       P:3A6E 0AF080            jmp     restart
                 003A50
137    
138                      memoryy
139       P:3A70 0BE180            jsr     (r1)
140       P:3A71 209000            move              x0,r0
141       P:3A72 0BE180            jsr     (r1)
142       P:3A73 06C400            do      x0,_loop
                 003A77
143                                rhost   y:(r0)+
146                      _loop
147       P:3A78 0AF080            jmp     restart
                 003A50
148    
149                      load_register
150                                rhost   x0
153       P:3A7D 00000C            rts
154    
155                      ;--------------------------------------------
156                      cmd
157       P:3A7E 0BF080            jsr     save_reg
                 003B8A
158       P:3A80 0AA803            bclr    #3,x:<<HCR
159                                rhost   a
162       P:3A84 200003            tst     a
163       P:3A85 0AF0AA            jeq     coupe
                 003B72
164                      ;--------------------------------------------
165       P:3A87 6EF013            clr     a                     y:ptr_buf,r6
                 003BEE
166       P:3A89 05F426            movec             #size_buffer-1,m6
                 0007FF
167       P:3A8B 5E7000            move                          a,y:move
                 003BED
168       P:3A8D 22EE00            move              r7,a
169       P:3A8E 22C400            move              r6,x0
170       P:3A8F 44F444            sub     x0,a      #>size_buffer,x0        ;r7
-r6
                 000800
171       P:3A91 200003            tst     a
172       P:3A92 0AF0A7            jgt     _go_for_that
                 003A95
173       P:3A94 200040            add     x0,a
174                      _go_for_that
175       P:3A95 200022            asr     a
176       P:3A96 5E7013            clr     a                     a,y:loop
                 003BF4
177       P:3A98 3E0200            move              #2,n6
178       P:3A99 23D900            move              n6,n1
179       P:3A9A 23DA00            move              n6,n2
180    
181       P:3A9B 61F400            move              #copy_mem,r1            ;so
urce
                 003B53
182       P:3A9D 56F400            move              #>5,a                   ;nb
                 000005
183       P:3A9F 324000            move              #$40,r2                 ;de
st
184       P:3AA0 0BF080            jsr     copy_double_dest
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 5



                 003AFF
185    
186       P:3AA2 61F400            move              #copy_mem2,r1           ;so
urce
                 003B6C
187       P:3AA4 56F400            move              #>6,a                   ;nb
                 000006
188       P:3AA6 0BF080            jsr     copy_double_dest
                 003AFF
189    
190       P:3AA8 44F400            move              #>0,x0
                 000000
191    
192       P:3AAA 22D300            move              r6,r3
193                      ;       X:r6=r3=BUFFER_COURANT
194                      ;voix1
195                      _loop_all_voice
196                                rhost   a
199       P:3AAE 44F400            move              #>$1234,x0
                 001234
200       P:3AB0 200045            cmp     x0,a
201       P:3AB1 0AF0AA            jeq     _end_of_voice
                 003AD0
202       P:3AB3 5C7000            move                          a1,y:control_da
ta
                 003BEF
203       P:3AB5 0BF080            jsr     go_for_voice_8bits                ;(t
ester si 16 bits)
                 003B06
204       P:3AB7 227600            move              r3,r6
205       P:3AB8 000000            nop
206       P:3AB9 205E00            move              (r6)+
207       P:3ABA 0B7060            btst    #0,y:control_data
                 003BEF
208       P:3ABC 03034E            tcc     x0,b      r3,r6                   ;si
 voix gauche.
209       P:3ABD 0AF0A8            jcs     _voix_droite
                 003AC3
210       P:3ABF 0A7060            bset    #0,y:move
                 003BED
211       P:3AC1 0AF080            jmp     _next
                 003AC5
212                      _voix_droite
213       P:3AC3 0A7061            bset    #1,y:move
                 003BED
214                      _next
215                      ;{      reste identique pour du 8 ou 16 bits.
216       P:3AC5 61F400            move              #calc_freq_voice_move,r1
                 003B40
217       P:3AC7 62F400            move              #calc_freq_voice_add,r2
                 003B58
218       P:3AC9 0B7061            btst    #1,y:control_data
                 003BEF
219       P:3ACB 03814A            tcs     x0,b      r1,r2
220       P:3ACC 000000            nop
221       P:3ACD 0BE280            jsr     (r2)
222       P:3ACE 0AF080            jmp     _loop_all_voice
                 003AAB
223    
224                      ;--------------------------------------------
225    
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 6



226                      ;       si fini en voix droite soustraire 1 a r6
227                      _end_of_voice
228       P:3AD0 5FF000            move                          y:loop,b
                 003BF4
229       P:3AD2 46F400            move              #>1,y0
                 000001
230       P:3AD4 22D200            move              r6,r2
231       P:3AD5 4CF05C            sub     y0,b                  y:move,x0
                 003BED
232       P:3AD7 0AC420            jset    #0,x0,_no_clr_left_data
                 003ADD
233       P:3AD9 227613            clr     a         r3,r6
234       P:3ADA 06CF00            do      b,_no_clr_left_data
                 003ADC
235       P:3ADC 564E00            move              a,x:(r6)+n6
236                      _no_clr_left_data
237       P:3ADD 205B00            move              (r3)+
238       P:3ADE 0AC421            jset    #1,x0,_no_clr_right_data
                 003AE4
239       P:3AE0 227613            clr     a         r3,r6
240       P:3AE1 06CF00            do      b,_no_clr_right_data
                 003AE3
241       P:3AE3 564E00            move              a,x:(r6)+n6
242                      _loop_clr_right_data
243                      _no_clr_right_data
244       P:3AE4 225600            move              r2,r6
245       P:3AE5 0B7060            btst    #0,y:control_data
                 003BEF
246       P:3AE7 0AF0A0            jcc     _voix_gauche
                 003AEA
247       P:3AE9 205600            move              (r6)-
248                      _voix_gauche
249       P:3AEA 61F400            move              #copy_mem,r1            ;so
urce ;remet en etat la memoire interne
                 003B53
250       P:3AEC 56F400            move              #>5,a                   ;nb
                 000005
251       P:3AEE 324000            move              #$40,r2                 ;de
st
252       P:3AEF 0BF080            jsr     copy_double_dest
                 003AFF
253    
254       P:3AF1 61F400            move              #copy_mem2,r1           ;so
urce
                 003B6C
255       P:3AF3 56F400            move              #>6,a                   ;nb
                 000006
256       P:3AF5 0BF080            jsr     copy_double_dest
                 003AFF
257    
258       P:3AF7 6E7000            move                          r6,y:ptr_buf
                 003BEE
259    
260       P:3AF9 08F4AD            movep             #>$5800,x:<<CRB
                 005800
261       P:3AFB 0AA823            bset    #3,x:<<HCR
262       P:3AFC 0BF080            jsr     restore_reg
                 003BC6
263       P:3AFE 000004            rti
264    
265                      copy_double_dest
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 7



266       P:3AFF 06CE00            do      a,_loop_copy
                 003B04
267       P:3B01 5EE100            move                          y:(r1),a
268       P:3B02 07E284            movem             p:(r2),x0
269       P:3B03 4C5900            move                          x0,y:(r1)+
270       P:3B04 075A8E            move              a,p:(r2)+
271                      _loop_copy
272       P:3B05 00000C            rts
273    
274    
275                      ;--------------------------------------------
276                      go_for_voice_8bits
277                                rhost   a
280       P:3B09 5E7000            move                          a,y:vol_sample 
;volume_sample
                 003BF2
281                                rhost   x0                                ;fr
eq sample
284       P:3B0E 4C7000            move                          x0,y:freq_sampl
e
                 003BF3
285       P:3B10 4DF000            move                          y:loop,x1
                 003BF4
286       P:3B12 61F4A0            mpy     x0,x1,a   #buffer_inter,r1        ;ad
dresse_buffer_inter
                 003BF7
287                                whost   a                                 ;nb
r_octet_a_transferer
290       P:3B17 62F422            asr     a         #buffer_inter+1,r2
                 003BF8
291       P:3B19 50F400            move              #>0,a0
                 000000
292       P:3B1B 45F403            tst     a         #>$ff0000,x1
                 FF0000
293       P:3B1D 0AF0AA            jeq     _loop_nothing                     ;(s
ample nul)
                 003B3D
294                                rhost   b1
297       P:3B22 0ACD00            jclr    #0,b1,_no_first_parite
                 003B28
298                                rhost   y:(r1)+
301       P:3B27 205A00            move              (r2)+
302                      _no_first_parite
303       P:3B28 46F400            move              #>$80,y0
                 000080
304       P:3B2A 47F400            move              #>$8000,y1
                 008000
305                      ;separe_les_sample
306       P:3B2C 204100            move              (r1)-n1
307    
308                      ;{
309       P:3B2D 06CE00            do      a,_loop_separe_sample
                 003B34
310                                rhost   x0
313       P:3B32 5E49D0            mpy     x0,y0,a               a,y:(r1)+n1
314       P:3B33 210EC8            mpy     x0,y1,b   a0,a
315       P:3B34 594A66            and     x1,a                  b0,y:(r2)+n2
316                      _loop_separe_sample
317                      ;}
318                                rhost   x0
321       P:3B38 5E49D0            mpy     x0,y0,a               a,y:(r1)+n1
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 8



322       P:3B39 210EC8            mpy     x0,y1,b   a0,a
323       P:3B3A 594A66            and     x1,a                  b0,y:(r2)+n2
324       P:3B3B 5E4900            move                          a,y:(r1)+n1
325       P:3B3C 00000C            rts
326                      _loop_nothing
327       P:3B3D 200013            clr     a
328       P:3B3E 5E6100            move                          a,y:(r1)
329       P:3B3F 00000C            rts
330                      ;--------------------------------------------
331    
332    
333    
334                      ;--------------------------------------------
335                      ;       sample_move
336                      ;--------------------------------------------
337                      calc_freq_voice_move
338       P:3B40 5FF000            move                          y:loop,b
                 003BF4
339       P:3B42 46F400            move              #>1,y0
                 000001
340       P:3B44 4EF05C            sub     y0,b                  y:vol_sample,y0
                 003BF2
341       P:3B46 21FB1B            clr     b         b,n3
342       P:3B47 59F000            move                          y:freq_sample,b
0
                 003BF3
343       P:3B49 62F43A            asl     b         #buffer_inter,r2
                 003BF7
344       P:3B4B 224E00            move              r2,a
345       P:3B4C 21A500            move              b1,x1
346       P:3B4D 212400            move              b0,x0
347       P:3B4E 4FE200            move                          y:(r2),y1   ;pr
emier_sample
348       P:3B4F 224E00            move              r2,a
349       P:3B50 200020            add     x,a
350       P:3B51 2000B8            mpy     y1,y0,b
351       P:3B52 0C0040            jmp     $40
352                      copy_mem
353       P:0040 P:3B53                   org     pi:$40,p:
354       P:0040 P:3B53 06DB00            do      n3,_loop_move_voice           
    ;mettre en mem p:interne
                        000043
355       P:0042 P:3B55                   dc      $cd4eb8
356       P:0043 P:3B56 21D220            add     x,a       a,r2
357                             _loop_move_voice
358       P:0044 P:3B57 00000C            rts
359       P:3B58                   org     p:
360                      ;--------------------------------------------
361                      ;       dc $cd4eb8      quivaut a
362                      ;       mpy y1,y0,b     b,x:(r6)+n6     y:(r2),y1
363                      ;--------------------------------------------
364    
365                      ;--------------------------------------------
366                      ;       sample_add
367                      ;--------------------------------------------
368                      calc_freq_voice_add
369       P:3B58 5FF000            move                          y:loop,b
                 003BF4
370       P:3B5A 46F400            move              #>1,y0
                 000001
371       P:3B5C 4EF05C            sub     y0,b                  y:vol_sample,y0
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 9



                 003BF2
372       P:3B5E 21FB1B            clr     b         b,n3
373       P:3B5F 59F000            move                          y:freq_sample,b
0
                 003BF3
374       P:3B61 62F43A            asl     b         #buffer_inter,r2
                 003BF7
375       P:3B63 21A500            move              b1,x1
376       P:3B64 212400            move              b0,x0
377       P:3B65 224E00            move              r2,a
378       P:3B66 57E600            move              x:(r6),b
379       P:3B67 4FE200            move                          y:(r2),y1
380       P:3B68 2000BA            mac     y1,y0,b
381       P:3B69 200020            add     x,a
382       P:3B6A 21D200            move              a,r2
383       P:3B6B 0C0045            jmp     $45
384                      copy_mem2
385       P:0045 P:3B6C                   org     pi:$45,p:
386       P:0045 P:3B6C 06DB00            do      n3,_loop_add_voice            
    ;mettre en mem p:interne
                        000049
387       P:0047 P:3B6E 574E20            add     x,a       b,x:(r6)+n6
388       P:0048 P:3B6F CDC600            move              x:(r6),b    y:(r2),y
1
389       P:0049 P:3B70 21D2BA            mac     y1,y0,b   a,r2
390                             _loop_add_voice
391       P:004A P:3B71 00000C            rts
392       P:3B72                   org     p:
393                      coupe
394       P:3B72 08F4AD            movep             #$0800,x:<<CRB          ;SS
I off
                 000800
395       P:3B74 0BF080            jsr     restore_reg
                 003BC6
396       P:3B76 000004            rti
397                      ;--------------------------------------------
398    
399    
400                      ;--------------------------------------------
401                      ;       r6 r7
402                      ;--------------------------------------------
403    
404                      init_buffer
405       P:3B77 44F400            move              #>$0,x0
                 000000
406       P:3B79 67F400            move              #buffer,r7              ;in
it_addresse
                 003000
407       P:3B7B 0600A8            rep     #size_buffer
408       P:3B7C 445F00            move              x0,x:(r7)+
409       P:3B7D 66F400            move              #buffer_inter,r6        ;in
it_addresse
                 003BF7
410       P:3B7F 0600A4            rep     #1024
411       P:3B80 4C5E00            move                          x0,y:(r6)+
412       P:3B81 67F400            move              #buffer,r7              ;in
it_addresse
                 003000
413       P:3B83 66F400            move              #buffer,r6              ;in
it_addresse
                 003000
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 10



414       P:3B85 05F427            movec             #size_buffer-1,M7
                 0007FF
415       P:3B87 6E7000            move                          r6,y:ptr_buf
                 003BEE
416       P:3B89 00000C            rts
417    
418                      ;--------------------------------------------
419    
420                      save_reg
421       P:3B8A 0053B8            andi    #%01010011,mr                     ;Vi
rer: NO(scaling, trace, loop)
422       P:3B8B 617000            move              r1,x:sauve
                 002FE2
423       P:3B8D 61F400            move              #sauve+1,r1
                 002FE3
424       P:3B8F 000000            nop
425       P:3B90 665900            move              r6,x:(r1)+
426       P:3B91 055926            move              m6,x:(r1)+
427       P:3B92 765900            move              n6,x:(r1)+
428       P:3B93 625900            move              r2,x:(r1)+
429       P:3B94 055922            move              m2,x:(r1)+
430       P:3B95 725900            move              n2,x:(r1)+
431       P:3B96 635900            move              r3,x:(r1)+
432       P:3B97 055923            move              m3,x:(r1)+
433       P:3B98 735900            move              n3,x:(r1)+
434       P:3B99 525900            move              a2,x:(r1)+
435       P:3B9A 545900            move              a1,x:(r1)+
436       P:3B9B 505900            move              a0,x:(r1)+
437       P:3B9C 535900            move              b2,x:(r1)+
438       P:3B9D 555900            move              b1,x:(r1)+
439       P:3B9E 515900            move              b0,x:(r1)+
440       P:3B9F 445900            move              x0,x:(r1)+
441       P:3BA0 455900            move              x1,x:(r1)+
442       P:3BA1 465900            move              y0,x:(r1)+
443       P:3BA2 715900            move              n1,x:(r1)+
444       P:3BA3 475900            move              y1,x:(r1)+
445       P:3BA4 055921            move              m1,x:(r1)+
446       P:3BA5 05F421            movec             #-1,m1
                 FFFFFF
447       P:3BA7 0462A1            movec             m1,m2
448       P:3BA8 0463A1            movec             m1,m3
449       P:3BA9 61F400            move              #resend1,r1             ;pa
r NULLOS/DNT
                 003BF0
450       P:3BAB 44F400            move              #'RSP',x0               ;Id
entification du mixeur
                 525350
451       P:3BAD 208641            tfr     x0,a      x0,y0                   ;
452                                whost   x0                                ;On
 l'envoie au 030, les deux
455       P:3BB1 20C700  _link     move              y0,y1                   ;te
sts tant en quinconce.
456       P:3BB2 21C600            move              a,y0                    ;
457                                rhost   a                                 ;At
tendre celui donn par le 030,
460       P:3BB6 200045            cmp     x0,a                              ;en
 notant un ventuel envoi Host
461       P:3BB7 0AF0A2            jne     _link                             ;in
terrompu.
                 003BB1
462                                whost   y0                                ;Ec
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 11



hange avec le 030 ce que l'on
465                                whost   y1                                ;a 
intercept.
468                                rhost   y:(r1)+                           ;
471                                rhost   y:(r1)+                           ;
474       P:3BC5 00000C            rts
475    
476                      ;--------------------------------------------
477    
478    
479                      restore_reg
480                      HostResend                                          ;pa
r NULLOS/DNT
481       P:3BC6 44F400            move              #'RSP',x0               ;Re
mplir le port Host avec ce
                 525350
482       P:3BC8 61F400            move              #resend1,r1             ;qu
'il contenait au moment de
                 003BF0
483                                .loop   #2                                ;l'
interruption  destination
485       P:3BCC 5ED900            move                          y:(r1)+,a   ;du
 68030...
486       P:3BCD 200045            cmp     x0,a                              ;
487       P:3BCE 0AF0AA            jeq     _nosend                           ;
                 003BD1
488       P:3BD0 08CE2B            movep             a,x:<<HTX               ;
489       P:3BD1 000000  _nosend   nop                                       ;
490                                .endl                                     ;
492       P:3BD2 61F400            move              #sauve+1,r1
                 002FE3
493       P:3BD4 000000            nop
494       P:3BD5 66D900            move              x:(r1)+,r6
495       P:3BD6 05D926            move              x:(r1)+,m6
496       P:3BD7 76D900            move              x:(r1)+,n6
497       P:3BD8 62D900            move              x:(r1)+,r2
498       P:3BD9 05D922            move              x:(r1)+,m2
499       P:3BDA 72D900            move              x:(r1)+,n2
500       P:3BDB 63D900            move              x:(r1)+,r3
501       P:3BDC 05D923            move              x:(r1)+,m3
502       P:3BDD 73D900            move              x:(r1)+,n3
503       P:3BDE 52D900            move              x:(r1)+,a2
504       P:3BDF 54D900            move              x:(r1)+,a1
505       P:3BE0 50D900            move              x:(r1)+,a0
506       P:3BE1 53D900            move              x:(r1)+,b2
507       P:3BE2 55D900            move              x:(r1)+,b1
508       P:3BE3 51D900            move              x:(r1)+,b0
509       P:3BE4 44D900            move              x:(r1)+,x0
510       P:3BE5 45D900            move              x:(r1)+,x1
511       P:3BE6 46D900            move              x:(r1)+,y0
512       P:3BE7 71D900            move              x:(r1)+,n1
513       P:3BE8 47D900            move              x:(r1)+,y1
514       P:3BE9 05D921            move              x:(r1)+,m1
515       P:3BEA 61F000            move              x:sauve,r1
                 002FE2
516       P:3BEC 00000C            rts
517    
518                      ;--------------------------------------------
519    
520                      end_prog
521       P:3BED         move      ds      1
Motorola DSP56000 Assembler  Version 4.1.1   95-08-27  03:32:50  RSND.ASM
  Page 12



522       P:3BEE         ptr_buf   ds      1
523                      control_data
524       P:3BEF                   dc      2
525       P:3BF0         resend1   ds      1
526       P:3BF1         resend2   ds      1
527       P:3BF2         vol_sample dc     $400000
528                      freq_sample
529       P:3BF3                   dc      $14d8dc
530       P:3BF4         loop      ds      1
531       P:3BF5                   ds      2
532                      buffer_inter
533       P:3BF7                   ds      1024
534       P:3FF7         taille_prg dc     *-start_snd
535    
536       X:2FE2                   org     x:$3000-30
537       X:2FE2         sauve     ds      30
538       X:3000         buffer    ds      size_buffer
539                      ;--------------------------------------------

0    Errors
0    Warnings
