' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
' *                                                             *
' *                      FLEABYTE\SF, 0.8                       *
' *       full-function scientific calculator w. wormhole       *
' *           showing significant digits ("sig.figs")           *
' *            (using the method of bounding values)            *
' *                                                             *
' *                   by Henry K. van Eyken,                    *
' *         11 Falcon, Lakefield, Que. J0V 1K0.  Canada         *
' *                                                             *
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'
' High or medium resolution only
' SESSION OF DEC. 7, 1991
'
'
$m34816
ap_id&=APPL_INIT()
'
@init
@main
'
> PROCEDURE init
  me_id&=MENU_REGISTER(ap_id&,"  Fleabyte\sf")
  ry%=XBIOS(4)
  OPTION BASE 0
  DIM memo$(25,2)
  all!=TRUE
  rad!=TRUE
  verify_sf!=FALSE
  leftover!=FALSE
RETURN
> PROCEDURE main
  IF ap_id&<>0
    DO
      ~EVNT_MESAG(0)
      IF XBIOS(4)=0
        ALERT 1," | |  In high or medium |   resolution only",1," sorry ",a%
      ENDIF
      message
    LOOP
  ELSE
    TITLEW #1,"| fleabyte.sf\henry fac. |"
    OPENW #1,0,170*ry%-2,638,30*ry%,&X1111
    handle&=W_HAND(#1)
    ON MENU MESSAGE GOSUB message
    exit!=FALSE
    REPEAT
      ON MENU
    UNTIL exit!
  ENDIF
RETURN
> PROCEDURE message
  x&=MENU(5)
  y&=MENU(6)
  w&=MENU(7)
  h&=MENU(8)
  '
  SELECT MENU(1)
  CASE 20,23
    ~WIND_UPDATE(1)
    ~WIND_GET(handle&,11,x&,y&,w&,h&)
    ~WIND_GET(handle&,4,wx&,wy&,ww&,wh&)
    REPEAT
      IF RC_INTERSECT(wx&,wy&,ww&,wh&,x&,y&,w&,h&)
        CLIP x&,y&,w&,h& OFFSET wx&,wy&
        @finder
        CLIP 0,0,WORK_OUT(0),WORK_OUT(1)
      ENDIF
      ~WIND_GET(handle&,12,x&,y&,w&,h&)
    UNTIL w&=0 AND h&=0
    ~WIND_UPDATE(0)
  CASE 21
    TOPW #1
  CASE 22,41
    CLOSEW #1
    exit!=TRUE
  CASE 28
    ~WIND_SET(handle&,5,0,MIN(170*ry%-2,y&),w&,h&)
  CASE 40
    TITLEW #1,"| fleabyte.sf\henry fac. |"
    OPENW #1,0,170*ry%-2,638,30*ry%,&X1111
    handle&=W_HAND(#1)
  ENDSELECT
RETURN
> PROCEDURE finder
  LOCAL entry$,error$,sub_mc%
  LPOKE XBIOS(14,1)+6,0
  IF leftover!=FALSE
    REPEAT
      leave_finder!=TRUE
      interference!=FALSE
      entry$=""
      error$=""
      dgr$=""
      deg$=""
      degr_plmin$=""
      DEFFILL 2,2,1
      PBOX 0,0,PRED(ww&),PRED(wh&)
      IF mc%=0
        PRINT AT(2,2);"""sig.figs"" & wormhole, 0.8";
        PRINT AT(35,2);"[info at @]";
      ELSE IF mc%=1
        PRINT AT(2,2);"m1: ";ans1$;
      ELSE IF mc%>1
        PRINT AT(2,2);"m1: ";ans1$;
        PRINT AT(LEN(ans1$)+12,2);"m2: ";ans2$;
      ENDIF
      IF all!=TRUE
        PRINT AT(57,2);"[wh:l]";
      ELSE IF all!=FALSE
        PRINT AT(57,2);"[wh:b]";
      ENDIF
      IF rad!=TRUE
        PRINT AT(64,2);"[rad]";
      ELSE IF rad!=FALSE
        PRINT AT(64,2);"[deg]";
      ENDIF
      IF verify_sf!=TRUE
        PRINT AT(70,2);"[sf"+CHR$(241)+"]";
      ELSE IF verify_sf!=FALSE
        PRINT AT(70,2);"[sf~]";
      ENDIF
      '
      LOCATE 2,1
      FORM INPUT 75,entry$
      IF LEN(entry$)=75
        PRINT CHR$(7);
        entry$=entry$+"?"
        LOCATE 2,1
        FORM INPUT 76 AS entry$
      ENDIF
      '
      IF entry$<>""
        SELECT LEFT$(entry$)
        CASE "="
          IF all!=TRUE
            all!=FALSE
          ELSE
            all!=TRUE
          ENDIF
          leave_finder!=FALSE
        CASE "~"
          IF verify_sf!=TRUE
            verify_sf!=FALSE
          ELSE
            verify_sf!=TRUE
          ENDIF
          leave_finder!=FALSE
        CASE "D","d"
          IF LEN(entry$)=1
            rad!=FALSE
          ELSE
            GOTO jump
          ENDIF
          leave_finder!=FALSE
        CASE "R","r"
          IF LEN(entry$)=1
            rad!=TRUE
          ELSE
            GOTO jump
          ENDIF
          leave_finder!=FALSE
        CASE "!"
          IF LEN(entry$)>1
            INC mc%
            memo$(mc%,1)=entry$
          ENDIF
          leave_finder!=FALSE
        CASE "?"
          FOR sub_mc%=INT(mc%/2+1) TO mc%
            DEFFILL 2,2,1
            PBOX 0,0,PRED(ww&),PRED(wh&)
            IF LEFT$(memo$(sub_mc%,1))="!"
              PRINT AT(2,1);MID$(memo$(sub_mc%,1),2)
            ELSE
              PRINT AT(2,1);memo$(sub_mc%,1)
              PRINT AT(79-LEN(memo$(sub_mc%,2)),2);memo$(sub_mc%,2);
            ENDIF
            PRINT AT(33,2);"[memo #";sub_mc%;" of ";mc%;"]";
            REPEAT
              key$=INKEY$
              IF key$="m" OR key$="M"
                ans2$=ans1$
                ans1$=memo$(sub_mc%,2)
                sub_mc%=mc%
              ELSE IF key$="<" AND sub_mc%>1
                sub_mc%=sub_mc%-2
              ELSE IF key$<>"" AND key$<>CHR$(13) AND key$<>">"
                sub_mc%=mc%
              ENDIF
            UNTIL key$<>""
          NEXT sub_mc%
          leave_finder!=FALSE
        CASE "@"
          DEFFILL 2,2,1
          PBOX 0,0,PRED(ww&),PRED(wh&)
          PRINT AT(4,1);"~x uncertainty x in last digit";
          PRINT AT(38,1);"? memo array (<,> browsing; m,M capture)";
          PRINT AT(4,2);"= [wh:l][wh:b]";
          PRINT AT(22,2);"d,r [rad][deg]";
          PRINT AT(40,2);"~ [sf~][sf"+CHR$(241)+"]";
          PRINT AT(56,2);"! note";
          PRINT AT(66,2);"annotation !";
          ~INP(2)
          DEFFILL 2,2,1
          PBOX 0,0,PRED(ww&),PRED(wh&)
          PRINT AT(8,1);"Available functions: abs, log, ln, sin, cos, tan, asin, acos, atan"
          PRINT AT(8,2);"(enter in lower case with argument bracketed).";
          PRINT AT(58,2);"Constants: pi, e";
          ~INP(2)
          DEFFILL 2,2,1
          PBOX 0,0,PRED(ww&),PRED(wh&)
          PRINT AT(2,1);CHR$(189);
          PRINT AT(13,1);"Shareware from Fleabyte \ Contributions of $15 solicited"
          PRINT AT(6,2);"Henry K. van Eyken \ 11, ch Falcon \ Lakefield, Que.  J0V 1K0 \ Canada";
          ~INP(2)
          leave_finder!=FALSE
        DEFAULT
          jump:
          REPEAT
            error$=""
            DEFFILL 2,2,1
            PBOX 0,0,PRED(ww&),PRED(wh&)
            @error_filter
            IF error$=""
              IF RIGHT$(entry$,1)<>"="
                PRINT AT(2,1);entry$+"=";
              ENDIF
              @parser
              @dg_write
              @enunciator
              make$=make$+dgr$
            ELSE
              PRINT AT(79-LEN(error$),2);error$;
              LOCATE 2,1
              FORM INPUT 76 AS entry$
            ENDIF
            IF response$<>""
              make$=response$
              response$=""
            ENDIF
            IF mc%<24
              INC mc%
            ELSE IF mc%=24
              FOR no%=1 TO 23
                memo$(no%,1)=memo$(no%+1,1)
                memo$(no%,2)=memo$(no%+1,2)
              NEXT no%
            ENDIF
            memo$(mc%,1)=entry$+" ="
            memo$(mc%,2)=make$
            ans2$=ans1$
            ans1$=make$
            IF interference!=FALSE AND deg$<>""
              PRINT AT(2,2);"["+deg$+degr_plmin$+"]";
            ENDIF
            PRINT AT(79-LEN(make$),2);make$;
          UNTIL error$=""
        ENDSELECT
        IF leave_finder!=TRUE
          REPEAT
            key$=INKEY$
            IF key$=CHR$(13)
              leave_finder!=FALSE
            ELSE IF key$=CHR$(27)
              IF all!=TRUE
                string$=entry$+" = "+ans1$
                IF LEN(string$)<=54+pass%
                  @wormhole(string$)
                ELSE
                  string1$=LEFT$(string$,54+pass%)
                  string2$=MID$(string$,55+pass%)
                  @wormhole(string1$)
                  leftover!=TRUE
                ENDIF
              ELSE
                @wormhole(ans1$)
              ENDIF
            ENDIF
          UNTIL key$<>""
        ENDIF
      ENDIF
    UNTIL leave_finder!=TRUE
  ELSE
    @wormhole(string2$)
    leftover!=FALSE
  ENDIF
RETURN
> PROCEDURE error_filter
  LOCAL bracket%,func_len%,bra$,next$
  FOR i%=INSTR(entry$,"!")+1 TO LEN(entry$)
    next$=MID$(entry$,i%+1,1)
    SELECT MID$(entry$,i%,1)
    CASE "(","{","["
      bracket%=bracket%+1
      IF next$="^" OR next$="*" OR next$="/" OR next$=":"
        error$="sign after bracket"
      ENDIF
    CASE ")","}","]"
      bracket%=bracket%-1
    CASE "^","*","/",":","+","-"
      IF next$="^" OR next$="*" OR next$="/" OR next$=":" OR next$=")" OR next$="}" OR next$="]"
        error$="check signs"
      ENDIF
    ENDSELECT
  NEXT i%
  IF bracket%<>0
    error$="check brackets"
  ENDIF
  '
  FOR i%=INSTR(entry$,"!")+1 TO LEN(entry$)
    next$=MID$(entry$,i%+1,1)
    func_len%=0
    IF INSTR(entry$,"asin")=i% OR INSTR(entry$,"acos")=i% OR INSTR(entry$,"atan")=i%
      func_len%=4
    ELSE IF INSTR(entry$,"abs")=i% OR INSTR(entry$,"log")=i%
      func_len%=3
    ELSE IF INSTR(entry$,"sin")=i% OR INSTR(entry$,"cos")=i% OR INSTR(entry$,"tan")=i%
      func_len%=3
    ELSE IF INSTR(entry$,"ln")=i%
      func_len%=2
    ENDIF
    IF func_len%<>0
      i%=i%+func_len%
      bra$=MID$(entry$,i%,1)
      IF bra$<>"(" AND bra$<>"[" AND bra$<>"{"
        error$="argument not bracketed"
      ENDIF
      IF bra$="^"
        error$="function not bracketed"
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE dg_write
  IF dgr$=CHR$(248)
    deg%=TRUNC(VAL(make$))
    min%=TRUNC(60*FRAC(VAL(make$)))
    sec=60*FRAC(60*FRAC(VAL(make$)))
    deg$=STR$(deg%)+CHR$(248)+STR$(min%)+CHR$(39)+STR$(sec)+CHR$(34)
    IF uncertainty!=TRUE
      pl=VAL(MID$(make$,INSTR(make$,"~")+1))
      mn=VAL(MID$(make$,INSTR(make$,",")+1))
      degr_pl%=TRUNC(pl)
      degr_mn%=TRUNC(mn)
      min_pl%=TRUNC(60*FRAC(pl))
      min_mn%=TRUNC(60*FRAC(mn))
      sec_pl=60*FRAC(60*FRAC(pl))
      sec_mn=60*FRAC(60*FRAC(mn))
      degr_pl$=STR$(degr_pl%)+CHR$(248)+STR$(min_pl%)+CHR$(39)+STR$(sec_pl)+CHR$(34)
      degr_mn$=STR$(degr_mn%)+CHR$(248)+STR$(min_mn%)+CHR$(39)+STR$(sec_mn)+CHR$(34)
      degr_plmin$="~"+CHR$(241)+degr_pl$+"\"+degr_mn$
    ENDIF
  ENDIF
RETURN
> PROCEDURE enunciator
  LOCAL factor%,i%,exp%,number,uncert,a1$,a2$,a3$
  i%=INSTR(make$,"~")
  IF i%>0
    number=VAL(make$)
    uncert_hi=VAL(MID$(make$,i%+1))
    uncert_lo=VAL(MID$(make$,INSTR(make$,",")+1))
    IF uncert_hi>1.1*uncert_lo OR uncert_lo>1.1*uncert_hi OR verify_sf!=TRUE
      PRINT AT(2,2);"[";MID$(make$,1,i%-1);" ";CHR$(241);uncert_hi;"\";uncert_lo;"]";
      interference!=TRUE
    ENDIF
    uncert=uncert_hi+uncert_lo
    IF uncert<>0
      IF uncert<0.95
        REPEAT
          uncert=10*uncert
          number=10*number
          INC factor%
        UNTIL uncert>=0.95
        IF number>=0
          a1$=STR$((10*ROUND(number)+1)/10^(factor%+1))
        ELSE IF number<0
          a1$=STR$((10*ROUND(number)-1)/10^(factor%+1))
        ENDIF
        exp%=INSTR(a1$,"E")
        IF exp%=0
          a1$=LEFT$(a1$,LEN(a1$)-1)
        ELSE
          a1$=LEFT$(a1$,exp%-2)+MID$(a1$,exp%)
        ENDIF
        a2$=STR$(ROUND(uncert+1))                         !rounding unc
      ELSE IF uncert>=0.95 AND uncert<9.5
        a1$=STR$(ROUND(number))
        a2$=STR$(ROUND(uncert+1))                         !rounding unc
      ELSE IF uncert>=9.5
        REPEAT
          uncert=uncert/10
          number=number/10
          INC factor%
        UNTIL uncert<9.5
        a1$=STR$(ROUND(number)*10^factor%)
        a2$=STR$(ROUND(uncert+1)*10^factor%)              !rounding unc
        exp%=INSTR(a1$,"E")
        IF exp%>0
          a1$=STR$((10*ROUND(number)+1)*10^(factor%-1))
          exp%=INSTR(a1$,"E")
          a1$=LEFT$(a1$,exp%-2)+MID$(a1$,exp%)
          a2$=STR$(ROUND(uncert+1))                       !rounding unc
        ENDIF
      ENDIF
      IF a2$="1"
        a2$=""
      ENDIF
      exp%=INSTR(a1$,"E")
      IF exp%=0
        make$=a1$+"~"+a2$
      ELSE IF exp%>0
        make$=LEFT$(a1$,exp%-1)+"~"+a2$+" "+MID$(a1$,exp%)
      ENDIF
    ELSE IF uncert=0
      make$=LEFT$(make$,INSTR(make$,"~")-1)
    ENDIF
  ENDIF
RETURN
> PROCEDURE parser
  LOCAL excl%,i%,j%,jj%,parsnips%,pp%,a$,b$,c$
  exclude%=INSTR(entry$,"!")
  make$="("+MID$(entry$,exclude%+1)+")|"
  REPEAT
    INC i%
    IF MID$(make$,i%,1)=" "
      make$=LEFT$(make$,i%-1)+MID$(make$,i%+1)
      DEC i%
    ELSE IF MID$(make$,i%,2)="++" OR MID$(make$,i%,2)="--"
      make$=LEFT$(make$,i%-1)+"+"+MID$(make$,i%+2)
      DEC i%
    ELSE IF MID$(make$,i%,2)="+-" OR MID$(make$,i%,2)="-+"
      make$=LEFT$(make$,i%-1)+"-"+MID$(make$,i%+2)
      DEC i%
    ELSE IF MID$(make$,i%,1)=":"
      make$=LEFT$(make$,i%-1)+"/"+MID$(make$,i%+1)
    ELSE IF MID$(make$,i%,1)=","
      make$=LEFT$(make$,i%-1)+"."+MID$(make$,i%+1)
    ELSE IF MID$(make$,i%,2)="PI" OR MID$(make$,i%,2)="pi"
      make$=LEFT$(make$,i%-1)+"3.14159265358979"+MID$(make$,i%+2)
      i%=i%+14
    ELSE IF MID$(make$,i%,1)="e"
      IF MID$(make$,i%-1,1)<"0" OR MID$(make$,i%-1,1)>"9" AND MID$(make$,i%-1,1)<>"~"
        make$=LEFT$(make$,i%-1)+"2.718281828459"+MID$(make$,i%+1)
        i%=i%+10
      ENDIF
    ELSE IF MID$(make$,i%,2)="M1" OR MID$(make$,i%,2)="m1"
      IF RIGHT$(ans1$)=CHR$(248) OR RIGHT$(ans1$)="r"
        ans1$=LEFT$(ans1$,LEN(ans1$)-1)
      ENDIF
      make$=LEFT$(make$,i%-1)+ans1$+MID$(make$,i%+2)
      DEC i%
    ELSE IF MID$(make$,i%,2)="M2" OR MID$(make$,i%,2)="m2"
      IF RIGHT$(ans2$)=CHR$(248) OR RIGHT$(ans2$)="r"
        ans2$=LEFT$(ans2$,LEN(ans2$)-1)
      ENDIF
      make$=LEFT$(make$,i%-1)+ans2$+MID$(make$,i%+2)
      DEC i%
    ENDIF
  UNTIL MID$(make$,i%)="|"
  IF INSTR(make$,"~")<>0
    uncertainty!=TRUE
    @plusminus
  ELSE
    uncertainty!=FALSE
  ENDIF
  REPEAT
    INC j%
    SELECT MID$(make$,j%,1)
    CASE "(","[","{"
      parsnips%=parsnips%+1
      jj%=j%
    CASE ")","]","}"
      parsnips%=parsnips%-1
    ENDSELECT
    IF parsnips%<pp%
      a$=LEFT$(make$,jj%-1)
      b$=MID$(make$,jj%+1,j%-jj%-1)
      c$=MID$(make$,j%+1)
      j%=0
      parsnips%=0
      @calculator
      @functions
      make$=a$+b$+c$
    ENDIF
    pp%=parsnips%
  UNTIL MID$(make$,j%)="|"
  make$=LEFT$(make$,LEN(make$)-1)
RETURN
> PROCEDURE plusminus
  LOCAL i%,j%,dec%,len_unc%,plusminus$
  REPEAT
    INC i%
    IF MID$(make$,i%,1)="E" OR MID$(make$,i%,1)="e"
      make$=LEFT$(make$,i%-1)+"*10^"+MID$(make$,i%+1)
    ENDIF
  UNTIL MID$(make$,i%)="|"
  '
  REPEAT
    INC j%
    SELECT MID$(make$,j%,1)
    CASE "~"
      IF MID$(make$,j%+1,1)<"0" OR MID$(make$,j%+1,1)>"9" AND MID$(make$,j%+1,1)<>"."
        make$=LEFT$(make$,j%)+"1"+MID$(make$,j%+1)
      ENDIF
      IF MID$(make$,j%-dec%-1,1)<>"."
        dec%=0
      ENDIF
      len_unc%=VAL?(MID$(make$,j%+1))
      plusminus$=STR$(VAL(MID$(make$,j%+1))/(2*10^dec%))
      make$=LEFT$(make$,j%)+plusminus$+","+plusminus$+MID$(make$,j%+len_unc%+1)
    CASE "0" TO "9"
      INC dec%
    DEFAULT
      dec%=0
    ENDSELECT
  UNTIL MID$(make$,j%)="|"
RETURN
> PROCEDURE calculator
  LOCAL k%,m%,mm%,round%
  LOCAL bb,minus,minusx,minusy,plus,plusx,plusy,x,x_hi,x_lo,y,y_hi,y_lo
  LOCAL aa$,bb$,bb_plm$,cc$,sign1$,sign2$,sign$,signstring$
  signstring$="^^*/-+"
  FOR k%=1 TO 6 STEP 2
    calculation!=FALSE
    sign1$=MID$(signstring$,k%,1)
    sign2$=MID$(signstring$,k%+1,1)
    FOR m%=1 TO LEN(b$)-1
      IF calculation!=FALSE
        x=VAL(MID$(b$,m%))
        mm%=m%
        m%=m%+VAL?(MID$(b$,m%))
        IF MID$(b$,m%,1)="~"
          m%=m%+1
          plusx=VAL(MID$(b$,m%))
          m%=m%+VAL?(MID$(b$,m%))+1
          minusx=VAL(MID$(b$,m%))
          m%=m%+VAL?(MID$(b$,m%))
        ELSE
          plusx=0
          minusx=0
        ENDIF
        IF MID$(b$,m%,1)=sign1$ OR MID$(b$,m%,1)=sign2$
          sign$=MID$(b$,m%,1)
          m%=m%+1
          y=VAL(MID$(b$,m%))
          m%=m%+VAL?(MID$(b$,m%))
          IF MID$(b$,m%,1)="~"
            m%=m%+1
            plusy=VAL(MID$(b$,m%))
            m%=m%+VAL?(MID$(b$,m%))+1
            minusy=VAL(MID$(b$,m%))
            m%=m%+VAL?(MID$(b$,m%))
          ELSE
            plusy=0
            minusy=0
          ENDIF
          x_hi=x+plusx
          x_lo=x-minusx
          y_hi=y+plusy
          y_lo=y-minusy
          SELECT sign$
          CASE "^"
            IF x_lo>0 OR (x=0 AND y>0 AND uncertainty!=FALSE)
              plus=MAX(x_hi^y_hi,x_hi^y_lo,x_lo^y_hi,x_lo^y_lo)-x^y
              minus=x^y-MIN(x_hi^y_hi,x_hi^y_lo,x_lo^y_hi,x_lo^y_lo)
              bb$=STR$(x^y)
            ELSE IF x_hi<0 OR (x<0 AND uncertainty!=FALSE)
              IF FRAC(y)<1.0E-11 AND FRAC(y)>-1.0E-11
                y%=ROUND(y)
                plus=MAX(x_hi^y%,x_lo^y%)-x^y%
                minus=x^y%-MIN(x_hi^y%,x_lo^y%)
                bb$=STR$(x^y%)
              ELSE IF FRAC(ABS(1/(2*y)))<0.5+1.0E-11 AND FRAC(ABS(1/(2*y)))>0.5-1.0E-11
                yy%=ROUND(1/y)
                y=1/yy%
                bb=(-x)^ABS(y)
                plus=MAX((-x_hi)^y,(-x_lo)^y)-(-x)^y
                minus=(-x)^y-MIN((-x_hi)^y,(-x_lo)^y)
                IF y>0
                  bb$=STR$(-bb)
                ELSE IF y<0
                  bb$=STR$(-1/bb)
                ENDIF
              ELSE
                response$="power neg. number"
                k%=10000
                m%=10000
              ENDIF
            ELSE
              response$="no answer"
            ENDIF
            calculation!=TRUE
          CASE "*"
            plus=MAX(x_hi*y_hi,x_hi*y_lo,x_lo*y_hi,x_lo*y_lo)-x*y
            minus=x*y-MIN(x_hi*y_hi,x_hi*y_lo,x_lo*y_hi,x_lo*y_lo)
            bb$=STR$(x*y)
            calculation!=TRUE
          CASE "/"
            IF y=0 OR y_hi=0 OR y_lo=0
              response$="division by 0"
              m%=10000
              k%=10000
            ELSE
              plus=MAX(x_hi/y_hi,x_hi/y_lo,x_lo/y_hi,x_lo/y_lo)-x/y
              minus=x/y-MIN(x_hi/y_hi,x_hi/y_lo,x_lo/y_hi,x_lo/y_lo)
              bb$=STR$(x/y)
              calculation!=TRUE
            ENDIF
          CASE "-"
            plus=plusx+plusy
            minus=plus
            bb$=STR$(x-y)
            calculation!=TRUE
          CASE "+"
            plus=plusx+plusy
            minus=plus
            bb$=STR$(x+y)
            calculation!=TRUE
          ENDSELECT
          bb_plm$=STR$(plus)+","+STR$(minus)
          aa$=LEFT$(b$,mm%-1)
          cc$=MID$(b$,m%)
          IF uncertainty!=FALSE
            b$=aa$+bb$+cc$
          ELSE
            b$=aa$+bb$+"~"+bb_plm$+cc$
          ENDIF
        ENDIF
      ENDIF
    NEXT m%
    IF calculation!=TRUE
      k%=k%-2
    ENDIF
  NEXT k%
RETURN
> PROCEDURE functions
  LOCAL number,plm,plus,minus
  number=VAL(b$)
  i%=INSTR(b$,"~")
  IF i%>1
    plus=VAL(MID$(b$,i%+1))
    minus=VAL(MID$(b$,INSTR(b$,",")+1))
  ENDIF
  IF RIGHT$(a$,3)="abs"
    a$=LEFT$(a$,LEN(a$)-3)
    number=ABS(number)
  ELSE IF RIGHT$(a$,4)="asin"
    a$=LEFT$(a$,LEN(a$)-4)
    IF number+plus>1 OR number-minus<-1
      response$="asin of x>|1|"
    ELSE
      plus=ASIN(number+plus)-ASIN(number)
      minus=ASIN(number)-ASIN(number-minus)
      number=ASIN(number)
      @dgrad_arc
    ENDIF
  ELSE IF RIGHT$(a$,4)="acos"
    a$=LEFT$(a$,LEN(a$)-4)
    IF number+plus>1 OR number-minus<-1
      response$="acos of x>|1|"
    ELSE
      plus=ACOS(number)-ACOS(number+plus)
      minus=ACOS(number-minus)-ACOS(number)
      number=ACOS(number)
      @dgrad_arc
    ENDIF
  ELSE IF RIGHT$(a$,4)="atan"
    a$=LEFT$(a$,LEN(a$)-4)
    plus=ATN(number+plus)-ATN(number)
    minus=ATN(number)-ATN(number-minus)
    number=ATN(number)
    @dgrad_arc
  ELSE IF RIGHT$(a$,3)="sin"
    a$=LEFT$(a$,LEN(a$)-3)
    @dgrad
    plus=MAX(SIN(number+plus),SIN(number-minus))-SIN(number)
    minus=SIN(number)-MIN(SIN(number+plus),SIN(number-minus))
    number=SIN(number)
  ELSE IF RIGHT$(a$,3)="cos"
    a$=LEFT$(a$,LEN(a$)-3)
    @dgrad
    plus=MAX(COS(number+plus),COS(number-minus))-COS(number)
    minus=COS(number)-MIN(COS(number+plus),COS(number-minus))
    number=COS(number)
  ELSE IF RIGHT$(a$,3)="tan"
    a$=LEFT$(a$,LEN(a$)-3)
    @dgrad
    number=number MOD 2*PI
    IF ABS(ABS(number+plus)-PI/2)<1.0E-09 OR ABS(ABS(number+plus)-3*PI/2)<1.0E-09
      response$="tan(argument) = "+CHR$(223)
    ELSE IF ABS(ABS(number-minus)-PI/2)<1.0E-09 OR ABS(ABS(number-minus)-3*PI/2)<1.0E-09
      response$="tan(argument) = "+CHR$(223)
    ELSE
      plus=MAX(TAN(number+plus),TAN(number-minus))-TAN(number)
      minus=TAN(number)-MIN(TAN(number+plus),TAN(number-minus))
      number=TAN(number)
    ENDIF
  ELSE IF RIGHT$(a$,3)="log"
    a$=LEFT$(a$,LEN(a$)-3)
    IF number-minus<=0
      response$="log non-pos. number"
    ELSE
      plus=LOG10(number+plus)-LOG10(number)
      minus=LOG10(number)-LOG10(number-minus)
      number=LOG10(number)
    ENDIF
  ELSE IF RIGHT$(a$,2)="ln"
    a$=LEFT$(a$,LEN(a$)-2)
    IF number-minus<=0
      response$="ln non-pos. number"
    ELSE
      plus=LOG(number+plus)-LOG(number)
      minus=LOG(number)-LOG(number-minus)
      number=LOG(number)
    ENDIF
  ENDIF
  IF i%=0
    b$=STR$(number)
  ELSE
    b$=STR$(number)+"~"+STR$(plus)+","+STR$(minus)
  ENDIF
RETURN
> PROCEDURE dgrad
  IF rad!=FALSE
    number=number*PI/180
    plus=plus*PI/180
    minus=minus*PI/180
  ENDIF
RETURN
> PROCEDURE dgrad_arc
  dgrad_arc!=TRUE
  IF rad!=FALSE
    number=number*180/PI
    plus=plus*180/PI
    minus=minus*180/PI
    dgr$=CHR$(248)
  ELSE
    dgr$="r"
  ENDIF
RETURN
> PROCEDURE wormhole(string$)
  LOCAL iorec%,k%
  IF pass%=0
    string$=">>>>>>>>"+string$
    pass%=pass%+8
  ENDIF
  iorec%=XBIOS(14,1)
  FOR k%=0 TO LEN(string$)
    LPOKE LPEEK(iorec%)+(4*k%),ASC(MID$(string$,k%))
  NEXT k%
  DPOKE iorec%+6,0
  DPOKE iorec%+8,4*LEN(string$)
RETURN
' end of listing
