


                      FLEABYTE\SF, 0.8                      

       full-function scientific calculator w. wormhole      
           showing significant digits ("sig.figs")          
             using the method of bounding values


WARNING:  read caveats near end of this document.

Fleabyte\sf is, like its kin, Fleabyte\sx and Fleabyte\ffs, an
accessory capable of transferring information directly to the 
cursor position on an application or on another accessory.  The 
following lines have been placed here (on my monitor, that is) 
directly from Fleabyte:

          -log(4.5*10^-5) = 4.346787486225
          10^(1/ln(10)) = 2.718281828459
          sin(.1234)^2+cos(.1234)^2 = 1
          asin(.2756) = 0.2792138193003
          asin(.2756) = 15.99777342763ø

The problem statements were typed in on Fleabyte, answers were 
then obtained by pressing the RETURN key.  After that the copying 
on the application was done by first pressing ESC (to open the 
"wormhole," which is a conduit between accessory and program) 
and then clicking the left mouse button (to activate the window 
of 1st Word Plus whence this is printed).  This works with a 
number of applications (1st Word Plus, Word Writer, Word-Up, Ed-
Hak's accessory), but not with all; it is necessary for an 
application to be "receptive."  For further details on the use of 
this device see FLEAB_SX.ASC or FLEAB_FFS.ASC.


"Significant figures"

What is so special about the present accessory?  Aside from the 
"wormhole" feature, this accessory introduces a calculator that 
keeps track of uncertainties in measurements.  Here is an 
explanation cast as an illustration.

With the aid of a ruler I find the width of a sheet of paper to 
be 21.6 cm.  When you read about my observation you do not know 
whether the sheet is actually somewhat wider or a bit narrower 
than the value I just reported.  All you can infer from the given 
number is that (on your kind assumption that I know how to do a 
measurement) the sheet's width is between 21.55 cm and 21.65 cm.  
Similarly, when I give the length of the sheet as 27.9 cm, you 
only know that it is between 27.85 cm and 27.95 cm.

A calculation of the area of the sheet ought to take these un-
certainties into account.  Thus one finds the area to be between 
21.55 cm x 27.85 cm = 600.1675 sq.cm and 21.65 cm x 27.95 cm = 
605.1175 sq.cm.  An ordinary calculation produces 21.6 cm x 27.9 
cm = 603 sq.cm. where the answer is given to three "significant 
digits" or "significant figures": a six, a zero, and a three, in 
this instance.  Calculations with measures often employ certain 
"rules for significant figures" - commonly one rule for multipli-
cation and division and another one for addition and subtraction:

     1.  Express the result of a  multiplication or division with
         as many digits as are found in that measure used in the 
         calculation with the least number of digits other than 
         zeros up front.

     Example:  density = mass/volume = 0.1234 g/0.100 L = 
     1.23 g/L.  ("0.1234 g" contains four so-called :significant 
     digits", "0.100 L" contains three significant digits.  The 
     answer, therefore, is given to three significant digits.

     Example:  density = mass/volume = 1.2345 g/0.789 mL = 
     1.56 g/mL.

     2.  Express the result of an addition or a subtraction with
         as many decimal places as are found in the measure used 
         in the calculation with the least number of decimal 
         places.

     Example:  1.234 cm + 2.34 cm = 3.57 cm.

     Example:  23.4567 g - 23.345 g = 0.112 g.  (rounded!)  

The last digit's validity is usually only certain within half a 
unit of the true value.  

Although we may program rules such as these into a calculator, I
decided to give the matter of significant digits a wider scope 
as is easily afforded thanks to the high operating speed of 
modern computers.  This calculator replaces the rules for asses-
sing the allowable number of "sig. figs" by calculations of upper 
and lower limits - the "bounding values" - and then reporting 
answers accordingly.  But there is a slight deviation from the 
traditional application of the method of bounding values as will 
be clear.  I justify this departure on grounds of two points of 
convenience.

The above calculation of the area is entered thus: 

                         21.6~ * 27.9~

where the tilde (~) indicates an uncertainty of one unit in the
last digit.  Thus the meaning of 21.6~ is "between 21.55 and 
21.65."  The traditional notation uses a plus-or-minus sign,
which is not found on the computer keyboard.  I might simulate
this notation with "21.6 plm 0.05."  An uncertainty in the
last digit other than unit needs to be specified, e.g. 12.34~3
for 12.34 plm 0.015.  An uncertainty of one unit in the last
decimal is quite common and I made it, therefore, the default
uncertainty to save typing.

The calculated area comes to

                         21.6~*27.9~ = 603~5 

Why not try the ruler right now by typing in the calculation 
"21.6~*27.9~" and then pressing RETURN for the answer and pres
sing ESC for exiting the ruler, and then clicking on the word-
processor's window for copying the result as was done here?

Recapitulating, 21.6~ or 21.6~1 represents an uncertainty of "1"
in the last reported digit. i.o.w. it means between 21.55 and 
21.65.  21.6~ is the default notation for 21.6~1.  The answer, 
603~6, tells us that there is an uncertainty of "6" in the last 
digit, i.o.w. that the answer is between 600 and 606.  This is
not exactly the same as our original calculation which said the
answer is between 600.1675 and 605.1175, but for all practical 
purposes I take this to be good enough - and, of course a big 
improvement over the result obtained by the "rules for signif-
icant figures" which was 603.

An example of a calculation with large measures is:

                 123000~1000/4.56~3 = 27000~500, 

which tells us that the answer is between 26750 and 27250.

What is the meaning of all this?  How does this slide-rule arrive 
at its answers?

Central is the ordinary calculation

                    21.6 x 27.9 = 602.64

But from the notations 21.6~ (or 21.6~1) and 27.9~ (or 27.9~1) it 
also calculates the values 600.1675 and 605.1175.  Subsequently 
it finds the differences between these values and 602.64, i.e.

                    ABS(605.1175 - 602.64) = 2.4775
and                 ABS(600.1675 - 602.64) = 2.4725

The upper and lower bounds are carried through the whole set
of calculations.  Then, just prior to reporting the result, the
data are rounded.  The central value, 602.64, is rounded to 603; 
and the range from upper to lower bound is obtained by addition, 
2.4775 + 2.4725 = 4.95, which is then rounded after first adding
1 to allow (largely) for the rounding-off errors in the central 
value and in the range of uncertainty within the last digit of 
the central value.  Thus we obtain for the uncertainty in the 
last digit 6.  Hence Fleabyte reports:  603~6.

It may well be argued that it would have been better, for example, 
to proceed by using 602.4 as the central value and use a rounded 
sum of the bracketing values, say 2.4775 + 2.4725 = 4.95 rounded 
to 5.0 and then report 602.4~5.0.  But considering the original 
measurement's precision and the loss of terseness in the reported 
answer, it seems to me that the procedure used here is preferable.  
Certainly, it  ought to be adequate.  Others may consider it 
preferable that the central value is taken as halfway the upper 
and lower bounds.  I didn't proceed this way for fear of in-
advertently taken the midpoint between relatively skewed values
such as found in divisions and in trigonometric functions.  So I 
will leave things as they are until the program has been used for
a variety of applications.  I certainly intend to mend my ways if 
any good arguments are made in favor of a more satisfactory ap-
proach. 

In the case of skewing, to safeguard against Fleabyte putting one 
over on the user, a report will be automatically made in those 
cases where either

       |upper bound - central value| ò 
                 1.1 x /|central value - lower bound|

or     |central value - lower bound| ò 
                 1.1 x /|upper bound - central value|

Examples:

     Automated reporting when upper and lower bounds are unduly
     divergent (and also for supplementing decimal notation of
     for degrees with traditional notation) by setting [sf~]:

          cos(.698~6) = 0.766~3
     [0.7661290921161 plm0.001931504832584\0.001242780827511]

          3.21~*7.89~3 = 25.3~2

          asin(.3456~3) = 20.22~2
     [20d30m6.334653324138s 
                    ~plm0d0m32.97232287138s\0d0m32.97038179537s]

As an added feature, Fleabyte permits the user to call for a 
permanent full reporting on upper and lower bounds by toggling 
the "~"-key from [sf:~] to [sf:plm]:

          3.21~*7.89~3 = 25.3~2
     [25.3269 plm0.08767499999988\0.08752499999991]

          asin(.3456~3) = 20.22~2
     [20.21842629259 plm0.009158978575384\0.009158439387602]


Aspects of the program

If the procedure called "parser" detects the presence of the 
tilde in an entry a detour is made via the procedure named 
"plusminus" which converts the the uncertainty in the last 
reported digit to an absolute uncertainty in this manner:

              ~ in, e.g. 21.3, becomes ~0.05,

where the tilde takes on the temporary meaning "plus or minus."
This outcome is then sent to the calculator and acted on:

          CASE "*"
            plus=MAX(x_hi*y_hi,x_hi*y_lo,x_lo*y_hi,x_lo*y_lo)-x*y
            minus=x*y-MIN(x_hi*y_hi,x_hi*y_lo,x_lo*y_hi,x_lo*y_lo)
            bb$=STR$(x*y)

In this segment, x = 21.3
                 y = 27.9
                 x_hi = 21.3 + .05
                 x_lo = 21.3 - .05
                 y_hi = 27.9 + .05
                 y_lo = 27.9 - .05

Thus plus <-- 596.7325 and minus <-- 591.8125.  These values are
later combined with the central value, 21.3, and carried through 
the program:

                   bb_plm$=STR$(plus)+","+STR$(minus)
                   ...
                   b$=aa$+bb$+"~"+bb_plm$+cc$

Just before the final printing of the answer, the meaning of the
tilde within the program is changed back from "plus or minus" to 
its original meaning of uncertainty in the last digit.  This oc-
curs in the procedure "enunciator."

How are operations other than multiplication treated?  In similar
fashion as shown by the relevant lines from the procedure 
"calculator":

          CASE "^"
            IF x_lo>0 OR (x=0 AND y>0 AND uncertainty!=FALSE)
              plus=MAX(x_hi^y_hi,x_hi^y_lo,x_lo^y_hi,x_lo^y_lo) 
                                                            -x^y
              minus=x^y-MIN(x_hi^y_hi,x_hi^y_lo,x_lo^y_hi,
                                                       x_lo^y_lo)
              bb$=STR$(x^y)
            ELSE IF x_hi<0 OR (x<0 AND uncertainty!=FALSE)
              IF FRAC(y)<1.0E-11 AND FRAC(y)>-1.0E-11
                y%=ROUND(y)
                plus=MAX(x_hi^y%,x_lo^y%)-x^y%
                minus=x^y%-MIN(x_hi^y%,x_lo^y%)
                bb$=STR$(x^y%)
              ELSE IF FRAC(ABS(1/(2*y)))<0.5+1.0E-11 
                              AND FRAC(ABS(1/(2*y)))>0.5-1.0E-11
                yy%=ROUND(1/y)
                y=1/yy%
                bb=(-x)^ABS(y)
                plus=MAX((-x_hi)^y,(-x_lo)^y)-(-x)^y
                minus=(-x)^y-MIN((-x_hi)^y,(-x_lo)^y)
                IF y>0
                  bb$=STR$(-bb)
                ELSE IF y<0
                  bb$=STR$(-1/bb)
                ENDIF
              ELSE
                response$="power neg. number"
              ENDIF
            ELSE
              response$="no answer"
            ENDIF

    CASE "/"
      IF y=0 OR y_hi=0 OR y_lo=0
        error$="division by 0"
      ELSE
        plus=MAX(x_hi/y_hi,x_hi/y_lo,x_lo/y_hi,x_lo/y_lo)-x/y
        minus=x/y-MIN(x_hi/y_hi,x_hi/y_lo,x_lo/y_hi,x_lo/y_lo)
        bb$=STR$(x/y)
      ENDIF

    CASE "-"
      plus=plusx+plusy
      minus=plus
      bb$=STR$(x-y)

    CASE "+"
      plus=plusx+plusy
      minus=plus
      bb$=STR$(x+y)

Integer powers and odd integer roots of negative numbers can be 
calculated:
               
               -12.34^5 = -286138.1721051
               -12.34^-5 = -3.494815084066E-06
               -12.34^(1/5) = -1.652962617591
               -12.34^(-1/5) = -0.6049743589832
               -12.34^(1/6) = power neg. number

For powers that are rational fractions, e.g. 9/13, proceed as
follows:

               -12.34^(1/13)^9 = -5.695421623729
or             -12.34^9^(1/13) = -5.695421623731
but            -12.34^(9/13) = power neg. number

The base may include uncertainty, e.g.

               -12.34~^(1/7) = -1.4319~3
               -1.4319~3^7 = -12.34~3

There is no allowance for any uncertainty in the powers of 
negative numbers.  Any indicated uncertainty will simply be 
ignored:

               -12.34^5.0~ = -286138.1721051
cf:            -12.34^5 = -286138.1721051

As to powers and roots of positive numbers, I have some doubt 
whether or not uncertainty should be allowed for in the exponents.  
In a number such as this measure of solution concentration such 
allowance is redundant:

                    2.34~2 x 10^-2 mol/L,

but, then again, the concentration might be expressed another 
way:

          antilog(log 2.34~2) + log 10^-2) = 
                    antilog (0.369~4 - 2) = 10^1.631~4 

Thus uncertainty in an exponent can arise from a measurement.  
It is with this in mind that I am allowing for uncertainty in ex-
ponents of powers of positive numbers.  

Because one may run, from time to time, into measures involving 
logarithms (as are found in "pH problems" in chemistry), the 
program has been extended to include the handling of uncertain-
ties in arguments of functions.  Below are the most relevant
lines of the program.  (A full listing is included under the 
extender .LST.)

  IF "abs"
    number=ABS(number)
  
  IF "asin"
    IF number+plus>1 OR number-minus<-1
      error$="asin of x>|1|"
    ELSE
      plus=ASIN(number+plus)-ASIN(number)
      minus=ASIN(number)-ASIN(number-minus)
      number=ASIN(number)
    ENDIF

  IF "acos"
    IF number+plus>1 OR number-minus<-1
      error$="acos of x>|1|"
    ELSE
      plus=ACOS(number)-ACOS(number+plus)
      minus=ACOS(number-minus)-ACOS(number)
      number=ACOS(number)
    ENDIF

  IF "atan"
    plus=ATN(number+plus)-ATN(number)
    minus=ATN(number)-ATN(number-minus)
    number=ATN(number)

  IF "sin"
    a$=LEFT$(a$,LEN(a$)-3)
    plus=MAX(SIN(number+plus),SIN(number-minus))-SIN(number)
    minus=SIN(number)-MIN(SIN(number+plus),SIN(number-minus))
    number=SIN(number)

  IF "cos"
    plus=MAX(COS(number+plus),COS(number-minus))-COS(number)
    minus=COS(number)-MIN(COS(number+plus),COS(number-minus))
    number=COS(number)

  IF "tan"
    number=number MOD 2*PI
    IF ABS(ABS(number+plus)-PI/2)<1.0E-09 OR 
                            ABS(ABS(number+plus)-3*PI/2)<1.0E-09
      error$="tan(argument) = "+CHR$(223)
    ELSE IF ABS(ABS(number-minus)-PI/2)<1.0E-09
                        OR ABS(ABS(number-minus)-3*PI/2)<1.0E-09
      error$="tan(argument) = "+CHR$(223)
    ELSE
      plus=MAX(TAN(number+plus),TAN(number-minus))-TAN(number)
      minus=TAN(number)-MIN(TAN(number+plus),TAN(number-minus))
      number=TAN(number)
    ENDIF

  IF "log"
    IF number-minus<=0
      error$="log of non-positive number"
    ELSE
      plus=LOG10(number+plus)-LOG10(number)
      minus=LOG10(number)-LOG10(number-minus)
      number=LOG10(number)
    ENDIF

  IF "ln"
    IF number-minus<=0
      error$="ln of non-positive number"
    ELSE
      plus=LOG(number+plus)-LOG(number)
      minus=LOG(number)-LOG(number-minus)
      number=LOG(number)
    ENDIF

  b$=STR$(number)+"~"+STR$(plus)+","+STR$(minus)

The program also permits changing from radians to degrees and 
vice-versa.  See examples below.


Tests:

123^4.56 = 3388186503.562
123~^4.56 = 3400000000~200000000
123^4.56~ = 3400000000~300000000
123~^4.56~ = 3400000000~400000000
1.23~3^4.56 = 2.6~4
1.23^4.56~2 = 2.57~2
1.23~3^4.56~2 = 2.6~4
12.3~^0 = 1
12.3~^-2.34 = 0.00282~6
12.3~3^-.234~3 = 0.556~8
0~^1.23 = no answer
0~^.123 = no answer
0~^0~ = no answer
-123^2.000 = 15129
-123^2.000~ = no answer
-123^-.2 = -0.3819609613278
-123~^-.2 = -0.3820~7
-123^0~ = no answer
-123~2^0 = 1
-8192^(1/13) = -2
-8192^(-1/13) = -0.5
-8192^(1/13)^3 = -8
-8192^(-1/13)^-3 = -8
--8192^(1/13) = 2
---8192^(1/13) = 2               !!
-8192~4^(1/13) = -2.00000~9
pi~ = 3.1415926535~2             !
e~ = 2.71828182845~2             !
12:1~ = 10~30
12/1~9 = 12~7
12/1~2 = division by 0
1.00~2+1.00~2 = 2.00~5           !
2.00~2*3.00~2 = 6.0~2

0^-1.2 = no answer
0^0 = no answer
0^.00000001 = 0
0.00~^-1.2 = no answer
0.00~^0 = no answer
0^1.2 = 0
0.00~^1.2 = no answer
0.11^1.2 = 0.07074100447107
0.11~^1.2 = 0.071~8
0.11^1.2~ = 0.07~2       +0.00825435...  -0.00739184...
0.11~^1.2~ = 0.07~2      +0.01239755...  -0.01097054...
0.11^0 = 1               
0.11~^0 = 1
0.11^0.00~ = 1.00~2      
0.11~^0.00~ = 1.00~2     
0.11^-1.2 = 14.1360729534     
0.11~^-1.2 = 14~2        
0.11^-1.2~ = 14~3        +1.64945...  -1.47710...
0.11~^-1.2~ = 14~5       +2.59459...  -2.10796...
12.345^5 = 286718.3385246
12.345~2^5 = 286700~200            
12.345^5.00~2 = 290000~10000       
12.345^(1/5) = 1.653096547476
12.345^.2 = 1.653096547476
12.345~2^.20~ = 1.65~4        
.01~^2 = 0.0001~2
.01~2^2 = no answer

0.00~^2 = no answer               (inconsistent?)
0.00~*0.00~ = 1.~6 E-06           (hard to read!!!)
0*0 = 0
0.00~*0 = 0
0.00~5*0.00~5 = 0.000~
0.01~*0.00~ = 0.0000~

12/0 = division by 0
11.9~3/0 = division by 0
0/0 = division by 0
0.00~/0 = division by 0
0.0~/0.0001~ = 0~3000
0.05/0.00005 = 1000
-0.05/0.00005 = -1000
0.0321~/9.87~ = 0.00325~2
9.87~/0.0321~ = 307~2

1.23~2+1.23~2 = 2.46~5
2.46~5-1.23~2 = 1.23~8

abs(1.23~2-2.34~2) = 1.11~5
abs(123.45~+234.56~) = 358.01~3


asin(0.0000~2) = 0.0000~3r
asin(0.0000~2) = 0.00~2ø     [...plm20.62648..."]
asin(1.000~2*pi/2) = asin of x>|1|
asin(0.400~2*pi/2) = 0.679~5r
     .400~*pi/2 = 0.628~3
     asin(0.628~3) = 0.679~5r
acos(1.000) = 0r
acos(1.000~) = acos of x>|1|
acos(0.999~) = 0.04~3r       [0.04472... plm0.01310\0.01005...]
acos(0) = 1.570796326795r
atan(1.000) = 45ø
atan(1.000~3) = 45.00~10ø    
                      (This means "between 44.95 and 45.05 d")
atan(1000~3) = 89.9427~3ø
atan(100000000~6) = 89.99999942704ø
atan(100000003) = 89.99999942704ø
atan(99999997) = 89.99999942704ø
sin(.2345)^2+cos(.2345)^2 = 1
sin(.2345~5)^2+cos(.2345~5)^2 = 1.0000000~2
     sin(.2345~5)^2 = 0.00001675~8
     cos(.2345~5)^2 = 0.99998325~5
     .00001675~8+.99998325~5 = 1.0000000~2
tan(89.5~) = 100~200        [114.588... plm12.732...\120.881...]
tan(89.5~2) = 100~200       [114.588... plm28.648...\117.202...]
tan(89~2) = tan(argument) = inf.
log(.0001~) = -3.9~6        [-4 plm0.17609...\0.30102...]
log(0) = log of non-positive number
log(0~) = log of non-positive number
log(10~) = 1.00~5
ln(.0001~) = -9~2           [-9.2103... plm0.4054...\0.6931]

Corrected flaw:

From:     ---8192^(1/13) = 2               !!
to:       ---8192^(1/13) = -2
Comments and criticism

One application of calculations is about to be issued. It is a 
calculator for basic natural science, Fleabyte.bns.  It takes 
into account uncertainties in atomic weights and in physical 
constants.  In the meantime, I welcome critical comments, espe
cially on the mode of displaying uncertainty.


Caveats

Avoid entering an application (e.g. a word-processor) while 
Fleabyte is on-screen.  Also avoid pressing keys for repetitive 
action when Fleabyte is used together with an application.  I 
have had a three-bomb problem here which was associated with one 
particular word-processor used in testing.  I have not encounter
ed any problem with 1st Word Plus nor did I with Word-Up.

Avoid generating numbers greater than 3.5 E+308 or less than
2.2 E-308.  That should be no problem.  But just to be sure, 
however, know that the accessory will bomb if you do.  This      
matter will be looked at when time permits. 


Apology and rectification    

As mentioned before - in FLEAB_SX.DOC - I mailed a Fleabyte\dt 
calculator together with an accessory named "The Wormhole" to 
four publications.  I just learned that the U.S. publication I 
sent it to, Atari Interface Magazine, put it on their December 
1991 "Disk of the Month."  I think that many ST users will find 
the material interesting and will be particularly intrigued by 
the techniques of data transfer which I gathered from the Dutch 
ST publication "Start" and utilized in "The Wormhole."  Unfortun
ately, as a calculator the device contains a number of flaws.  
(By and large these are not likely to show up with normal usage 
which makes the ones that do even more insideous.)  I apologize 
for this to the editors of that fine publication, William Rayl 
and Patricia Snyder-Rayl, and to their readers.  As for myself, 
I am most embarrassed, of course.  Also I am trying to be more 
careful and view the calculator more as an instrument than 
merely a concept in a succession of tasks I set myself.  The 
place where, and the circumstances under which I work make good 
beta-testing nigh impossible.  But I am now including test 
results with the accompanying documentation so the reader may 
judge whether or not my testing is sufficiently thorough.  
Please, tell me if and how I can improve on this.  In the 
meantime I shall repent by mailing a disk with Fleabyte.sx 
(simple calculator), Fleabyte.ffs (full-function scientific), 
Fleabyte.fs ("sig.figs," which is the present one), Fleabyte.bns 
("basic natural science") and The Wormhole.bns as well as a 
replacement ".dt" and all the associated GFA BASIC listings and 
documentation to those who have sent me the requested shareware 
contribution.  

I gave this item a version number below 1.0 to indicate that I 
like to see it used for some time to discover whether and what 
bugs, if any, will show up.  I have tried to be prudent, but there 
is that old saying about the best laid plans ....  Your responses
about the use you will make of this item, of problems encountered, 
and suggestions you'd like to make are most welcome.


Acknowledgement

Again I like to ackowledge the fine cooperation of Leo Scalia, 
librarian of MAST, the Montreal Atari ST users' group for putting 
this item on GENIE.


Henry K. van Eyken,                 I am not really active yet        
11 Falcon,                          on CompuServe and GEnie.
Lakefield, Quebec.  J0V 1K0         Long distance charges and 
CANADA                              lots of work and all that.
                                    Allow me some time to get
Tel. (514) 562-9618                 some things settled first.  
                                        
                                    December 17, 1991                       

