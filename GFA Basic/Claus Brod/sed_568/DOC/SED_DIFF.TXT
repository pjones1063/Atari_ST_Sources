9c9
< '       97828 Marktheidenfeld            71134 Aidlingen
---
> '             97828 Marktheidenfeld            71134 Aidlingen
13c13
< '             Anton Stepper @ Maus WÅ          Claus Brod @ BB
---
> '             Anton Stepper @ Wö               Claus Brod @ BB
57a58,72
> ' 1994-12-26 RS: Modifikationen von Rainer Seitel @ KA
> '                Mindestens folgende Fehler gibt's noch:
> '                In der Resource beim MenÅeintrag ØDateienlisteÆ die Punkte weg.
> '                In der Resource bei Dateiinfo Uhrzeit-Feld auf 6 Ziffern. Sonst werden beim Schreiben des Dateiinfo die Sekunden immer auf 0 gesetzt.
> '                Bei mehr als 32767 Clustern klappt ØDateienlisteÆ nicht.
> ' 1995-02-05 RS: Cluster zurÅck geht auch wenn dieser hintendran liegt.
> '                Grîûter Clusterindex ist jetzt cpd%+1.
> '                SED kommt eventuell ganz mit einer FAT zurecht.
> '                Partitionen lîschen gibt defekte Cluster nicht mehr frei.
> '                2 VorschlÑge vom Ende Åbernommen:
> '                In Dialogboxen kînnen []@{}\ eingegeben werden.
> '                Bei FAT-Graph Anzahl der Cluster hinter dem Dateinamen.
> ' 1995-04-04 RS: SED sollte jetzt wirklich mit mehr als $FFFE Sektoren zurechkommen.
> '                FAT prÅfen ordentlicher.
> '                In disc_save do_list auskommentiert.
68c83
< base_look               ! Applikation ?
---
> base_look               ! Applikation?
104c119
<   '     fÅrs 2.Fenster
---
>   '     fÅrs 2. Fenster
127,128c142,143
<   rate%(5)=3                    ! A=3msec
<   rate%(6)=0                    ! B=6msec
---
>   rate%(5)=3                    ! A = 3 ms
>   rate%(6)=0                    ! B = 6 ms
211c226
<   minad%=0              ! 1.Zeichen im Font
---
>   minad%=0              ! 1. Zeichen im Font
221a237,241
>   IF ROL&(GEMDOS(48) AND &HFFFF,8)<&H15 THEN
>     dos_max_sektors%=32767  !grîûte Anzahl Sektoren vor GEMDOS 0.15
>   ELSE
>     dos_max_sektors%=65535  !grîûte Anzahl Sektoren ab GEMDOS 0.15 (TOS 1.04)
>   ENDIF
237,238c257,258
<   fg$="?VDx."                   ! FÅr Anzeige in FAT-GRAPH
<   ' ? = verklebt, V = Verwaltung, x=Leiche, D = defekt, . = frei
---
>   fg$="?VDX."                   ! FÅr Anzeige in FAT-GRAPH
>   ' ? = verklebt, V = Verwaltung, X = Leiche, D = defekt, . = frei
257c277
<   DATA OK,Fehler beim Selectieren,Defaultfehler (Chaos),ungÅltige Phase
---
>   DATA OK,Fehler beim Selektieren,Defaultfehler (Chaos),ungÅltige Phase
372,373c392,393
<   tt%=@search_cookie("_MCH",0)  ! ersatz fÅr  TT?
<   tt!=(tt% DIV 65536) AND 2
---
>   tt%=@search_cookie("_MCH",0)  ! Ersatz fÅr  TT?
>   tt!=(tt% DIV 65536)>2
425c445
<   a&=OB_Y(a.lert%,alrti1&)              ! Y-POS ICON 2-5  = Y-POS ICON 1 !
---
>   a&=OB_Y(a.lert%,alrti1&)              ! y-Pos ICON 2-5  = y-Pos ICON 1 !
428c448
<     OB_Y(a.lert%,i&)=a&                 ! Y-Pos
---
>     OB_Y(a.lert%,i&)=a&                 ! y-Pos
470c490
<   LOCAL a$
---
>   ' LOCAL a$
479c499
<     ~@alrt(3,"Offene Dateien kînnen nicht erkannt werden!|Das kann zu Datenverlust fÅhren!|Bitte CHK_OFLS installieren !",1,"Verstanden")
---
>     ~@alrt(3,"Offene Dateien kînnen nicht erkannt werden!|Das kann zu Datenverlust fÅhren!|Bitte CHK_OFLS installieren!",1,"Verstanden")
482c502
< PROCEDURE chk_ofls    ! Datei_offen_Åberwacher installiert?
---
> PROCEDURE chk_ofls    ! Datei_offen_öberwacher installiert?
517c537
< ' Programmen geîffnet ist. Dazu wird CHKOFLS benîtigt.
---
> ' Programmen geîffnet ist. Dazu wird CHK_OFLS benîtigt.
527,532c547,562
<   file_is_open !           Datei, wenn geîffnet, schlieûen
<   IF chk_ofls%>0 !         Zeiger auf Struktur "OFLS", ver, data ...
<     a&=@ofls(drv%) !       OFLS lesen
<     IF a&>0 AND a&<>&HFFFF
<       IF @alrt(1,"Achtung: |mîglicher Datenverlust!| "+STR$(a&)+" geîffnete Datei(en)! ",1,wa$)=2
<         RETURN -1
---
>   file_is_open           ! Datei, wenn geîffnet, schlieûen
>   a&=GEMDOS(309,1,drv%)  ! Dlock(sperren)
>   IF a&<>-32
>     IF a&<0
>       ~@alrt(1,"Medienwechsel nicht mîglich,|da auf Laufwerk "+CHR$(drv%+64)+": Dateien|offen sind oder es gesperrt ist!",1,"Abbruch")
>       RETURN -1
>     ENDIF
>     ~GEMDOS(309,0,drv%)  ! Dlock(freigeben)
>     RETURN 0
>   ELSE
>     IF chk_ofls%>0       ! Zeiger auf Struktur "OFLS", ver, data ...
>       a&=@ofls(drv%)     ! OFLS lesen
>       IF a&>0 AND a&<>&HFFFF
>         IF @alrt(1,"Achtung: |mîglicher Datenverlust!| "+STR$(a&)+" geîffnete Datei(en)! ",1,wa$)=2
>           RETURN -1
>         ENDIF
534a565,566
>     ~C:utis%(&H100+drv%) ! Medienwechsel auslîsen
>     RETURN 0
536,537d567
<   ~C:utis%(&H100+drv%) !   Medienwechsel auslîsen
<   RETURN 0
605c635
< FUNCTION was_ist                        ! Abbruch ?
---
> FUNCTION was_ist                        ! Abbruch?
629,639d658
< FUNCTION term$(a$)                      ! HEX-DEC-BIN wandeln
<   .| Aufruf in : get_val-1,hard_read-3,disc_info-1,fat_bearbeiten-9,
<   IF LEFT$(a$,1)="$"
<     RETURN STR$(VAL("&H"+RIGHT$(a$,LEN(a$)-1)))
<   ELSE
<     IF LEFT$(a$,1)="%"
<       RETURN STR$(VAL("&X"+RIGHT$(a$,LEN(a$)-1)))
<     ENDIF
<   ENDIF
<   RETURN a$
< ENDFUNC
734c753
<   LOCAL p$,s$,t$
---
>   LOCAL p$,s$,t$,i%
741,748c760,786
<   CARD{GCONTRL}=90
<   CARD{GCONTRL+2}=0
<   CARD{GCONTRL+4}=2
<   CARD{GCONTRL+6}=2
<   CARD{GCONTRL+8}=0
<   {ADDRIN}=VARPTR(p$)
<   {ADDRIN+4}=VARPTR(s$)
<   IF rom_version%>=&H104
---
>   ADDRIN(0)=VARPTR(p$)
>   ADDRIN(1)=VARPTR(s$)
>   IF txt$="" THEN
>     GOTO my_fsel_input_
>   ENDIF
>   IF CARD{LONG{GB+4}}<&H140 OR (CARD{LONG{GB+4}}>=&H200 AND CARD{LONG{GB+4}}<&H300)
>     i%=LPEEK(&H5A0)                                ! FSEL-Cookie suchen
>     IF i% THEN
>       WHILE LPEEK(i%)
>         IF LPEEK(i%+4)=CVL("FSEL")
>           GOTO my_fsel_exinput_
>         ENDIF
>         ADD i%,8
>       WEND
>     ENDIF
>     i%=LPEEK(&HB4)                                 ! Trap-13-Vektor untersuchen
>     WHILE LPEEK(i%-12)=CVL("XBRA")
>       ' Dateiauswahlbox von Martin Patzel, Edison-Utility von Eckard Krajewski
>       IF LPEEK(i%-8)=CVL("FSmp") OR LPEEK(i%-8)=CVL("EUek")
>         GOTO my_fsel_exinput_
>       ENDIF
>       i%=LPEEK(i%-4)
>     WEND
>   my_fsel_input_:
>     GEMSYS 90
>   ELSE
>   my_fsel_exinput_:
750,752c788,793
<     CARD{GCONTRL}=91
<     CARD{GCONTRL+6}=3
<     {ADDRIN+8}=VARPTR(t$)
---
>     ADDRIN(2)=VARPTR(t$)
>     GCONTRL(0)=91
>     GCONTRL(1)=0
>     GCONTRL(2)=2
>     GCONTRL(3)=3
>     GEMSYS
754,755d794
<   GEMSYS
<   '
759c798
<   IF CARD{GINTOUT+2}=1
---
>   IF GINTOUT(1)=1
793c832
< FUNCTION no_protekt                     ! Schreibschutz hilft nix...
---
> FUNCTION no_protekt                     ! Schreibschutz hilft nix ...
911c950
<   RETURN VAL(@term$(@get_char$(tree%,obj&)))
---
>   RETURN VAL(@get_char$(tree%,obj&))
1000c1039
<     OB_Y(a.lert%,i&)=OB_H(a.lert%,0)-z.h%*2             ! Button Y-POS
---
>     OB_Y(a.lert%,i&)=OB_H(a.lert%,0)-z.h%*2             ! Button y-Pos
1013c1052
<   x%=OB_W(a.lert%,0)-(ab%+a%+z.b%*2)    ! 1.Button rechts
---
>   x%=OB_W(a.lert%,0)-(ab%+a%+z.b%*2)    ! 1. Button rechts
1082c1121
<         out(a$+"  "+HEX$(x%,8))
---
>         out(a$+"  $"+HEX$(x%,8)+" "+MKL$(x%))
1172c1211
<   ~@alrt(1,"Das geht nur im Datenfenster!",1,"Aha")
---
>   ~@alrt(1,"Das geht nur im Datenfenster!",1," Aha ")
1176c1215
<   ~@alrt(1,"Das geht nur im Textfenster!",1,"Aha")
---
>   ~@alrt(1,"Das geht nur im Textfenster!",1," Aha ")
1493c1532
<     IF (which& AND 1)>0                         ! TASTE gedrÅckt
---
>     IF (which& AND 1)<>0                        ! TASTE gedrÅckt
1498c1537
<       IF (kstate% AND 8)>0
---
>       IF (kstate% AND 8)<>0
1504,1512d1542
<         ELSE
<           kling
<         ENDIF
<       ELSE
<         IF key%>0
<           ~OBJC_EDIT(tree%,edit_obj%,key%,idx&,2,idx&)  ! EDCHAR
<         ENDIF
<         IF (next_obj%<>0) AND ((next_obj%<>edit_obj%) OR (cont&=0))
<           ~OBJC_EDIT(tree%,edit_obj%,0,idx&,3,idx&)     ! EDEND
1514a1545,1550
>       IF key%>0
>         ~OBJC_EDIT(tree%,edit_obj%,key%,idx&,2,idx&)  ! EDCHAR
>       ENDIF
>       IF (next_obj%<>0) AND ((next_obj%<>edit_obj%) OR (cont&=0))
>         ~OBJC_EDIT(tree%,edit_obj%,0,idx&,3,idx&)     ! EDEND
>       ENDIF
1535c1571
<             IF ((mb& AND 2)=2) OR (ks& AND 8)>0
---
>             IF ((mb& AND 2)=2) OR (ks& AND 8)<>0
1612c1648
<     IF (theflag& AND flag&)>0
---
>     IF (theflag& AND flag&)<>0
1615c1651
<     IF (theflag& AND &H20)>0        ! LASTOB
---
>     IF (theflag& AND &H20)<>0       ! LASTOB
1646c1682
<   IF (kstate% AND 3)>0          ! Shift-Taste
---
>   IF (kstate% AND 3)<>0         ! Shift-Taste
1652c1688
<   IF (kstate% AND 8)>0          ! ALT gedrÅckt
---
>   IF (kstate% AND 8)<>0         ! ALT gedrÅckt
1655c1691
<     IF (kstate% AND 4)>0        ! CTRL
---
>     IF (kstate% AND 4)<>0       ! CTRL
2051c2087
<   IF fontnr%<=fonts%+neuefonts%                 ! Font gefunden ?
---
>   IF fontnr%<=fonts%+neuefonts%                 ! Font gefunden?
2053,2055c2089,2091
<     a%=@vst_point(scr_handle%,fontsx%)          ! die Grîsse dazu
<     IF a%<>fontsx%                              ! hat geklappt ?
<       ~@alrt(3,"Fontgrîsse "+STR$(fontsx%)+" nicht einstellbar!",1,"Aha")
---
>     a%=@vst_point(scr_handle%,fontsx%)          ! die Grîûe dazu
>     IF a%<>fontsx%                              ! hat geklappt?
>       ~@alrt(3,"Fontgrîûe "+STR$(fontsx%)+" nicht einstellbar!",1,"Aha")
2181c2217
<     '         Op,Strukt,   X-,Y-,Spalten
---
>     '         Op,Strukt,   x-,y-,Spalten
2222c2258
<         ALERT 3,"INF-Datei zu lang|Installiere DEFAULT.INF",1,"Aha",dum%
---
>         ALERT 3,"INF-Datei zu lang!|Installiere DEFAULT.INF.",1," Aha ",dum%
2230c2266
<     ALERT 1,"Installiere DEFAULT.INF",1,"Aha",dum%
---
>     ALERT 1,"Installiere DEFAULT.INF.",1," Aha ",dum%
2330c2366
<     fwritec(hdl%,STR$(fe%(1,1)*x%))     ! 2.Fenster
---
>     fwritec(hdl%,STR$(fe%(1,1)*x%))     ! 2. Fenster
2361c2397
<         ~@alrt(5,"Kein Speicher fÅr HELP",1,"kein|Help")
---
>         ~@alrt(5,"Kein Speicher fÅr HELP!",1,"kein| Help ")
2368c2404
<       ~@alrt(5,"HELP-Datei zu gross!",1,"Aha")
---
>       ~@alrt(5,"HELP-Datei zu groû!",1," Aha ")
2452c2488
<   CARD{scsi_komm%+8}=bps%       ! Blockgrîsse
---
>   CARD{scsi_komm%+8}=bps%       ! Blockgrîûe
2454c2490
<   CARD{scsi_komm%+14}=cbytes%   ! Anzahl der Kommandobytes 6-10-12 ?
---
>   CARD{scsi_komm%+14}=cbytes%   ! Anzahl der Kommandobytes 6-10-12?
2509c2545
<       CARD{scsi_komm%+8}=512      ! Blockgrîsse
---
>       CARD{scsi_komm%+8}=512      ! Blockgrîûe
2582c2618
<   ~@alrt(1,"Plattenfehler: |"+STR$(he%)+"  "+a$,1,"Aha")
---
>   ~@alrt(1,"Plattenfehler: |"+STR$(he%)+"  "+a$,1," Aha ")
2601c2637
<             block%=block_marke%-VAL(@term$(b$))
---
>             block%=block_marke%-VAL(b$)
2604c2640
<               block%=block_marke%+VAL(@term$(b$))
---
>               block%=block_marke%+VAL(b$)
2608c2644
<           block%=VAL(@term$(a$))
---
>           block%=VAL(a$)
2722c2758
<       IF (flg% AND 4)>0       ! Returnpuffer ansehen ?
---
>       IF (flg% AND 4)>0       ! Returnpuffer ansehen?
2773c2809
<       ~@alrt(3,"Das geht im Moment nicht |bei SCSI+VORTEX -Platten",1,"Abbruch")
---
>       ~@alrt(3,"Das geht im Moment nicht|bei SCSI- und VORTEX-Platten.",1,"Abbruch")
2811c2847
<     ~@alrt(1,"Diese Option ist nur bei |Adaptec-Controllern (ATARI-Modus) |anwendbar.",1,"Aha")
---
>     ~@alrt(1,"Diese Option ist nur bei|Adaptec-Controllern (ATARI-Modus) |anwendbar.",1," Aha ")
2819c2855
<   wwa%=@alrt(2,"Platte parken ?",0,"Parken|Entpark|Abbruch")
---
>   wwa%=@alrt(2,"Platte parken?",0,"Parken|Entpark|Abbruch")
2879c2915,2916
<       bsl_count%=MIN(5,bsl_count%)
---
>       ' bsl_count%=MIN(5,bsl_count%)
>       bsl_count%=MIN(31,bsl_count%)  !RS: zerstîrt nicht mein MS-DOS-Medium
2935c2972
<   get_id(part_oben%)            ! ID's auslesen
---
>   get_id(part_oben%)            ! IDs auslesen
2940c2977
<   yk%=OB_H(p.art%,partsli1&)    ! Y-Koordinate Vater-Objects holen
---
>   yk%=OB_H(p.art%,partsli1&)    ! y-Koordinate Vater-Objects holen
2947c2984
<   OB_Y(p.art%,partsli2&)=c%     ! neue Relative Y-Koordinate des Sliders setzen
---
>   OB_Y(p.art%,partsli2&)=c%     ! neue Relative y-Koordinate des Sliders setzen
2984c3021
<   get_id(part_oben%)            ! ID's auslesen
---
>   get_id(part_oben%)            ! IDs auslesen
2987c3024
<   yvv%=OB_Y(p.art%,1)+OB_Y(p.art%,0)  ! Y-Offset Vater
---
>   yvv%=OB_Y(p.art%,1)+OB_Y(p.art%,0)  ! y-Offset Vater
2990c3027
<   y%=OB_Y(p.art%,partsli2&)     ! Y-Koordinate Sohn-Object
---
>   y%=OB_Y(p.art%,partsli2&)     ! y-Koordinate Sohn-Object
3004c3041
<   OB_Y(p.art%,partsli2&)=np%    ! neue Relative Y-Koordinate des Sliders setzen
---
>   OB_Y(p.art%,partsli2&)=np%    ! neue Relative y-Koordinate des Sliders setzen
3023c3060
<   j&=part_oben%                 ! danach ID's neu setzen
---
>   j&=part_oben%                 ! danach IDs neu setzen
3075c3112
<     CLR s%
---
>     ' CLR s%
3078c3115,3116
<       IF p_size%(i&)<32768 AND p_id$(i&)="BGM"
---
>       ' IF p_size%(i&)<32768 AND p_id$(i&)="BGM"
>       IF p_size%(i&)<=dos_max_sectors% AND p_id$(i&)="BGM"
3081c3119,3120
<       IF p_size%(i&)>32767 AND p_id$(i&)="GEM"
---
>       ' IF p_size%(i&)>32767 AND p_id$(i&)="GEM"
>       IF p_size%(i&)>dos_max_sectors% AND p_id$(i&)="GEM"
3093,3094c3132,3133
<   get_id(part_oben%)            ! ID's auslesen
<   get_value(part_oben%)         ! Grîssen auslesen
---
>   get_id(part_oben%)            ! IDs auslesen
>   get_value(part_oben%)         ! Grîûen auslesen
3159c3198
< PROCEDURE get_id(j%)          ! Partitions ID's auslesen
---
> PROCEDURE get_id(j%)          ! Partitions IDs auslesen
3170c3209
< PROCEDURE get_value(j%)       ! Partitionsgrîssen auslesen
---
> PROCEDURE get_value(j%)       ! Partitionsgrîûen auslesen
3186c3225
<   .| Glob. Var.: hi_spc%,boot.raw%,buf%,hi_spt%,hi_dhc%,block%,h_error%,a$
---
>   .| Glob. Var.: hi_spc%,boot.raw%,buf%,hi_spt%,hi_dhc%,block%,h_error%
3191c3230
<   LOCAL bps_2%,i%,j%,lendir%,lenfat%
---
>   LOCAL a$,bps_2%,i%,j%,len_dir%,len_fat%
3194c3233,3234
<   BMOVE boot.raw%,buf%,512              ! BOOT-Programm in Puffer
---
>   a$=STRING$(512,0)                     ! Bootsektor lîschen
>   BMOVE V:a$,buf%,512
3197c3237,3240
<   WHILE j%>32767                        ! Logische Sektorgrîsse berechnen
---
>   IF j%=dos_max_sectors%+1 THEN         !RS: um die Cluster klein zu halten
>     DEC j%
>   ENDIF
>   WHILE j%>dos_max_sectors%             ! Logische Sektorgrîûe berechnen
3199a3243,3245
>     IF j%=dos_max_sektors%+1 THEN       !RS: um die Cluster klein zu halten
>       DEC j%
>     ENDIF
3202c3248,3254
<   BYTE{buf%+11}=bps_2% MOD 256           ! BPS = log. Sektorgrîsse
---
>   CARD{buf%}=&HEB3C                     ! INTEL short jump
>   BYTE{buf%+2}=&H90                     !
>   CHAR{buf%+3}="SED56"                  ! Name
>   i%=XBIOS(17)                          ! Random()
>   CARD{buf%+&H8}=ROL&(i%,8)             ! Seriennummer
>   BYTE{buf%+&HA}=SHR(i%,16)
>   BYTE{buf%+11}=bps_2% MOD 256          ! BPS = log. Sektorgrîûe
3204,3205c3256,3257
<   BYTE{buf%+13}=hi_spc%                  ! Sektoren/Cluster
<   BYTE{buf%+14}=1                        ! reserviert
---
>   BYTE{buf%+13}=hi_spc%                 ! Sektoren/Cluster
>   BYTE{buf%+14}=1                       ! Anzahl reservierter Sektoren
3207,3211c3259,3263
<   BYTE{buf%+16}=2                        ! Anzahl der FAT's
<   lendir%=MAX(256,bps_2%/32)             ! 256 EintrÑge von 512-8192 Byte/Sektor
<   BYTE{buf%+17}=lendir% MOD 256
<   BYTE{buf%+18}=lendir% DIV 256          ! EintrÑge im Rootverzeichnis
<   BYTE{buf%+19}=j% MOD 256               ! Anzahl der Sektoren
---
>   BYTE{buf%+16}=2                       ! Anzahl der FATs
>   len_dir%=MAX(256,bps_2%/32)           ! 256 EintrÑge von 512-8192 Byte/Sektor
>   BYTE{buf%+17}=len_dir% MOD 256        ! EintrÑge im Wurzelverzeichnis
>   BYTE{buf%+18}=len_dir% DIV 256
>   BYTE{buf%+19}=j% MOD 256              ! Anzahl der Sektoren
3213,3217c3265,3273
<   BYTE{buf%+21}=&HF8                     ! MEDIA
<   lenfat%=(j%/bps_2%+1)*hi_spc%/2        ! Grîûe der Fat
<   BYTE{buf%+22}=lenfat%                  ! Grîsse der FAT
<   BYTE{buf%+23}=0
<   BYTE{buf%+24}=hi_spt%                  ! Sektoren pro Track
---
>   BYTE{buf%+21}=&HF8                    ! MEDIA
>   '                                       Sektoren je FAT
>   len_fat%=(((((j%-1-len_dir%) DIV hi_spc%)+2)*2)+bps_2%-1) DIV bps_2%
>   IF len_fat%>((((((j%-1-2*(len_fat%-1)-len_dir%) DIV hi_spc%)+2)*2)+bps_2%-1) DIV bps_2%)
>     DEC len_fat%
>   ENDIF
>   BYTE{buf%+22}=len_fat% MOD 256        ! Sektoren je FAT
>   BYTE{buf%+23}=len_fat% DIV 256
>   BYTE{buf%+24}=hi_spt%                 ! Sektoren pro Track
3219c3275
<   BYTE{buf%+26}=hi_dhc%                  ! Anzahl der Kîpfe
---
>   BYTE{buf%+26}=hi_dhc%                 ! Anzahl der Kîpfe
3221,3222c3277,3300
<   CARD{buf%+28}=0                        ! versteckte Sektoren
<   {buf%+2}=&H53454435                    ! "SED5"
---
>   CARD{buf%+28}=0                       ! versteckte Sektoren
>   ' Erweiterter Bootsektor wie MS-DOS 4.00
>   ' In spt% und heads% muû die vom PC-Controller simulierte Anzahl stehen!
>   CARD{buf%+&H18}=ROL&(32,8)            ! Sektoren pro Spur (INTEL-Format)
>   CARD{buf%+&H1A}=ROL&(64,8)            ! Kîpfe (INTEL-Format)
>   LONG{buf%+&H1C}=SHL(ROL&(p_start%(m%),8),16)+ROL&(SHR(p_start%(m%),16),8) !versteckte Sektoren (INTEL-Format)
>   IF j%>=65536 THEN
>     BYTE{buf%+&H13}=0                   ! Anzahl der Sektoren
>     BYTE{buf%+&H14}=0
>     LONG{buf%+&H20}=SHL(ROL&(j%,8),16)+ROL&(SHR(j%,16),8) !Sektoren (INTEL-Format)
>   ELSE
>     LONG{buf%+&H20}=0
>   ENDIF
>   BYTE{buf%+&H24}=0                     ! physikalische Laufwerksnummer fÅr MS-DOS
>   BYTE{buf%+&H25}=0                     ! fÅr MS-DOS reserviert
>   BYTE{buf%+&H26}=&H29                  ! Kennung fÅr erweiterten BPB
>   i%=GEMDOS(44)                         ! Tgettime()
>   BYTE{buf%+&H27}=i%                    ! Seriennummer
>   BYTE{buf%+&H28}=SHR(i%,8)
>   i%=GEMDOS(42)                         ! Tgetdate()
>   BYTE{buf%+&H29}=i%                    ! noch Seriennummer
>   BYTE{buf%+&H2A}=SHR(i%,8)
>   CHAR{buf%+&H2B}="           FAT16   " ! Medienname und FAT-Typ
>   CARD{buf%+&H1FE}=&H1235-@chk_sum      ! ungÅltige PrÅfsumme fÅr Atari
3235a3314,3322
>     ' RS: Der Cluster, in dem der Sektor an der Vorzeichengrenze der
>     ' GEMDOS-Sektorpuffer liegt, wird in der FAT als defekt markiert.
>     ' Gehîrt in hard_set_bad, damit es auch bei ØPartition lîschenÆ
>     ' aufgerufen wird. Ich weiû jetzt nur nicht, wie ich an die nîtigen
>     ' Variablen rankomme.
>     i%=1+2*len_fat%+len_dir%+(-2*hi_spc%+&H7FFF)
>     IF j%>=i% THEN
>       do_mark_bad(p_start%(m%)+i%*bps_2%/512)
>     ENDIF
3249c3336
<   IF (OB_STATE(p.art%,pcbhd&) AND 1)>0
---
>   IF (OB_STATE(p.art%,pcbhd&) AND 1)<>0
3290c3377
<     IF pfirst%=1                ! ersten ROOT - Sektor schreiben
---
>     IF pfirst%=1                ! ersten ROOT-Sektor schreiben
3373c3460
<   LOCAL ab%,i%,ph_sektors%,tm%,x1%,a$
---
>   LOCAL ab%,anf_fat1%,i%,ph_sektors%,tm%,x1%,a$
3378c3465,3466
<   x1%=@readmot(22)*BYTE{buf%+16}+@readmot(17)/16
---
>   anf_fat1%=@readmot(14)                ! Anzahl reservierter Sektoren
>   x1%=anf_fat1%-1+@readmot(22)*BYTE{buf%+16}+@readmot(17)*32/bps_2%
3385c3473
<   ab%=bps_2%/512
---
>   ab%=anf_fat1%*ph_sektors%
3393,3394c3481,3482
<     FOR i%=0 TO (x1%*ph_sektors%)-1
<       BMOVE buf%,tm%+i%*bps%,bps%
---
>     FOR i%=0 TO x1%-1
>       BMOVE buf%,tm%+i%*bps_2%,bps_2%
3598c3686
<         EXIT IF h_error%<>0             ! Fehler ?
---
>         EXIT IF h_error%<>0             ! Fehler?
3603c3691
<         ab%=BYTE{buf%+1}                ! xx Bytes nach 60xx retten wegen C't
---
>         ab%=BYTE{buf%+1}                ! xx Bytes nach 60xx retten wegen c't
3607c3695
<         BMOVE buf%+2,V:b$,LEN(b$)       ! und gerettete Daten (C't)
---
>         BMOVE buf%+2,V:b$,LEN(b$)       ! und gerettete Daten (c't)
3614c3702
<         CARD{buf%+&H1BC}=hi_wpc%        !   '    '    Vorkompensation
---
>         CARD{buf%+&H1BC}=hi_wpc%        !    "    "   Vorkompensation
3637c3725
<         scsicall(10,0,1,0,buf%,6,2)     ! 1.Rootsektor schreiben
---
>         scsicall(10,0,1,0,buf%,6,2)     ! 1. Rootsektor schreiben
3649c3737
<                 BYTE{buf%+&H1C6}=p_flag%(i%)     ! FLAG schreiben !!
---
>                 BYTE{buf%+&H1C6}=p_flag%(i%)     ! FLAG schreiben!!
3683c3771
<           ~@alrt(1,"Treiber (CBHD.SYS) |bitte selber kopieren",1,"OK")
---
>           ~@alrt(1,"Treiber (CBHD.SYS) |bitte selber kopieren",1," OK ")
3712c3800
<   IF @alrt(2,"Booten von der Platte abstellen ?",1,wa$)=1
---
>   IF @alrt(2,"Booten von der Platte abstellen?",1,wa$)=1
3718c3806
<           ~@alrt(1,"Platte ist nicht bootfÑhig ",1,"Aha")
---
>           ~@alrt(1,"Platte ist nicht bootfÑhig!",1," Aha ")
3742c3830
<   clr_out("Platten suchen...")
---
>   clr_out("Platten suchen ...")
3848c3936
<     IF @alrt(1,"HDX-RESTORE|"+STRING$(27,"-")+"  |ACHTUNG: Bootsektoren |werden Åberschrieben ! ",1,wa$)=1
---
>     IF @alrt(1,"HDX-RESTORE|"+STRING$(27,"-")+"  |ACHTUNG: Bootsektoren|werden Åberschrieben! ",1,wa$)=1
3866c3954
<             IF @alrt(2,"Rootsektor schreiben ?",0,"Ja|Nein")=1
---
>             IF @alrt(2,"Rootsektor schreiben?",0,"Ja| Nein ")=1
3880c3968
<                   IF @alrt(2,"Rootsektor restaurieren?",0,"Ja|Nein")=1
---
>                   IF @alrt(2,"Rootsektor restaurieren?",0,"Ja| Nein ")=1
3893c3981
<                   erg%=@alrt(2,"Bootsektor "+STR$(i%+1)+" schreiben ?",0,"Ja|Nein|Abbruch")
---
>                   erg%=@alrt(2,"Bootsektor "+STR$(i%+1)+" schreiben?",0,"Ja|Nein|Abbruch")
3922c4010
<       IF @alrt(2,"SCHREIB-TEST  Letzte Chance:|Target:"+STR$(target%)+" Geraet:"+STR$(geraet%)+"| "+platte$,0,wa$)=1
---
>       IF @alrt(2,"SCHREIB-TEST  Letzte Chance:|Target:"+STR$(target%)+" GerÑt:"+STR$(geraet%)+"| "+platte$,0,wa$)=1
3962c4050
<       put_char(b.ox%,boxtxt&,"Testmuster schreiben...")
---
>       put_char(b.ox%,boxtxt&,"Testmuster schreiben ...")
4033c4121
<                 ~@alrt(1,"Konnte defekten Block nicht lokalisieren",1,"Dumm")
---
>                 ~@alrt(1,"Konnte defekten Block nicht lokalisieren.",1," Dumm ")
4039c4127
<           EXIT IF block%>=hi_size%        ! Fertig ?
---
>           EXIT IF block%>=hi_size%        ! Fertig?
4044c4132
<           EXIT IF @was_ist>0        ! Abbruch ?
---
>           EXIT IF @was_ist>0        ! Abbruch?
4093c4181
<     out("Block:"+STR$(nr%)+" defekt...")
---
>     out("Block:"+STR$(nr%)+" defekt ...")
4158c4246
<   LOCAL len_dir%,len_fat%,anf_fat1%,spc%,lgs%,cluster%,x%
---
>   LOCAL anf_fat1%,len_dir%,len_fat%,spc%,lgs%,cluster%,x%
4173a4262
>       anf_fat1%=@readintel(15)                  ! Anzahl reservierter Sektoren
4176d4264
<       anf_fat1%=@readintel(29)
4181c4269
<       anf_dat%=1+len_fat%*2+len_dir%
---
>       anf_dat%=anf_fat1%+len_fat%*fat_anz%+len_dir%
4183c4271
<       block%=cluster%*2/512+ph_sp_ls%
---
>       block%=anf_fat1%*ph_sp_ls%+cluster%*2/512
4190,4191c4278,4279
<         WHILE a%>=hbps%
<           SUB a%,hbps%
---
>         WHILE a%>=512
>           SUB a%,512
4195c4283
<         scsicall(10,block%,1,0,buf%,6,2)        ! FAT-Sektor schreiben
---
>         scsicall(10,block%,1,0,buf%,6,2)         ! FAT-Sektor schreiben
4198,4199c4286,4287
<         WHILE fat_anz%>0
<           scsicall(10,block%+x%*ph_sp_ls%,1,0,buf%,6,2) ! x.FAT schreiben
---
>         WHILE fat_anz%>1
>           scsicall(10,block%+x%*ph_sp_ls%,1,0,buf%,6,2) ! x. FAT schreiben
4215c4303
< FUNCTION check_bsl            ! BSl-Struktur testen
---
> FUNCTION check_bsl            ! BSL-Struktur testen
4223c4311
<   IF bsl%>0 AND bsl_count%<5 AND bsl_start%<5
---
>   IF bsl%>0 AND bsl_count%<32 AND bsl_start%<5
4232c4320
<         ~@alrt(3,"BSL-PrÅfsumme falsch!|Evtl. neu Formatieren.",1,"Aha")
---
>         ~@alrt(3,"BSL-PrÅfsumme falsch!|Evtl. neu Formatieren.",1," Aha ")
4237d4324
<     ~MFREE(bsl%)
4240a4328
>   ~MFREE(bsl%)
4451c4539
<       IF (OB_STATE(t.arget%,i&) AND 1)>0
---
>       IF (OB_STATE(t.arget%,i&) AND 1)<>0
4456c4544
<       IF (OB_STATE(t.arget%,i&) AND 1)>0
---
>       IF (OB_STATE(t.arget%,i&) AND 1)<>0
4470c4558
<   IF (OB_STATE(t.arget%,tgwahl&) AND 1)>0
---
>   IF (OB_STATE(t.arget%,tgwahl&) AND 1)<>0
4533c4621
<     IF INSTR(b$,"SQ555")        ! Wechselmedium ?
---
>     IF INSTR(b$,"SQ555") OR INSTR(b$,"SQ5110") OR INSTR(b$,"SQ5200") OR INSTR(b$,"SQ3105") OR INSTR(b$,"SQ3270")  ! Wechselmedium?
4796c4884
<     IF (p_flag%(i%) AND 1)>0
---
>     IF (p_flag%(i%) AND 1)<>0
4799c4887
<     IF (p_flag%(i%) AND &H80)>0
---
>     IF (p_flag%(i%) AND &H80)<>0
4831,4832c4919,4920
<   ~@alrt(1,"..... geht nicht bei|'VORTEX' ",1,"Warum")
<   ~@alrt(1,"Weiss nicht warum -|Vortex fragen",1,"Darum")
---
>   ~@alrt(1,"... geht nicht bei|'VORTEX'! ",1,"Warum?")
>   ~@alrt(1,"Weiû nicht warum -|Vortex fragen!",1,"Darum")
4848c4936
<           qblock%=@eingabe("1.Blocknummer auf Quell"+a$,0)
---
>           qblock%=@eingabe("1. Blocknummer auf Quell"+a$,0)
5031c5119
<   ~@alrt(1,"Anzahl der gelesenen Bytes !",1,"Aha")
---
>   ~@alrt(1,"Anzahl der gelesenen Bytes!",1," Aha ")
5135c5223
<     IF (OB_STATE(step.rate%,i&) AND 1)>0
---
>     IF (OB_STATE(step.rate%,i&) AND 1)<>0
5141c5229
<     IF (OB_STATE(step.rate%,i&) AND 1)>0
---
>     IF (OB_STATE(step.rate%,i&) AND 1)<>0
5146c5234
<   IF (OB_STATE(step.rate%,stepresi&) AND 1)>0
---
>   IF (OB_STATE(step.rate%,stepresi&) AND 1)<>0
5149c5237
<   IF (OB_STATE(step.rate%,stephd&) AND 1)>0
---
>   IF (OB_STATE(step.rate%,stephd&) AND 1)<>0
5166c5254
<     read_adr_feld(100)     ! max. 100 Sektoren ??
---
>     read_adr_feld(100)     ! max. 100 Sektoren??
5275c5363
<         BYTE{zg%+7}=sc%                         ! Sektorgrîsse
---
>         BYTE{zg%+7}=sc%                         ! Sektorgrîûe
5481c5569
<     BMOVE VARPTR(an$),ak%,trk_len_max%          ! Status lîschen ??
---
>     BMOVE VARPTR(an$),ak%,trk_len_max%          ! Status lîschen??
5485c5573
<       wwa%=@alrt(2,"   Track 41 ?     ",1,"Gap|Anal")
---
>       wwa%=@alrt(2,"   Track 41?     ",1,"Gap|Anal")
5511c5599
<     BMOVE VARPTR(an$),ak%,trk_len_max%          ! Status lîschen ??
---
>     BMOVE VARPTR(an$),ak%,trk_len_max%          ! Status lîschen??
5516c5604
<     ~@alrt(1,"Keine Diskette drin oder was ?",1,"Kann sein")
---
>     ~@alrt(1,"Keine Diskette drin oder was?",1,"Kann sein")
5548c5636
<       EXIT IF track%>=tpd%            ! Fertig ?
---
>       EXIT IF track%>=tpd%            ! Fertig?
5577c5665
<   IF @alrt(2,"   Achtung! Diskette wird   |   gelîscht !! ",2,wa$)=1
---
>   IF @alrt(2,"   Achtung! Diskette wird   |   gelîscht!! ",2,wa$)=1
5582c5670
<       wwa%=@alrt(2,"    Was schreiben ??    ",1,"Puffer|Muster|Abbruch")
---
>       wwa%=@alrt(2,"    Was schreiben?    ",1,"Puffer|Muster|Abbruch")
5788c5876
<     IF sek%(sec_anz%,5)>a1%     ! war im Sektor ein neuer Header ?
---
>     IF sek%(sec_anz%,5)>a1%     ! war im Sektor ein neuer Header?
5852c5940
<   IF sek%(sec_anz%,5)>a1%       ! war im letzten Sektor ein neuer Header ?
---
>   IF sek%(sec_anz%,5)>a1%       ! war im letzten Sektor ein neuer Header?
5858c5946
<     sek%(sec_anz%,9)=(sec_end%-sek%(sec_anz%,4))-1    ! SektorlÑnge ??
---
>     sek%(sec_anz%,9)=(sec_end%-sek%(sec_anz%,4))-1    ! SektorlÑnge??
5905c5993
<   IF snr%>22                    ! Sektornummer  ?
---
>   IF snr%>22                    ! Sektornummer?
6002c6090
<     ~@alrt(1,"Nur beim ATARI-TT mîglich",1,"Aha")
---
>     ~@alrt(1,"Nur beim ATARI-TT mîglich!",1," Aha ")
6083c6171
<   a%=@eingabe("RAM schreiben ab Adresse :",ram_addr%)
---
>   a%=@eingabe("RAM schreiben ab Adresse:",ram_addr%)
6093c6181
<   bc%=@eingabe("Ab Adresse :",ram_addr%)
---
>   bc%=@eingabe("Ab Adresse:",ram_addr%)
6095c6183
<     a%=@eingabe("bis Adresse :",0)
---
>     a%=@eingabe("bis Adresse:",0)
6098c6186
<         INC a%                  ! darf nicht ungerade Anzahl sein ?
---
>         INC a%                  ! darf nicht ungerade Anzahl sein?
6109c6197
<               ~@alrt(3,"Busfehler aufgetreten!",1,"Aha")
---
>               ~@alrt(3,"Busfehler aufgetreten!",1," Aha ")
6120c6208
<               ~@alrt(3,"Busfehler aufgetreten!",1,"Aha")
---
>               ~@alrt(3,"Busfehler aufgetreten!",1," Aha ")
6145c6233
<       a%=@eingabe("Wieviele Bytes einlesen ?",rfl%)
---
>       a%=@eingabe("Wieviele Bytes einlesen?",rfl%)
6164c6252
<     IF @alrt(2,RIGHT$(prg_fi$,40)+"|ab Adresse "+@dec_hex_val$(prg_adr%,8)+"|ist noch im Speicher.|Freigeben?",1,"Ok|Nein")=1
---
>     IF @alrt(2,RIGHT$(prg_fi$,40)+"|ab Adresse "+@dec_hex_val$(prg_adr%,8)+"|ist noch im Speicher.|Freigeben?",1,"Ok| Nein ")=1
6178c6266
<         ~@alrt(3,"Kein Speicher frei|oder anderer Fehler ",1,"Abbruch")
---
>         ~@alrt(3,"Kein Speicher frei|oder anderer Fehler. ",1,"Abbruch")
6189c6277
<     IF @alrt(2,"Geladenes Programm belegt|noch Speicher.|Freigeben?",1,"Ok|Nein")=1
---
>     IF @alrt(2,"Geladenes Programm belegt|noch Speicher.|Freigeben?",1,"Ok| Nein ")=1
6194c6282
<     ~@alrt(3,"Kein Programm geladen",1,"Aha")
---
>     ~@alrt(3,"Kein Programm geladen.",1," Aha ")
6318a6407,6413
> FUNCTION rwabs(mode%,buf%,cnt%,lgs%,drive%)
>   IF lgs%<&HFFFF
>     RETURN BIOS(4,mode%,L:buf%,cnt%,lgs%,drive%)
>   ELSE
>     RETURN BIOS(4,mode%,L:buf%,cnt%,-1,drive%,L:lgs%)
>   ENDIF
> ENDFUNC
6344c6439
<       status%=BIOS(4,0,L:buf%,1,lgs%,drive%)
---
>       status%=@rwabs(0,buf%,1,lgs%,drive%)
6402c6497
<       status%=BIOS(4,1,L:buf%,1,lgs%,drive%)
---
>       status%=@rwabs(1,buf%,1,lgs%,drive%)
6467c6562
<   .| Glob. Var.: a%,lgs%,el%,a$,spd%
---
>   .| Glob. Var.: a%,lgs%,el%,spd%
6471,6479c6566,6574
<   a%=@eingabe("Logische Sektornummer lesen:",lgs%)
<   IF el%>0
<     IF VAL(a$)>=spd% OR VAL(a$)<0
<       ~@alrt(3,"Grîûte Sectornummer:|"+STR$(spd%-1),1,"Abbruch")
<     ELSE
<       lgs%=MIN(MAX(0,a%),spd%-1,a%)
<       lesen
<       do_list
<     ENDIF
---
>   DO
>     a%=@eingabe("Logische Sektornummer lesen:",lgs%)
>     EXIT IF el%=0 OR a%>=0 AND a%<spd%
>     ~@alrt(3,"Grîûte Sektornummer:|"+STR$(spd%-1),1,"Nochmal")
>   LOOP
>   IF el%<>0
>     lgs%=a%
>     lesen
>     do_list
6486,6493c6581,6588
<   a%=@eingabe("Logische Sektornummer schreiben:",lgs%)
<   IF el%>0
<     IF a%>=spd% OR a%<0
<       ~@alrt(3,"Grîûte Sektornummer:|"+STR$(spd%-1),1,"Abbruch")
<     ELSE
<       lgs%=a%
<       schreiben
<     ENDIF
---
>   DO
>     a%=@eingabe("Logische Sektornummer schreiben:",lgs%)
>     EXIT IF el%=0 OR a%>=0 AND a%<spd%
>     ~@alrt(3,"Grîûte Sektornummer:|"+STR$(spd%-1),1,"Nochmal")
>   LOOP
>   IF el%<>0
>     lgs%=a%
>     schreiben
6501,6506c6596,6605
<   a%=@eingabe("Cluster lesen:",cluster%)
<   IF el%>0 AND a%>=0
<     lgs%=(a%-2)*spc%+anf_dat%
<     IF lgs%>=spd%
<       ~@alrt(3,"Grîûte Clusternummer:|"+STR$(cpd%-1),1,"Abbruch")
<       CLR lgs%
---
>   DO
>     a%=@eingabe("Cluster lesen:",cluster%)
>     EXIT IF el%=0 OR a%=0 OR a%>=2 AND a%<cpd%+2
>     ~@alrt(3,"Grîûte Clusternummer:|"+STR$(cpd%+1),1,"Nochmal")
>   LOOP
>   IF el%<>0
>     IF a%=0  ! Pseudo-Clusternummer 0 wird erster Sektor des Wurzelverzeichnis
>       lgs%=anf_dir%
>     ELSE
>       lgs%=(a%-2)*spc%+anf_dat%
6518c6617
<     a%=@eingabe("Track",track%)
---
>     a%=@eingabe("Track:",track%)
6632c6731
<       ~@alrt(3,"Sektoren sind unterschiedlich groû",1,"Abbruch")
---
>       ~@alrt(3,"Sektoren sind unterschiedlich groû.",1,"Abbruch")
6673c6772
<     status%=BIOS(4,2,L:cmp_ram%,cmp%,start1%,dr1%)
---
>     status%=@rwabs(2,cmp_ram%,cmp%,start1%,dr1%)
6679c6778
<       ~@alrt(2,"Diskette gewechselt ?",1,wa$)
---
>       ~@alrt(2,"Diskette gewechselt?",1,wa$)
6683c6782
<     status%=BIOS(4,2,L:cmp1%,cmp%,start2%,dr2%)
---
>     status%=@rwabs(2,cmp1%,cmp%,start2%,dr2%)
6709c6808
<     ~@alrt(3,"FehlerÅberlauf",1,"Abbruch")
---
>     ~@alrt(3,"FehlerÅberlauf!",1,"Abbruch")
7032,7033c7131,7132
<     cx%=((wi%(wind%,1)+1+7) DIV 8)*8    ! X- Ausgabe
<     cy%=ty%(wind%)-z.hoehe%             ! Y-   "
---
>     cx%=((wi%(wind%,1)+1+7) DIV 8)*8    ! x-Ausgabe
>     cy%=ty%(wind%)-z.hoehe%             ! y-  "
7048,7049c7147,7148
<       par%(0)=cx%+(xt%+9)*z.breite%     ! X-Pos
<       par%(1)=cy%+yt%*z.hoehe%+1        ! Y-Pos
---
>       par%(0)=cx%+(xt%+9)*z.breite%     ! x-Pos
>       par%(1)=cy%+yt%*z.hoehe%+1        ! y-Pos
7138c7237
<     IF wind_top%=whdl&(0) OR wind_top%=whdl&(1) ! geht mich was an ?
---
>     IF wind_top%=whdl&(0) OR wind_top%=whdl&(1) ! geht mich was an?
7156c7255
<                     address                   ! im Addressteil ?
---
>                     address                   ! im Addressteil?
7160c7259
<                     set_block                 ! Lasso ?
---
>                     set_block                 ! Lasso?
7262c7361
< ' wind_dklick: Kommt nur mit NFATS=2 klar
---
> '
7268c7367
<   LOCAL a%,aa%,cl%,cz%,fatdiff%
---
>   LOCAL a%,aa%,cl%,cz%
7274,7277c7373
<     IF lgs%>0 AND lgs%<len_fat%*2+1     ! = FAT
<       IF lgs%>len_fat%
<         fatdiff%=len_fat%
<       ENDIF
---
>     IF lgs%>=anf_fat1% AND lgs%<anf_dir%  ! = FAT
7279c7375
<       IF bflag%=1
---
>       IF (bflag% AND 1)<>0
7281c7377
<         ADD cz%,((lgs%-1-fatdiff%)*bps%)/2
---
>         ADD cz%,(((lgs%-anf_fat1%) MOD len_fat%)*bps%) DIV 2
7284c7380
<         ADD cz%,((lgs%-1-fatdiff%)*bps%)/1.5
---
>         ADD cz%,(((lgs%-anf_fat1%) MOD len_fat%)*bps%)/1.5
7288c7384
<       IF lgs%>len_fat%*2                ! woanders = DIR ?
---
>       IF lgs%>=anf_dir%                   ! woanders = DIR ?
7292c7388
<           lgs%=(cl%-2)*spc%+len_fat%*2+len_dir%+1
---
>           lgs%=anf_dat%+(cl%-2)*spc%
7294c7390
<           lgs%=anf_fat2%+len_fat%
---
>           lgs%=anf_dir%
7799,7800c7895,7896
<   tx%=((wi%(nr%,1)+1+7) DIV 8)*8    ! X- Ausgabe
<   ty%=wi%(nr%,2)+2*z.hoehe%+0       ! Y-   "
---
>   tx%=((wi%(nr%,1)+1+7) DIV 8)*8    ! x-Ausgabe
>   ty%=wi%(nr%,2)+2*z.hoehe%+0       ! y-   "
8033c8129
<           '        Opcode,Struct,X-Pos,  Y- ,   Spalte,Zeile,Byte(-1=alles)
---
>           '        Opcode,Struct,x-Pos,  y- ,   Spalte,Zeile,Byte(-1=alles)
8089c8185
<   '         Opcode,Struct,X-Pos,Y-,Spalten,Zeilen,alles)
---
>   '         Opcode,Struct,x-Pos,y-,Spalten,Zeilen,alles)
8105c8201
<   '         Opcode,Struct,X-Pos,Y- ,Spalten,Zeilen,Nummer des Bytes(-1 = alles)
---
>   '         Opcode,Struct,x-Pos,y- ,Spalten,Zeilen,Nummer des Bytes(-1 = alles)
8148c8244
<   '         Op, Strukt,  X-,Y-,Spalten, first Revers, last Revers
---
>   '         Op, Strukt,  x-,y-,Spalten, first Revers, last Revers
8560c8656
<       wwa%=@alrt(2,"Daten sichern...",1,"Puffer|Block|Abbruch")
---
>       wwa%=@alrt(2,"Daten sichern ...",1,"Puffer|Block|Abbruch")
8566c8662
<       wwa%=@alrt(2,"Textfenster sichern...",1,"Puffer|Block|Abbruch")
---
>       wwa%=@alrt(2,"Textfenster sichern ...",1,"Puffer|Block|Abbruch")
8580c8676
<       wwa%=@alrt(2,"Was drucken...",1,"Puffer|Block|Abbruch")
---
>       wwa%=@alrt(2,"Was drucken?",1,"Puffer|Block|Abbruch")
8586c8682
<       wwa%=@alrt(2,"Textfenster drucken...",1,"Puffer|Block|Abbruch")
---
>       wwa%=@alrt(2,"Was aus dem Textfenster drucken?",1,"Puffer|Block|Abbruch")
8603c8699
<   LOCAL a%,b,bbps%,c%,ex_obj&,oldlgs%,a$,b$,bb$
---
>   LOCAL a%,b,bbps%,c%,ex_obj&,oldlgs%,t%,a$,b$,bb$
8613c8709
<     IF bflag%>0
---
>     IF (bflag% AND 1)<>0
8619,8621c8715,8722
<     a%=spd%/spc%*b/bbps%        ! Kontrolle ob FAT zu klein
<     IF c%<a%
<       ~@alrt(3,"FAT zu klein !!! |Sollte "+STR$(a%)+" Sektoren|gross sein",1,"Aha")
---
>     t%=@readmot(19)                         ! Anzahl der Sektoren als Wort
>     IF t%=0
>       t%=SHL(@readmot(34),16)+@readmot(32)  ! Anzahl der Sektoren als Langwort
>     ENDIF
>     a%=(t%-@readmot(14)-BYTE{buf%+16}*c%-@readmot(17)*32/bbps%)/BYTE{buf%+13}+2  ! benîtigte FAT-EintrÑge
>     a%=(a%*b+bbps%-1)/bbps%  ! benîtigte FAT-Sektoren
>     IF c%<a%                 ! reichen die FAT-Sektoren?
>       ~@alrt(3,"FAT-Grîûe im Bootsektor zu klein!!! |Muû "+STR$(a%)+" Sektoren|groû sein!",1," Aha ")
8632c8733
<     put_wert(boot.dat%,bd5&,@readmot(19),7)
---
>     put_wert(boot.dat%,bd5&,t%,7)
8652c8753
<   ' sonstige INFO's
---
>   ' sonstige INFOS
8659c8760
<   lgs%=anf_fat2%+len_fat%               ! Anfang Directory
---
>   lgs%=anf_dir%                         ! Anfang Directory
8664c8765
<     EXIT IF BYTE{buf%+zg%}=0 OR lgs%>=(anf_fat2%+len_fat%+len_dir%)
---
>     EXIT IF BYTE{buf%+zg%}=0 OR lgs%>=anf_dat%
8676,8679d8776
<   IF lgs%>=anf_fat2%+len_fat%+len_dir%
<     lgs%=anf_fat2%+len_fat%
<     lesen
<   ENDIF
8689c8786
<     ~@alrt(1,"Auch eine leeres Laufwerk belegt |FAT+Directory !",1,"Aha")
---
>     ~@alrt(1,"Auch eine leeres Laufwerk belegt |FAT+Directory!",1," Aha ")
8714c8811
<             REPEAT
---
>             REPEAT  ! Pseudoschleife
8729,8731c8826,8830
<       a%=@get_val(boot.dat%,bd9&)       ! Serie
<       CARD{buf%+8}=(a% AND &HFFFF00) DIV 256
<       BYTE{buf%+10}=a% AND &HFF
---
>       IF drive%<2
>         a%=@get_val(boot.dat%,bd9&)     ! Serie
>         CARD{buf%+8}=(a% AND &HFFFF00) DIV 256
>         BYTE{buf%+10}=a% AND &HFF
>       ENDIF
8740c8839,8845
<       put_in_bootsec(19,spd%)
---
>       IF spd%<&H10000                   !RS: Langwortversion von readmot/put_in_bootsec?
>         put_in_bootsec(19,spd%)         ! Anzahl der Sektoren als Wort
>       ELSE
>         put_in_bootsec(19,0)
>         put_in_bootsec(32,spd% AND &HFFFF) ! Anzahl der Sektoren als Langwort
>         put_in_bootsec(34,SHR(spd%,16))
>       ENDIF
8747c8852
<       anf_dat%=@get_val(boot.dat%,bp6&) ! 1.Datensektor
---
>       anf_dat%=@get_val(boot.dat%,bp6&) ! 1. Datensektor
8756c8861
<       a%=VAL(@term$("$"+a$))
---
>       a%=VAL("$"+a$)
8820c8925
<       ~@alrt(3,"Kein BIOS-Parameterblock!|Setze Standardwerte ein |sonst SYSTEM-CRASH !",0," Ok ")
---
>       ~@alrt(3,"Kein BIOS-Parameterblock!|Setze Standardwerte ein, |sonst SYSTEM-CRASH!",0," Ok ")
8823c8928
<       IF bflag%=0
---
>       IF (bflag% AND 1)=0
8885c8990
<   a$="ACHTUNG:|Laufwerk "+CHR$(drive%+65)+" mit|"+STR$(cpd%*spc%)+" Sektoren wird gelîscht!"
---
>   a$="ACHTUNG:|Laufwerk "+CHR$(drive%+65)+" mit|"+STR$(spd%)+" Sektoren wird gelîscht!"
8891c8996
<         start%=spd%-2
---
>         start%=spd%
8894c8999
<         start%=len_fat%*2+len_dir%
---
>         start%=anf_dat%
8904c9009
<         FOR lgs%=start% TO 2 STEP -2
---
>         FOR lgs%=start%-2 TO anf_dir% STEP -2
8909c9014
<           status%=BIOS(4,1,L:buf%,2,lgs%,drive%)
---
>           status%=@rwabs(1,buf%,2,lgs%,drive%)
8912c9017
<         lgs%=1
---
>         lgs%=anf_dir%
8914c9019
<           status%=BIOS(4,1,L:buf%,1,lgs%,drive%)
---
>           status%=@rwabs(1,buf%,1,lgs%,drive%)
8916c9021
<         a$="Sektor: "+RIGHT$(n$+STR$(lgs%),5)
---
>         a$="FAT lîschen"
8928a9034
> '
8944c9050
<       FOR lgs%=0 TO len_fat%*2+len_dir%
---
>       FOR lgs%=0 TO anf_dat%-1
8946c9052
<         do_list
---
>         ' do_list  ! dauert zu lange
8953c9059
<       ~@alrt(3,"Bitte nicht auf | dasselbe Laufwerk | DISC-SAVE !",3,"Ok")
---
>       ~@alrt(3,"Bitte nicht auf|dasselbe Laufwerk! | DISK-SAVE!",3," Ok ")
8963c9069
<   fi$=@fsel$("*.DAT","SAVE_"+CHR$(drive%+65)+".DAT","Disc-Load",5)
---
>   fi$=@fsel$("*.DAT","SAVE_"+CHR$(drive%+65)+".DAT","Disk-Load",5)
8984a9091
> '
9033,9034c9140,9141
<       EXIT IF @was_ist>0 OR lgs%>=spd%-1
<       a1%=MIN(a1%,spd%-lgs%-1)
---
>       EXIT IF @was_ist>0 OR lgs%>=spd%
>       a1%=MIN(a1%,spd%-lgs%)
9052c9159
<         status%=BIOS(4,2,L:a2%,a1%,lgs%,drive%)
---
>         status%=@rwabs(2,a2%,a1%,lgs%,drive%)
9057c9164
<             status%=BIOS(4,2,L:buf%,1,lgs%,drive%)
---
>             status%=@rwabs(2,buf%,1,lgs%,drive%)
9070c9177
<       IF @alrt(2,STR$(b%)+" defekte Sektoren gefunden | FAT schreiben? ",0,wa$)=1
---
>       IF @alrt(2,STR$(b%)+" defekte Sektoren gefunden! | FAT schreiben?",0,wa$)=1
9076c9183
<     IF a2%>0
---
>     IF a1%>1  ! Wurde Puffer per Malloc() reserviert?
9094,9095c9201,9202
<   cl%=MAX(0,INT((a%-anf_dat%)/spc%)+2)
<   IF cl%>0
---
>   cl%=INT((a%-anf_dat%)/spc%)+2
>   IF cl%>=2
9235c9342
<         sch%=@alrt(2,"Cluster ist nicht frei ",1,"Abbruch")
---
>         sch%=@alrt(2,"Cluster ist nicht frei. ",1,"Abbruch")
9240c9347
<       dmt%=@alrt(2,"Repair ohne RÅckfragen?",1,"Ohne|Mit")
---
>       dmt%=@alrt(2,"Repair ohne RÅckfragen?",1," Ohne |Mit")
9245c9352
<           EXIT IF bac%>cpd%
---
>           EXIT IF bac%>=cpd%+2
9282c9389
<         EXIT IF bac%>cpd% OR rrg%=4
---
>         EXIT IF bac%>=cpd%+2 OR rrg%=4
9294,9295c9401,9402
<         IF (att%(sf%) AND 16)>0   ! Ordner?
<           dv%=@alrt(2,"Das ist Verzeichnis. |Weitersuchen?",1,"Ja|Nein|Abbruch")
---
>         IF (att%(sf%) AND 16)<>0   ! Ordner?
>           dv%=@alrt(2,"Das ist ein Verzeichnis. |Weitersuchen?",1,"Ja|Nein|Abbruch")
9320c9427
<           status%=BIOS(4,0,L:VARPTR(bb$),1,sektor%,drive%)
---
>           status%=@rwabs(0,VARPTR(bb$),1,sektor%,drive%)
9333c9440
<               status%=BIOS(4,1,L:VARPTR(bb$),1,sektor%,drive%)
---
>               status%=@rwabs(1,VARPTR(bb$),1,sektor%,drive%)
9402c9509
<     ~@alrt(3,"In welche Datei|soll ich schreiben ?",1,"Abbruch")
---
>     ~@alrt(3,"In welche Datei|soll ich schreiben?",1,"Abbruch")
9428c9535
< PROCEDURE file_compare  ! 2 Dateien(Pfade) vergleichen
---
> PROCEDURE file_compare  ! 2 Dateien (Pfade) vergleichen
9463c9570
<         DEC a%          ! da erst der 2.Name gefunden wird, eine Zeile drÅber
---
>         DEC a%          ! da erst der 2. Name gefunden wird, eine Zeile drÅber
9530c9637
<       dev("Datei aufteilen - 1.Datei",35)
---
>       dev("Datei aufteilen - 1. Datei",35)
9549c9656
<         dev("Datei aufteilen - 2.Datei",36)
---
>         dev("Datei aufteilen - 2. Datei",36)
9571c9678
<     ~@alrt(3,"Bitte Datei erst îffnen",1,"Mach ich")
---
>     ~@alrt(3,"Bitte Datei erst îffnen.",1,"Mach ich")
9655c9762
<     IF @alrt(2,RIGHT$(fi$,38)+"|lîschen ???",0,wa$)=1
---
>     IF @alrt(2,RIGHT$(fi$,38)+"|lîschen???",0,wa$)=1
9839c9946
<   out(STR$(total%)+" Dateien sind zu vergleichen...")
---
>   out(STR$(total%)+" Dateien sind zu vergleichen ...")
9851c9958
<     DEC j%      ! 1.Zeichen das nicht gleich ist
---
>     DEC j%      ! 1. Zeichen das nicht gleich ist
9898c10005
<     erg%=@alrt(1,"Sektoren einzeln kopieren?",1,"Ja|Nein")
---
>     erg%=@alrt(1,"Sektoren einzeln kopieren?",1,"Ja| Nein ")
9903c10010
<     IF a2%>0                            ! Speicher da ?
---
>     IF a2%>0                            ! Speicher da?
9907c10014
<       IF fhandle%>0                     ! Ohne Fehler ?
---
>       IF fhandle%>0                     ! Ohne Fehler?
9916c10023
<       IF fhandle%>0                     ! Ohne Fehler ?
---
>       IF fhandle%>0                     ! Ohne Fehler?
9947c10054
<       ~@alrt(1,"Datei kann nicht verÑndert werden!",1,"Aha")
---
>       ~@alrt(1,"Datei kann nicht verÑndert werden!",1," Aha ")
9998a10106,10121
>     OB_TYPE(d.atei%,dat4&)=OB_TYPE(d.atei%,dat4&) AND &HFF  !RS: In der Resource Ñndern!
>     OB_TYPE(d.atei%,dat5&)=OB_TYPE(d.atei%,dat5&) AND &HFF  !RS: "
>     IF (d.attr% AND &H18)=8     ! DatentrÑgername
>       OB_TYPE(d.atei%,dat1&)=OB_TYPE(d.atei%,dat1&) AND &HFF
>       OB_TYPE(d.atei%,dat2&)=OB_TYPE(d.atei%,dat2&) AND &HFF
>       OB_TYPE(d.atei%,dat3&)=OB_TYPE(d.atei%,dat3&) AND &HFF
>       ' Ist von MS-DOS oder Mac das Archiv-Bit gesetzt, lÑût es sich lîschen.
>       IF (d.attr% AND &H20)=0
>         OB_TYPE(d.atei%,dat6&)=OB_TYPE(d.atei%,dat6&) AND &HFF
>       ENDIF
>     ELSE
>       OB_TYPE(d.atei%,dat1&)=OB_TYPE(d.atei%,dat1&) OR &H1200
>       OB_TYPE(d.atei%,dat2&)=OB_TYPE(d.atei%,dat2&) OR &H1200
>       OB_TYPE(d.atei%,dat3&)=OB_TYPE(d.atei%,dat3&) OR &H1200
>       OB_TYPE(d.atei%,dat6&)=OB_TYPE(d.atei%,dat6&) OR &H1200
>     ENDIF
10003d10125
<     bra$=@fread$(fhandle%,2)    ! Byte 0+1 lesen
10013a10136
>     bra$=LEFT$(buf$,2)          ! Byte 0+1 lesen
10039c10162
<     ~@fclose(fhandle%)                  ! Datei schliessen
---
>     ~@fclose(fhandle%)                  ! Datei schlieûen
10043a10167
>     ' tm$=tm$+RIGHT$(n$+STR$((tm% AND 31)*2),2)  RS: BUG: erst Resource Ñndern!
10062c10186
<       tm%=VAL(LEFT$(b$,2))*2048+VAL(MID$(b$,3,2))*32
---
>       tm%=VAL(LEFT$(b$,2))*2048+VAL(MID$(b$,3,2))*32+VAL(MID$(b$,5,2))/2
10071,10089c10195,10215
<         CLR a%                          ! Header bearbeiten
<         j&=dath1&
<         FOR i%=0 TO 7
<           IF (OB_STATE(d.atei%,j&) AND 2)>0 AND i%<>3
<             a%=a% OR 2^i%
<           ENDIF
<           INC j&
<         NEXT i%
<         '
<         b%=@get_val(d.atei%,dath4&)
<         b%=SHL(b%,28)
<         a%=(a% AND &HFFFFFFF) OR b%
<         ' ----------------
<         ~@fseek(22,fhandle%,0)          ! Pointer auf Datei-Headerbits
<         IF a%<>d.header%                ! wenn sich was geÑndert hat
<           IF (d.attr% AND 1)>0          ! STATUS: NUR LESEN ?
<             ~@alrt(3,"Datei hat Status 'NUR LESEN' ",1,"Abbruch")
<           ELSE
<             fwrite(fhandle%,MKL$(a%))   ! sonst schreiben
---
>         IF CVI(bra$)=&H601A             ! Programmdatei?
>           CLR a%                        ! Header bearbeiten
>           j&=dath1&
>           FOR i%=0 TO 7
>             IF (OB_STATE(d.atei%,j&) AND 2)>0 AND i%<>3
>               a%=a% OR 2^i%
>             ENDIF
>             INC j&
>           NEXT i%
>           '
>           b%=@get_val(d.atei%,dath4&)
>           b%=SHL(b%,28)
>           a%=(a% AND &HFFFFFFF) OR b%
>           ' ----------------
>           ~@fseek(22,fhandle%,0)        ! Pointer auf Datei-Headerbits
>           IF a%<>d.header%              ! wenn sich was geÑndert hat
>             IF (d.attr% AND 1)<>0       ! STATUS: NUR LESEN?
>               ~@alrt(3,"Datei hat Status 'NUR LESEN'! ",1,"Abbruch")
>             ELSE
>               fwrite(fhandle%,MKL$(a%)) ! sonst schreiben
>             ENDIF
10092c10218
<         ~@fclose(fhandle%)              ! Datei schliessen
---
>         ~@fclose(fhandle%)              ! Datei schlieûen
10098c10224
<         IF (OB_STATE(d.atei%,j&) AND 2)>0
---
>         IF (OB_STATE(d.atei%,j&) AND 2)<>0
10112c10238,10246
<         IF @frename(fi$,new$)=0 AND fi$=fi_o$
---
>         IF (d.attr% AND &H18)=8         ! DatentrÑgername
>           a%=@fcreate(new$,8)
>           IF a%>0
>             ~@fclose(a%)
>           ENDIF
>         ELSE
>           a%=@frename(fi$,new$)
>         ENDIF
>         IF a%=0 AND fi$=fi_o$
10175c10309
<             EXIT IF aa%=ed%
---
>             EXIT IF aa%>=ed%-7
10240c10374
<       IF (att%(i%) AND 16)>0
---
>       IF (att%(i%) AND 16)<>0
10242,10243c10376
<       ENDIF
<       IF (att%(i%) AND 8)>0
---
>       ELSE IF (att%(i%) AND 8)<>0
10246,10247c10379
<       ENDIF
<       IF (att%(i%) AND 7)>0
---
>       ELSE IF (att%(i%) AND 7)<>0
10275,10279c10407,10412
<       IF (att%(a%) AND (16+8))=0
<         do_datei_info(file$(a%))
<       ELSE
<         ~@alrt(1,"Das geht nur mit Dateien",1,"Aha")
<       ENDIF
---
>       ' RS: Test: Namen lassen sich Ñndern. Mit BigDOS auch Zeit und Hidden-/System-Attribut.
>       ' IF (att%(a%) AND (16+8))=0
>       do_datei_info(file$(a%))
>       ' ELSE
>       '  ~@alrt(1,"Das geht nur mit Dateien!",1," Aha ")
>       ' ENDIF
10297,10298c10430,10431
<   change_pfad(20,drive%)!                       In Pfad Nummer 20 Laufwerk umstellen
<   fi$=@fsel$("*.*","","Ordner umbenennen",20)!  Fileselektor aufrufen, Zielpfad holen
---
>   change_pfad(20,drive%)                      ! In Pfad Nummer 20 Laufwerk umstellen
>   fi$=@fsel$("*.*","","Ordner umbenennen",20) ! Fileselektor aufrufen, Zielpfad holen
10300,10306c10433,10439
<     IF @media(drive%)=0 !                       Auf Laufwerk drive% Wechsel auslîsen
<       ~@chk_drv(fi$) !                          Eventuell auf neues Laufwerk umstellen
<       bb$=STRING$(bps%*spc%,0) !                Clusterpuffer anlegen
<       find_files !                              Dateibaum durchsuchen
<       disc_on !                                 In Diskmodus umschalten
<       fld$=@get_fld_name$(fi$)  !               Ordnernamen holen aus Pfadnamen
<       a$=LEFT$(fi$,LEN(fi$)-1) !                Backslash am Ende entfernen
---
>     IF @media(drive%)=0                       ! Auf Laufwerk drive% Wechsel auslîsen
>       ~@chk_drv(fi$)                          ! Eventuell auf neues Laufwerk umstellen
>       bb$=STRING$(bps%*spc%,0)                ! Clusterpuffer anlegen
>       find_files                              ! Dateibaum durchsuchen
>       disc_on                                 ! In Diskmodus umschalten
>       fld$=@get_fld_name$(fi$)                ! Ordnernamen holen aus Pfadnamen
>       a$=LEFT$(fi$,LEN(fi$)-1)                ! Backslash am Ende entfernen
10310,10314c10443,10447
<         cl%=cluster%(i%) !                      Cluster des Ordners holen
<         a$=file$(i%) !                          Dateiname holen
<         a$=RIGHT$(a$,LEN(a$)-RINSTR(a$,"\")) !  Pfadanteil wegfiltern
<         folder$=@nam_conv$(a$,1) !              Pfadname
<         lgs%=sec%(i%)                   !       Sektor, in dem Ordner steht
---
>         cl%=cluster%(i%)                      ! Cluster des Ordners holen
>         a$=file$(i%)                          ! Dateiname holen
>         a$=RIGHT$(a$,LEN(a$)-RINSTR(a$,"\"))  ! Pfadanteil wegfiltern
>         folder$=@nam_conv$(a$,1)              ! Pfadname
>         lgs%=sec%(i%)                         ! Sektor, in dem Ordner steht
10317c10450
<         status%=BIOS(4,0,L:V:bb$,spc%,lgs%,drive%) ! Cluster lesen
---
>         status%=@rwabs(0,V:bb$,spc%,lgs%,drive%) ! Cluster lesen
10321,10322c10454,10455
<         WHILE i%<bps%*spc%-32 AND ab%=0 !       Cluster nach EintrÑgen absuchen
<           EXIT IF ASC(MID$(bb$,i%,1))=0 !       letzter Eintrag (beginnt mit 0)
---
>         WHILE i%<bps%*spc%-32 AND ab%=0       ! Cluster nach EintrÑgen absuchen
>           EXIT IF ASC(MID$(bb$,i%,1))=0       ! letzter Eintrag (beginnt mit 0)
10324c10457
<           IF MID$(bb$,i%,11)=folder$ !          Ist das unser Ordner?
---
>           IF MID$(bb$,i%,11)=folder$          ! Ist das unser Ordner?
10329c10462
<               status%=BIOS(4,1,L:V:bb$,spc%,lgs%,drive%) ! Cluster schreiben
---
>               status%=@rwabs(1,V:bb$,spc%,lgs%,drive%) ! Cluster schreiben
10332c10465
<             ab%=1 !                             gefunden
---
>             ab%=1                             ! gefunden
10335c10468
<           ADD i%,32 !                           nÑchster Eintrag
---
>           ADD i%,32                           ! nÑchster Eintrag
10380c10513
<         ~@alrt(3,"Ordner nicht gefunden!",1,"Dumm")
---
>         ~@alrt(3,"Ordner nicht gefunden!",1," Dumm ")
10436c10569
<           IF ASC(a$)<>46                                ! "." oder ".." ?
---
>           IF ASC(a$)<>46                                ! "." oder ".."?
10439c10572
<           IF (BYTE{buf%+zg%+11} AND 16)                 ! Ordner ?
---
>           IF (BYTE{buf%+zg%+11} AND 16)                 ! Ordner?
10665c10798
<   IF fehler%<5
---
>   IF fehler%<0
10681c10814
<     err_inf1(fehler%," Fopen: "+df$,gm$)
---
>     err_inf1(fehler%,"Fopen: "+df$,gm$)
10723c10856
<   IF (a% AND 1)>0       ! SchreibgeschÅtzt?
---
>   IF (a% AND 1)<>0       ! SchreibgeschÅtzt?
10750c10883
<     err_inf1(fehler%,"Fread:Lesen",gm$)
---
>     err_inf1(fehler%,"Fread: Lesen",gm$)
10806c10939
<   IF NOT GEMDOS(78,L:VARPTR(all$),&X110111)     ! Fsfirst
---
>   IF GEMDOS(78,L:VARPTR(all$),&X110111)=0     ! Fsfirst
10811c10944
<       IF (ASC(MID$(dta$,22,1)) AND 16)>0  ! Ordner?
---
>       IF (ASC(MID$(dta$,22,1)) AND 16)<>0  ! Ordner?
11046c11179
<     IF (ev_ks& AND 8)>0         ! = ALT
---
>     IF (ev_ks& AND 8)<>0        ! = ALT
11049c11182
<       IF (ev_ks& AND 4)>0       ! = CTRL
---
>       IF (ev_ks& AND 4)<>0      ! = CTRL
11292c11425
<       WHILE b%<=c%       ! schon am Ende ?
---
>       WHILE b%<=c%       ! schon am Ende?
11379c11512
< PROCEDURE ctrl_h              ! Block markierung lîschen
---
> PROCEDURE ctrl_h              ! Blockmarkierung lîschen
12350c12483
<     cluster%=MAX(0,INT((lgs%-anf_dat%)/spc%)+2)
---
>     cluster%=INT((lgs%-anf_dat%)/spc%)+2
12352c12485,12500
<     MID$(info_line$,12)="Clu:"+@dec_hex_val$(cluster%,5)
---
>     IF cluster%<2                 ! Systembereich
>       CLR cluster%
>       IF lgs%>=anf_dir%
>         MID$(info_line$,12)="Clu:_ROOT"
>       ELSE IF lgs%>=anf_fat2% AND (bflag% AND 2)<>0
>         MID$(info_line$,12)="Clu:_FAT "
>       ELSE IF lgs%>=anf_fat2%
>         MID$(info_line$,12)="Clu:_FAT2"
>       ELSE IF lgs%>=anf_fat1%
>         MID$(info_line$,12)="Clu:_FAT1"
>       ELSE
>         MID$(info_line$,12)="Clu:_BOOT"
>       ENDIF
>     ELSE                          ! Datenbereich
>       MID$(info_line$,12)="Clu:"+@dec_hex_val$(cluster%,5)
>     ENDIF
12418c12566
<     wwa%=@alrt(2,"Programm ausfÅhren ?|"+a$,1,"Ok|Abbruch")
---
>     wwa%=@alrt(2,"Programm ausfÅhren?|"+a$,1,"Ok|Abbruch")
12457d12604
<       v_enter_cur(scr_handle%)
12460,12461c12607,12610
<       IF b$<>"TTP" AND b$<>"TOS"
<         v_exit_cur(scr_handle%)
---
>       IF b$="TTP" OR b$="TOS"
>         v_enter_cur(scr_handle%)
>       ELSE
>         ' v_exit_cur(scr_handle%)
12472,12473c12621,12623
<       IF GEMDOS(75,0,L:V:fi$,L:V:ttp$,L:V:env$)<>0
<         ~@alrt(3,"PEXEC-Fehler: "+STR$(a%)+"  ",1,"&%$›")
---
>       a%=GEMDOS(75,0,L:V:fi$,L:V:ttp$,L:V:env$)<>0
>       IF a%<>0
>         ~@alrt(3,"PEXEC-Fehler "+STR$(a%)+"|oder|Programm meldet "+STR$(a% AND &HFFFF),1," &%$› ")
12486c12636
<         IF rom_version%>=&H104
---
>         IF CARD{LONG{GB+4}}>=&H140
12555c12705
<   wwa%=@alrt(4,ver$+" |Der etwas andere Diskmonitor |aus dem SCHEIBENKLEISTER",4,"Kleister|SED|Hilfe|Danke")
---
>   wwa%=@alrt(4,ver$+"|Modifiziert 1995-04-04 von Rainer Seitel @ KA|Der etwas andere Diskmonitor |aus dem SCHEIBENKLEISTER",4,"Kleister|SED|Hilfe|Danke")
12570c12720
<   IF @alrt(2,"Ist fÅr heute wirklich Schluû ?",1,"Schluss|Nie")=1
---
>   IF @alrt(2,"Ist fÅr heute wirklich Schluû?",1," Schluû |Nie")=1
12698c12848
<         a%=(ASC(search$)+1) AND &HFF    ! FÅllmuster nach Suchstring Ñndern !
---
>         a%=(ASC(search$)+1) AND &HFF    ! FÅllmuster nach Suchstring Ñndern!
12740c12890
<         IF b%>0                 ! was gefunden ?
---
>         IF b%>0                 ! was gefunden?
12761c12911
<         search_lesen(sbg%-1)                   ! ab 2.Block im String lesen
---
>         search_lesen(sbg%-1)                   ! ab 2. Block im String lesen
12769c12919
<         ~@alrt(3,"Keine (weitere) |Fundstelle!",1,"Ok")
---
>         ~@alrt(3,"Keine (weitere) |Fundstelle!",1," Ok ")
12792,12793c12942,12943
<     IF lgs%+a2%>spd%-1
<       a2%=spd%-lgs%-1
---
>     IF lgs%+a2%>spd%
>       a2%=spd%-lgs%
12796c12946
<     status%=BIOS(4,2,L:a1%,a2%,lgs%,drive%)
---
>     status%=@rwabs(2,a1%,a2%,lgs%,drive%)
12843c12993
<       DEC lll%                  ! ja, mehrere Blocks gelesen...
---
>       DEC lll%                  ! ja, mehrere Blocks gelesen ...
12918c13068
<         ~@alrt(3,"Hex-Data falsch ",1,"Ok")
---
>         ~@alrt(3,"Hex-Data falsch! ",1," Ok ")
12935c13085
<           ~@alrt(3,"Dezimale Werte |zwischen 0 und 255!",1,"Ok")
---
>           ~@alrt(3,"Dezimale Werte |zwischen 0 und 255!",1," Ok ")
12950c13100
<             ~@alrt(3,"BinÑre Werte max. 8 Bit! ",1,"Ok")
---
>             ~@alrt(3,"BinÑre Werte max. 8 Bit! ",1," Ok ")
13100c13250
<       ~@alrt(1,"CRC-PrÅfsumme des  |markierten Blocks :|$"+a$,1,"OK")
---
>       ~@alrt(1,"CRC-PrÅfsumme des|markierten Blocks:|$"+a$,1," OK ")
13102c13252
<       ~@alrt(3,"Kein Block markiert !",1,"Hmmmm")
---
>       ~@alrt(3,"Kein Block markiert!",1,"Hmmmm")
13489c13639
<     clr_state(h.elp%,ex_obj&,1)         ! selected ?
---
>     clr_state(h.elp%,ex_obj&,1)         ! selected?
13585c13735
<   pfad$(46)=pfad$(29)           ! fÅrs speichern des Textes (Hi Claus...)
---
>   pfad$(46)=pfad$(29)           ! fÅrs Speichern des Textes (Hi Claus ...)
13595c13745
<     ~@alrt(3,"Kein Fehler, keine Nachrichten",1,"Gut so")
---
>     ~@alrt(3,"Kein Fehler, keine Nachrichten.",1,"Gut so")
13782c13932
<       WHILE b%<c%       ! schon am Ende ?
---
>       WHILE b%<c%       ! schon am Ende?
13872c14022
<     erg2%=@alrt(3,"Fehlerseite ist voll",1,"Danke|Lîschen")
---
>     erg2%=@alrt(3,"Fehlerseite ist voll.",1,"Danke|Lîschen")
13889c14039
<   cluster%=MIN(cluster%,cpd%)
---
>   cluster%=MIN(cluster%,cpd%+1)
13905,13906c14055,14056
<         a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<         cluster%=MIN(cpd%-1,VAL(a$))
---
>         a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>         cluster%=MIN(cpd%+1,VAL(a$))
13912,13913c14062,14063
<         a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<         cluster%=MIN(cpd%-1,VAL(a$))
---
>         a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>         cluster%=MIN(cpd%+1,VAL(a$))
13918c14068
<         a$=STR$(cpd%-1)
---
>         cluster%=cpd%+1
13920c14070
<         a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
---
>         cluster%=MIN(VAL(CHAR{{OB_SPEC(f.at%,fat_nr&)}})+1,cpd%+1)
13922d14071
<       cluster%=MIN(VAL(a$)+1,cpd%-1)
13926c14075
<         a$="0"
---
>         cluster%=2
13928c14077
<         a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
---
>         cluster%=MAX(2,VAL(CHAR{{OB_SPEC(f.at%,fat_nr&)}})-1)
13930d14078
<       cluster%=MAX(0,VAL(a$)-1)
13933c14081
<       a$=@term$(CHAR{{OB_SPEC(f.at%,fwrt&)}})
---
>       a$=CHAR{{OB_SPEC(f.at%,fwrt&)}}
13935c14083
<       IF @alrt(2,"FAT zurÅckschreiben",0,wa$)=1
---
>       IF @alrt(2,"FAT zurÅckschreiben?",0,wa$)=1
13942,13943c14090,14091
<       a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<       cluster%=MIN(cpd%-1,VAL(a$))
---
>       a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>       cluster%=MIN(cpd%+1,VAL(a$))
13947,13948c14095,14096
<       a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<       cluster%=MIN(cpd%-1,VAL(a$))
---
>       a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>       cluster%=MIN(cpd%+1,VAL(a$))
13952,13953c14100,14101
<       a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<       cluster%=MIN(cpd%-1,VAL(a$))
---
>       a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>       cluster%=MIN(cpd%+1,VAL(a$))
13964,13965c14112,14113
<   a$=@term$(CHAR{{OB_SPEC(f.at%,fat_nr&)}})
<   set_cursor_in_fat(MAX(0,VAL(a$)-1))
---
>   a$=CHAR{{OB_SPEC(f.at%,fat_nr&)}}
>   set_cursor_in_fat(MAX(0,VAL(a$)))
13975c14123
<   LOCAL a$,fac$,cl%,j%,aa%,anz%
---
>   LOCAL a$,fac$,cl%,j%,anz%
13990c14138
<       ~@alrt(1,"Wurzelverzeichnis ab Sektor "+STR$(lgs%)+" |fÅr "+STR$(len_dir%)+" Sektoren ",1,"Aha")
---
>       ~@alrt(1,"Wurzelverzeichnis ab Sektor "+STR$(lgs%)+" |fÅr "+STR$(len_dir%)+" Sektoren.",1," Aha ")
14008c14156,14157
<         DO
---
>         ' DO
>         REPEAT
14012d14160
<             aa%=@read_in_fat(cl%)
14014,14015c14162,14163
<             cl%=aa%
<             EXIT IF aa%>=ed%-8 OR aa%=0 OR (aa%>=cpd% AND aa%<ed%-8)
---
>             cl%=@read_in_fat(cl%)
>             EXIT IF cl%<2 OR cl%>=cpd%+2
14018,14019c14166,14169
<           EXIT IF aa%>=ed%-8 OR aa%=0
<         LOOP
---
>           IF cl%<2 OR (cl%>=cpd%+2 AND cl%<ed%-7)
>             out("UngÅltiger Cluster-Eintrag "+@dec_hex_val$(cl%,7))
>           ENDIF
>         UNTIL cl%<2 OR cl%>=cpd%+2
14028c14178
<   .|     anf_dat%,hdl%
---
>   .|     anf_dat%,hdl%,buf%,bps%
14031c14181
<   .|     fat_get_leiche,fclose,write_fat,bios_block
---
>   .|     fat_get_leiche,fclose,write_fat,bios_block,lesen,fwrite2
14044c14194
<         ~@alrt(3,"Sammeln unbedingt auf einem|anderem Laufwerk!",1,"Ok")
---
>         ~@alrt(3,"Sammeln unbedingt auf einem|anderen Laufwerk!",1," Ok ")
14050c14200
<           FOR fat_tst%=2 TO cpd%
---
>           FOR fat_tst%=2 TO cpd%+1
14061,14063c14211,14214
<                   fat_get_leiche
<                   INC lgs%
<                   fat_get_leiche
---
>                   FOR lgs%=lgs% TO lgs%+spc%-1
>                     lesen
>                     fwrite2(hdl%,buf%,bps%)
>                   NEXT lgs%
14068,14070d14218
<           IF fterg%=1
<             ~@fclose(hdl%)
<           ENDIF
14072c14220
<             IF @alrt(2,STR$(fu%)+" Leichencluster gefunden.|Sollen diese Cluster |freigegeben werden?",0,"Ja|Nein")=1
---
>             IF @alrt(2,STR$(fu%)+" Leichencluster gefunden.|Sollen diese Cluster|freigegeben werden?",0,"Ja| Nein ")=1
14080a14229,14231
>       IF fterg%=1
>         ~@fclose(hdl%)
>       ENDIF
14084,14090d14234
< PROCEDURE fat_get_leiche
<   .| Glob. Var.: hdl%,buf%,bps%
<   .| Ruft auf  : lesen,fwrite2
<   .| Aufruf in : fat_test-2,
<   lesen
<   fwrite2(hdl%,buf%,bps%)
< RETURN
14113d14256
<         akt_cl%=1
14115c14258,14259
<         IF cl%<cpd%
---
>         IF cl%>=2 AND cl%<cpd%+2
>           akt_cl%=1
14124d14267
<               INC akt_cl%
14126,14130c14269
<               IF aa%>=cpd% AND aa%<ed%
<                 err_inf3(cl%,"Clusternummer zu gross","Clusternummer=")
<                 aa%=cc%
<               ENDIF
<               EXIT IF fer%>=max_err% OR aa%>=cc%
---
>               EXIT IF aa%<2 OR aa%>=cpd%+2
14131a14271
>               INC akt_cl%
14142c14282,14294
<           IF (aa%=0 AND laenge%(fat_tst%)<>0)
---
>           IF aa%=0 AND laenge%(fat_tst%)<>0
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Freier Cluster in Datei "+f$,"Clusternummer=")
>           ENDIF
>           IF aa%=1
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Clustereintrag = 1 in Datei "+f$,"Clusternummer=")
>           ENDIF
>           IF aa%>=cpd%+2 AND aa%<cc%
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Clustereintrag zu groû in Datei "+f$,"Clusternummer=")
>           ENDIF
>           IF aa%=cc%
14144c14296
<             err_inf3(cl%,"Clustereintrag=0 in Datei "+f$,"Clusternummer=")
---
>             err_inf3(cl%,"Defekter Cluster in Datei "+f$,"Clusternummer=")
14148a14301,14304
>             err_inf3(laenge%(fat_tst%),"FAT-Belegung < DateilÑnge in Datei: "+f$,"DIR-LÑnge=")
>           ENDIF
>           IF ((att%(fat_tst%) AND &H18)=0) AND (akt_cl%-1)*bps%*spc%>=laenge%(fat_tst%)
>             f$=file$(fat_tst%)
14151c14307,14319
<           '
---
>         ELSE
>           IF cl%=0 AND laenge%(fat_tst%)<>0
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Kein Anfangs-Cluster obwohl LÑnge > 0 in Datei "+f$,"")
>           ENDIF
>           IF cl%=1
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Anfangs-Clusternummer = 1 in Datei "+f$,"")
>           ENDIF
>           IF cl%>=cpd%+2
>             f$=file$(fat_tst%)
>             err_inf3(cl%,"Anfangs-Clusternummer zu groû in Datei "+f$,"")
>           ENDIF
14181c14349
< PROCEDURE fat_xor               ! Fat's vergleichen
---
> PROCEDURE fat_xor               ! FATs vergleichen
14191c14359
<   x%=anf_fat1%+len_fat% ! Start  der 2.FAT
---
>   x%=anf_fat1%+len_fat% ! Start  der 2. FAT
14209c14377
<     wwa%=@alrt(3,"FAT's sind verschieden!",3,"Abbruch")
---
>     wwa%=@alrt(3,"FATs sind verschieden!",3,"Abbruch")
14233,14234c14401,14402
<     FOR j%=9 TO 13
<       ab%=2^j%*spc%             ! Bytes/Cluster
---
>     FOR j%=9 TO 15
>       ab%=2^j%                  ! Bytes/Cluster
14256c14424
< PROCEDURE fat_leiche_12         ! Leichencluster prÅfen in 12 Bit FAT
---
> PROCEDURE fat_leiche_12         ! Leichencluster prÅfen in 12-Bit-FAT
14261c14429
<   cc%=ed%-15    ! defekt= FFF0-FFF7
---
>   cc%=ed%-15    ! defekt= FF0-FF7  !RS:BUG: nach ISO und MS-DOS nur $FF7!!!
14264c14432
<   FOR fat_tst%=2 TO cpd%
---
>   FOR fat_tst%=2 TO cpd%+1
14288c14456
<   cc%=ed%-15    ! defekt= FFF0-FFF7
---
>   cc%=ed%-15    ! defekt= FFF0-FFF7  !RS:BUG: nach ISO und MS-DOS nur $FFF7!!!
14290c14458
<   FOR fat_tst%=2 TO cpd%
---
>   FOR fat_tst%=2 TO cpd%+1
14315c14483
<     ON bflag%+1 GOSUB fat_leiche_12,fat_leiche_16
---
>     ON (bflag% AND 1)+1 GOSUB fat_leiche_12,fat_leiche_16
14328c14496
<   do_clr_out("")
---
>   do_clr_out("? = verklebt, V = Verwaltung, X = Leiche, D = defekt, . = frei")
14330c14498
<   FOR j%=0 TO cpd% STEP 64
---
>   FOR j%=0 TO cpd%+1 STEP 64
14333c14501
<     FOR i%=j% TO j%+MIN(64,cpd%-j%)
---
>     FOR i%=j% TO j%+MIN(64,cpd%+1-j%)
14335c14503
<         MID$(a$,fgs%)="B"
---
>         MID$(a$,fgs%)="b"
14344c14512
<   out("Drive : "+CHR$(drive%+65)+"   "+STR$(cpd%)+" Cluster")
---
>   out("Drive: "+CHR$(drive%+65)+"   "+STR$(cpd%)+" Cluster")
14347c14515
<   .| Glob. Var.: cok%,txt_zeile%,top%,txt_spalte%,ev_clicks&,lgs%,spc%
---
>   .| Glob. Var.: txt_zeile%,top%,txt_spalte%,ev_clicks&,lgs%,spc%
14353c14521
<   LOCAL aa%,a%,b%,cl%,i%,a$,f$,x1$,x2$,x3$
---
>   LOCAL a%,b%,cl%,klickcl%,anzcl%,i%,a$,f$,x1$,x2$,x3$
14355d14522
<   cok%=32768
14369,14380c14536,14564
<   IF cl%<cok%
<     IF cl%>cpd%
<       out$(0)=SPACE$(wc%)
<       info_line
<     ELSE
<       IF fat%(cl%)>0
<         f$=file$(fat%(cl%))
<         IF (att%(fat%(cl%)) AND 16)>0
<           f$=f$+"\"
<         ENDIF
<         out$(0)=@dec_hex_val$(cl%,6)+" "+f$+SPACE$(MAX(0,wc%-LEN(f$)))
<         cl%=cluster%(fat%(cl%))
---
>   IF cl%>=cpd%+2
>     out$(0)=SPACE$(wc%)
>     info_line
>   ELSE
>     SELECT fat%(cl%)
>     CASE 1 TO
>       f$=file$(fat%(cl%))
>       IF (att%(fat%(cl%)) AND 16)<>0
>         f$=f$+"\"
>       ENDIF
>       klickcl%=cl%
>       anzcl%=1
>       cl%=cluster%(fat%(cl%))     ! Start-Cluster
>       a%=cl%/64
>       b%=cl%-a%*64+8
>       a$=MID$(out$(a%+1),b%,1)
>       '
>       IF ASC(a$)<10
>         x1$="b"
>         x2$="b"
>         x3$="b"
>       ELSE
>         x1$=""
>         x2$=""
>         x3$=""
>       ENDIF
>       MID$(out$(a%+1),b%,1)=x1$
>       cl%=@read_in_fat(cl%)
>       WHILE cl%<cpd%+2
14383,14422c14567,14582
<         a$=MID$(out$(a%+1),b%,1)
<         '
<         IF ASC(a$)<10
<           x1$="B"
<           x2$="B"
<           x3$="B"
<         ELSE
<           x1$=""
<           x2$=""
<           x3$=""
<         ENDIF
<         MID$(out$(a%+1),b%,1)=x1$
<         cl%=@read_in_fat(cl%)       ! Start Cluster
<         IF cl%<ed%-8
<           REPEAT
<             aa%=@read_in_fat(cl%)
<             IF cl%<ed%
<               a%=cl%/64
<               b%=cl%-a%*64+8
<               MID$(out$(a%+1),b%,1)=x3$
<             ENDIF
<             cl%=aa%
<           UNTIL aa%>=ed%-8
<         ENDIF
<         MID$(out$(a%+1),b%,1)=x2$
<       ELSE
<         SELECT fat%(cl%)
<         CASE -1
<           a$="Leichencluster"
<         CASE -2
<           a$="Defekter Cluster"
<         CASE -3
<           a$="Verwaltungsbereich"
<         CASE -4
<           a$="Verklebter Cluster"
<         ENDSELECT
<         out$(0)=@dec_hex_val$(cl%,6)+" "+a$
<       ENDIF
<       do_list
<     ENDIF
---
>         MID$(out$(a%+1),b%,1)=x3$
>         INC anzcl%
>         cl%=@read_in_fat(cl%)
>       WEND
>       MID$(out$(a%+1),b%,1)=x2$
>       out$(0)=@dec_hex_val$(klickcl%,6)+" "+f$+" ("+STR$(anzcl%)+" Cluster)"+SPACE$(MAX(0,wc%-LEN(f$)-11-LEN(STR$(anzcl%))))
>     CASE -1
>       out$(0)=@dec_hex_val$(cl%,6)+" Leichencluster"
>     CASE -2
>       out$(0)=@dec_hex_val$(cl%,6)+" Defekter Cluster"
>     CASE -3
>       out$(0)=@dec_hex_val$(cl%,6)+" Verwaltungsbereich"
>     CASE -4
>       out$(0)=@dec_hex_val$(cl%,6)+" Verklebter Cluster"
>     ENDSELECT
>     do_list
14432c14592
<   cc%=ed%-15    ! defekt= FFF0-FFF7
---
>   cc%=ed%-15    ! defekt= FFF0-FFF7  !RS:BUG: nach ISO und MS-DOS nur $FFF7!!!
14436,14437c14596,14597
<   IF bflag%>0
<     FOR i%=2 TO cpd%
---
>   IF (bflag% AND 1)<>0
>     FOR i%=2 TO cpd%+1
14442c14602
<         out(l$+"Cluster:"+STR$(i%))
---
>         out(l$+"Cluster: "+STR$(i%))
14446c14606
<     FOR i%=2 TO cpd%
---
>     FOR i%=2 TO cpd%+1
14455c14615
<         out(l$+"Cluster:"+STR$(i%))
---
>         out(l$+"Cluster: "+STR$(i%))
14467c14627
<   IF bflag%=1
---
>   IF (bflag% AND 1)<>0
14484c14644
<   LOCAL cc%,fat_tst%
---
>   LOCAL cc%,fat_tst%,mediabyte|
14485a14646,14670
>   IF drive%<2   ! Media-Byte bestimmen  !RS: Bestimmung in bios_block verschieben?
>     IF tpd%=40  ! 130-mm-Disketten (5,25 in) mit 40 Spuren
>       IF sid%=1 AND spt%=9 AND len_fat%=2 AND len_dir%=4 AND spc%=1 AND cpd%=351
>         mediabyte|=&HFC  ! Diskette ISO Typ 201
>       ELSE IF sid%=2 AND spt%=9 AND len_fat%=2 AND len_dir%=7 AND spc%=2 AND cpd%=354
>         mediabyte|=&HFD  ! Diskette ISO Typ 202
>       ELSE IF sid%=1 AND spt%=8 AND len_fat%=1 AND len_dir%=4 AND spc%=1 AND cpd%=313
>         mediabyte|=&HFE
>       ELSE IF sid%=2 AND spt%=8 AND len_fat%=1 AND len_dir%=7 AND spc%=2 AND cpd%=315
>         mediabyte|=&HFF
>       ELSE
>         mediabyte|=&HF9
>       ENDIF
>     ELSE        ! 90-mm-Disketten (3,5 in) oder 130-mm-Disketten (5,25 in) mit 80 Spuren
>       IF spt%>=18
>         mediabyte|=&HF0
>       ELSE
>         mediabyte|=&HF9
>       ENDIF
>     ENDIF
>   ELSE
>     mediabyte|=&HF8  ! Fest- oder Wechselplatte
>   ENDIF
>   write_in_fat(&HFF00 AND mediabyte|,0)  ! Media-Byte in die FAT eintragen
>   write_in_fat(&HFFFF,1)
14487c14672
<   FOR fat_tst%=2 TO cpd%
---
>   FOR fat_tst%=2 TO cpd%+1
14499c14684
<   IF bflag%>0
---
>   IF (bflag% AND 1)<>0
14522c14707
<   x%=anf_fat1%  ! Start  der 1.FAT
---
>   x%=anf_fat1%  ! Start  der 1. FAT
14524c14709
<     status%=BIOS(4,1,L:fatbuf%,len_fat%,x%,drive%)
---
>     status%=@rwabs(1,fatbuf%,len_fat%,x%,drive%)
14526c14711
<       status%=BIOS(4,1,L:fatbuf%,len_fat%,x%,drive%)
---
>       status%=@rwabs(1,fatbuf%,len_fat%,x%,drive%)
14536c14721
<   ~@alrt(3,"Laufwerk hat nur eine FAT !",1,"Abbruch")
---
>   ~@alrt(3,"Laufwerk hat nur eine FAT!",1,"Abbruch")
14538c14723
< PROCEDURE fat_read1           ! 1.Sektor der FAT 1 einlesen
---
> PROCEDURE fat_read1           ! 1. Sektor der FAT 1 einlesen
14547c14732
< PROCEDURE fat_read2           ! 1.Sektor einer evtl. FAT 2 einlesen
---
> PROCEDURE fat_read2           ! 1. Sektor einer evtl. FAT 2 einlesen
14566c14751
<   IF bflag%=1
---
>   IF (bflag% AND 1)<>0
14575,14577c14760
<   WHILE b%>=bps%
<     SUB b%,bps%
<   WEND
---
>   b%=b% MOD bps%
14596,14597c14779
<     IF aa%<>ed%
<       aa%=MAX(2,aa%)
---
>     IF aa%>=2 AND aa%<cpd%+2
14601c14783
<       ~@alrt(3,"Keine weitere Verkettung",1,"Aha")
---
>       ~@alrt(3,"Keine weitere Verkettung.",1," Aha ")
14605c14787
<     ~@alrt(3,"* Clusterverkettung folgen *|Das geht nur mit Clustern|im Datenbereich!",1,"Aha")
---
>     ~@alrt(3,"* Clusterverkettung folgen *|Das geht nur mit Clustern|im Datenbereich!",1," Aha ")
14615c14797
<     j%=cluster%-1
---
>     j%=cluster%
14617c14799
<     WHILE @read_in_fat(j%)<>cluster%
---
>     REPEAT
14619,14620c14801,14804
<       EXIT IF j%=0
<     WEND
---
>       IF j%=1
>         j%=cpd%+1
>       ENDIF
>     UNTIL @read_in_fat(j%)=cluster% OR j%=cluster%
14622,14623c14806,14807
<     IF j%=0
<       ~@alrt(3,"Keine weitere Verkettung",1,"Aha")
---
>     IF j%=cluster%
>       ~@alrt(3,"Keine weitere Verkettung.",1," Aha ")
14630c14814
<     ~@alrt(3,"* Clusterverkettung folgen *|Das geht nur mit Clustern|im Datenbereich!",1,"Aha")
---
>     ~@alrt(3,"* Clusterverkettung folgen *|Das geht nur mit Clustern|im Datenbereich!",1," Aha ")
14652c14836
<       anf_fat2%=CARD{bpb%+10}  ! was wird hier stehen
---
>       anf_fat2%=CARD{bpb%+10}  ! Beginn der 2. FAT, bei einer FAT deren Beginn
14668,14670c14852,14857
<       anf_dir%=anf_fat2%+len_fat%
<       anf_fat1%=anf_fat2%-len_fat%
<       cpd%=MIN(cpd%,32767)
---
>       anf_dir%=anf_dat%-len_dir%
>       IF (bflag% AND 2)<>0  ! Nur eine FAT vorhanden!
>         anf_fat1%=anf_fat2%
>       ELSE
>         anf_fat1%=anf_fat2%-len_fat%
>       ENDIF
14672c14859
<       fat_size2%=len_fat%*bps%*spc%
---
>       fat_size2%=len_fat%*bps%
14675c14862
<         wwa%=@alrt(3,"FAT ist grîsser als "+STR$(fat_size%)+" Bytes!|aktuelle Grîûe:"+STR$(fat_size2%)+" Bytes",1,wa$)
---
>         wwa%=@alrt(1,"Grîûe des FAT-Puffer "+STR$(fat_size%)+" Byte.|Notwendige Grîûe "+STR$(fat_size2%)+" Byte.|FAT-Puffer auf diese Grîûe anlegen?",1,"Ja| Nein ")
14677,14688c14864,14869
<           wwa%=@alrt(1,"FAT-Puffer auf diese Grîûe anlegen?",1,"Ja|Nein")
<           IF wwa%=1
<             ~MFREE(fatbuf%)
<             fatbuf%=MALLOC(fat_size2%)
<             IF fatbuf%=0
<               ~@alrt(3,ver$+"|Kein Speicher fÅr FAT!",1,"Abbruch")
<               ~MFREE(buf%)
<               do_exit
<             ENDIF
<             fat_size%=fat_size2%
<           ELSE
<             len_fat%=fat_size% DIV (bps%*spc%)
---
>           ~MFREE(fatbuf%)
>           fatbuf%=MALLOC(fat_size2%)
>           IF fatbuf%=0
>             ~@alrt(3,ver$+"|Kein Speicher fÅr FAT!",1,"Abbruch")
>             ~MFREE(buf%)
>             do_exit
14689a14871
>           fat_size%=fat_size2%
14691c14873
<           do_exit
---
>           len_fat%=fat_size% DIV bps%
14695c14877
<       status%=BIOS(4,0,L:fatbuf%,len_fat%,anf_fat2%,drive%)
---
>       status%=@rwabs(0,fatbuf%,len_fat%,anf_fat2%,drive%)
14697c14879
<         status%=BIOS(4,0,L:fatbuf%,len_fat%,anf_fat2%,drive%)
---
>         status%=@rwabs(0,fatbuf%,len_fat%,anf_fat2%,drive%)
14720,14721c14902,14903
<   IF bflag%=0
<     FOR ci%=2 TO cpd%
---
>   IF (bflag% AND 1)=0
>     FOR ci%=2 TO cpd%+1
14758c14940
<     wwa%=@alrt(2,"Verzeichnisse einlesen?",2,"Ok|Nee")
---
>     wwa%=@alrt(2,"Verzeichnisse einlesen?",2,"Ok| Nee ")
14774c14956
<     ~@alrt(3,"Vorgang abgebrochen",1,"Aha")
---
>     ~@alrt(3,"Vorgang abgebrochen.",1," Aha ")
14782d14963
< ' BUGS: Funktioniert nur mit 2 Sektoren pro Cluster
14789c14970
<   LOCAL a%,nr%,cl%,durch%,x%,y%,ogs%,clx%,lgx%,att%
---
>   LOCAL a%,nr%,cl%,durch%,x%,y%,ogs%,clx%,lgx%,att%,n%
14794c14975,14976
<     wurzel%=1
---
>     wurzel%=TRUE
>     n%=1     ! im Wurzelverzeichnis Sektoren einzeln lesen
14796a14979
>     n%=spc%  ! in Ordnern den ganzen Cluster lesen
14801,14802c14984,14985
<   FOR durch%=1 TO 2                     ! 1.Durchgang=alle Namen merken
<     '                                   ! 2.Durchgang Ordner auflîsen
---
>   FOR durch%=1 TO 2                     ! 1. Durchgang=alle Namen merken
>     '                                   ! 2. Durchgang Ordner auflîsen
14805c14988
<     EXIT IF cluster%>cpd%
---
>     EXIT IF cluster%>=cpd%+2
14808c14991
<       status%=BIOS(4,0,L:buf%,2,lgs%,drive%)    ! 2 Sektoren lesen
---
>       status%=@rwabs(0,buf%,n%,lgs%,drive%)     ! Sektor oder Cluster lesen
14818,14820d15000
<         '
<         y%=BYTE{x%}                             ! 1.Zeichen
<         '
14822a15003,15004
>         y%=BYTE{x%}                             ! 1. Zeichen
>         '
14836c15018
<               IF (srep%>0 AND y%=&HE5) OR (srep%=0 AND y%<>&HE5) OR ((att% AND 16)>0 AND y%<>&HE5)
---
>               IF (srep%>0 AND y%=&HE5) OR (srep%=0 AND y%<>&HE5) OR ((att% AND 16)<>0 AND y%<>&HE5)
14840c15022
<                 sec%(total%)=lgs%+ABS(x%-buf%>=bps%)
---
>                 sec%(total%)=lgs%+(x%-buf%)/bps%
14845c15027
<               IF (att% AND 16)>0 AND y%<>&HE5  ! Ordner?
---
>               IF (att% AND 16)<>0 AND y%<>&HE5  ! Ordner?
14852c15034
<                 status%=BIOS(4,0,L:buf%,2,lgs%,drive%)
---
>                 status%=@rwabs(0,buf%,n%,lgs%,drive%)
14864c15046
<       UNTIL x%>=buf%+2*bps% OR total%>=max_files% OR abb%>0
---
>       UNTIL x%>=buf%+n%*bps% OR total%>=max_files% OR abb%>0
14866c15048
<       IF wurzel%=0
---
>       IF wurzel%=FALSE
14869,14870d15050
<       EXIT IF abb%<>0 OR cluster%<0 OR (wurzel%=0 AND cluster%=0)
<       EXIT IF cluster%>=cd% OR (cluster%>spd% AND cluster%<cc%)
14872,14874c15052,15056
<       EXIT IF (wurzel%<>0 AND lgs%>=anf_dat%-2) OR total%>=max_files%
<       IF wurzel%>0
<         ADD lgs%,2
---
>       EXIT IF abb%<>0 OR total%>=max_files%
>       EXIT IF wurzel%=FALSE AND (cluster%<2 OR cluster%>=cpd%+2)
>       EXIT IF wurzel%=TRUE AND lgs%+1>=anf_dat%
>       IF wurzel%=TRUE
>         INC lgs%
14986c15168
<   ~@alrt(5,"SED Fehler: "+STR$(ERR)+" ",1,"Abbruch")
---
>   ~@alrt(5,"SED-Fehler "+STR$(ERR)+"! ",1,"Abbruch")
15014c15196
<     IF (OB_STATE(ram.konv%,distempl&) AND 1)>0
---
>     IF (OB_STATE(ram.konv%,distempl&) AND 1)<>0
15030c15212
<     ~@alrt(3,"Kann 'Templemon' nicht finden",1,"Abbruch")
---
>     ~@alrt(3,"Kann 'Templemon' nicht finden.",1,"Abbruch")
15038c15220
<     '     L:  Befehlsnummer ?
---
>     '     L:  Befehlsnummer?
15040c15222
<     '     L:  Codetabelle ?
---
>     '     L:  Codetabelle?
16320c16502
<   '             ist wichtig wegen mehr Bytes bei Sektor lesen - max 1024 ?
---
>   '             ist wichtig wegen mehr Bytes bei Sektor lesen - max 1024?
16755,16785d16936
< ' 1227,1235d1229
< ' <         ELSE
< ' <           kling
< ' <         ENDIF
< ' <       ELSE
< ' <         IF key%>0
< ' <           ~OBJC_EDIT(tree%,edit_obj%,key%,idx&,2,idx&)  ! EDCHAR
< ' <         ENDIF
< ' <         IF (next_obj%<>0) AND ((next_obj%<>edit_obj%) OR (cont&=0))
< ' <           ~OBJC_EDIT(tree%,edit_obj%,0,idx&,3,idx&)     ! EDEND
< ' 1237a1232,1237
< ' >       IF key%>0
< ' >         ~OBJC_EDIT(tree%,edit_obj%,key%,idx&,2,idx&)  ! EDCHAR
< ' >       ENDIF
< ' >       IF (next_obj%<>0) AND ((next_obj%<>edit_obj%) OR (cont&=0))
< ' >         ~OBJC_EDIT(tree%,edit_obj%,0,idx&,3,idx&)     ! EDEND
< ' >       ENDIF
< ' -------------------------------- Schnapp ---------------------------------
< ' Diese énderung macht es mîglich, daû man in Dialogen auch []{} und @
< ' eingeben kann, also alles, was im Zusammenhang mit der Alternate-Taste
< ' ausgegeben wird! Das war vorher nur per Alt-Ziffernblock mîglich, da bei
< ' gedrÅckter Alternate-Taste nur die Shortcuts ÅberprÅft wurden aber kein
< ' OBJC_EDIT mehr stattfand! Das 'kling', wenn kein passender Shortcut
< ' (Underline) vorhanden war, fÑllt ganz weg.
< '
< ' Kommentar CB: Diese énderung hatte ich testweise eingebaut, sie fÅhrte
< '               aber aus irgendeinem Grund dazu, daû Åberhaupt keine
< '               Tasten mehr in Dialogen akzeptiert wurden... 8-(
< ' -------------------------------- Schnipp ---------------------------------
< '
< ' -------------------------------- Schnipp ---------------------------------
16899c17050
< ' +             ~@alrt(1,alrt_text$,1,"OK")
---
> ' +             ~@alrt(1,alrt_text$,1," OK ")
