   1 Rem GFA Basic cross-referencer
   2 Rem ********** LEGAL NOTICE **********
   3 Rem Copyright (C) 1987 by Don Edwards
   4 Rem Permission is granted to distribute this program without charge
   5 Rem or for reasonable media charge only.
   6 Rem Permission is granted to put this program on any computer bulletin
   7 Rem board for downloading without charge or for normal access charges only.
   8 Rem
Rem All other rights reserved
   9 Rem
Rem "GFA-BASIC" may be a registered trademark owned by
  10 Rem Michtron, Inc (US) and/or GFA-Systemtechnik (Germany). It
  11 Rem is the name of a computer program written by GFA-Systemtechnik
  12 Rem and distributed in the US by Michtron, which program is covered
  13 Rem by US and foreign copyrights.
  14 Rem ********** END NOTICE **********
  15 Rem
Rem What this program does:
  16 Rem
Rem This program reads a GFA Basic program (Ascii save) and produces
  17 Rem two output files. The first is the listing with line numbers added;
  18 Rem the second is a list of variables and procedures, in alphabetic
  19 Rem order, with the line numbers of all references.
  20 Rem (It also uses 4 temporary files - RAMdisk STRONGLY recommended)
  21 Rem
Rem main procedure
  22 Qqqinputread%=0
  23 Cls ! clear screen
  24 @Get_filenames
  25 @Examine_source
  26 @Sort_references
  27 @Combine_references
  28 @Format_report
  29 End
  30 Procedure Get_a_char
  31   Rem This procedure provides a large buffer for character by
  32   Rem character input. It also cooperates with the next procedure
  33   Rem to allow quick input of the rest of the current line
  34   Rem
  If Qqqinputread%=0
  35     Qqqinputread%=1
  36     Qqqinputlen%=Lof(#1)
  37     Qqqicurlen%=-1
  38     Qqqinputpos%=0
  39   Endif
  40   If Qqqinputpos%>=Qqqicurlen%
  41     Qqqicurlen%=Min(Max(1,Qqqinputlen%-1),10240)
  42     Sub Qqqinputlen%,Qqqicurlen%
  43     Qqqinputpos%=0
  44     Qqqinputbuf$=Input$(Qqqicurlen%,#1)
  45   Endif
  46   Inc Qqqinputpos%
  47   C$=Mid$(Qqqinputbuf$,Qqqinputpos%,1)
  48   Cu$=Upper$(C$)
  49   C%=Asc(C$)
  50   Out #3,C%
  51 Return
  52 Procedure Finish_the_line
  53   Rem this procedure causes the rest of the current line to be
  54   Rem skipped over and passed to the numbered file, without examining
  55   Rem each character separately.
  56   Rem
  Local X%
  57   X%=Instr(Qqqinputpos%+1,Qqqinputbuf$,Chr$(13))
  58   If X%>0
  59     Dec X%
  60     Print #3;Mid$(Qqqinputbuf$,Qqqinputpos%+1,X%-Qqqinputpos%);
  61     Qqqinputpos%=X%
  62     @Get_a_char
  63   Else
  64     Print #3;Mid$(Qqqinputbuf$,Qqqinputpos%+1);
  65     Qqqinputpos%=Qqqicurlen%
  66     @Get_a_char
  67     If C%<>13
  68       @Finish_the_line
  69     Endif
  70   Endif
  71 Return
  72 Procedure Examine_source
  73   Rem
  Rem this code reads the .LST file and produces a list of (line#, var)
  74   Rem in a temporary file. (Note: "var" is anything that looks like a word
  75   Rem but is not a Basic keyword; it includes procedure names, function
  76   Rem names, and labels as well as variables)
  77   Rem
  Open "I",#1,Lst$
  78   Open "O",#2,Tempfile1$
  79   Open "O",#3,Lnm$
  80   Lnum%=1
  81   Print #3,Using "#### ",Lnum%;
  82   Print "Reading Line ";
  83   Lnox%=Crscol
  84   Lnoy%=Crslin
  85   Print Lnum%;
  86   @Get_a_char
  87   Rem
  Rem in the following loop, C% contains the ascii code of the next char
  88   Rem C$ contains the character
  89   Rem Cu$ contains the uppercase version of the character
  90   Rem these must ALWAYS be true at the beginning of a pass thru the loop
  91   Rem
  Repeat
  92     If Cu$>="A" And Cu$<="Z" ! start of a word
  93       Word$=C$ ! begin saving the word
  94       If Not Eof(#1)
  95         @Get_a_char ! get the next character
  96         Do
  97           Let Exit!=False
  98           If (C$>="0" And C$<="9") Or (Cu$>="A" And Cu$<="Z") Or C$="_" Or C$="."
  99             Word$=Word$+C$ ! add a letter, digit, underscore, dot
 100           Else
 101             If C$="$" Or C$="%" Or C$="!" Or C$=":" Or C$="?"
 102               Word$=Word$+C$ ! add type char & terminate
 103               @Get_a_char ! get the next character
 104               Let Exit!=True
 105             Else ! character not part of a word
 106               Let Exit!=True
 107             Endif
 108           Endif
 109           Exit If Eof(#1) Or Exit!
 110           @Get_a_char ! if staying, get the next character
 111         Loop
 112       Endif
 113       @Deal_with_word
 114     Else ! not a word
 115       If C%=13 ! carriage return
 116         Inc Lnum% ! increment line counter
 117         If Not Eof(#1)
 118           @Get_a_char ! discard linefeed
 119           If Not Eof(#1) ! there is a next line
 120             Print #3,Using "#### ",Lnum%; ! numbered file
 121             Print At(Lnox%,Lnoy%);Lnum%
 122             @Get_a_char ! get 1st char of new line
 123           Endif
 124         Endif
 125       Else ! not word, carriage return
 126         If (C$>="0" And C$<="9") Or C$="&" ! numbers
 127           Do ! skip the number
 128             Exit If Eof(#1)
 129             @Get_a_char
 130             Exit If Not ((C$>="0" And C$<="9") Or (C$>="A" And C$<"G") Or C$="H" Or C$="X" Or C$="O" Or C$=".")
 131           Loop
 132         Else ! not word, carriage return, number
 133           If C%=34 ! double quotes
 134             Repeat ! skip the quoted string
 135               Exit If Eof(#1) ! if file ends, stop
 136               @Get_a_char
 137             Until C%=34 Or C%=13 ! until matching quote or end of line
 138             If C%=34 ! skip closing quote
 139               @Get_a_char
 140             Endif
 141           Else ! not word, carriage return, number, quoted string
 142             If C$="!" ! on-the-line comment
 143               @Finish_the_line
 144             Else ! don't know what it is - ignore it
 145               @Get_a_char
 146             Endif
 147           Endif
 148         Endif
 149       Endif
 150     Endif
 151   Until Eof(#1)
 152   Close #1
 153   Close #2
 154   Close #3
 155 Return
 156 Procedure Deal_with_word
 157   Rem
  Rem this routine takes the word in Word$ and tries to find what it is.
 158   Rem if it's REM or DATA, the rest of the line is skipped
 159   Rem otherwise, we look through a list of basic keywords - if we find
 160   Rem the word, we're done.
 161   Rem failing that, we write a line to file 2 consisting of the line#
 162   Rem (in lnum) and the word
 163   Rem
  Local Lo%,Hi%,Mid%
 164   Uword$=Upper$(Word$) ! uppercase for faster comparisons
 165   If Not Word_list_read! ! first time thru - build the word list
 166     @Read_word_list
 167   Endif
 168   If Uword$="REM" Or Uword$="DATA"
 169     @Finish_the_line
 170   Else ! do a binary search on the word list
 171     Lo%=0 ! slot 0 unused
 172     Hi%=Word_list_limit% ! this slot "//", not a valid word
 173     Rem word, if present, is between lo% and hi%, exclusive at both ends
 174     Do
 175       Mid%=(Lo%+Hi%)/2 ! find midpoint
 176       Exit If Mid%=Lo% ! implies nothing between lo% and hi%
 177       Found!=(Hold_word_list$(Mid%)=Uword$) ! is midpoint the word?
 178       Exit If Found!
 179       If Hold_word_list$(Mid%)<Uword$ ! nope... if too low in list
 180         Lo%=Mid% ! move lo% up
 181       Else ! must be too high in list
 182         Hi%=Mid% ! move hi% down
 183       Endif
 184     Loop
 185     If Not Found!
 186       Print #2,Lnum%;",";Word$
 187     Endif
 188   Endif
 189 Return
 190 Procedure Read_word_list
 191   Rem
  Rem build the word list in an array, doing sequence checking
 192   Rem so that binary search may go unimpeded.
 193   Rem
  Word_list_read!=True ! we've been here now
 194   Dim Hold_word_list$(300) ! the list
 195   Word_list_limit%=0 ! unused slot
 196   Do
 197     Inc Word_list_limit% ! move to next slot
 198     Read Hold_word_list$(Word_list_limit%) ! read the word
 199     Exit If Hold_word_list$(Word_list_limit%)="//" ! special end marker
 200     If Hold_word_list$(Word_list_limit%)<=Hold_word_list$(Word_list_limit%-1)
 201       Print "words out of sequence ->";
 202       Print Hold_word_list$(Word_list_limit%-1);", ";
 203       Print Hold_word_list$(Word_list_limit%)
 204       Stop ! sequence error must be fixed
 205     Endif
 206   Loop
 207 Return ! now the words follow
 208 Data ABS,ADD,ALERT,AND,ARRAYFILL,ARRPTR,AS,ASC,AT,ATN
 209 Data BASE,BGET,BIN$,BITBLT,BLOAD,BMOVE,BOX,BPUT,BREAK,BSAVE
 210 Data C:,CALL,CHAIN,CHDIR,CHDRIVE,CHR$,CIRCLE,CLEAR,CLEARW,CLOSE,CLOSEW
 211 Data CLR,CLS,COLOR,COS,CRSCOL,CRSLIN,CVD,CVF,CVI,CVL,CVS
 212 Data DATE$,DEC,DEFFILL,DEFFN,DEFLINE,DEFLIST,DEFMARK,DEFMOUSE,DEFNUM,DEFTEXT
 213 Data DFREE,DIM,DIM?,DIR,DIR$,DIV,DO,DOWNTO,DPEEK,DPOKE,DRAW
 214 Data EDIT,ELLIPSE,ELSE,END,ENDIF,EOF,EQV,ERASE,ERR,ERROR,EVEN,EXEC,EXIST
 215 Data EXIT,EXP
 216 Data FALSE,FATAL,FIELD,FILES,FILESELECT,FILL,FIX,FOR,FORM,FRAC,FRE,FULLW
 217 Data GET,GOSUB,GOTO,GRAPHMODE
 218 Data HARDCOPY,HEX$,HIDEM,HIMEM
 219 Data IF,IMP,INC,INFOW,INKEY$,INP,INP?,INPUT,INPUT$,INSTR,INT
 220 Data KILL
 221 Data LEFT$,LEN,LET,LINE,LIST,LLIST,LOAD,LOC,LOCAL,LOF,LOG,LOG10,LOOP,LPEEK
 222 Data LPOKE,LPOS,LPRINT,LSET
 223 Data MAX,MENU,MID$,MIN,MKD$,MKDIR,MKF$,MKI$,MKL$,MKS$,MOD,MONITOR,MOUSE,MOUSEK
 224 Data MOUSEX,MOUSEY,MUL
 225 Data NAME,NEW,NEXT,NOT
 226 Data OCT$,ODD,ON,OPEN,OPENW,OPTION,OR,OUT,OUT?
 227 Data PAUSE,PBOX,PCIRCLE,PEEK,PELLIPSE,PLOT,POINT,POKE,POLYFILL,POLYLINE
 228 Data POLYMARK,POS,PRBOX,PRINT,PROCEDURE,PSAVE,PUT
 229 Data QUIT
 230 Data RANDOM,RBOX,READ,RELSEEK,REPEAT,RESERVE,RESTORE,RESUME,RETURN,RIGHT$
 231 Data RMDIR,RND
 232 Data SAVE,SDPOKE,SEEK,SETCOLOR,SETTIME,SGET,SGN,SHOWM,SIN,SLPOKE,SOUND
 233 Data SPACE$,SPC,SPOKE,SPRITE,SPUT,SQR,STOP,STR$,STRING$,SUB,SWAP,SYSTEM
 234 Data TAB,TAN,TEXT,TIME$,TIMER,TITLEW,TO,TROFF,TRON,TRUE,TRUNC,TYPE
 235 Data UNTIL,UPPER$,USING
 236 Data VAL,VAL?,VARPTR,VOID,VSYNC
 237 Data WAVE,WEND,WHILE,WRITE
 238 Data XOR
 239 Data //,end of basic keyword list
 240 Procedure Get_filenames
 241   Rem
  Rem this routine gets all the filenames needed for this program
 242   Rem
  Print "Select Ascii-saved Basic program"
 243   A$="A:\*.LST"
 244   B$=""
 245   Ok!=False
 246   Repeat
 247     Fileselect A$,B$,Lst$
 248     If Lst$=""
 249       End
 250     Endif
 251     If Exist(Lst$)
 252       Ok!=True
 253     Else
 254       Print "(doesn't exist, try again)"
 255     Endif
 256     @Take_filename_apart(Lst$,*A$,*B$)
 257   Until Ok!
 258   Cls ! clear screen again
 259   Ok!=False
 260   Print Lst$
 261   X%=Instr(B$,".")
 262   If X%=0
 263     B$=B$+".lnm"
 264   Else
 265     B$=Left$(B$,X%)+"lnm"
 266   Endif
 267   A$=A$+"*.LNM"
 268   Print "Select numbered-program file"
 269   Fileselect A$,B$,Lnm$
 270   If Lnm$=""
 271     End
 272   Endif
 273   Cls
 274   Print Lst$;"   ";
 275   Print Lnm$
 276   @Take_filename_apart(Lnm$,*A$,*B$)
 277   Y%=Instr(B$,".")
 278   If Y%=0
 279     B$=B$+".xrf"
 280   Else
 281     B$=Left$(B$,Y%)+"xrf"
 282   Endif
 283   A$=A$+"*.xrf"
 284   Print "Select xref file"
 285   Fileselect A$,B$,Xrf$
 286   If Xrf$=""
 287     End
 288   Endif
 289   Cls
 290   Print Lst$;"   ";
 291   Print Lnm$;"   ";
 292   Print Xrf$
 293   Print "Select DRIVE for temp files (filename doesn't matter)"
 294   @Take_filename_apart(Xrf$,*A$,*B$)
 295   Fileselect A$," ",Junk$
 296   @Take_filename_apart(Junk$,*Tdrive$,*A$)
 297   Rem out of that, only drive$ matters
 298   Print "Selecting temp files ";
 299   Repeat
 300     Tempfile1$=Tdrive$+"F1"+Str$(Random(10000))
 301   Until Not Exist(Tempfile1$)
 302   Repeat
 303     Tempfile2$=Tdrive$+"F2"+Str$(Random(10000))
 304   Until Not Exist(Tempfile2$)
 305   Repeat
 306     Tempfile3$=Tdrive$+"F3"+Str$(Random(10000))
 307   Until Not Exist(Tempfile3$)
 308   Repeat
 309     Tempfile4$=Tdrive$+"F4"+Str$(Random(10000))
 310   Until Not Exist(Tempfile4$)
 311   Print Tempfile1$;" ";Tempfile2$;" ";Tempfile3$;" ";Tempfile4$
 312 Return
 313 Procedure Take_filename_apart(Pathname$,P.path%,P.name%)
 314   Rem
  Rem this routine examines the filename (with path) in pathname$
 315   Rem the path (up to final \) will be put in p.path
 316   Rem the filename only will be put in p.name
 317   Rem
  Local X%,Y%
 318   X%=Instr(Pathname$,":")
 319   Repeat
 320     Y%=X%
 321     X%=Max(Instr(Y%+1,Pathname$,"\"),Instr(Y%+1,Pathname$,"/"))
 322   Until X%=0
 323   If Y%=0
 324     *P.path%=Dir$
 325     *P.name%=Pathname$
 326   Else
 327     *P.path%=Left$(Pathname$,Y%)
 328     *P.name%=Mid$(Pathname$,Y%+1)
 329   Endif
 330 Return
 331 Procedure Deletef
 332   Rem
  Rem this is a utility routine, it deletes all the temp files this
 333   Rem program has left laying around.
 334   Rem
  Rem notes: (1) it assumes files are in the root of drive P:, my ramdisk
 335   Rem        (2) it is dangerous - can easily delete too much
 336   Rem
  While Exist("p:f*")
 337     Kill "p:f*"
 338   Wend
 339 Return
 340 Procedure Sort_references
 341   Rem
  Rem this routine does some overhead for a merge sort of the disk file
 342   Rem containing the list of references
 343   Rem
  Print "sorting - pass ";
 344   Lnox%=Crscol
 345   Lnoy%=Crslin
 346   Pass%=0
 347   Qqqinputbuf$="" ! to free memory
 348   Void Fre(0)
 349   Open "O",#1,Tempfile2$ ! create null file
 350   Close #1 ! done with it
 351   Repeat
 352     @Sort_one_pass
 353   Until Not Side2!
 354   Kill Tempfile2$
 355   Kill Tempfile3$
 356   Kill Tempfile4$
 357 Return
 358 Procedure Sort_one_pass
 359   Rem
  Rem this routine does one pass of a merge sort
 360   Rem at present it's strictly a two-by merge.
 361   Rem
  Inc Pass% ! print pass# so user doesn't get too impatient
 362   Print At(Lnox%,Lnoy%);Pass%
 363   Rcnt%=0 ! initialize record and segment counters
 364   Seg%=1
 365   Open "I",#1,Tempfile1$ ! open files
 366   Open "I",#2,Tempfile2$
 367   Open "O",#3,Tempfile3$
 368   Open "O",#4,Tempfile4$
 369   Side2!=False ! haven't used the second output file yet
 370   Ofile!=False ! switch for which output file to use
 371   F1oc!=False ! input record buffers not occupied
 372   F2oc!=False
 373   Old$="" ! no previous record
 374   Oldr=0
 375   Repeat
 376     If Not F1oc! ! should fill buffer 1, preferably from input 1
 377       On Error Gosub Errone
 378       If Not Eof(#1)
 379         Input #1,Ref1,Var1$ ! read the record
 380         Inc Rcnt% ! count it
 381         F1oc!=True ! buffer now occupied
 382       Else ! have to read from input 2 instead
 383         If Not Eof(#2) ! if we can
 384           Input #2,Ref1,Var1$ ! read the record
 385           Inc Rcnt% ! count it
 386           F1oc!=True ! buffer occupied
 387         Endif
 388       Endif
 389     Endif
 390     Eofone:
 391     If Not F2oc! ! should fill buffer 2 - see above
 392       On Error Gosub Errtwo
 393       If Not Eof(#2)
 394         Input #2,Ref2,Var2$
 395         Inc Rcnt%
 396         F2oc!=True
 397       Else
 398         If Not Eof(#1)
 399           Input #1,Ref2,Var2$
 400           Inc Rcnt%
 401           F2oc!=True
 402         Endif
 403       Endif
 404     Endif
 405     Eoftwo:
 406     On Error ! normal error handling
 407     If ((Var1$<Old$ Or (Var1$=Old$ And Ref1<Oldr)) Or Not F1oc!) And ((Var2$<Old$ Or (Var2$=Old$ And Ref2<Oldr)) Or Not F2oc!)
 408       Rem have completed a "run", must switch output files
 409       Ofile!=Not Ofile! ! switch the indicator
 410       Inc Seg% ! count the next run
 411       Oldr=0 ! no previous record in the run
 412       Old$=""
 413     Endif
 414     If F1oc! And (Var1$>Old$ Or (Var1$=Old$ And Ref1>=Oldr)) And ((Var1$<Var2$ Or (Var1$=Var2$ And Ref1<=Ref2)) Or (Not F2oc!) Or (Var2$<Old$ Or (Var2$=Old$ And Ref2<Oldr)))
 415       Rem should write record in buffer 1
 416       @Sort_out(Ref1,Var1$) ! call routine to write it
 417       F1oc!=False ! now the buffer's empty
 418     Else
 419       If F2oc! And (Var2$>Old$ Or (Var2$=Old$ And Ref2>=Oldr)) And ((Var2$<Var1$ Or (Var2$=Var1$ And Ref2<=Ref1)) Or (Not F1oc!) Or (Var1$<Old$ Or (Var1$=Old$ And Ref1<Oldr)))
 420         Rem should write record in buffer 2
 421         @Sort_out(Ref2,Var2$) ! call routine to write it
 422         F2oc!=False ! now the buffer's empty
 423         Rem if both buffers are occupied or both files are at eof, should always
 424         Rem be writing one of the two buffers out.
 425       Endif
 426     Endif
 427   Until Eof(#1) And Eof(#2) And Not (F1oc! Or F2oc!)
 428   Close #1 ! close all the files
 429   Close #2
 430   Close #3
 431   Close #4
 432   Swap Tempfile1$,Tempfile3$ ! ready for next pass
 433   Swap Tempfile2$,Tempfile4$ ! files 1&2 always input, 3&4 always output
 434   Print "last pass had ";Rcnt%;" records in ";Seg%;" segments"," "
 435 Return
 436 Procedure Sort_out(X,Y$)
 437   Rem
  Rem output a record to the sort output file
 438   Rem
  Old$=Y$ ! save "previous-record" stuff for future use
 439   Oldr=X
 440   If Ofile! ! pick which file to write to
 441     Side2!=True ! at least two runs, we'll need another pass
 442     Print #4;X;",";Y$ ! write to file 4
 443   Else
 444     Print #3;X;",";Y$ ! write to file 3
 445   Endif
 446 Return
 447 Rem
Rem error (eof) routines for the above sort follow.
 448 Procedure Errone
 449   Resume Eofone
 450 Return
 451 Procedure Errtwo
 452   Resume Eoftwo
 453 Return
 454 Rem
Procedure Errthree
 455   Rem
  Rem this special eof routine provides a dummy value for the
 456   Rem combine logic in the next procedure
 457   Rem
  Var2$="//"
 458   Resume Next
 459 Return
 460 Procedure Combine_references
 461   Rem
  Rem this routine reads the sorted references file
 462   Rem and produces one record for each different variable.
 463   Rem
  Print "combining..."
 464   Open "I",#1,Tempfile1$ ! open files
 465   Open "O",#2,Tempfile2$
 466   Input #1,Ref1$,Var1$ ! read the first record
 467   Var2$="" ! clear to start the loop
 468   While Var2$<>"//" ! watching for special eof marker
 469     On Error Gosub Errthree ! provide for it
 470     Input #1,Ref2$,Var2$ ! get the next record
 471     On Error ! back to standard error handling
 472     If Var2$=Var1$ ! if same variable
 473       Ref1$=Ref1$+" "+Ref2$ ! combine the reference lists
 474     Else ! not the same variable
 475       Print #2;Ref1$;",";Var1$ ! write the "old" variable & list
 476       Ref1$=Ref2$ ! start on the new one
 477       Var1$=Var2$
 478     Endif
 479   Wend ! and go on
 480   Close #1 ! close files
 481   Close #2
 482   Swap Tempfile1$,Tempfile2$ ! still want #1 to be input
 483   Kill Tempfile2$ ! get rid of unneeded file
 484 Return
 485 Procedure Format_report
 486   Rem
  Rem this routine reads the combined file to produce the actual
 487   Rem cross-reference report
 488   Rem
  Print "formatting report"
 489   Open "I",#1,Tempfile1$ ! open files
 490   Open "O",#2,Xrf$
 491   On Error Gosub Errfour ! protect eof
 492   Namform$="\"+Space$(18)+"\ " ! formats for print using
 493   Numform$="#### "
 494   While Not Eof(#1) ! thru the file
 495     Input #1,Ref1$,Var1$ ! read a record
 496     St%=1 ! starting position in ref1$
 497     Cl%=0 ! starting position on line
 498     While St%<Len(Ref1$) ! until done with references
 499       If Cl%>56 ! line is full
 500         Print #2 ! end the line
 501         Cl%=0 ! ready for a new line
 502       Endif
 503       If Cl%=0 ! if at beginning of line
 504         Print #2,Using Namform$,Var1$; ! print the variable name
 505         Cl%=Cl%+Len(Namform$) ! move ahead in line
 506         Var1$="" ! but only print name once per variable
 507       Endif
 508       En%=Instr(St%,Ref1$," ") ! find the end of the next line#
 509       If En%=0 ! if there isn't a space,
 510         En%=Len(Ref1$) ! use the rest of the references
 511       Endif
 512       Ll%=En%-St%+1 ! how many characters?
 513       Print #2,Using Numform$,Val(Mid$(Ref1$,St%,Ll%)); ! print the number
 514       Cl%=Cl%+Len(Numform$) ! move ahead in line
 515       St%=En%+1 ! move to next reference
 516     Wend
 517     Print #2 ! end of a variable - end the line
 518   Wend
 519   Eoffour: ! also come here indirectly on eof
 520   Close #1 ! close files
 521   Close #2
 522   Kill Tempfile1$ ! get rid of temporaries
 523 Return
 524 Procedure Errfour
 525   Rem
  Rem special eof routine for the final reporting phase
 526   Rem
  Resume Eoffour
 527 Return
