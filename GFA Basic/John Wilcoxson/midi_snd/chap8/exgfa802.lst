' 8.2  The Source Code
'
' 8.2.1  The  MIDI Programm as a GFA Basic Listing
'
' ---------------------------------------------------------------
'       MIDIALL.LST Listing of the  Main MIDI Programs
' ---------------------------------------------------------------
Dim Feld(4000)                    ! The necessary tables are dimensioned
Dim Tonhoehe(12)                  !  here and filled with values.
Dim Tonname$(12)                  ! The list Tonhoehe() is needed for
For I=0 To 11                     !  the graphical output of the notes.
  Read Tonname$(I)
  Read Tonhoehe(I)
Next I
Data c,0,c#,0,d,5,d#,5,e,10,f,15,f#,15,g,20,g#,20,a,25,a#,25,b,30
Defmouse String$(74,Mki$(0))
Cls
Midikan=1
' ----------------------Main Menu--------------------------------
' The individual Functions and Menu points are always selected by
' a Number, and confirmed with the Carraige Return. The mouse program
' offers a very elegant operational character. The desired Menu point
' pointed at with the mouse, the button is clicked abnd the
' function is executed.   The same thing is true for changing values
' (For Example in the  Editor program), left button = Value increases,
' right button = Value decreases.
Hauptmenu:
Cls                                  ! Clear the Screen and
Deftext 1,16,0,26                    ! and bring a beautiful
Text 100,75,"Midi-Routinen"          ! Script onto the monitor
Deftext 1,1,0,13
Text 50,150,"Midi channel(1)   Sound(2)       Song-Select(3)    All notes off(4)"
Text 50,200,"Local on(5)     Local off(6)    Master Tune(7)     Reset(8)"
Text 50,250,"Omni on(9)      Omni off(10)    Poly on(11)        Mono on(12)"
Text 50,300,"To the Demo-Program(13)           Graphics(14)"
Print At(10,24);"Use (0) to return to the Desktop"
Print At(10,22);                                     ! Input the selected
Input "Please the desired function number:",Ein      ! Function number
' ---------------------------------------------------------------
If Ein=0                                     ! This block serves as a
  Cls                                        ! Safety control, as to
  Text 50,215,"Shall we really return "      ! whether he really wants to
  Deftext 1,16,0,26                          ! leave the program or not.
  Text 250,220,"Go Back to the "
  Deftext 1,1,0,13
  Text 390,215,"DeskTop ?"
  Print At(10,17);
  Input "Please answer (N/Y):",Desk$
  If Desk$=Chr$(89) Or Desk$=Chr$(121)
    Quit
  Else
    Goto Hauptmenu
  Endif
Endif
' ---------------------------------------------------------------
' Here are the various MIDI Routines, different from the way they
' in the C-Listing.  Here they are not individual functions, but
' are expressed as conditional statements. Similarly, all of the
' MIDI-Channel dependent Commands react using the
' Variable MIDIKAN, which is set in the Computer by the MIDI channel
' directly.
If Ein=1
  ' --- Midi channel computer installation ---   ! The MIDI Channel
  Cls                                            ! is not sent via
  Text 100,100,"Please input from the MIDI  "    ! other devices
  Text 100,50,"Actual MIDI channel:"             ! it is served
  Print At(40,3);Midikan                         ! for input
  Print At(10,15);                               ! only by the
  Input Midikan                                  ! Computer itself.
Endif
' ---------------------------------------------------------------
If Ein=2
  ' --- Change the sound program from Computer ---
  Cls
  ' The  Sound number is naturally transferred through other devices,
  ' and not just on the Synthesizer, also on MIDI compatible units like
  ' the Effects Unit, where a new Envelope program could be called up.
  Print At(10,10);"Please input the new Sound number(decimal):"
  Input Soun
  Out 3,191+Midikan
  Out 3,Soun-1
  Cls
Endif
' ---------------------------------------------------------------
If Ein=3
  ' --- Song Select ---           ! Selects another song perhaps on
  Cls                             ! the Drum Computer.
  Print At(10,10);"Please Input the new Song Number:"
  Input Sel
  Out 3,243
  Out 3,Sel
  Cls
Endif
' ---------------------------------------------------------------
If Ein=4
  ' --- All Notes off ---         ! Turn all of the attached
  Out 3,175+Midikan               ! Synthesizers off (at least
  Out 3,123                       ! most of them).
  Out 3,0
Endif
' ---------------------------------------------------------------
If Ein=5
  ' --- Local Control on ---
  Out 3,175+Midikan
  Out 3,122
  Out 3,127
Endif
' ---------------------------------------------------------------
If Ein=6
  ' --- Local Control off ---
  Out 3,175+Midikan
  Out 3,122
  Out 3,0
Endif
' ---------------------------------------------------------------
If Ein=7
  ' --- Tune Request ---
  Out 3,246
Endif
' ---------------------------------------------------------------
If Ein=8
  ' --- System Reset ---
  Out 3,255
Endif
' ---------------------------------------------------------------
If Ein=9
  ' --- Omni Mode on ---
  Out 3,175+Midikan
  Out 3,125
  Out 3,0
Endif
' ---------------------------------------------------------------
If Ein=10
  ' --- Omni Mode off ---
  Out 3,175+Midikan
  Out 3,124
  Out 3,0
Endif
' ---------------------------------------------------------------
If Ein=11
  ' --- Poly mode on ---
  Out 3,175+Midikan
  Out 3,127
  Out 3,0
Endif
' ---------------------------------------------------------------
If Ein=12
  ' --- Mono mode on ---
  Cls
  Print At(5,10);"Please Input the number of the Transfer Channel:"
  Input M
  Out 3,175+Midikan
  Out 3,126
  Out 3,M
  Cls
Endif
' ---------------------------------------------------------------
' Both of the menu selections 13 and 14 lead to a further menu,
'  a further level of menus, as in a larger function.
If Ein=13
  @Demomenu
Endif
If Ein=14
  @Graphik
Endif
Goto Hauptmenu        ! There also has to be a little spaghetti code,
'                     !  however it is a useful function.
' ---------------------------------------------------------------
' ---------------------End of the Main Menu----------------------
' ---------------------------------------------------------------
' --------------------Begin the Demo menu----------------------------
' The lower level menus are coded as Procedures (for C-Speakers, as Function)
'  to ease operation.
Procedure Demomenu
  Do                       ! DEFTEXT and TEXT allow a particular
    Cls                    ! Text output for the Menus
    Deftext 1,16,0,26
    Text 200,70,"Demo-Program"
    Deftext 1,1,0,13
    Text 130,120,"This is where the different Demo Routines for the"
    Deftext 1,16,0,26
    Text 120,200,"Synthesizer - Computer"
    Deftext 1,1,0,13
    Text 230,250,"connections get selected !"
    Print At(5,20);"Main Menu(0)     Communication(1)     Chords(2)     Sequencer(3)"
    Print At(10,24);
    Input "Please selected the desired Function Number: ",Dein
    If Trunc(Dein)=1                  ! Further branching will occur here
      @Komdemo                        ! to the individual Funktions, that can
    Endif                             ! also be selected as stand alone.
    If Trunc(Dein)=2                  ! Verify for yourself which subfunction
      @Akkorddemo                     ! is slected and delete a line
    Endif                             ! containing PROCEDURE, and RETURN to the
    If Trunc(Dein)=3                  ! Beginning and End to the Main Part.
      @Sequencer                      ! In the next Procedure the
    Endif                             ! places will be marked, so that
    Exit If Trunc(Dein)=0             ! you can test the Functions
    @Killtbuff                        ! separately.
  Loop
Return
' ----------------------------------------------------------------
' ----------------------------------------------------------------
'  Communications Demo; with Pitch, Note, and Octave identification
' ----------------------------------------------------------------
Procedure Komdemo                     ! This line has to be deleted
  Do                                  ! when this Function runs as Stand-Alone.
    Cls
    Print At(10,5);"Communications-Demo"
    Print At(10,7);"Comm1 plays from the Computer Keyboard"
    Print At(10,9);"Comm2 shows the pitch of the notes played on a Synthesizer"
    Print At(10,15)
    Input "          Menu (0)   Comm1 (1)   Comm2 (2) ?",Kdein
    If Kdein=1
      @Komm1                          ! Both Procedures (Komm1 und
    Endif                             ! Komm2) must be available,
    If Kdein=2                        ! likewise the Procedures the
      @Komm2                          ! they call; Killtbuf, Killmbuff
    Endif                             ! and Shownote
    Exit If Kdein=0
    @Killtbuff
  Loop
Return                                ! This line also has to be removed
'                                     !  when the functon is stand-alone.
' ---------------------------------------------------------------
' ---------------------------------------------------------------
'  Playing from the computer keyboard.
' ---------------------------------------------------------------
' Different than the C-Listing, the two function are not
'  generated together.
Procedure Komm1        ! Play notes on the Synthesizer from the Keyboard
  Cls
  Print "Comm1 - to terminate hit RETURN"
  Do
    @Killtbuff                       ! Clear the keyboard buffer
    Key1=Inp(2)                      ! Recognize the next key
    Out 3,128                        ! first send out a Note_off
    Out 3,Key-37
    Out 3,0
    Exit If Key1=13                  ! Terminate when there is no key
    Key=Key1
    If Key>96 And Key<123            ! Determine if its in the key range
      Out 3,144
      Out 3,Key-37                   ! Send the key code as a MIDI code
      Out 3,64
    Else                             ! When the key code is not in range
      Out 3,176                      ! of the keyboard numbers
      Out 3,123                      ! then send an All_Notes_off command
      Out 3,0
    Endif
  Loop
  @Killtbuff
Return
' ---------------------------------------------------------------
Procedure Komm2     ! Show the Pitch of the synthi key on the screen
  Cls
  @Killmbuff
  Print "Comm2 - Terminate with an 's'"
  Repeat
  Until Inkey$=""
  Do
    Exit If Inkey$="s"            ! Terminate with the key input 's'
    If Bios(1,3)=-1         ! Very IMPORTANT - CHECK THE STATUS OF THE MIDI
      ' other wise the program will hang up unrecoverably!!!
      Status=Bios(2,3)+256        ! An offset of 256 is always necessary
      If Status=144               ! In an earlier version the offset was
        Tonh=Bios(2,3)+256        !  different, maybe they didn't take the
        Velocity=Bios(2,3)+256    ! MIDI Interface very serious.
        @Shownote                 ! Otherwise this  Listing is practically
      Endif                       ! identical to the C-Version.
    Endif
  Loop
  @Killtbuff
Return
' ---------------------------------------------------------------
' Recognize the octave and the tone name
Procedure Shownote
  Oktav=Fix(Tonh/12)
  Oktave=Oktav-2
  Ton=Tonh-(Oktav*12)
  Print "Routine can be terminated by hitting 's'!"
  Print "Pitch as a  Midi-Note, Octave and Letter name:"
  Print Tonh,Oktave,Tonname$(Ton)
Return
' ---------------------------------------------------------------
' ---------------------------------------------------------------
Procedure Akkorddemo           ! The second big level two  Demo function.
  '                            !  Again this is different from the C-Programm
  '                            !  in that in the running program the offset
  '                            !  value has to be offset.
  Do
    Cls
    Print "Chord demo - a single key on the synthesizer produces a chord. "
    Input "Input the first tone selection:  ",Offset1    ! Selection of the offsets
    Input "Input the second selection    :  ",Offset2
    Input "Input the third  selection    :  ",Offset3
    Print
    Print "Now you can play four notes with one finger !"
    Print "Terminate by hitting an 's'"
    @Killtbuff
    Do
      Exit If Inkey$="s"
      If Bios(1,3)=-1                       ! Check the Synthi Status, like
        Status=Bios(2,3)+256                !  we did before.  Pay attention!
        If Status=144 Or Status=128
          Tonh=Bios(2,3)+256
          Velocity=Bios(2,3)+256
          ' --------------------------
          ' Print Status,Tonh,Velocity
          ' --------------------------
          ' The next to last line can be converted for control applications.
          ' Simply remove the Remark symbol from the front of the line.
          ' The output will be significantly slowed, so that the quick
          ' parts no longer have time to work the tones correctly.
          ' Later the offset tones can be heard. You can see how a MIDI
          ' Program quickly becomes Time-Critical.
          If Offset1<>0           ! If the Offset tone = 0, Then
            Offset=Offset1        ! it is not output, in order to
            @Putchord             ! save program run time.
          Endif
          If Offset2<>0
            Offset=Offset2
            @Putchord
          Endif
          If Offset3<>0
            Offset=Offset3
            @Putchord
          Endif
        Endif
      Endif
    Loop
    @Killtbuff
    Cls
    Input "Return to Menu (0) or new Select a new tone (1)?  ",Ein
    Repeat
    Until Ein=0 Or Ein=1
    Exit If Ein=0
  Loop
  @Killtbuff
Return
' ---------------------------------------------------------------
Procedure Putchord     ! This subroutine outputs the
  Out 3,Status         ! selected additional sound.
  Out 3,Tonh+Offset
  Out 3,Velocity
Return
' ---------------------------------------------------------------
' ---------------------------------------------------------------
' Sequencer demo for multi voice input  and re-play
' The complete Program explanation is in the  C-Listing,
' both Programs built in almost identical fashion.
' ---------------------------------------------------------------
Procedure Sequencer
  Cls
  Print "Sequencer demo !"
  Do
    Do
      Input "Record(1) Play(2) Stop(3) Continue(4) Sequence End(5) Menu(0)",Sein
      Exit If Sein>=0 And Sein<=5
    Loop
    ' Functions 3 und 4 are used inside function 2.
    If Sein=1
      @Record
    Endif
    If Sein=2
      @Play
    Endif
    If Sein=5
      Print "Sequence will be lost!"
      For I=0 To 4000
        Feld(I)=0
      Next I
      Print "Sequence will be lost!"
    Endif
    Exit If Sein=0
  Loop
  @Killtbuff
Return
' ---------------------------------------------------------------
Procedure Record
  Cls
  Print "Input from the Synthesizer"
  Print "The collection begins with the first Tone played!"
  Print "The collection will terminate, and return to the sub-menu,"
  Print " when the 's' key is hit."
  ' ----------------------------Read in the First MIDI value --------
  Dummy=0
  While Bios(1,3)<>0
    Dummy=Bios(2,3)+256
    Exit If Dummy=254
  Wend
  X=0
  Dummy=0
  @Killtbuff
  While Dummy=0
    If Bios(1,3)=-1
      Repeat
        X=Bios(2,3)+256
      Until X=144 Or Inkey$="s"
      @Killtbuff
      If X=144
        Feld(0)=144
        Feld(1)=Bios(2,3)+256
        F=2
        St=Timer
        Dummy=1
      Endif
    Endif
    Exit If Inkey$="s"
  Wend
  ' ----------------------------MIDI Input LOOP -----------
  ' Ifdummy=1
  While F<4000
    If Bios(1,3)=-1
      Repeat
        If Bios(1,3)=-1
          X=Bios(2,3)+256
        Endif
      Until X=144 Or X=128 Or Inkey$="s"
      If X=144 Or X=128
        Feld(F+1)=X
        Feld(F+2)=Bios(2,3)+256
        Nt=Timer
        Feld(F)=Nt-St
        St=Nt
        F=F+3
      Endif
    Endif
    Exit If Inkey$="s"
  Wend
  ' Endif
  @Killtbuff
Return
' -------------------------------------SOUND OUTPUT-------------
Procedure Play
  Dummy=0
  F=0
  For F=0 To 4000 Step 3
    Exit If Feld(F)=0
    If Inkey$="3"             ! The STOP-Funktion is checked to see if it
      Out 3,176               ! has been turned off, if YES then wait until
      Out 3,123               ! Continue is present.  Here is also where
      Out 3,0                 ! the necessary synchronization commands
      Repeat                  ! are injected, if for example a Drum Machine
      Until Inkey$="4"        ! is connected it will recognize and react
    Endif                     ! to the commands.
    Out 3,Feld(F)
    Out 3,Feld(F+1)
    Out 3,64
    St=Timer                  ! The Timer statement the  C utilization
    Repeat                    ! of the function systime()
      Nt=Timer
    Until Nt-St>=Feld(F+2)
  Next F
Return
' ----------------------------End Sequencer-------------------
' ---------------------------------------------------------------
' ----------------------------Graphic Demo--------------------
' These Routines show the combination of MIDI and Graphic programming.
' New notes will be shown in the Note system as whole Notes.
' Naturally we are a long way from Music Notation program, but if you
' take this Routine as a starting point, and think about the kinds of
' problems that have to be solved to get the notes in their correct
' location and Notation. There are diverse Signature symbols, Keys,
' Note systems, note symbols, help lines, Flags, open and closed
' Note heads, rest symbols, etc. that have to be dealt with.
' ---------------------------------------------------------------
Procedure Graphik
  Cls
  @Killmbuff            ! MIDI-Buffer clear
  @Linie                ! Draw the 5 line cleft
  Repeat
    @Midiin             ! Read in the tones over the MIDI
  Until Inkey$="s"      ! until you receive an 's', then break-off
Return
' ---------------------------------------------------------------
Procedure Linie
  Print "Graphical Music Notation output for notes from the MIDI (Demo)"
  Print "Under the note will be written the octave and note name."
  Print "After the eighth note it will start over front of the cleft!"
  Print "To Terminate hit an 's'"
  Line 50,150,500,150              ! Here are the five lines of the note
  Line 50,160,500,160              ! system.
  Line 50,170,500,170
  Line 50,180,500,180
  Line 50,190,500,190
Return
' -------------------------------
Procedure Midiin                   ! This routine reads a note from the
  If Bios(1,3)=-1                  !  MIDI channel.
    Status=Bios(2,3)+256
    If Status=144
      Tonh=Bios(2,3)+256
      Velocity=Bios(2,3)+256
      @Zeigenote                   ! Put it on the screen
    Endif                          !  now.
  Endif
Return
' -------------------------------
Procedure Zeigenote
  Oktav=Fix(Tonh/12)               ! Now we will do our famous Note
  Oktave=Oktav-2                   ! name and octave computation.
  Ton=Tonh-(Oktav*12)
  @Note                            ! Note display
  Text 35+Abstand,300,Oktave       ! pass the note name and octave for
  Text 50+Abstand,300,Tonname$(Ton)!  display under the symbol.
Return
' -------------------------------
Procedure Note                     ! This routine displays the Note
  If Abstand>350                   ! If 8 notes have been shown,
    Abstand=0                      ! go back to the start of the lines.
    Cls                            ! Clear te screen
    @Linie                         ! ReWrite the cleft (5 lines)
  Endif                            ! The higher the note is in the system
  Circle 100+Abstand,200-Tonhoehe(Ton),5        ! Field with the fixed tone
  If Ton=0 Or Ton=1                             ! shown as whole circle
    @Hilfslinie                                 ! if needed with a help line
  Endif
  If Ton=1 Or Ton=3 Or Ton=6 Or Ton=8 Or Ton=10 ! or with a note symbol (#)
    X=85+Abstand                                ! and then naturally pass
    Y=193-Tonhoehe(Ton)                         ! replacement
    @Kreuz                                      ! Before the crosses
  Endif
  Abstand=Abstand+50
Return
' -------------------------------
Procedure Kreuz                                ! This routine build the symbol,
  Line X,Y,X,Y+20                               ! a double cross (#)
  Line X+5,Y-5,X+5,Y+15
  Line X-3,Y+10,X+8,Y+0
  Line X-3,Y+15,X+8,Y+5
Return
' -------------------------------
Procedure Hilfslinie
  ' Compute the location for the Help Line
  Line 92+Abstand,200-Tonhoehe(Ton),108+Abstand,200-Tonhoehe(Ton)
Return
' -------------------------End Graphic demo----------------------
' ---------------------------------------------------------------
' --------------------------Support Routine----------------------
Procedure Killmbuff                      ! Clear the  MIDI-IN Buffer
  While Bios(1,3)<>-1
    @Midiin
  Wend
Return
' -------------------------------
Procedure Killtbuff                      ! Clear the keyboard buffer.
  Repeat
  Until Inkey$=""
Return
' ========================Program end ===========================
