'
' *****************************************************************************
' *                                                                           *
' * 3D-Grafik Editier- und Demoprogramm fÅr die ST von Martin A. Wielebinski. *
' *                                                                           *
' * (c) MAXON Computer GmbH                                                   *
' *****************************************************************************
'
ON ERROR GOSUB fehler         ! Kann nie schaden
DEFTEXT 1,0,0,4               ! Immer Minitext
xs=640                        ! totale x Breite 640
ys=400                        ! totale y Hîhe 400
tyo=14                        ! Y-Offset fÅr die MenÅtexte
IF XBIOS(4)<>2                ! nicht hochauflîsend ?
  ys=200                      ! ja, y Hîhe 200
  tyo=7                       ! neuer Y-Textoffset
  IF XBIOS(4)=0               ! niedrigste Auflîsung ?
    xs=320                    ! ja, x Breite 320
  ENDIF
ENDIF
xmi=xs DIV 2                  ! X-Mitte
ymi=ys DIV 2                  ! Y-Mitte
xsl=xs-1                      ! Letzter wÑhlbarer X-Wert
ysl=ys-1                      ! dito Y
xtx=ys+(xs-ys)/2-8            ! X-Offset fÅr die MenÅtexte
yty=ys/20                     ! Y-Texthîhe des MenÅs
'
disk$="\"                     ! Default Pfad
darstx=8                      ! Verzerrung fÅr X
darsty=11                     ! und Y
gittab=10                     ! Default Gitterabstand = 10
grmbo=1                       ! Intelligente, aber langsame Darstellung
'
pun_max=299                   ! Anzahl der maximal mîglichen Punkte
fl_max=199                    ! Anzahl der maximal mîglichen FlÑchen
eck_max=19                    ! Maximale Eckenzahl einer FlÑche
'
DIM sk%(fl_max)               ! Nummernfeld fÅr die Sortierung der FlÑchen
DIM zh%(fl_max)                ! Speicher fÅr die Tiefe der FlÑchenmitten
DIM xyz%(2,pun_max)           ! Das Feld fÅr die Punktkoordinaten
DIM xy%(2,pun_max)            ! Feld der umgerechneten Punkte
DIM fl%(eck_max+3,fl_max)     ! Das Feld fÅr die FlÑchennummern und -infos
DIM xyz0%(2)                  ! Standpunkt des Betrachters
DIM nrk(2)                    ! Neigung, Richtung, Kippung
DIM arbxyz%(2)                ! Arbeitsnullpunkt (fÅr die Eingabe)
DIM x%(eck_max),y%(eck_max)   ! 2 Felder fÅr die Polyfillfunktion
'
COLOR 4
FOR i=0 TO 19                              ! Bildschirm initialisieren
  BOX ys,yty*i,xsl,yty*(i+1)               ! Box ausgeben
  READ a$
  TEXT ys+(xs-ys)/2-LEN(a$)*3,yty*i+tyo,a$ ! und den MenÅtext
NEXT i
LINE ys,ysl,xs,ysl
GET ys,0,xsl,ysl,iscr$                     ! MenÅleiste abspeichern
'
GOSUB show                    ! Koordinatenkreuz
DEFMOUSE 5                    ! Fadenkreuz
DO                            ! und ab in die Hauptschleife:
  MOUSE mx,my,mk
  IF mx<ys AND (mx<>omx OR my<>omy)     ! Maus im Bild und neuer Wert ?
    TEXT xtx,tyo,"     "                ! ja, Werte anzeigen...
    TEXT xtx,yty+tyo,"     "
    TEXT xtx,tyo,arbxyz%(0)-ymi+mx      ! x +
    TEXT xtx,yty+tyo,arbxyz%(1)+ymi-my  ! y ausgeben und
    omx=mx
    omy=my                              ! als bekannte Werte Åbernehmen
  ENDIF
  IF mk                                 ! Maustaste gedrÅckt ?
    IF mx>ys                            ! ja, in MenÅleiste ?
      com=(my DIV yty)+1                ! ja, Befehl errechnen und ausfÅhren:
      IF com<10
        ON com GOSUB wert,wert,wert,in_gr,verz,gitt,phol,fhol,g3d
      ELSE
        ON com-9 GOSUB f_use,quader,d,d,d,d,d,d,olad,osp,pstp
      ENDIF
      DEFMOUSE 5
      GOSUB show                       ! Bildschirmausgabe erneuern.
    ELSE                               ! falls nicht in der MenÅleiste:
      ON punbo GOSUB p_akt             ! Im Punktmodus Punkt setzen/lîschen
      ON flaebo GOSUB f_akt            ! Im FlÑchenmodus setzen/rÅcksetzen
    ENDIF
  ENDIF
LOOP                                   ! Auf ewig...
'
PROCEDURE in_gr  ! Gibt Informationen aus und schaltet den Ausgabemodus um
  LOCAL a$
  a$="Das Objekt hat "+STR$(p_anz)+" Punkte,|und "+STR$(f_anz)+" FlÑchen.|"
  GOSUB ali(2,a$+"Grafikmodus wÑhlen:",0,"Schnell|Schîn")
  grmbo=but-1
RETURN
'
PROCEDURE xyz_show
  LOCAL i
  FOR i=0 TO 2                         ! Arbeitsnullpunkt anzeigen...
    TEXT xtx,tyo+yty*i,"     "
    TEXT xtx,tyo+yty*i,arbxyz%(i)
  NEXT i
RETURN
'
PROCEDURE wert               ! Arbeitsnullpunkt versetzen
  LOCAL a$
  PAUSE 8                    ! fÅr gÅnstige Bedienung
  IF mx<ys+30                ! "-" gedrÅckt ?
    REPEAT
      DEC arbxyz%(com-1)     ! Ja erniedrigen bis Taste losgelassen
      GOSUB xyz_show
    UNTIL MOUSEK=0
  ELSE
    IF mx>xs-30              ! "+" ?
      REPEAT
        INC arbxyz%(com-1)   ! dito erhîhen
        GOSUB xyz_show
      UNTIL MOUSEK=0
    ELSE                     ! ansonsten numerische Werteingabe
      a$="BITTE DEN NEUEN|STANDARTWERT FöR DIE|"+CHR$(88+com-1)
      GOSUB inbox(a$+" KOORDINATE EINGEBEN.",1)
      arbxyz%(com-1)=wert
    ENDIF
  ENDIF
RETURN
'
PROCEDURE gitt               ! Gitter schalten und Maûstab eingeben
  LOCAL a$
  IF mk=1                    ! Umschalten ?
    a$="Gitter einschalten ???|Es vereinfacht die|Eingabe von Punkten."
    GOSUB ali(2,a$,gittbo+1,"An|Aus")
    IF but=gittbo+1
      gittbo=2-but
    ENDIF
  ELSE                       ! Ansonsten Maûstab entgegennehmen
    GOSUB inbox("GITTERABSTAND SETZEN.|BISHERIGER ABSTAND: "+STR$(gittab),1)
    IF wert
      gittab=wert
    ENDIF
  ENDIF
RETURN
'
PROCEDURE phol               ! Punktmodus umschalten oder XYZ-Eingabe
  LOCAL i,a$
  IF mk=2                    ! XYZ-Koordinateneingabe ?
    DO                       ! ja:
      a$="Einen Punkt anhand|der XYZ-Koordinaten|eingeben ?????"
      GOSUB ali(2,a$,2," JA |Nein")
      EXIT IF but=2
      a$="FöR DEN NEUEN PUNKT|JETZT BITTE DIE|"
      GOSUB inbox(a$+" KOORDINATEN EINGEBEN.",3)
      GOSUB p_neu(x%(0),x%(1),x%(2))
    LOOP                    ! Noch einen Punkt ???
  ELSE
    a$="Punktmodus einschalten ?|Links Punkte setzen,|Rechts lîschen."
    GOSUB ali(2,a$,punbo+1," JA |Nein")
    IF but=punbo+1
      punbo=2-but
      flaebo=0
    ENDIF                   ! ansonsten Punktmodus umschalten
  ENDIF
RETURN
'
PROCEDURE fhol              ! FlÑchenmodus ein/ausschalten
  LOCAL a$
  a$="FlÑchenerstellung starten ?|Einfach mit der Maus|Punkte verbinden."
  GOSUB ali(2,a$,flaebo+1," JA |Nein")
  IF but=flaebo+1
    flaebo=2-but
    punbo=0
  ENDIF
RETURN
'
PROCEDURE p_akt               ! Maus-Punkteingabe bzw. Lîschaktion:
  LOCAL x,y,i
  x=arbxyz%(0)-ymi+mx
  y=ymi-arbxyz%(1)-my         ! Punktdaten umrechnen
  IF mk=2 AND p_anz>0         ! Punkt lîschen ???
    GOSUB punget(x,y)         ! ja, also suchen
    xyz%(0,nr)=xyz%(0,p_anz)
    xyz%(1,nr)=xyz%(1,p_anz)
    xyz%(2,nr)=xyz%(2,p_anz)  ! lîschen (durch umsetzen)
    DEC p_anz                 ! Punktanzahl -= 1
  ELSE                        ! ansonsten Punkteingabe:
    IF gittbo                 ! falls Gitter vorhanden -> anpassen
      x=INT((x+gittab/2)/gittab)*gittab
      y=INT((y+gittab/2)/gittab)*gittab
    ENDIF
    GOSUB p_neu(x,y,arbxyz%(2))       ! und Punkt eintragen
  ENDIF
  GOSUB show                  ! VerÑnderungen anzeigen
  GOSUB mclr
RETURN
'
PROCEDURE p_neu(x,y,z)        ! Neuen Punkt aufnehmen
  LOCAL i,bo
  bo=1                        ! Im Zweifel neuer Punkt
  IF p_anz
    FOR i=1 TO p_anz          ! Alle Punkte durchgehen
      IF xyz%(0,i)=x AND xyz%(1,i)=y AND xyz%(2,i)=z
        bo=0                  ! falls bereits vorhanden bo = 0
        pnr=i                 ! und Pnr gleich die Nummer
      ENDIF
    NEXT i
  ENDIF
  IF bo                       ! falls Punkt noch nicht vorhanden
    INC p_anz                 ! PunktzÑhler += 1
    xyz%(0,p_anz)=x           ! und Punkt eintragen
    xyz%(1,p_anz)=y
    xyz%(2,p_anz)=z
    pnr=p_anz                 ! Pnr = Punktnummer
  ENDIF
RETURN
'
PROCEDURE punget(x,y)         ! Diese Procedure sucht den Punkt, der am
  LOCAL i,ab,wzae             ! nÑchsten bei X,Y liegt.
  ab=2000                     ! Default Abstand
  nr=0                        ! Default Punktnummer
  FOR i=1 TO p_anz            ! Alle Punkte durchgehen
    wzae=ABS(xyz%(0,i)+(xyz%(2,i)-arbxyz%(2))/darstx-x)
    wzae=wzae+ABS(xyz%(1,i)+(xyz%(2,i)-arbxyz%(2))/darsty-y)
    IF wzae<ab                ! Falls neuer Abstand kleiner als bisher
      ab=wzae                 ! neuen Abstand
      nr=i                    ! und Punktnummer merken
    ENDIF
  NEXT i
RETURN
'
PROCEDURE f_akt               ! FlÑchenerstellung:
  LOCAL i,j,k,x,y,p1,p2,turn,pp1,pp2
  IF p_anz>2                  ! GenÅgend Punkte fÅr eine FlÑche vorhanden?
    x=arbxyz%(0)-ymi+mx
    y=ymi-arbxyz%(1)-my       ! x,y umrechnen
    GOSUB punget(x,y)         ! Punkt suchen
    IF mk=1                   ! neuen Punkt setzen ???
      IF flnr>0               ! ja, neue FlÑche ?
        j=1                   ! nein
        FOR i=0 TO flnr       ! neuer Punkt bereits vorhanden ?
          IF fl%(i,f_anz)=nr
            j=0               ! jawoll, also Quark! (oder FlÑche fertig)
          ENDIF
        NEXT i
      ENDIF
      IF j=1 OR flnr=0                  ! Erster Punkt oder kein Quark ?
        IF flnr=eck_max
          GOSUB ali(1,"Soviele Ecken|sind nicht|mîglich !!!",1,"Honk!")
        ELSE
          fl%(flnr,f_anz)=nr            ! ja, abspeichern
          INC flnr                      ! FlÑchennummerzÑhler erhîhen
          fl%(eck_max+1,f_anz)=flnr-1   ! und abspeichern
        ENDIF
      ENDIF
      IF fl%(0,f_anz)=nr AND flnr>2     ! FlÑche fertig ?
        GOSUB colget                    ! Farbe oder Muster holen
        fl%(eck_max+2,f_anz)=cnr        ! abspeichern
        fl%(eck_max+3,f_anz)=czei
        turn=0
        IF f_anz                        ! Bei anliegenden FlÑchen auf
          FOR i=0 TO f_anz-1            ! Korkenzieherregel prÅfen
            FOR j=1 TO fl%(eck_max+1,i)+1
              p1=fl%(j-1,i)             ! Mit den alten Linien vergleichen
              IF j=fl%(eck_max+1,i)+1
                p2=fl%(0,i)
              ELSE
                p2=fl%(j,i)
              ENDIF
              FOR k=1 TO flnr
                pp1=fl%(k-1,f_anz)
                IF k=flnr
                  pp2=fl%(0,f_anz)
                ELSE
                  pp2=fl%(k,f_anz)
                ENDIF
                IF p1=pp1 AND p2=pp2    ! Bei gleicher Ausrichtung
                  turn=1                ! ist die Regel verletzt
                ENDIF
              NEXT k
            NEXT j
          NEXT i
        ENDIF
        IF turn                        ! Regel verletzt ?
          FOR i=0 TO flnr-1            ! Dann Feld umsortieren
            x%(flnr-1-i)=fl%(i,f_anz)
          NEXT i
          FOR i=0 TO flnr-1
            fl%(i,f_anz)=x%(i)
          NEXT i
        ENDIF
        INC f_anz                      ! Anzahl der FlÑchen erhîhen
        flnr=0                         ! FlÑcheneckenzÑhler wieder auf 0
      ENDIF
    ELSE                               ! ansonsten letzen Punkt lîschen
      IF flnr>0                        ! ist noch einer da ?
        DEC flnr                       ! jawoll, vergiû ihn.
      ENDIF
    ENDIF
    GOSUB show
  ENDIF
RETURN
'
PROCEDURE colget       ! Hier werden Farbe und Muster zur Auswahl angeboten
  LOCAL i,j,zw$
  GET xmi-100,ymi-40,xmi+100,ymi+40,zw$    ! Platz schaffen
  DEFFILL 0
  PBOX xmi-100,ymi-40,xmi+100,ymi+40
  COLOR 1
  BOX xmi-100,ymi-40,xmi+100,ymi+40        ! Eingabebox
  holcol:
  FOR j=0 TO 2
    FOR i=0 TO 15
      IF j=0
        DEFFILL i,2,8
      ELSE
        DEFFILL 1,j+1,i+1
      ENDIF
      PBOX xmi+10*(i-8),ymi+20*(j-1.5),xmi+10*(i-8)+9,ymi+20*(j-1.5)+19
    NEXT i
  NEXT j                                ! alle Mîglichkeiten anbieten
  GOSUB mhol                            ! Mausklick abwarten
  cnr=(mx-(xmi-80)) DIV 10
  czei=(my-(ymi-30)) DIV 20             ! Wahl errechnen
  IF cnr<0 OR cnr>15 OR czei<0 OR czei>2
    GOTO holcol                         ! War KÑse, also von vorne
  ENDIF
  IF czei<>0                            ! Musternummer anpassen
    INC cnr
    INC czei
  ENDIF
  PUT xmi-100,ymi-40,zw$                ! Bildschirm restaurieren
RETURN
'
PROCEDURE show                                   ! PhÑnomenale Anzeigeroutine
  LOCAL i,j,ii,jj,x,y,x2,y2,p1,p2,pp1,pp2        ! aller Ereignisse
  DEFFILL 0
  PBOX 0,0,ysl,ysl                    ! Bild lîschen
  COLOR 8
  IF gittbo                           ! Wenn nîtig Gitter anzeigen
    FOR i=-((arbxyz%(0)-ymi) MOD gittab) TO ysl STEP gittab
      LINE i,0,i,ysl
    NEXT i
    FOR i=((arbxyz%(1)+ymi) MOD gittab) TO ysl STEP gittab
      LINE 0,i,ysl,i
    NEXT i
  ENDIF
  COLOR 2
  IF ABS(arbxyz%(0))<ymi            ! Falls mîglich Koordinatenkreuz
    LINE ymi-arbxyz%(0),0,ymi-arbxyz%(0),ysl
  ENDIF
  IF ABS(arbxyz%(1))<ymi            ! ausgeben
    LINE 0,ymi+arbxyz%(1),ysl,ymi+arbxyz%(1)
  ENDIF
  '
  IF f_anz                          ! Die Linien aller FlÑchen anzeigen
    FOR j=0 TO f_anz-1
      FOR i=1 TO fl%(eck_max+1,j)+1
        p1=fl%(i-1,j)
        IF fl%(eck_max+1,j)+1=i
          p2=fl%(0,j)               ! Der letzte Punkt ist der erste
        ELSE
          p2=fl%(i,j)
        ENDIF
        DEFLINE 3
        IF grmbo                    ! Sortiert ?
          jj=0
          DO
            IF j<>jj
              ii=1
              DO
                pp1=fl%(ii-1,jj)
                IF fl%(eck_max+1,jj)+1=ii
                  pp2=fl%(0,jj)               ! Der letzte Punkt ist der erste
                ELSE
                  pp2=fl%(ii,jj)
                ENDIF
                IF p1=pp2 AND p2=pp1
                  DEFLINE 2                   ! Mehrfache als Strichlinien
                  jj=f_anz
                  ii=eck_max+1                ! Untersuchung fertig...
                ENDIF
                INC ii
                EXIT IF ii>fl%(eck_max+1,jj)+1
              LOOP
            ENDIF
            INC jj
            EXIT IF jj>=f_anz
          LOOP
        ENDIF
        x=ymi-arbxyz%(0)+xyz%(0,p1)+(xyz%(2,p1)-arbxyz%(2))/darstx
        y=ymi-arbxyz%(1)-(xyz%(1,p1)+(xyz%(2,p1)-arbxyz%(2))/darsty)
        x2=ymi-arbxyz%(0)+xyz%(0,p2)+(xyz%(2,p2)-arbxyz%(2))/darstx
        y2=ymi-arbxyz%(1)-(xyz%(1,p2)+(xyz%(2,p2)-arbxyz%(2))/darsty)
        LINE x,y,x2,y2
      NEXT i
    NEXT j
  ENDIF
  '
  DEFLINE 1
  IF flnr>1             ! Die Linien einer neuen FlÑchen ausgeben
    FOR i=1 TO flnr-1   ! DurchzÑhlen
      p1=fl%(i-1,f_anz)
      p2=fl%(i,f_anz)
      x=ymi-arbxyz%(0)+xyz%(0,p1)+(xyz%(2,p1)-arbxyz%(2))/darstx
      y=ymi-arbxyz%(1)-(xyz%(1,p1)+(xyz%(2,p1)-arbxyz%(2))/darsty)
      x2=ymi-arbxyz%(0)+xyz%(0,p2)+(xyz%(2,p2)-arbxyz%(2))/darstx
      y2=ymi-arbxyz%(1)-(xyz%(1,p2)+(xyz%(2,p2)-arbxyz%(2))/darsty)
      LINE x,y,x2,y2
    NEXT i
  ENDIF
  '
  IF p_anz                        ! Punkte vorhanden ?
    COLOR 1
    FOR i=1 TO p_anz              ! ja, alle ausgeben
      x=ymi-arbxyz%(0)+(xyz%(0,i)+(xyz%(2,i)-arbxyz%(2))/darstx)
      y=ymi-arbxyz%(1)-(xyz%(1,i)+(xyz%(2,i)-arbxyz%(2))/darsty)
      IF xyz%(2,i)>arbxyz%(2)
        DRAW x-1,y TO x,y-1 TO x+1,y TO x,y+1 TO x-1,y
      ELSE
        IF xyz%(2,i)=arbxyz%(2)   ! Je nach Z-Wert unterschiedlich groû
          LINE x-1,y-1,x+1,y+1
          LINE x-1,y+1,x+1,y-1
        ELSE
          LINE x-2,y-2,x+2,y+2
          LINE x-2,y+2,x+2,y-2
        ENDIF
      ENDIF
      IF flnr>0
        IF i=fl%(flnr-1,f_anz)
          CIRCLE x,y,4
        ENDIF
      ENDIF
    NEXT i
  ENDIF
  PUT ys,0,iscr$
  GOSUB xyz_show                      ! Nullpunkt ausgeben
  COLOR punbo
  CIRCLE ys+5,6.5*yty,2               ! Punktmodus anzeigen
  COLOR flaebo
  CIRCLE ys+5,7.5*yty,2               ! FlÑchenmodus anzeigen
RETURN
'
PROCEDURE g3d                   ! Grafikshow
  LOCAL i,mkk,t$,scr$,osp,nsp
  IF f_anz>0
    scr$="Mit der linken Maustaste|kînnen Sie die Ansicht|verÑndern, mit der"
    GOSUB ali(0,scr$+" rechten|die Grafik wieder verlassen.",1,"Klasse!")
    CLS
    xyz0%(2)=500                ! Z-Startwert
    osp=XBIOS(2)
    scr$=SPACE$(32512)
    nsp=VARPTR(scr$)            ! Einen zweiten Bildschirm
    nsp=((nsp+256) DIV 256)*256 ! an gute Addresse legen
    GOSUB mclr
    HIDEM
    karneval:
    REPEAT
      VOID XBIOS(5,L:nsp,L:osp,-1)
      GOSUB verdreht
      VOID XBIOS(5,L:osp,L:nsp,-1)
      GOSUB verdreht
      mkk=MOUSEK
    UNTIL mkk
    VOID XBIOS(5,L:osp,L:osp,-1)
    IF mkk=1
      GOSUB mclr
      REPEAT
        t$=INKEY$
        IF t$<>""
          GOSUB befehle
          GOSUB transform
          GOSUB anzeige
          IF t$="?"
            PRINT "  Befehle ZOOM: '+', '-';  NRK = 0: '0';";
            PRINT "  'N'eigung, 'R'ichtung, 'K'ippung."
          ENDIF
        ENDIF
      UNTIL MOUSEK
      GOSUB mclr
      GOTO karneval
    ENDIF
    SHOWM
    GOSUB mclr
  ENDIF
RETURN
'
PROCEDURE verdreht
  FOR i=0 TO 2
    nrk(i)=nrk(i)+0.2/(i+1)
  NEXT i                ! Winkel weiterbewegen
  GOSUB transform       ! Transformation
  GOSUB anzeige         ! Bildschirmausgabe
  xyz0%(0)=MOUSEX-xmi
  xyz0%(1)=ymi-MOUSEY
RETURN
'
PROCEDURE befehle
  IF t$>="a" AND t$<="z"    ! Nur Groûbuchstaben
    t$=CHR$(ASC(t$)-32)
  ENDIF
  IF t$="+"
    SUB xyz0%(2),16
  ENDIF
  IF t$="-"
    ADD xyz0%(2),16
  ENDIF
  IF t$="0"
    FOR i=0 TO 2
      nrk(i)=0
    NEXT i
  ENDIF
  IF t$="N" OR t$="R" OR t$="K"
    GOSUB inbox("BITTE GEBEN SIE DEN WERT|FöR "+t$+" IN ALTGRAD AN.",1)
    wert=wert/180*PI
  ENDIF
  IF t$="N"
    nrk(0)=wert
  ENDIF
  IF t$="R"
    nrk(1)=wert
  ENDIF
  IF t$="K"
    nrk(2)=wert
  ENDIF
  IF INSTR("+-NRK0",t$)=0
    t$="?"
  ENDIF
RETURN
'
PROCEDURE anzeige                               ! Anzeige des Objekts
  LOCAL i,f,ii,ll,p1,p2,p3,sk,xx,yy,zz
  FOR i=1 TO p_anz                              ! Alle Punkte
    p1=xyz%(0,i)
    p2=xyz%(1,i)
    p3=xyz%(2,i)
    xx=tm1*p1+tm2*p2+tm3*p3+xyz0%(0)            ! Punkte verdrehen
    yy=tm4*p1+tm5*p2+tm6*p3+xyz0%(1)            ! und zum Standort
    zz=tm7*p1+tm8*p2+tm9*p3+xyz0%(2)            ! tranformieren,
    xy%(0,i)=xmi+xx*512/zz                      ! PerspektivenverkÅrzung
    xy%(1,i)=ymi-yy*512/zz                      ! und Y auf den Kopf stellen,
    xy%(2,i)=zz                                 ! alles zwischenspeichern.
  NEXT i
  FOR f=0 TO f_anz-1                            ! Alle FlÑchen durchgehen
    ll=fl%(eck_max+1,f)
    zh%(f)=0
    FOR i=0 TO ll
      zh%(f)=zh%(f)+xy%(2,fl%(i,f))
    NEXT i
    zh%(f)=zh%(f)/ll                            ! Der Z-Mittelwert bilden
    sk%(f)=f
    IF f>0
      FOR i=f DOWNTO 1
        IF zh%(i-1)<zh%(i)                      ! und nach Z sortieren
          SWAP zh%(i-1),zh%(i)
          SWAP sk%(i-1),sk%(i)
        ENDIF
      NEXT i
    ENDIF
  NEXT f
  CLS
  FOR ii=0 TO f_anz-1          ! Nochmals alle FlÑchen
    f=sk%(ii)                  ! Sortiert ausgeben
    p1=fl%(0,f)                ! Die ersten drei Punkte nehmen
    p2=fl%(1,f)
    p3=fl%(2,f)
    sk=(xy%(0,p2)-xy%(0,p1))*(xy%(1,p3)-xy%(1,p2))
    sk=(xy%(0,p3)-xy%(0,p2))*(xy%(1,p2)-xy%(1,p1))-sk
    IF sk<0                                     ! Sichtbar ?
      p1=fl%(eck_max+3,f)
      p2=fl%(eck_max+2,f)
      IF p1                                     ! ja, FÅllfarbe
        DEFFILL 1,p1,p2
      ELSE
        DEFFILL p2,1
      ENDIF
      ll=fl%(eck_max+1,f)                       ! Anzahl der Eckpunkte
      FOR i=0 TO ll
        x%(i)=xy%(0,fl%(i,f))
        y%(i)=xy%(1,fl%(i,f))                   ! FÅr Polyfill umsetzen
      NEXT i
      x%(ll+1)=x%(0)
      y%(ll+1)=y%(0)
      POLYFILL ll+1,x%(),y%()                   ! Malen !!!
    ENDIF
  NEXT ii                                       ! alle FlÑchen...
RETURN
'
PROCEDURE transform       ! Die Neigung, Richtung, Kippung vorberechnen
  LOCAL sn,cn,sr,cr,sk,ck
  sn=SIN(nrk(0))
  cn=COS(nrk(0))
  sr=SIN(nrk(1))
  cr=COS(nrk(1))
  sk=SIN(nrk(2))
  ck=COS(nrk(2))          ! Damit es schneller geht
  tm1=ck*cr+sn*sr*sk
  tm2=sn*sr*ck-sk*cr
  tm3=sr*cn
  tm4=sk*cn
  tm5=ck*cn
  tm6=-sn
  tm7=sk*cr*sn-sr*ck
  tm8=ck*cr*sn+sk*sr
  tm9=cr*cn               ! Die Transformation
RETURN
'
PROCEDURE inbox(bla$,anr)                              ! Einfache Eingabebox
  LOCAL i,y,zw$
  GET xmi-xmi/2,ymi-ymi/2,xsl,ymi+ymi/2,zw$
  DEFFILL 0
  PBOX xmi-xmi/2,ymi-ymi/2,xmi+xmi/2,ymi+ymi/2
  COLOR 5
  BOX xmi-xmi/2,ymi-ymi/2,xmi+xmi/2,ymi+ymi/2
  COLOR 4
  PBOX xmi-xmi/2+2,ymi-ymi/2+2,xmi+xmi/2-2,ymi+ymi/2-2
  PBOX xmi-xmi/2+3,ymi-ymi/2+3,xmi+xmi/2-3,ymi+ymi/2-3 ! ein biûchen Schînheit
  y=ymi-ymi/3
  IF anr=1
    bla$=bla$+"||EINGABE MIT|<RETURN> BESTéTIGEN"
  ELSE
    bla$=bla$+"||EINGABEFORMAT:|X,Y,Z <RETURN>"
  ENDIF
  DO
    i=INSTR(bla$,"|")
    EXIT IF i=0
    TEXT xmi-3*(i-1),y,LEFT$(bla$,i-1)    ! Den Text zentriert untereinander
    bla$=RIGHT$(bla$,LEN(bla$)-i)         ! ausgeben
    ADD y,10
  LOOP
  TEXT xmi-3*LEN(bla$),y,bla$             ! Noch den Resttext
  PRINT AT(xs/320*12,16);                 ! Cursor setzen
  IF anr=1                                ! Eingabe von einem Wert
    INPUT wert$                           ! und ein primitives Input
    wert=VAL(wert$)                       ! fÅr numerische Werte
  ELSE
    INPUT x%(0),x%(1),x%(2)               ! Eingabe von drei Werten
  ENDIF
  PUT xmi-xmi/2,ymi-ymi/2,zw$             ! aufrÑumen
  GOSUB mclr
RETURN
'
PROCEDURE ali(ic,inf$,bunr,ant$)    ! Alertbox ohne Quietschen
  REPEAT
  UNTIL MOUSEK=0 AND INKEY$=""
  ALERT ic,inf$,bunr,ant$,but
  DEFMOUSE 5                        ! und MausverÑnderung.
RETURN
'
PROCEDURE d                                  ! (D)ummy
  GOSUB ali(1,"Dieser Befehl existiert nicht!",1,"Na klar!")
RETURN
'
PROCEDURE mclr         ! Wartet bis keine Maustaste klickt
  REPEAT
  UNTIL MOUSEK=0
RETURN
'
PROCEDURE mhol         ! Entprellte Maustasteneingabe
  GOSUB mclr
  REPEAT
    MOUSE mx,my,mk
  UNTIL mk
  GOSUB mclr
RETURN
'
PROCEDURE fehler                          ! Fehler abfangen...
  LOCAL a$
  ON ERROR GOSUB fehler
  a$="Das ist leider ein|Fehler Nr.: "+STR$(ERR)+" aufgetreten."
  GOSUB ali(3,a$,1,"Huch!")
  RESUME NEXT
RETURN
'
DATA "- X:              +"
DATA "- Y:              +"
DATA "- Z:              +"
DATA INFO + ANZEIGEMODUS
DATA TIEFEN-VERZERRUNG
DATA GITTER | SETZEN
DATA PUNKTMOD|XYZ-EING
DATA FLéCHEN ERSTELLEN
DATA 3D-GRAFIK STARTEN
DATA FLéCHEN EDITIEREN
DATA QUADER EINGEBEN
DATA FREI,FREI,FREI
DATA FREI,FREI,FREI
DATA OBJ LADEN|PFAD BEST
DATA SPEICHERN|PFAD BEST
DATA 3D PROGRAMM BEENDEN
'
' Die nun folgenden Proceduren werden einfach an das Originalprogramm
' angehÑngt, eigene Funktionen mÅûten problemlos weiterbenÅtzt
' werden kînnen.
'
PROCEDURE verz                 ! Bildschirmverzerrung einstellen
  LOCAL i,j,a$
  a$="Darstellungsverzerrung:|Je nÑher sie die Maus dem|Mittelpunkt bringen"
  GOSUB ali(0,a$+" desto|stÑrker die Verzerrung.",1,"Aha!")
  GOSUB mclr
  j=grmbo                      ! Schnelle Darstellung
  grmbo=0
  REPEAT
    darstx=(MOUSEX-ymi)/10     ! Verzerrung x und y anhand
    darsty=(ymi-MOUSEY)/10     ! des Mittelpunkts berechnen
    IF darstx=0                ! DÅrfen aber nicht 0 betragen
      darstx=1
    ENDIF
    IF darsty=0                ! dito
      darsty=1
    ENDIF
    GOSUB show                 ! VerÑnderungen anzeigen
  UNTIL MOUSEK                 ! bis Maustaste geklickt wird
  grmbo=j                      ! Originaldarstellung wieder herstellen
RETURN
'
PROCEDURE hol_pfad             ! Kein Kommentar
  GOSUB inbox("DEN ZUGRIFFSPFAD FöR|DIE DATEN ANGEBEN.|zB: A:\GFA\GRAFIK\3D\",1)
  disk$=wert$
RETURN
'
PROCEDURE osp                       ! Objekt abspeichern
  LOCAL i,j,maxeck
  IF mk=2
    GOSUB hol_pfad                  ! Bei Rechtsklick Pfad holen
  ELSE                              ! sonst:
    FILESELECT disk$+"*.3D?","",f$
    IF f$<>""
      OPEN "O",#1,f$                ! Falls guter Dateiname îffnen
      maxeck=0
      FOR i=0 TO f_anz-1
        IF fl%(eck_max+1,i)>maxeck
          maxeck=fl%(eck_max+1,i)   ! Maximale Eckenzahl einer FlÑche des
        ENDIF                       ! Objekts ermitteln
      NEXT i
      GOSUB byte(p_anz)             ! Punktanzahl,
      GOSUB byte(f_anz)             ! FlÑchenanzahl
      GOSUB byte(maxeck)            ! und maximale Eckenanzahl zur Datei
      IF p_anz
        FOR i=1 TO p_anz
          FOR j=0 TO 2
            GOSUB byte(xyz%(j,i))   ! Alle Punktkoordinaten,
          NEXT j
        NEXT i
      ENDIF
      IF f_anz
        FOR i=0 TO f_anz-1
          FOR j=0 TO maxeck
            GOSUB byte(fl%(j,i))    ! alle relevanten FlÑchennummern
          NEXT j
          FOR j=eck_max+1 TO eck_max+3
            GOSUB byte(fl%(j,i))    ! und die FlÑcheninformationen ausgeben.
          NEXT j
        NEXT i
      ENDIF
      CLOSE #1                      ! Das war es schon...
    ENDIF
  ENDIF
RETURN
'
PROCEDURE byte(w)                   ! Diese Proz wirft 2 Bytes zur Diskette
  w=w+32768
  OUT #1,(w DIV 256)
  OUT #1,(w MOD 256)
RETURN
'
PROCEDURE olad                      ! LÑdt ein Objekt von Disk
  LOCAL i,j,maxeck
  IF mk=2
    GOSUB hol_pfad                  ! Rechtsklick -> holt Pfad
  ELSE
    FILESELECT disk$+"*.3D?","",f$
    IF f$<>""
      OPEN "I",#1,f$                ! Falls guter Dateiname anklopfen
      GOSUB wrd
      i=ww                          ! und 3 Words einlesen
      GOSUB wrd
      j=ww
      GOSUB wrd
      maxeck=ww
      IF maxeck>eck_max             ! Maximale Eckenzahl mîglich ?
        GOSUB ali(3,"Objekt hat mehr Ecken|als die Var. Eck_max.",1,"Stop")
      ELSE
        p_anz=i                     ! JA, Werte Åbernehmen
        f_anz=j
        IF p_anz
          FOR i=1 TO p_anz
            FOR j=0 TO 2
              GOSUB wrd
              xyz%(j,i)=ww          ! Alle Punktkoordinaten
            NEXT j
          NEXT i
        ENDIF
        IF f_anz
          FOR i=0 TO f_anz-1
            FOR j=0 TO maxeck
              GOSUB wrd
              fl%(j,i)=ww           ! alle FlÑchennummern
            NEXT j
            FOR j=eck_max+1 TO eck_max+3
              GOSUB wrd
              fl%(j,i)=ww           ! und alle FlÑcheninfos lesen.
            NEXT j
          NEXT i
        ENDIF
      ENDIF
      CLOSE #1                      ! das wars...
    ENDIF
  ENDIF
RETURN
'
PROCEDURE wrd                       ! Diese Procedure liest 2 Bytes
  w1=INP(#1)
  ww=w1*256+INP(#1)-32768
RETURN
'
PROCEDURE pstp                      ! Programm abbrechen ???
  LOCAL a$
  a$="Programm wirklich|beenden und alle|Daten vernichten ?"
  GOSUB ali(3,a$,2," JA |Nein")
  IF but=1
    CLS                             ! Jawoll !!!
    END
  ENDIF
RETURN
'
' Diese umfangreiche Procedure ermîglicht die Editierung von FlÑchen:
'
PROCEDURE f_use
  LOCAL mmx,mmy,mmk,i,stnr,aktnr,rnr,a$
  IF f_anz
    a$="Sie kînnen links die FlÑche|auswÑhlen und durch|Mausklick editieren.|"
    GOSUB ali(0,a$+"ZurÅck mit Rechtsklick!",1,"Aha!")
    DEFFILL 0,1
    PBOX 0,0,50,ysl
    TEXT 10,tyo,"^^^^^"
    TEXT 10,yty*19+tyo,"vvvvv"     ! Bildschirm ruinieren
    COLOR 1
    stnr=0                         ! Startnummer = 0
    '
    starty:
    DEFFILL 0,1
    PBOX 0,yty,50,yty*19           ! FlÑchenbox am linken Schirmrand
    aktnr=-1
    FOR i=1 TO 18
      BOX 0,yty*i,50,yty*(i+1)               ! Box ausgeben
      IF stnr+i-1<f_anz
        a$=STR$(stnr+i)+" "+STR$(fl%(eck_max+1,stnr+i-1)+1)+"P"
        TEXT 28-3*LEN(a$),yty*i+tyo,a$       ! Text ausgeben
        mmy=fl%(eck_max+2,stnr+i-1)
        mmx=fl%(eck_max+3,stnr+i-1)
        IF mmx
          DEFFILL 1,mmx,mmy
        ELSE
          DEFFILL mmy,1
        ENDIF
        PBOX 0,yty*i,8,yty*(i+1)             ! FÅllfarbe oder -muster
      ENDIF
    NEXT i
    DO                                       ! Warteschleife
      MOUSE mmx,mmy,mmk
      IF mmx<40                              ! Maus in Box ?
        i=mmy DIV yty
        IF i>0 AND i<19 AND stnr+i-1<f_anz   ! ja, gÅltige FlÑchennummer?
          IF i<>aktnr
            GRAPHMODE 3                      ! ja, aktivieren
            IF aktnr<>i                      ! alte ausschalten ???
              BOX 10,yty*aktnr+2,48,yty*(aktnr+1)-2    ! jawoll
            ENDIF
            BOX 10,yty*i+2,48,yty*(i+1)-2    ! Inrandung
            aktnr=i                          ! aktive Position
            rnr=stnr+aktnr-1                 ! aktuelle FlÑchennummer
            GRAPHMODE 0
          ENDIF
        ENDIF
        IF mmk=1                             ! Maus auch noch gedrÅckt ?
          IF i>0 AND i<19                    ! ja, auf FlÑchennummer ?
            IF aktnr<>-1
              GOSUB ali(2,"FlÑche lîschen oder|neu einfÑrben ???",1,"Nix|Kill|Farbe")
              IF but=3
                GOSUB colget                 ! neue Farbe oder Muster holen
                fl%(eck_max+2,rnr)=cnr       ! abspeichern
                fl%(eck_max+3,rnr)=czei
              ENDIF
              IF but=2 AND f_anz>0           ! FlÑche lîschen ???
                FOR i=rnr TO f_anz           ! jawoll, durch Verschieben
                  FOR j=0 TO eck_max+3       ! hinauswerfen
                    fl%(j,i)=fl%(j,i+1)
                  NEXT j
                NEXT i
                DEC f_anz                    ! FlÑchenzÑhler -= 1
              ENDIF
            ENDIF
            GOTO starty                      ! und neue Box zeichnen...
          ELSE
            IF i=0                           ! Nach oben scrollen ?
              SUB stnr,16
              IF stnr<0
                stnr=0
              ENDIF
              GOTO starty
            ELSE
              ADD stnr,16                    ! ansonsten nach unten
              IF stnr+16>f_anz
                stnr=f_anz-18
              ENDIF
              GOTO starty
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      IF aktnr<>-1                           ! Falls FlÑche gewÑhlt
        GOSUB flacker(stnr+aktnr-1)          ! Die Punkte blinken
        GOSUB flacker(stnr+aktnr-1)          ! lassen
      ENDIF
      EXIT IF mmk=2                          ! Bei Rechtsklick beenden
    LOOP
  ENDIF
RETURN
'
PROCEDURE flacker(f_nr)                      ! Punktblinkroutine
  LOCAL i,j,x,y
  GRAPHMODE 3
  FOR j=0 TO fl%(eck_max+1,f_nr)             ! Alle Punkte
    i=fl%(j,f_nr)                            ! umrechnen
    x=ymi-arbxyz%(0)+(xyz%(0,i)+(xyz%(2,i)-arbxyz%(2))/darstx)
    y=ymi-arbxyz%(1)-(xyz%(1,i)+(xyz%(2,i)-arbxyz%(2))/darsty)
    IF x>53 AND x<ys-3                       ! und falls sichtbar
      CIRCLE x,y,4                           ! anzeigen
    ENDIF
  NEXT j
  GRAPHMODE 0
RETURN
'
PROCEDURE quader                             ! Quader in einem Zug erstellen
  LOCAL p1,p2,p3,p4,p5,p6,p7,p8,i,bo,a$
  a$="Quader erstellen. Wodurch|festlegen? (Mitte oder|Ecke unten links vorne)"
  GOSUB ali(2,a$,1,"Nix|Mitte|Ecke")
  IF but>1
    GOSUB inbox("LéNGE DER X,Y,Z-SEITEN|EINGEBEN.",3)
    bo=1
    FOR i=0 TO 2
      y%(i)=x%(i)                            ! Werte merken...
      IF y%(i)=0
        bo=0                                 ! Falls 0 abbrechen
      ENDIF
    NEXT i
    IF bo
      GOSUB inbox("UND JETZT DEN BE-|FESTIGUNGSPUNKT.",3)
      IF but=2                               ! Falls Mittelpunkt
        FOR i=0 TO 2
          x%(i)=x%(i)-y%(i)/2                ! Un. li. vor. Ecke errechnen
        NEXT i
      ENDIF
      GOSUB p_neu(x%(0),x%(1),x%(2))         ! Alle neuen Punkte anfordern
      p1=pnr
      GOSUB p_neu(x%(0),x%(1)+y%(1),x%(2))
      p2=pnr
      GOSUB p_neu(x%(0)+y%(0),x%(1)+y%(1),x%(2))
      p3=pnr
      GOSUB p_neu(x%(0)+y%(0),x%(1),x%(2))
      p4=pnr
      GOSUB p_neu(x%(0),x%(1),x%(2)+y%(2))
      p5=pnr
      GOSUB p_neu(x%(0),x%(1)+y%(1),x%(2)+y%(2))
      p6=pnr
      GOSUB p_neu(x%(0)+y%(0),x%(1)+y%(1),x%(2)+y%(2))
      p7=pnr
      GOSUB p_neu(x%(0)+y%(0),x%(1),x%(2)+y%(2))
      p8=pnr
      GOSUB fl4_neu(p1,p2,p3,p4)        ! und die 6 FlÑchen erstellen
      GOSUB fl4_neu(p1,p5,p6,p2)
      GOSUB fl4_neu(p2,p6,p7,p3)
      GOSUB fl4_neu(p3,p7,p8,p4)
      GOSUB fl4_neu(p4,p8,p5,p1)
      GOSUB fl4_neu(p8,p7,p6,p5)
    ENDIF
  ENDIF
RETURN
'
PROCEDURE fl4_neu(a,b,c,d)         ! 4-PunktflÑche erstellen
  fl%(0,f_anz)=a
  fl%(1,f_anz)=b
  fl%(2,f_anz)=c
  fl%(3,f_anz)=d
  fl%(eck_max+1,f_anz)=3           ! alles eintragen
  GOSUB colget                     ! Farbe oder Muster holen
  fl%(eck_max+2,f_anz)=cnr         ! abspeichern
  fl%(eck_max+3,f_anz)=czei
  INC f_anz                        ! FlÑchenzÑhler erhîhen
RETURN
