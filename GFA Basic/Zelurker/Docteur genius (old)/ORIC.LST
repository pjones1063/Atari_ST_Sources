DIM pal%(16),pal2%(16)
DIM effect$(31)
ON BREAK GOSUB break
ON ERROR GOSUB erreur
win_opened!=0
init
' position de la fenêtre texte en mode graphique
' l'oric l'avait en bas de l'écran sur 3 lignes
' J'ai remarqué que ça marche mieux avec 4 lignes,
' mais on peut changer la géométrie de la fenetre ici.
' Si vous la mettez en bas de l'écran (winy%=resy%-4*8) alors
' pensez à éventuellement ajuster resy% pour que le dessin reste au dessus
' (genre resy%-=4*fonth% pour réserver 4 lignes)
winx%=0
winy%=0
winw%=38*8
winh%=4*8
wintext!=0 ! Mettez … vrai pour utiliser les couleurs du mode texte
' c'est le fonctionnement normal de l'oric, mais je pr‚fŠre le fond noir
no_sarabande!=1 ! pour ‚viter la tombe et la sarabande qui est trŠs longue !
no_intro!=1 ! pour passer toute l'intro en mode texte
no_random_events!=1 ! pour d‚sactiver les ‚vennements al‚atoires comme le
' nain ou la foudre !
GOTO debut
PROCEDURE mycls
  IF gmode%=0
    CLS
    GOTO fin_mycls
  ENDIF
  IF wintext!
    DEFFILL 2
    PBOX winx%,winy%,winx%+winw%-1,winy%+winh%-1
  ELSE
    DEFFILL 0
    PBOX winx%+1,winy%+1,winx%+winw%+1,winy%+winh%+1
  ENDIF
  win_cx%=0
  win_cy%=0
fin_mycls:
RETURN
PROCEDURE myprint(msg$)
  IF gmode%=0
    PRINT msg$;
    GOTO fin_print
  ENDIF
  IF NOT win_opened!
    IF wintext!
      DEFFILL 2
    ELSE
      DEFFILL 0
      BOX winx%,winy%,winx%+winw%+2,winy%+winh%+2
    ENDIF
    PBOX winx%+1,winy%+1,winx%+winw%+1,winy%+winh%+1
    win_opened!=TRUE
    win_cx%=0
    win_cy%=0
    IF wintext!
      setupcolor(2,textpaper%)
      setupcolor(3,textink%)
    ENDIF
  ENDIF
  IF wintext!
    DEFTEXT 3
    GRAPHMODE 2
  ENDIF
  WHILE (LEN(msg$)>38-win_cx%)
    TEXT winx%+1+win_cx%*8,winy%+1+win_cy%*8+7,LEFT$(msg$,38-win_cx%)
    msg$=MID$(msg$,38-win_cx%+1)
    win_cx%=0
    INC win_cy%
    IF win_cy%>=4
      GET winx%+1,winy%+1+8,winx%+winw%+1,winy%+winh%+1,a$
      PUT winx%+1,winy%+1,a$
      PBOX winx%+1,winy%+winh%+1-8,winx%+winw%+1,winy%+winh%+1
      win_cy%=3
    ENDIF
  WEND
  TEXT winx%+1+win_cx%*8,winy%+win_cy%*8+8,msg$
  GRAPHMODE 1
  ADD win_cx%,LEN(msg$)
fin_print:
RETURN
PROCEDURE myprintln(msg$)
  myprint(msg$)
  IF gmode%=0
    PRINT ""
    GOTO fin_println
  ENDIF
  win_cx%=0
  INC win_cy%
  IF win_cy%>=4
    GET winx%+1,winy%+1+8,winx%+winw%+1,winy%+winh%+1,a$
    PUT winx%+1,winy%+1,a$
    PBOX winx%+1,winy%+winh%+1-8,winx%+winw%+1,winy%+winh%+1
    win_cy%=3
  ENDIF
fin_println:
RETURN
PROCEDURE myinput(text$,VAR a$)
  myprint(text$+" ? ")
  a$=""
  REPEAT
    PRINT AT(winx%/8+win_cx%,winy%/8+win_cy%);""
    c%=INP(2)
    IF c%>=ASC("a") AND c%<=ASC("z")
      SUB c%,32
    ENDIF
    IF c%=8 AND LEN(a$)>0
      PBOX winx%+win_cx%*8+1-8,winy%+win_cy%*8+1,winx%+win_cx%*8+1,winy%+win_cy%*8+8
      a$=LEFT$(a$,LEN(a$)-1)
      DEC win_cx%
    ENDIF
    IF c%>=32
      a$=a$+CHR$(c%)
      myprint(CHR$(c%))
    ENDIF
  UNTIL c%=13
RETURN
PROCEDURE quit
  FOR n%=0 TO 15
    r%=XBIOS(7,n%,pal%(n%))
  NEXT n%
RETURN
PROCEDURE break
  FOR n%=0 TO 15
    pal2%(n%)=XBIOS(7,n%,-1)
  NEXT n%
  @quit
  STOP
  FOR n%=0 TO 15
    r%=XBIOS(7,n%,pal2%(n%))
  NEXT n%
RETURN
PROCEDURE erreur
  @quit
  RESUME ! replace le curseur sur l'erreur avant de quitter
RETURN
PROCEDURE init
  r%=XBIOS(4)
  IF r%=0
    resx%=320
  ELSE
    resx%=640
  ENDIF
  IF r%=2
    resy%=400
  ELSE
    resy%=200
  ENDIF
  fonth%=resy%/25
  FOR n%=0 TO 15
    pal%(n%)=XBIOS(7,n%,-1)
  NEXT n%
  read_effects
RETURN
> PROCEDURE ping
  PRINT CHR$(7)
RETURN
> PROCEDURE text
  CLS
  gmode%=0
RETURN
PROCEDURE hires
  CLS
  gmode%=1
  SETCOLOR 0,0,0,0
  win_opened!=0
RETURN
PROCEDURE setupcolor(col%,p%)
  SELECT (p%)
  CASE 0
    VSETCOLOR col%,0,0,0
  CASE 1
    VSETCOLOR col%,255,0,0
  CASE 2
    VSETCOLOR col%,0,255,0
  CASE 3
    VSETCOLOR col%,255,255,0
  CASE 4
    VSETCOLOR col%,0,0,255
  ENDSELECT
RETURN
PROCEDURE paper(p%)
  setupcolor(0,p%)
  IF gmode%=0
    textpaper%=p%
  ENDIF
RETURN
PROCEDURE ink(i%)
  setupcolor(1,i%)
  IF gmode%=0
    textink%=i%
  ENDIF
RETURN
PROCEDURE mypoke(adr%,val%)
  ' Eventuellement pour + tard...
  ' l'id‚e était d'intercepter les poke en 48000 pour la ligne 0
  ' mais sans gestion minimale de la fenetre texte qui permettrait de prot‚ger
  ' cette ligne 0 c'est juste du d‚lire, id‚e abandonn‚e pour l'instant !
  ' Note que maintenant qu'on a mycls, myprint et myprintln on peut
  ' ‚ventuellement le remettre, mais ‡a ne vaut pas vraiment le coup... !
RETURN
PROCEDURE explode
  ' je voulais lire l'effet avant de le jouer au d‚part
  ' mais pour une raison myst‚rieuse l'appel … xbios 32 rejoue toujours le meme
  ' son meme si le contenu de la variable change bien !
  ' donc solution : lire tous les effets dans des variables qui restent en place
  ' ce qui permet d'appeler xbios 32 avec des adresses qui changent
  VOID XBIOS(32,L:VARPTR(effect$(2)))
RETURN
PROCEDURE zap
  ' celui l… est le moins proche de l'original, mais il n'est pas mal quand meme...
  VOID XBIOS(32,L:VARPTR(effect$(3)))
RETURN
PROCEDURE shoot
  VOID XBIOS(32,L:VARPTR(effect$(11)))
RETURN
PROCEDURE read_effects
  RESTORE sounds
  FOR n%=0 TO 30
    REPEAT
      READ x%
      IF x%<=255
        effect$(n%)=effect$(n%)+CHR$(x%)
      ENDIF
    UNTIL x%=999
    effect$(n%)=effect$(n%)+CHR$(255)+CHR$(0)
  NEXT n%
RETURN
'
PROCEDURE myplot(x%,y%,col%)
  ' cursx & cursy doivent etre des flottants pour compenser les mises …
  ' l'‚chelle. On pourrait le faire en entier en gardant les coordonnées
  ' originales non converties mais alors il faudrait convertir 4
  ' coordonn‚es au lieu de 2 par draw, un peu dommage...
  IF col%<3
    IF col%=2 ! inversion...
      col%=1
    ENDIF
    COLOR col%
  ENDIF
  cursx=x%*resx%/240
  cursy=y%*resy%/200
  IF col%=3 ! transparent
    COLOR POINT(cursx,cursy)
  ENDIF
  PLOT cursx,cursy
RETURN
PROCEDURE mydraw(x%,y%,col%)
  ' on ne peut pas faire directement un draw to … cause de curmov !
  IF col%<3
    IF col%=2
      col%=1
    ENDIF
    COLOR col%
  ENDIF
  LOCAL c2x,c2y
  c2x=cursx+x%*resx%/240
  c2y=cursy+y%*resy%/200
  DRAW cursx,cursy TO c2x,c2y
  cursx=c2x
  cursy=c2y
RETURN
PROCEDURE curmov(dx%,dy%,col%)
  ADD cursx,dx%*resx%/240
  ADD cursy,dy%*resy%/200
  IF col%<3
    IF col%=2
      col%=1
    ENDIF
    COLOR col%
  ELSE
    GRAPHMODE 2
  ENDIF
  PLOT cursx,cursy
  IF col%=3
    GRAPHMODE 1
  ENDIF
RETURN
PROCEDURE mycircle(r%,col%)
  IF col%<3
    IF col%=2
      col%=1
    ENDIF
    COLOR col%
  ENDIF
  CIRCLE cursx,cursy,r%*resx%/240 ! not sure about the conversion here ?
RETURN
' Les effets sonores viennent d'un disque st news trouv‚ sur le net...
sounds:
' Effect #0
DATA 0,100,1,0,2,200,3,0,4,50,5,0,6,31,7,220
DATA 8,16,9,0,10,16,11,127,12,37,13,0,128
DATA 0,129,0,137,200,130,128,255,0,999
' Effect #1
DATA 0,42,1,2,2,88,3,4,4,164,5,8,7,199,8,16
DATA 9,16,10,16,11,106,12,10,13,4,128,124,129
DATA 4,54,164,255,0,999
' #2
explode:
DATA 0,0,1,0,2,100,3,0,4,200,5,0,6,31,7,198
DATA 8,16,9,16,10,16,11,207,12,88,13,0,128
DATA 255,129,6,0,0,130,0,255,0,999
' #3
zap:
DATA 2,216
DATA 3,4,4,219,5,5,7,254,8,16,11,223,12,118
DATA 13,0,128,0,129,0,22,0,255,0,999
' #4
DATA 0,140
DATA 1,1,2,216,3,4,4,219,5,5,7,254,8,16
DATA 11,207,12,88,13,0,128,0,129,0,41,0,255,0,999
' #5
DATA 2,216
DATA 3,4,4,219,5,5,7,254,8,16,11,223,12,118
DATA 13,0,128,0,129,0,22,0,255,0,999
' #6
DATA 0,0
DATA 1,0,7,254,8,16,11,207,12,88,13,0,128,0
DATA 129,0,41,0,255,0,999
' #7
DATA 0,82
DATA 1,2,2,251,3,13,4,34,5,0,7,248,8,16
DATA 11,0,12,86,13,0,128,0,129,0,11,0,130,0,255,0,999
' #8
DATA 0,210
DATA 1,3,2,232,3,3,4,209,5,7,7,248,8,16
DATA 9,16,10,16,11,111,12,163,13,0,128,0,255,0,999
' #9
DATA 0,52
DATA 1,0
DATA 2,0
DATA 3,0
DATA 4,0
DATA 5,0
DATA 6,0
DATA 7,254
DATA 8,16
DATA 9,0
DATA 10,0
DATA 11,0
DATA 12,16
DATA 13,9
DATA 130,100
DATA 7,255,8,0,255,0,999
' #10
DATA 0,254
DATA 1,0,2,0,3,0,4,0,5,0,6,0
DATA 7,254,8,11,9,0,10,0,11,0,12,0
DATA 13,0,130,20
DATA 0,86,1,1,130,20
DATA 0,254,1,0,130,20
DATA 0,86,1,1,130,20
DATA 8,0,9,0,130,50
DATA 7,255,8,0,255,0,999
' #11
shoot:
DATA 0,0
DATA 1,0,2,0,3,0,4,0,5,0,6,15
DATA 7,199,8,16,9,16,10,16,11,0,12,16
DATA 13,0,130,25
DATA 8,0,9,0,130,50
DATA 7,255,8,0,255,0,999
' #12
DATA 0,0
DATA 1,0,2,0,3,0,4,0,5,0,6,10
DATA 7,199,8,16,9,16,10,16,11,0,12,80
DATA 13,0,130,20
DATA 8,0,9,0,10,0,13,100
DATA 7,255,8,0,255,0,999
block1:
' #13
DATA 0,0
DATA 1,0,2,0,3,0,4,0,5,0,6,0
DATA 7,254,8,15,9,0,10,0,11,0,12,0
DATA 13,0,128,60,129,0,-2,40,130,2
DATA 7,255,8,0,255,0,999
' #14
DATA 0,64,1,1,2,56,3,1,8,16,9,16,12,20,13,0,11,20
DATA 7,252,255,0,999
' #15
DATA 0,64,1,0,2,120,3,0,8,16,9,16,12,20,13,0,11,20
DATA 7,252,255,0,999
' #16
DATA 0,86,1,0,2,86,3,0,8,16,9,15,12,1
DATA 13,10,11,50,7,252,128,16,129,9,-1,0
DATA 255,0,8,0,255,0,999
' #17
DATA 0,2,1,15,2,2,3,15,8,16,9,16,12,20,13,10
DATA 11,20,7,252
DATA 128,240,129,1,-16,0,255,10,8,0,9,0,255,0,999
' #18
DATA 0,2,1,0,2,2,3,16,8,13,9,13,7,252
DATA 128,15,129,6,-1,0,255,5,8,5,9,5,255,0,999
' #19
DATA 0,0,1,15,8,15,12,0,13,4,11,20,7,252
DATA 128,0,129,1,1,15,255,1,8,0,255,0,999
' #20
DATA 0,8,1,2,2,12,3,4,8,16,9,16,12,20,13,9
DATA 11,20,7,252
DATA 128,200,129,0,-20,0,255,1,8,0,9,0,255,0,999
' #21
DATA 0,0,1,0,8,16,12,70,13,0,11,20,7,252
DATA 128,0,129,1,1,255,255,0,999
' #22
DATA 0,100,1,4,2,101,3,4,8,15,9,15
DATA 11,0,12,30,7,252
DATA 255,5,1,3,3,3,255,5,1,2,3,2,255,5,1,1,3,1
DATA 255,5,1,0,3,0
DATA 255,5,13,0,8,16,9,16,255,0,999
' #23
DATA 0,8,1,2,8,16,12,25,13,9,11,20,7,252
DATA 128,0,129,1,1,15,128,0,129,1,1,15,255,50
DATA 8,0,9,0,255,0,999
' #24
DATA 0,32,1,0,2,80,3,0,8,15,9,16,12,1
DATA 13,10,11,100,7,252,128,16,129,8,-1,0
DATA 255,12,9,0,255,0,999
' #25
DATA 0,20,1,0,2,48,3,0,8,15,9,16,12,1
DATA 13,10,11,50,7,252,128,16,129,8,-1,0
DATA 255,10,9,0,255,0,999
' #26
DATA 0,27,1,0,2,48,3,0,8,16,9,16,12,10
DATA 13,10,11,0,6,30,7,252,255,40
DATA 128,15,129,8,-1,0,7,244
DATA 255,10,9,0,255,0,999
' #27
DATA 0,100,1,5,2,80,3,1,8,15,11,0,12,70,7,246
DATA 128,0,129,6,1,31,255,3,12,40,13,0,8,16,255,0,999
' #28
DATA 0,100,1,5,2,80,3,1,8,15,11,0,12,70,7,246
DATA 128,31,129,6,-1,0,255,3,12,40,13,0,8,16,255,0,999
' #29
DATA 0,0,1,13,2,0,3,12,4,0,5,15,6,0
DATA 7,192,8,16,9,16,10,16,11,0,12,44
DATA 13,2,130,160,999
' #30
DATA 0,0,1,13,2,0,3,12,4,0,5,15,6,0
DATA 7,248,8,16,9,16,10,16,11,200,12,200
DATA 13,2,130,250,999
