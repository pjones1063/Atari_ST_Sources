File "HINTS.TXT"
================


************************************
***    (c) April 1990            ***
***    GFA Data Media UK         ***
***    Box 121                   ***
***    Wokingham, Berks.         ***
***    RG11 1FA                  ***
***                              ***
***    Peter Holzwarth           ***
***    and Roland SchÅtz         ***
***                              ***
***    Program lengths:          ***
***    GFA-ASM: 159175 bytes     ***
***    GFA-DBG:  66425 bytes     ***
***    GFA-DBGA: 66352 bytes     ***
***                              ***
************************************


CONTENTS of the program disk with the GFA ASSEMBLER:
----------------------------------------------------

GFA-ASM.PRG     GFA ASSEMBLER

GFA-DBG.PRG     GFA DEBUGGER
GFA-DBGA.PRG    GFA DEBUGGER, auto folder version
                This version can either be booted automatically from
                the auto folder or be installed in memory by
                double-clicking from the desktop.

CALL_DEB.PRG    Program to call the auto folder version of the
                debugger or the normal debugger in resident mode

GFA_ASM.INF     Info file for assembler

DEMO.TXT        short sample text to experiment with

GFA_ASM.CFG     Printer configuration for STAR NL-10 (example)
PRINTER.HEX     the corresponding ASCII file which can be adapted to
                the user's printer and then converted into a CFG file
                using the function "Configuration table: compile"
                in menu 5,1.

ATARI.IS        Source text file with system addresses and macro
                definitions for easier handling of the operating
                system. The parameters for the macros are passed in
                the way described in the index to the GFA TOS&GEM
                book.

SYS_VARS.IS     The system varibles, this has been split away from
                the above file, so you can include it if you wish.


MAKE_HEX.IS     Source text file for a program to convert *.CFG
                files to *.HEX files (important for printer
                configuration). This can be used to convert existing
                *.CFG files into ASCII and then expand them to include
                the characters from 1 to 31 (decimal).

MAKE_HEX.TTP    Executable version of MAKE_HEX.IS. The command line
                expects the name of the CFG file as a parameter.

READ.ME         Hints and list of contents. The file you are reading
                right now!

GFA-ASM.MON     An example of keyboard macros. To view these, once
                the assembler has loaded, press F9, and then click
                on 'Show Table'.


**********************************************************************
ADDITIONS TO THE MANUAL:
**********************************************************************

*********************
* In the Assembler: *
*********************

- Definition tables can now be executed even after starting the
program, by selecting the table with the file selector and clicking on
"yes" in the following dialog box.


- the archive no longer has a "set marker" button. This button was
used to define the position of an object module/library to be
inserted. Instead, the insertion position is now set by selecting an
object module. If no object module is selected and you click on the
button "Insert module", the module/library will be appended at the end
of the current archive.

********************
* In the debugger: *
********************

- To distinguish them from decimal input, the debugger requires
hexadecimal values to be entered with a "$" prefix.


- as from Version 1.5, the program exit keys are only effective within
the program being debugged. This avoids program exits in the operating
system and the debugger. As a result, it may be necessary to use the
program exit keys more frequently with a program using operating
system routines (especially keyboard scans, dialog boxes and similar
functions), or alternatively to wait until the processor is unlikely
to be in the operating system (following an expected input, for
example).

