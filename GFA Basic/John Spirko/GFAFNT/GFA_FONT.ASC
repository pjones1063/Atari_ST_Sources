GEM SCREEN Fonts with GFA BASIC and without GDOS

THIS IS ONLY FOR DISPLAYING A GEM FONT ON SCREEN IN GFA PROGRAMS 
WITHOUT HAVING TO USE GDOS.

FONTHEADER
The font header (FH) is the first 88 bytes of a GEM font.
HEADER.LST reads and displays most of the Fontheader data. I don't 
know how it will react to a NON-GEM font.

Some FH information requires further explaining. The first four 
bytes, Font ID and Pointsize can be critical if more than one font 
is loaded. While the Font ID number is any number from 0 to 32767, 
it is possible that two (or more) fonts have the same ID number. 
This is most obvious in Degas Elite fonts, where several fonts 
have the same Font ID number, but have a different point size. 
Usually Elite fonts include the point size as part of the filename 
(i.e. "COMPDS08.FNT" or "COMPDS32.FNT"). These two Elite fonts 
share the same Font ID number, but have different point sizes - 8 
and 32. It is also possible that someone has altered a font, given 
it a new filename or changed the ID and point size.

To clear up any confusion about the point size, the term 'point', 
is a printing measurement. One point is about 1/72th of an inch. 
In an actual print shop, a typesetter using a 36 point font would 
have a font 36/72 or a 1/2 inch font. But with computers, point 
size is not a simple matter of measuring the height of letters on 
your screen. A 36 point font created for a mono screen, will not 
be 36 point on a medium or low resolution screen. You may not know 
the actual device a GEM font was intended. A font created for a 
monochrome monitor will probably look just as good in medium rez 
when GEM 'resizes' it. Also, it's not uncommon to find the height 
in pixels mistakenly used as the point size. The point size may 
not be reliable, but should't be critical, at least for screen 
fonts. You may find that some of the smaller fonts do not look all 
that well when they are enlarged; the same may be true of larger 
fonts that are compressed. Experiment. With a font editor you can 
always create the exact size you need. 

THE DEMO AND LOADING A GEM FONT
The process itself is easy and short.
The first step is to load the font and store it somewhere; 
I've stored it in the string Font$. It could also be stored as an 
array or into RESERVE'd memory. Using GFA's VARPTR, find the 
starting address of where the font is stored in memory.

The next step is to find out where the font data starts. Bytes 76 
- 79 stores the font data pointer. This is an offset number, or 
the number of bytes from the first byte of the FH to where the 
font data starts. Using this number, less one byte, will give the 
total number of bytes in the FH, plus the offset table(s). You 
need to know the length of the FH, because of how the FH data is 
stored - not the whole font, just the FH and table(s). You might 
think that it would be stored in the Motorola format (low byte-
high byte) because the ST uses the Motorola 68000 microprocessor. 
But it isn't, because the FH is stored in the INTEL format. GEM is 
also used by IBM with the Intel 8088 family of chips, and the ST 
inherited the Intel high byte-low byte storage format for the FH. 
This is a simple matter of byte swapping. That is, taking the 
first and second byte in Intel format and reversing them to 
Motorola, then the third and fourth, and so on. This is 
accomplished with a for-next loop, which calls the Procedure 
Swap_bytes.

As you can see in the program listing, the for-next loop swaps the 
first 78 places in the string, stops to get the font data pointer 
and then continues up to the font data itself. While it's possible 
to get the font data pointer before byte swapping, it's easier to 
read after swapping into the Motorola format.

One of the advantages of string storage is using the powerful 
string functions CVI, CVL, CVS, CVF and CVD along with the reverse 
functions MKI$, MKL$, MKS$, MKF$ and MKD$. Using CVI, the first 
two bytes are converted to a 16 bit numerical value and assigned 
to the variable Font_id%. The following two bytes are assigned to 
the variable Height%. These two variables are use in text display 
and will be explained later.

The next step is more involved than just reading a few bytes. 
Three pointers are read, added to the GEM font address and 
inserted back into the FH. These are: HOT, bytes 68 to 71; COT, 
bytes 72 to 75; Font Data Pointer, bytes 76 to 79. All three 
pointers are 4 bytes in length and handled in the same way. But 
they are all in Intel WORD format meaning the first byte pair 
represents the High WORD and the second byte pair the Low WORD. 
Normally this would require a WORD swap to the Motorola Low 
WORD/High WORD format; except the number stored in each of these 
locations is less than 65536 and is stored in the first byte pair. 
(The second WORD, is ignored for the time being.) Here again, 
string function CVI is used to convert the two bytes. This number 
is added to the font address. At this point the number is larger 
than 32767 and cannot be stored in two bytes with the string 
command MKI$. So instead the string command MKL$ is used - which 
converts the 32 bit number to a four byte string - and put into 
the string font$. This over-writes the previously ignored second 
WORD. (Note: If you encounter some difficulties in your program, 
check the address of the font. In all my tests so far, the font 
address + pointer = a 32 bit number requiring 4 bytes of 
storage.) Once all three pointers have been adjusted, only one 
other step remains.

The final step is accomplished with a LPOKE. Address 24626 + 84, 
is LPOKEd with the address of the new font. The 84 byte offset is 
the pointer to the new font. Don't forget to LPOKE a 0 into this 
location after your application is finished so the system 
'forgets' the new font. And clear out the font string and 
temporary strings, since they take up a large chunk of memory.

DEFTEXT

The DEFTEXT command is used to display the font. You will 
find that most GFA books show the command with only four 
parameters, where there should be five. (GFA 3.x shows it 
correctly) And without the fifth parameter, all of the program up 
to this point would be useless. The parameters, in order, are - 
[color], [attributes], [angle], [size] AND [FONTNUMBER].
[Fontnumber] is the Font ID, the first two bytes of the font 
header. [Size] is somewhat confusing, since it does not reflect 
the 'point' measurement in height, but rather the graphic dot 
(pixel) height, which is different in each resolution. For 
example, the standard color system font uses a value of 6 for an 
8x8 font. The standard mono system font uses a value of 13 for an 
8x16 font. Instead of trying to figure this all out, I just used 
the variable Height% (FH point size), in the DEFTEXT [size] 
parameter as a starting point. Then, by trial and error increase 
or decrease the value. As mentioned previously, some small fonts 
do not look good when expanded. You may have to use a larger font 
or create a specific size font with a Font Editor.

Earlier, I mentioned that Elite fonts can have the same ID number 
yet differ in point size. By using the DEFTEXT [size] attribute, 
in varying sizes, your application probably won't need to load 
different sizes of the same font. Varying the value of [size] 
allows some flexibility, without having to load the font in a 
different point sizes. 

ODDS and ENDS

GEMFED (P.D. font editor)
I thought that using GEMFED's option to store the font in Motorola 
format, would eliminate the swapping, but the font gets garbled. I 
didn't pursue this very far, so it may be a possible alternative.

FONTZ
For information on fonts, the FONZ manual probably has more 
information in one place than anything else I could find. By using 
the Mac and Amiga font converter, you can accumulate a large 
collection of GEM fonts.

ANOTHER GEM
With all of this compatability with GEM between the ST and IBM, 
there should be many available IBM GEM fonts. And if ST GEM font 
headers have to be converted from Intel to Motorola, IBM GEM fonts 
should be as easy to load as ST GEM fonts. Except I haven't been 
able to find an IBM GEM font. There are a lot of IBM fonts around, 
but I haven't found one that's a GEM font. I would guess that 
Digital Research's version of GEM for the IBM, is not used very 
much. The only application I know of that uses GEM on the IBM is 
Ventura Publisher. There are probably others, but I'm not fond of 
MS-DOS. 

AND CURIOUSLY
In the Abacus Book, "ST INTERNALS", the BIOS listing (for TOS 1.0) 
shows the ST has a built in routine for converting 8086 Intel to 
the 68000 Motorola on page 315. Also shown, on page 430 and 440, 
two routines mention Fonts. Sorry way over my head, but it may be 
possible to use these - ANYONE care to try . If you figure it out, 
upload it. 
                             *******
While I've checked this stuff out and read what I could about 
fonts, there is a shortage of information (and I don't have the 
Developer's Docs); I could easily be wrong on some of my data and 
assumptions.      John Spirko,  71451,1123
  

