$F< N- S& S>
' ########################################################
' # MAZE GENERATOR                                       #
' # Code by Thomas Ilg                                   #
' # to be compiled with GFA BASIC 3.6 on ATARI ST        #
' ########################################################
swv$="MAZE SWV200119 V0.02"
' ########################################################
'
DEFMOUSE 0
HIDEM
CLS
COLOR 1
'
' SET THE MAZE PROPERTYS
'
fieldsizey&=98
fieldsizex&=158
curvydur&=0
'
DIM stackerx&(300),stackery&(300)
DIM bstackerx&(300),bstackery&(300)
'
DIM horwall|(250,200),vertwall|(250,200)
DIM lab&(250,200)
DIM opposit|(3)
DIM nextx&(4),nexty&(4),wallx&(4),wally&(4)
'
preparevallues  ! Set all the values
'
DEFFILL 1,1
PBOX 0,0,639,399
DEFFILL 0,1
PBOX step|+2,step|+2,(fieldsizex&)*step|+2,(fieldsizey&)*step|+2
DEFFILL 1,1,0
'
generatelab     ! Generate the Maze
'
SHOWM
REPEAT
UNTIL MOUSEK    ! Pause to look at the maze and decide on your endpoint
HIDEM
setfieldtomouse(endx&,endy&) ! set the endpoint to the mousepos
'
SGET map$       ! Stores the blank maze
solvemaze       ! Solves the maze for the given endpoint
SPUT map$       ! Cleans the screen back to blank maze
REPEAT
  SHOWM
  REPEAT
  UNTIL MOUSEK
  IF MOUSEK=1
    HIDEM
    SPUT map$    ! clean the screen
    setfieldtomouse(startx&,starty&)    ! set startpoint to mousepos
    @printsolution
  ENDIF
UNTIL MOUSEK=2
END
'
PROCEDURE generatelab
  ARRAYFILL horwall|(),1
  ARRAYFILL vertwall|(),1
  resetlab(-1,-3)
  '
  ' Defines a random startpoint + direction
  ' and sets the first field as "occupied"
  '
  curvydur&=0
  startfeldx&=RANDOM(fieldsizex&-3)+2
  startfeldy&=RANDOM(fieldsizey&-3)+2
  lab&(startfeldx&,startfeldy&)=0
  mark(startfeldx&,startfeldy&,startfeldx&,startfeldy&,1,1)
  '
  ' Calling the recursive Maze Generator from the start field on
  '
  labstep(startfeldx&,startfeldy&,RANDOM(4))
  '
  ' Random shortcuts
  '
  delwalls&=RANDOM(fieldsizex&)+20
  FOR i&=0 TO delwalls&
    thisfeldx&=RANDOM(fieldsizex&-4)+2
    thisfeldy&=RANDOM(fieldsizey&-4)+2
    IF i& MOD 2=0
      vertwall|(thisfeldx&,thisfeldy&)=0
      LINE (thisfeldx&*step|)+2,((thisfeldy&)*step|+3),((thisfeldx&)*step|)+2,((thisfeldy&+1)*step|)+1
    ELSE
      horwall|(thisfeldx&,thisfeldy&)=0
      LINE (thisfeldx&*step|)+3,((thisfeldy&)*step|+2),((thisfeldx&+1)*step|)+1,((thisfeldy&)*step|)+2
    ENDIF
  NEXT i&
RETURN
'
' Recursive Maze generator
'
PROCEDURE labstep(feldx&,feldy&,direction&)
  LOCAL thisfeldx&,thisfeldy&,nextdir&,i|
  thisfeldx&=feldx&+nextx&(direction&)
  thisfeldy&=feldy&+nexty&(direction&)
  IF lab&(thisfeldx&,thisfeldy&)=-1
    IF curvydur&
      DEC curvydur&
    ELSE
      setcurvy
    ENDIF
    '
    mark(feldx&,feldy&,thisfeldx&,thisfeldy&,1,2)
    '
    lab&(thisfeldx&,thisfeldy&)=opposit|(direction&)
    SELECT direction&
    CASE 0,2
      horwall|(thisfeldx&+wallx&(opposit|(direction&)),thisfeldy&+wally&(opposit|(direction&)))=0
    CASE 1,3
      vertwall|(thisfeldx&+wallx&(opposit|(direction&)),thisfeldy&+wally&(opposit|(direction&)))=0
    ENDSELECT
    '
    nextdir&=RANDOM(4+curvy&)
    IF nextdir&>3
      nextdir&=direction&
    ENDIF
    labstep(thisfeldx&,thisfeldy&,nextdir&)
    FOR i|=0 TO 3
      IF i|<>nextdir& AND i|<>opposit|(direction&)
        labstep(thisfeldx&,thisfeldy&,i|)
      ENDIF
    NEXT i|
    '
    mark(thisfeldx&,thisfeldy&,thisfeldx&+nextx&(lab&(thisfeldx&,thisfeldy&)),thisfeldy&+nexty&(lab&(thisfeldx&,thisfeldy&)),1,1)
  ENDIF
RETURN
'
PROCEDURE setcurvy
  curvydur&=RANDOM(1000)
  SELECT RANDOM(2)
  CASE 1
    curvy&=10
  CASE 2
    curvy&=0
  DEFAULT
    curvy&=30000
  ENDSELECT
RETURN
'
PROCEDURE solvemaze
  resetlab(0,-3)
  ARRAYFILL stackerx&(),-1
  ARRAYFILL stackery&(),-1
  ARRAYFILL bstackerx&(),-1
  ARRAYFILL bstackery&(),-1
  lab&(endx&,endy&)=30000
  bstackerx&(0)=endx&
  bstackery&(0)=endy&
  REPEAT
    SWAP stackerx&(),bstackerx&()
    SWAP stackery&(),bstackery&()
    ARRAYFILL bstackerx&(),-1
    ARRAYFILL bstackery&(),-1
    REPEAT
      FOR i&=0 TO 3
        SWAP horwall|(),vertwall|()
        IF vertwall|(stackerx&(0)+wallx&(i&),stackery&(0)+wally&(i&))=0
          markpos(stackerx&(0)+nextx&(i&),stackery&(0)+nexty&(i&),lab&(stackerx&(0),stackery&(0))-1)
        ENDIF
      NEXT i&
      mark(stackerx&(0),stackery&(0),stackerx&(0),stackery&(0),-1,1)
      DELETE stackerx&(0)
      DELETE stackery&(0)
      stackerx&(300)=-1
      stackery&(300)=-1
    UNTIL stackerx&(0)<0
  UNTIL bstackerx&(0)=-1
RETURN
PROCEDURE markpos(x&,y&,weight&)
  IF lab&(x&,y&)=0
    lab&(x&,y&)=weight&
    INSERT bstackerx&(0)=x&
    INSERT bstackery&(0)=y&
  ENDIF
RETURN
PROCEDURE printsolution
  mark(endx&,endy&,endx&,endy&,0,1)
  mark(startx&,starty&,startx&,starty&,0,1)
  locx&=startx&
  locy&=starty&
  REPEAT
    mark(locx&,locy&,locx&,locy&,-1,0)
    FOR i&=0 TO 3
      SWAP horwall|(),vertwall|()
      EXIT IF (vertwall|(locx&+wallx&(i&),locy&+wally&(i&))=0 AND lab&(locx&+nextx&(i&),locy&+nexty&(i&))>lab&(locx&,locy&))
    NEXT i&
    ADD locx&,nextx&(i&)
    ADD locy&,nexty&(i&)
    SELECT i&
    CASE 0,2
      SWAP horwall|(),vertwall|()
    ENDSELECT
  UNTIL (locx&=endx& AND locy&=endy&)
RETURN
PROCEDURE mark(x1&,y1&,x2&,y2&,col&,style&)
  SELECT col&
  CASE -1
    COLOR 0
    PLOT (x1&*step|)+hstep|,(y1&*step|)+hstep|
  DEFAULT
    DEFFILL col&,style&
    PBOX (MIN(x1&,x2&)*step|)+3,(MIN(y1&,y2&)*step|)+3,((MAX(x1&,x2&)+1)*step|)+1,((MAX(y1&,y2&)+1)*step|)+1
  ENDSELECT
RETURN
PROCEDURE resetlab(field&,borders&)
  ARRAYFILL lab&(),field&
  FOR i%=0 TO fieldsizex&
    lab&(i%,0)=borders&
    lab&(i%,fieldsizey&)=borders&
  NEXT i%
  FOR i%=0 TO fieldsizey&
    lab&(0,i%)=borders&
    lab&(fieldsizex&,i%)=borders&
  NEXT i%
RETURN
PROCEDURE setfieldtomouse(VAR locx&,locy&)
  locx&=MIN(MAX(MOUSEX\step|-1,1),fieldsizex&-1)
  locy&=MIN(MAX(MOUSEY\step|-1,1),fieldsizey&-1)
  mark(locx&,locy&,locx&,locy&,0,1)
RETURN
PROCEDURE preparevallues
  step|=398/fieldsizey&
  hstep|=DIV(step|,2)+2
  opposit|(0)=2
  opposit|(1)=3
  opposit|(2)=0
  opposit|(3)=1
  nexty&(0)=-1
  nextx&(1)=1
  nexty&(2)=1
  nextx&(3)=-1
  wallx&(1)=1
  wally&(2)=1
RETURN
