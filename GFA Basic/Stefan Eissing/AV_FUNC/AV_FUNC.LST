'
' Definition der Nachrichten des Venus <-> Accessory Protokolls
' von Stefan Eissing, last change 16.04.1991
' und Stephan Gerle, last change 29.01.92
'
' GFA-BASIC-3.x Einbindung und Beispiel-Accessory (Kommunikation mit GEMINI)
' von Gregor Duchalski, last change 16.05.92
'
$m5000
'
ap_id&=APPL_INIT()              ! Anwendung beim AES anmelden
'
IF ap_id&>=0                    ! Hat geklappt...
  '                             ! Accessory eintragen...
  me_id&=MENU_REGISTER(ap_id&,"  AV-Protokoll ")
  '
  IF me_id&>=0                  ! ...auch das gelang
    '
    ' System fÅr die Dauer der ACC-Initialisierung 'anhalten':
    ~WIND_UPDATE(1)
    '
    zuweisungen
    av_zuweisungen
    '
    main
    '
  ELSE                          ! Fehlgeschlagen...
    DO                          ! ...dann nichts tun
    LOOP
  ENDIF
  '
ENDIF
' ----------------------------------------------------------------------------
> PROCEDURE zuweisungen
  '
  ' Zwei Buffer mit festen Adressen. Da das GFA-BASIC ab und zu eine Garbage-
  ' Collection durchfÅhrt, wÅrde es bei den Adress-öbergaben zu Problemen
  ' kommen. Daher werden die Strings zunÑchst hierhin kopiert und dann die
  ' Adressen dieser Buffer Åbergeben.
  '
  INLINE inline1%,256
  INLINE inline2%,256
  '
  ' Der Message-Buffer, 8 Word-Variablen
  '
  DIM msg&(7)
  '
  ' AES-EVNT-Messages
  '
  ac_close&=41
  ac_open&=40
  '
RETURN
'
> PROCEDURE main
  '
  ' Bereits hier Protokoll anmelden, um ein Autostart-
  ' Programm (ab TOS 1.04) nicht zu 'verpassen'.
  '
  av_init(ap_id&,"AV_FUNC ",&X100100)
  '
  ' ACC-Initialisierung abgeschlossn, weiter geht's:
  ~WIND_UPDATE(0)
  '
  ' Hauptschleife des Accessories:
  '
  DO
    evnt&=EVNT_MESAG(V:msg&(0))         ! Auf Nachricht warten
    '
    SELECT msg&(0)
    CASE ac_open&                       ! Accessory angewÑhlt...
      '
      acc_angewaehlt                    ! ...3 Mîglichkeiten
      '
    CASE ac_close&                      ! Start/Ende Hauptapplikation...
      '
      ' Protokoll anmelden. UnterstÅtzt wird AV_OPENCONSOLE
      ' (Bit 2) und AV_STARTPROG (Bit 5).
      '
      av_init(ap_id&,"AV_FUNC ",&X100100)
      '
      ' Hier muû natÅrlich der Name des Accessories stehen, immer
      ' 8 Stellen, also gegebenenfalls mit ' ' auffÅllen.
      '
    CASE acc_id&                        ! GEMINI meldet: Accessory erkannt...
      '
      id&=msg&(1)                       ! Appl.-ID des Hauptprogramms (0)
      '
      a%=SHL(msg&(4),16) OR msg&(5)
      '
      hpt_app$=CHAR{a%}                 ! ...Dateiname (z.B. "GEMINI.APP")
      '
      ' Hier kînnte man also feststellen, ob einem das Hauptprogramm
      ' bekannt ist. Wenn man sich kennt fÑllt manches leichter.
      '
    ENDSELECT
    '
  LOOP
  '
RETURN
> PROCEDURE acc_angewaehlt
  LOCAL a&
  '
  ' Das Accessory wurde angewÑhlt. Drei Mîglichkeiten stehen zur Auswahl.
  '
  a&=FORM_ALERT(1,"[1][AV-Protokoll: Kommunikation mit |==>"+hpt_app$+"|Console : Console îffnen|Fenster : Fenster îffnen|Programm: Programm starten ][Console|Fenster|Programm]")
  '
  SELECT a&
  CASE 1
    av_open_console                   ! ...GEMINI-Console îffnen
    '
  CASE 2                              ! ...GEMINI-Fenster îffnen
    av_open_window("C:\","")
    '
  CASE 3                              ! ...Programm starten
    av_start_program("D:\GFABASIC.PRG","")
    '
  ENDSELECT
  '
  ' Statt 'D:\GFABASIC' oder 'C:\" sollen Sie natÅrlich Ihre
  ' eigenen Pfade eintragen.
  '
RETURN
'
> PROCEDURE feste_adresse(a$,a%)
  '
  ' Kleine Unterroutine, um Strings an eine nicht
  ' verÑnderliche (statische) Adresse zu bewegen.
  '
  a$=a$+CHR$(0)
  BMOVE V:a$,a%,LEN(a$)
  '
RETURN
' ----------------------------------------------------------------------------
> PROCEDURE av_zuweisungen
  '
  ' ----------------------------------------------------------------------------
  ' Message-Nummern fÅr das xAcc-Protokoll von Konrad Hinsen
  ' Venus gibt bei ACC_ID "VENUS.APP" und Gemini gibt "GEMINI.APP"
  ' zurÅck. Gemini unterstÅtzt xAcc der Stufe 0.
  '
  acc_id&=&H400
  acc_open&=&H401
  acc_close&=&H402
  acc_acc&=&H403
  '
  ' ----------------------------------------------------------------------------
  ' Message-Nummern fÅr die Kommunikation zwischen Venus und
  ' verschiedenen Accesories.
  ' Sollten in Nachrichten Pfade oder Dateinamen vorkommen, so
  ' muû immer der absolute Pfad angegeben werden (also mit Laufwerk)
  ' und alle Buchstaben mÅssen Groûbuchstaben sein. Pfade enden
  ' IMMER mit einem Backslash!
  '
  ' Nachrichten von Venus beginnen mit VA (Venus -> Accessory).
  ' Nachrichten an Venus beginnen mit AV (Accessory -> Venus).
  '
  ' ---------------------------------------------------------------
  ' Mit AV_PROTOKOLL kann jedes Acc nachfragen, welche Nachrichten
  ' verstanden werden (Dies ist ja bei VENUS und GEMINI
  ' unterschiedlich! Es wÑre schîn, wenn auch andere Programme auf
  ' dieses Protokoll reagieren wÅrden. Zumindest AV_SENDKEY ist
  ' sicher leicht zu implementieren und ist die einzige Methode, wie
  ' Åber Nachrichten TastaturdrÅcke simuliert werden kînnen.
  '
  ' AV_PROTOKOLL: Mit dieser Nachrichtennummer sollte man bei
  ' anderen Applikationen und auch VENUSGEMINI nachfragen, ob
  ' und welche Nachrichten sie versteht.
  '
  av_protokoll&=&H4700
  '
  ' Word 6+7: Pointer auf den Accessorynamen, wie er bei
  '           appl_find benutzt werden muû; also 8 Zeichen lang
  '           nullterminiert (char name[9]).
  ' Die Bits in den Worten 3, 4 und 5 haben folgende Bedeutung:
  ' Word 3:
  ' Bit 0:               (VA_SETSTATUS)
  ' Bit 1:               (VA_START)
  ' Alle anderen Bits sind fÅr Erweiterungen reserviert und sollten
  ' daher mit 0 vorbesetzt werden. Das gilt natÅrlich auch fÅr die
  ' Bits in den Worten 4 und 5.
  '
  ' ---------------------------------------------------------------
  ' VA_PROTOSTATUS: Dem Sender von AV_PROTOKOLL wird mitgeteilt, daû
  ' der EmpfÑnger etwas von diesem Protokoll weiû. Die Worte 3-7 des
  ' Nachrichtenpuffers enthalten die Information, welche Nachrichten
  ' verstanden werden. Gesetzte Bits stehen dafÅr, daû eine Nachricht
  ' (Nachrichtengruppe) verstanden werden.
  '
  va_protostatus&=&H4701
  '
  ' Word 6+7: Pointer auf den Programmnamen, wie er bei
  '           appl_find benutzt werden muû; also 8 Zeichen lang
  '           nullterminiert (char name[9]).
  ' Die Bits in den Worten 3, 4 und 5 haben folgende Bedeutung:
  ' Word 3:
  ' Bit 0                (AV_SENDKEY)
  ' Bit 1                (AV_ASKFILEFONT)
  ' Bit 2                (AV_ASKCONFONT, AV_OPENCONSOLE)
  ' Bit 3                (AV_ASKOBJECT)
  ' Bit 4                (AV_OPENWIND)
  ' Bit 5                (AV_STARTPROG)
  ' Bit 6                (AV_ACCWINDOPEN, AV_ACCWINDCLOSED)
  ' Bit 7                (AV_STATUS, AV_GETSTATUS)
  ' Bit 8                (AV_COPY_DRAGGED)
  ' Alle anderen Bits sind fÅr Erweiterungen reserviert und sollten
  ' daher mit 0 vorbesetzt werden. Das gilt natÅrlich auch fÅr die
  ' Bits in den Worten 4 und 5.
  '
  ' AV_SENDKEY kann sicher jeder leicht in seine Programme einbauen.
  ' Bei AV_OPENWIND kînnte ein Hauptprogramm auch seine "normale"
  ' Routine zum ôffnen eines Dokumentes anwerfen und dabei den
  ' Åbergebenen Pfad benutzen. Dies ist zusammen mit der Benutzung
  ' von TreeView sicher eine einfache Art, Dateien aus anderen Ordnern
  ' oder Laufwerken zu laden.
  '
  ' ---------------------------------------------------------------
  ' AV_GETSTATUS: Ein Accessory erfragt bei Venus den aktuellen
  ' Status, den es Venus mit AV_STATUS mal gegeben hat.
  '
  av_getstatus&=&H4703
  '
  ' ---------------------------------------------------------------
  ' AV_STATUS: Ein Accessory kann Venus seinen Status mitteilen,
  ' der dann von Venus im INF-File gespeichert wird und mit
  ' AV_GETSTATUS wieder abgerufen werden kann.
  ' Zuvor MUSS es sich aber mit AV_PROTOKOLL anmelden!
  ' Word 3+4: Pointer auf einen String, der keine Steuerzeichen
  '           enthalten darf und nicht lÑnger als 256 Zeichen
  '           sein darf. Dieser Pointer darf allerdings NULL sein.
  '
  av_status&=&H4704
  '
  ' ---------------------------------------------------------------
  ' VA_SETSTATUS: Venus teilt dem Accessory den abgespeicherten
  ' Status bei Nachfrage durch AV_GETSTATUS mit. Dieser kann dann
  ' von einem Accessory gesetzt werden.
  ' Word 3+4: Pointer auf einen String, der keine Steuerzeichen
  '           enthÑlt.
  '           Dieser Pointer kann allerdings NULL sein, dann war
  '           kein Status gespeichert.
  '
  va_setstatus&=&H4705
  '
  ' ---------------------------------------------------------------
  ' AV_SENDKEY: Ein Acc sendet VENUSGEMINI einen Tastaturevent, den
  ' es selber vielleicht nicht versteht.
  ' Word 3 = Tastaturstatus                 ev_mmokstate
  ' Word 4 = Scancode der gedrÅckten Taste  ev_mkreturn
  '
  av_sendkey&=&H4710
  '
  ' ---------------------------------------------------------------
  ' VA_START: Accessory wird aktiviert. Word 3 + 4 enthalten einen
  ' Pointer auf eine Kommandozeile, der auch NULL sein kann.
  ' In der Kommandozeile stehen Pfade oder Dateinamen.
  '
  va_start&=&H4711
  '
  ' ---------------------------------------------------------------
  ' AV_ASKFILEFONT: Frage nach dem eingestellten Zeichensatz
  ' fÅr Dateinamen.
  '
  av_askfilefont&=&H4712
  '
  ' ---------------------------------------------------------------
  ' VA_FILEFONT: Gibt den derzeit eingestellten Zeichensatz.
  ' Word 3 = Dateifontnummer (font id)
  ' Word 4 = Dateifontgrîûe (in points)
  '
  va_filefont&=&H4713
  '
  ' ---------------------------------------------------------------
  ' (Nur Gemini) AV_ASKCONFONT: Frage nach dem eingestellten
  ' Zeichensatz fÅr das Console-Fenster.
  '
  av_askconfont&=&H4714
  '
  ' ---------------------------------------------------------------
  ' VA_CONFONT: Gibt den derzeit eingestellten Zeichensatz.
  ' Word 3 = Consolefontnummer (font id)
  ' Word 4 = Consolefontgrîûe (in points)
  '
  va_confont&=&H4715
  '
  ' ---------------------------------------------------------------
  ' AV_ASKOBJECT: Fragt nach dem derzeit selektiertem Objekt.
  ' Es wird der Name des derzeit selektierten Objektes zurÅckgegeben.
  ' Ist kein Objekt selektiert, so ist der String leer.
  ' Sind mehrere Objekte selektiert, so sind ihre Namen durch Leer-
  ' zeichen getrennt.
  '
  av_askobject&=&H4716
  '
  ' ---------------------------------------------------------------
  ' VA_OBJECT: Gibt Namen der derzeit selektierten Objekte.
  ' Aufbau wie bei VA_START
  '
  va_object&=&H4717
  '
  ' ---------------------------------------------------------------
  ' (Nur Gemini)AV_OPENCONSOLE: Venus soll das Console-Fenster îffnen.
  ' Ist es schon offen, so wird es nach vorne gebracht. Diese Aktion
  ' ist vor allen Dingen sinnvoll, wenn ein Accessory ein TOS-Programm
  ' mittels der system()-Funktion starten will (Warnung: Auf keinen
  ' Fall darf ein GEM-Programm von einem Accessory via system()
  ' gestartet werden! (siehe auch AV_STARTPROG)
  ' Auch sollte diese Nachricht nur auf ausdrÅcklichen Wunsch des
  ' Benutzers gebraucht werden, da es ihn sonst nur verwirren kann.
  '
  ' ACHTUNG: Diese Nachricht steht nur in Gemini.app zur VerfÅgung.
  '
  av_openconsole&=&H4718
  '
  ' ---------------------------------------------------------------
  ' VA_CONSOLEOPEN: Gibt zurÅck, ob das Console-Fenster nach vorne
  ' gebracht worden ist. Word 3 == 0 (nein) != 0 (ja)
  '
  va_consoleopen&=&H4719
  '
  ' ---------------------------------------------------------------
  ' AV_OPENWIND: Venus soll ein Datei-Fenster îffnen.
  ' Dies sollte auch nur geschehen, wenn die Ursache fÅr den
  ' Benutzer ersichtlich ist.
  ' Word 3+4 (Pointer) Pfad fÅr das Fenster (s.o.).
  ' Word 5+6 (Pointer) Wildcard fÅr darzustellende Dateien.
  '
  av_openwind&=&H4720
  '
  ' ---------------------------------------------------------------
  ' VA_WINDOPEN: Gibt an, ob das Fenster geîffnet werden konnte.
  ' siehe VA_CONSOLEOPEN
  '
  va_windopen&=&H4721
  '
  ' ---------------------------------------------------------------
  ' AV_STARTPROG: Venus soll ein Programm starten. Hierbei
  ' werden die angemeldeten Applikationen der Venus mit
  ' berÅcksichtigt. Man kann also auch eine Datei angeben, fÅr
  ' die Venus dann ein Programm sucht.
  ' Word 3+4 (Pointer) Programmname mit kompletten Pfad
  ' Word 5+6 (Pointer) Kommandozeile (kann NULL sein)
  '
  av_startprog&=&H4722
  '
  ' ---------------------------------------------------------------
  ' VA_PROGSTART: Gibt an, ob Venus das Programm startet.
  ' Word 3 == 0: nicht gestartet, != 0 gestartet
  ' Im Allgemeinen wird das Acc. im Fehlerfall sofort eine
  ' Nachricht bekommen. Wenn das Programm aber gestartet wird, erhÑlt
  ' das Acc. diese Nachricht erst nach dem Start des Programms, da
  ' die Routine, die den Pexec macht nicht mehr wissen kann, das ein
  ' Acc. noch schnell eine Nachricht bekommen muû. Bei einem GEM-
  ' Programm, kann man der Erfolg auch an dem AC_CLOSE erkennen.
  ' Auch ist die Fehlererkennung nicht optimal. Der RÅckgabewert weist
  ' auch nicht aus, das das Programm fehlerfrei gelaufen ist.
  '
  va_progstart&=&H4723
  '
  ' ---------------------------------------------------------------
  ' AV_ACCWINDOPEN: Mit dieser Nachricht kann ein Acc Venus mitteilen, daû
  ' es ein Fenster geîffnet hat.
  ' Word 3 AES-Handle des geîffneten Fensters
  '
  av_accwindopen&=&H4724
  '
  ' ---------------------------------------------------------------
  ' VA_DRAGACCWIND: Venus teilt dem Acc mit, daû Objekte auf eines seiner
  ' mittels AV_ACCWINDOPEN angemeldeten Fenster gezogen worden sind.
  ' Word 3   AES-Handle des Fensters
  ' Word 4   X-Position der Maus
  ' Word 5   Y-Position der Maus
  ' Word 6+7 Pointer auf einen String, der die Namen der Objekte enthÑlt.
  '
  va_dragaccwind&=&H4725
  '
  ' ---------------------------------------------------------------
  ' AV_ACCWINDCLOSED: Acc teilt Venus mit, daû sein Fenster geschlossen
  ' wurde. Dies braucht das Acc nur in dem Fall zu tun, wenn es selbst das
  ' Fenster schlieût. Bekommt es eine AC_CLOSE Mitteilung vom AES, so weiû
  ' Venus schon, daû alle Fenster weg sind.
  ' Word 3   AES-Handle des Fensters
  '
  av_accwindclosed&=&H4726
  '
  ' ---------------------------------------------------------------
  ' AV_COPY_DRAGGED: Acc teilt Venus mit, das die vorher mittels
  ' VA_DRAGACCWIND gedraggten Icons nach Zielpfad kopiert werden
  ' sollen.
  ' Word 3   Tastaturstatus wie von evnt_multi() erhalten.
  ' Word 4+5 Pointer auf String mit Zielpfad
  '
  av_copy_dragged&=&H4728
  '
  ' ---------------------------------------------------------------
  ' VA_COPY_COMPLETE: Venus teilt dem Accessorie mit, das der
  ' Kopiervorgang, der mit AV_COPY gestartet wurde, beendigt ist.
  ' Word 3   0, wenn nichts kopiert wurde
  ' ungleich 0, wenn etwas kopiert wurde
  '
  va_copy_complete&=&H4729
  '
  ' ----------------------------------------------------------------------------
  '
  ' Liefert TRUE, wenn ein MultiTasking fÑhiges AES installiert ist.
  ' Zur ErklÑrung: {GB+4} liefert die Adresse des GLOBAL()-Feldes. Mit '+2'
  ' erreichen wir folglich GLOBAL(1), mit '+8' wÅrden wir z.B. GLOBAL(4)
  ' erhalten.
  '
  multi_aes!=CARD{{GB+4}+2}>1
  '
RETURN
'
> PROCEDURE av_init(myapid&,myname$,myprotostatus&)
  '
  feste_adresse(myname$,inline1%)    ! Acc-Namen an feste Adresse
  '
  msg&(0)=acc_id&                    ! Opcode
  msg&(1)=myapid&                    ! Appl.-ID des Accessorys
  msg&(2)=0
  '
  ' Bitvektor der unterstÅtzten Nachrichten. NÑheres siehe
  ' bei den av_zuweisungen unter 'va_protostatus'
  msg&(3)=myprotostatus&
  '
  msg&(4)=WORD(SWAP(inline1%))       ! Zeiger auf den Namen des Accessorys
  msg&(5)=WORD(inline1%)
  '
  msg&(6)=me_id&                     ! Menu-ID des Accessorys
  msg&(7)=0
  '
  ~APPL_WRITE(0,16,V:msg&(0))        ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_ask_filefont
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_askfilefont&            ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_ask_console_font
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_askconfont&             ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_ask_selected_object
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_askobject&              ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_open_console
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_openconsole&            ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_open_window(pfad$,mask$)
  '
  feste_adresse(pfad$,inline1%)      ! An feste Adressen schieben...
  feste_adresse(mask$,inline2%)
  '
  msg&(0)=av_openwind&               ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  msg&(2)=0
  '
  msg&(3)=WORD(SWAP(inline1%))       ! Adresse des Pfades...
  msg&(4)=WORD(inline1%)
  '
  msg&(5)=WORD(SWAP(inline2%))       ! Adresse der Maske...
  msg&(6)=WORD(inline2%)
  msg&(7)=0
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_start_program(pfad$,cmdline$)
  '
  feste_adresse(pfad$,inline1%)      ! An feste Adressen schieben...
  feste_adresse(cmdline$,inline2%)
  '
  msg&(0)=av_startprog&              ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  msg&(2)=0
  msg&(3)=WORD(SWAP(inline1%))       ! Adresse des Programmnamens...
  msg&(4)=WORD(inline1%)             ! ...im Motoroller-Format
  msg&(5)=WORD(SWAP(inline2%))       ! Adresse der Kommandozeile
  msg&(6)=WORD(inline2%)             ! ...im Motorola-Format
  msg&(7)=0
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_acc_opened_window(winhandle&)
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_accwindclosed&          ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  msg&(3)=winhandle&                 ! Tastaturstatus
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_acc_closed_window(winhandle&)
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_accwindclosed&          ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  msg&(3)=winhandle&                 ! Tastaturstatus
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_sendkeyevent(state&,key&)
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_sendkey&                ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  msg&(3)=state&                     ! Tastaturstatus
  msg&(4)=key&                       ! Scancode der gedrÅckten Taste
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
> PROCEDURE av_copy_dragged(kstate&,dest$)
  '
  feste_adresse(dest$,inline1%)      ! An feste Adressen schieben
  '
  ARRAYFILL msg&(),0                 ! Message-Buffer leeren
  '
  msg&(0)=av_copy_dragged&           ! Opcode
  msg&(1)=ap_id&                     ! Applikations-ID des Accessories
  '
  msg&(3)=kstate&                    ! Tastaturstatus
  '
  msg&(4)=WORD(SWAP(inline1%))       ! Adresse des Zielpfades...
  msg&(5)=WORD(inline1%)
  '
  ~APPL_WRITE(id&,16,V:msg&(0))      ! Nachricht an's Hauptprogramm senden
  '
RETURN
