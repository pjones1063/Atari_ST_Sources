Change Workfield%(I%,n) to Temp.edits%(I%,n) in the VALIDATE.CHANGE procedure:Procedure Validate.change(Element%)
  For I%=0 To Ind%-1   !   is this parameter in the P.E.B.?
    Exit If Workfield%(I%,0)=Element%
  Next I%
  If I%<>Ind%  !  if it is, edit it:
    If Element%=42    HERE:
      '      @Outputs.2(Workfield%(I%,1))
      @Outputs.2(Temp.edits%(I%)) !  check to see if we're actually on a
      If Go.ahead!   !                  legal & different out.  If so...
        @Clear.output(Temp.edits%(I%))
        @Switch.outputs(New.output%)
        Temp.edits%(I%)=Final.val%
        @Clear.mouse
      Endif
    Endif
    If Element%=43
      @Rev.flash(14,40,98,47,True) !  h
      @Request.sample
      @New.sample(6,*Temp.soft$)
    Endif
    If Element%=44
      @Rev.flash(14,64,98,71,True) !  h
      @Request.sample
      @New.sample(9,*Temp.loud$)
    Endif
    If Element%<42AND HERE:
      '      @Set.pitch.name(Workfield%(I%,0))
      '      @Do.edit(Workfield%(I%,1))
      @Set.pitch.name(Temp.edits%(I%))
      @Do.edit(Temp.edits%(I%))
      Temp.edits%(I%)=Final.val%
    Endif
  Endif
ReturnChange the code for backing up a KEB: (This is in the "BAK" section of the Main.keyg.ed.loop:.
        '
        '  BAK:
        '
        If Hor%>274 And Hor%<316 And Vert%>353 And Vert%<369
          @Rev.flash(275,178,315,184,True)  ! h
          If Shift!
            @M.box(217,81,420,103)  ! h
            Print At(31,12);"Backing up buffer..."
            Bmove Work.buf.addr%,Bak.keyg.buf%,218
            Pause 30
            Put 217,81,Temp.box$
          Else This is the code that changed:
            @M.box(134,81,504,103)  ! h
            Print At(20,12);"Swapping this buffer with backup buffer..."
            Pause 30
            Put 134,81,Temp.box$
            Bmove Work.buf.addr%,Cat%,218
            Bmove Bak.keyg.buf%,Work.buf.addr%,218
            Bmove Cat%,Bak.keyg.buf%,218
            @Send.midi(Work.buf.addr%,218,9,40)
            @Read.keygroup
          Endif
        Endif
Also, this portion of code changed (I added "And Curr.program"), otherwize it was possible to save an .S9P program of 0 bytes):If Menu(0)=15 And Curr.program!  !  SAVE PROGAdded this code to Main.keyg.ed loop--erases all ten KEB's when cont-Alt clicking on "INIT":
If Shift! And Buffers%(Work.buf%,0)
  Alert 3,"   Erase this work buffer?   ",2," Yes | No ",Choice%
  @Check.mouse.shape
  If Choice%=1
    '            @Mark  !  used to be UNMARK
    Buffers%(Work.buf%,0)=0
    Sput Keyg.ed.screen$
    ' h:
    @Rev.flash(5+(Work.buf%*21),193,24+(Work.buf%*21),198,False)
    Comments$(Work.buf%)=""
  Endif
ElseTHIS IS NEW CODE:
  If Control.keys%=12
    Alert 1,"  Initialize all ten KEB's,|  are you sure?",2," Yes | No ",Blah%
    If Blah%=1
      For I%=0 To 9
        Buffers%(I%,0)=0
        Buffers%(I%,2)=0
        Comments$(I%)=""
      Next I%
      Sput Keyg.ed.screen$
      @Rev.flash(5+(Work.buf%*21),193,24+(Work.buf%*21),198,False)
    Endif
  Else
*****************Conditional editing doesn't seem to see the "MIX" output.*****************Loading a newly-created program resulted in an "Illegal File!" alert because when the program was saved it didn't have the sysex header.  Add this code to the "Add" procedure:If Not Prog!  !  Making a new program
  *Prog.adr%=True
  Prog.len%=85
  Prog.name$="*Untitled*"-------------------------THIS IS NEW CODE:
  '
  '  put sysex header on:
  '
  Restore Header
  For I%=0 To 6
    Read Blah%
    Poke Prog.addr%+I%,Blah%
  Next I%   '-------------------
  @Set.name(Prog.addr%+7,Prog.name$)
New data added to end of program:Header:
Data &hf0,&h47,&h00,&h09,&h40,0,0
*******************************Changed right-mouse play code:First, replace the @Play.note...calls in the Main.keyg.ed and Env.loop procedures with this new call:@New.play.note(Parameters%(0,0),Parameters%(1,0))This is the new procedure:Procedure New.play.note(Low.key%,High.key%)
  @Control.keys
  If Shift! Or Control.keys%=10   !  we're holding shift OR both shift & alt
    Key%=(Low.key%+High.key%)/2
  Else
    Range.fact=640/(High.key%-Low.key%+1)
    Key%=Fix(Mousex/Range.fact)+Low.key%
  Endif
  If Control.keys%=8 Or Control.keys%=10  !  holding alt OR shift & alt
    Vel%=127
  Else
    Vel%=Abs(Mousey-201)*0.635  !  this would be different for mono version!
  Endif
  @Note.on.off(Key%,Vel%)
  Repeat
  Until Mousek=0
  @Note.on.off(Key%,0)
Return
*********************************Added code to select KEB's using function keys:1. separated this code from "Main.keyg.ed" procedure and put in a separate procedure called "Change.buffers":'   Move to new work buffer, Copy/Delete Work buffer:
'
If Hor%>4 And Hor%<214 And Vert%>383 And Vert%<397
  New.work.buf%=(Hor%-5)/21
  @Change.buffers
  '
  '  ************
  ' (this code was moved to the new procedure)
  '
  '  ********************
  '
Endif
2.  Added this code to "Key.commands" procedure:If Ag%>186 And Ag%<197 Or ((Ag%>211 And Ag%<222) And Shift!) !  function keys
  New.work.buf%=Ag%-187+(Shift!*25)
  @Change.buffers
Endif
*****************Added code to put small arrow marks over KEB boxes to indicate which ones were active:(This will all change with MONO version)!!1.  Reserve space for small arrow:Upar$=String$(30,0)  !   Reserve arrow shapes for keygroup display boxDownar$=String$(30,0)  THIS IS NEW CODE:
Small.arrow$=String$(18,0)  !  shape for small arrow 2.  Read data into reserved memory (right after "TEMP" stuff):Sa%=Varptr(Small.arrow$)For I%=0 To 12 Step 4   !  small arrow to mark used KEB's:  Read Data%  Lpoke Sa%+I%,Data%Next I%Poke Sa%+16,483.  Get small piece of screen to cover small arrow, then clear "Sa%":Sget Main.screen$THIS IS NEW:Get 309,165,315,167,Small.piece$Clr Logical$,Top$,Piece$,[....],Rez%,Sa% <---Add Sa% to end of this line!4.  This is data at end of program (right before "Header:" label):'  small arrow to mark used KEB's:'Data 327682,196097,-66914136,20243061765.  Procedure to mark/unmark buffers:Procedure Mark.used.buffers  For I%=0 To 9    If Buffers%(I%,0)      Put (I%*20)+14+Fix(I%/2)*2,189,Small.arrow$    Else      Put (I%*20)+13+Fix(I%/2)*2,189,Small.piece$    Endif  Next I%Return6. Procedure is called 9 times; look through code to find'em!**********************************New stuff:Procedure Check.buffer.links  If Curr.program!    Clr Link!    For I%=0 To 9      If Buffers%(I%,2)  <--this used to be "Buffers%(I%,0)"        Link!=True      Endif    Next I%    If Link!      Alert 3,"  There are keygroup edit |  buffers linked to the |  current program!",1," OK ",Blah%    Endif  EndifReturnThis is all changed so links can be maintained if owners are changed:(added two new attributes to Buffers%(n,0): 4=owned by curr, linked to comp5=owned by comp, linked to curr'   Set Current program as owner:'If Hor%>93 And Hor%<130 And Vert%>4 And Vert%<18 And (Buffers%(Work.buf%,0)<>1 And Buffers%(Work.buf%,0)<>4)  '  '  if buffer was previously owned by comp program...  '  If Buffers%(Work.buf%,0)=2 Or Buffers%(Work.buf%,0)=5    @Rev.flash(131,3,166,8,False)  !  un-highlight "COMP"    If Buffers%(Work.buf%,2)  !  if buffer is LINKED      If Buffers%(Work.buf%,0)=2  ! owned & linked w/ COMP        Buffers%(Work.buf%,0)=4   !  keep link to comp      Else  !  already linked to curr        Buffers%(Work.buf%,0)=1  !  owner & link prog the same      Endif      '              If Buffers%(Work.buf%,0)=5  ! linked to curr      '            Endif    Else      Buffers%(Work.buf%,0)=1  !  if buffer's not linked, just set owner    Endif  Else  !  ...if buffer has no owner    Buffers%(Work.buf%,0)=1  Endif  @Rev.flash(94,3,129,8,False)  !  h  '          Buffers%(Work.buf%,2)=0  Prog$="current"Endif''  Set Composite program as owner:'If Hor%>130 And Hor%<167 And Vert%>4 And Vert%<18 And (Buffers%(Work.buf%,0)<>2 And Buffers%(Work.buf%,0)<>5)  '  '  if buffer was previously owned by curr prog...  '  If Buffers%(Work.buf%,0)=1 Or Buffers%(Work.buf%,0)=4    @Rev.flash(94,3,129,8,False) ! h    If Buffers%(Work.buf%,2)  !  if buffer is LINKED      If Buffers%(Work.buf%,0)=1  ! owned & linked w/ CURR        Buffers%(Work.buf%,0)=5   !  keep link to curr      Else !  already linked to comp        Buffers%(Work.buf%,0)=2      Endif      '              If Buffers%(Work.buf%,0)=4  ! linked to comp      '            Endif    Else      Buffers%(Work.buf%,0)=2    Endif  Else  !  ...if buffer has no owner    Buffers%(Work.buf%,0)=2  Endif  @Rev.flash(131,3,166,8,False) !  h  '          Buffers%(Work.buf%,2)=0  Prog$="composite"EndifFixes "Mark" procedure to account for new attributes; also, adds string variable "Prog$" for new message boxes:Procedure Mark  If Buffers%(Work.buf%,0)=1 Or Buffers%(Work.buf%,0)=4    @Rev.flash(94,3,129,8,False) ! owner is curr    Prog$="Current"  Endif  If Buffers%(Work.buf%,0)=2 Or Buffers%(Work.buf%,0)=5    @Rev.flash(131,3,166,8,False)  ! owner  is comp    Prog$="Composite"  EndifReturnI added a message box to tell you which keygroup KEB is being copied back to (the #'s will change with MONO version):'   DONE:  (need to add code to include COMP program)'If Fn Done  '  '  If the buffer is linked to a program:  '  @Rev.flash(223,168,260,176,True)  !  h  If Buffers%(Work.buf%,2) And (Buffers%(Work.buf%,0)=1 Or Buffers%(Work.buf%,0)=2)    Blah%=(Buffers%(Work.buf%,2)-Curr.prog.addr%-83)/140    @M.box(158,130,418,158)    Print At(22,18);"Copying this KEB to"    Print At(22,19);Prog$;" program keygroup #";Blah%+1    Pause 50    Put 158,130,Temp.box$    Bmove Work.buf.addr%+20,Curr.prog.addr%+27,56    Bmove Work.buf.addr%+76,Buffers%(Work.buf%,2),140    Poke Curr.prog.addr%+53,No.of.curr.keygps%   !  Why did I do this?-- # of keygroups doesn't change!    Curr.check!=False  !  we'll need to checksum the program now    If Shift!      Goto Exit    Endif    @Clear.mouse  Else    Alert 1,"  This keygroup is not linked |  to the current or composite|  program.",1," Add |Cancel",Blah%    @Check.mouse.shape    If Blah%=1      Goto Add    Endif  Endif  'Endif**********************************Started re-coding to Malloc() a chunk of memory for various things rather than declare string variables & gettingtheir addresses. (I'm getting a lot of crashes when running from within KCS, so I hope this'll fix things).  Also changed error handling:1.  Placed "On Error Gosub Er.proc" right before @Main.loop2.  New Error Procedure:Procedure Er.proc  Close  @Restore.old.buf  @Restore.colors  Alert 3,"Error number "+Str$(Err),1," OK ",Blah%  @Return.memory  EndReturn3.  New code for quitting:If Menu(0)=19  ! QUIT  '  If we have enlarged the midi buffer,  @Restore.old.buf  !     put the old one back  '  @Restore.colors  '  @Return.memory  '  EndEndif4.  "Return.memory" procedure:Procedure Return.memory  Status%=Gemdos(73,L:X7%)   ! return memory?  If Status%<>0    Alert 1,"Mfree() failed!",1,"Why??",Blah%  Endif  Reserve Fre(0)+49920-255Return5.  Malloc stuff:Arrayfill Buffers%(),0''  Malloc memory:'Void Fre(0)' Print "Free memory is ";Fre(0)' While Inkey$=""' WendIf Fre(0)>=49920  Reserve Fre(0)-49920  Mal%=Gemdos(72,L:49363)   !    Malloc() memory for graphics objects  If Mal%=0    Mal%=Gemdos(72,L:-1)    Alert 1,"  Can't malloc memory! |  (max avail="+Str$(Mal%)+")",1," Dio! ,Blah%    End  Endif  '  '  divy it up:  '  X7%=Mal%  Buf.adr%=X7%+10  Buffers%(0,1)=Buf.adr%+4570  Curr.prog.addr%=Buffers%(0,1)+2180  Comp.prog.addr%=Curr.prog.addr%+4565  Cat%=Comp.prog.addr%+4565  Bak.keyg.buf%=Cat%+780  Init.prog%=Bak.keyg.buf%+218  Logic%=Init.prog%+218  'Else  Alert 1,"Not enough free memory!",1,"Sorry",Blah%  EndEndifstuff marked with "###########" is old code where memory was allocated by declaring string variables.Started to code "Initialize.buttons" for BOTH curr and composite progs...***************Incorporating Composite program stuff:'
'  In Main.keyg.ed.loop procedure:
'
If Buffers%(Work.buf%,0)=1 Or Buffers%(Work.buf%,0)=4  ! (<--added 4)
  @Add(Curr.program!,*Curr.program!,"Current",Curr.prog.addr%,No.of.curr.keygps%,Curr.prog.len%,*No.of.curr.keygps%,*Curr.prog.len%,*Curr.check!)
Endif
If Buffers%(Work.buf%,0)=2 Or Buffers%(Work.buf%,0)=5  !  (<--added 5)
  @Add(Comp.program!,*Comp.program!,"Composite",Comp.prog.addr%,No.of.comp.keygps%,Comp.prog.len%,*No.of.comp.keygps%,*Comp.prog.len%,*Comp.check!)
Endif
'
'  (In List.keygroups procedure:  (new stuff for headings)
'
If Highlight!
  @Heading  !  This procedure is changed!
  Print At(Col%+14,5);Prog.name$
Endif
'
'  replaced Initialize.buttons with Initialize.buttons.2:
'
@Initialize.buttons.2(Curr.program!,Curr.sel!,No.of.curr.sel%,64,208)
@Initialize.buttons.2(Comp.program!,Comp.sel!,No.of.comp.sel%,382,526)
Procedure Initialize.buttons.2(Program!,Sel!,No.of.sel%,X1%,X2%)
  Deftext ,,,6
  If Not Program!
    Deftext ,3
  Endif
  Text X1%,196,"S. ALL"
  If Sel!
    Text X2%,196,"RE-SEL"
    @Rev.flash(X2%-7,190,X2%+56,197,False)
  Else
    If No.of.sel%=0
      Deftext ,3
    Endif
    Text X2%,196,"DE-SEL"
  Endif
  Deftext ,0
Return
Moving right along...changed a lot of things!  I'll probably just have to do a hard-copy listing of the program and compare code...Changed "Done" and "Add" code, global variable Prog$ is now Program$, etc. etc.Changed size of Curr!() and Comp!() arrays to accomodate 34 keygroups...