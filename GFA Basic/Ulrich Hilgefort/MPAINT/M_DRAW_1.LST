'
' Mikrodraw
'
' Teil 1
'
' Programmiert von Konstantinos Lavassas
'         Januar/Februar 1990
'
' Redaktion: Ulrich Hilgefort
'
' fÅr:  TOS - Magazin + Software fÅr Atari ST und TT
'
@vorbereitung
' -----------------------------Hauptschleife----------------------------------
@menu_aufbauen
weiter:
ON ERROR GOSUB fehler
ON MENU GOSUB menue
ON MENU KEY GOSUB taste
DO
  ON MENU
  MOUSE x%,y%,k%
  IF k%=2
    @menue
  ENDIF
  EXIT IF ex|=TRUE
LOOP
END
'
' --------------------------MenÅleiste behandeln------------------------------
'
> PROCEDURE vorbereitung
  '
  ' Anzahl der Bildschirme ermitteln
  '
  DEFLINE 1,0,0,0
  anzahl%=(FRE(0)-250000)/32000
  IF anzahl%>15                  ! Sperre auf maximal 10 Bildschirme
    anzahl%=15                   ! (kann auch weggelassen werden)
  ENDIF
  '
  ' MenÅ aufbauen
  '
  DIM m$(65),puffer$(anzahl%),lin%(15)
  CLS
  SGET a$                        ! Startbildschirm
  FOR i=1 TO anzahl%             ! in alle Puffer
    puffer$(i)=a$                ! Kopieren
    SPUT puffer$(i)
  NEXT i
  '
  a$="---------------------"
  '
  RESTORE menu_daten             ! HauptmenÅ erzeugen
  FOR i%=0 TO 65
    READ m$
    IF m$="@"                    ! Faulenzer fÅr den Strich
      m$=a$                      ! ersetzen
    ENDIF
    EXIT IF m$="***"
    m$(i%)=m$
  NEXT i%
  '
  menu_daten:
  DATA Mikrodraw,  Autor,@,-1,-2,-3,-4,-5,-6,""
  DATA Datei, Bild Laden     <F1> , Bild Speichern <F2> ,@, Obj. Laden     <F3> , Obj. Speichern <F4> ,@, Ende            <>,""
  DATA Zeichnen, Linie, Rechteck, Quadrat, Kreis, Ellipse, Freizeichnen , SprÅhen
  DATA  FÅllen, Lupe, Radiergummi ,""
  DATA Block , Kopieren , Bewegen , Lasso_kopieren , Lasso_bewegen , Biegen
  DATA  Verzerren, Spiegeln_Horz. , Spiegeln_Vert. , Solarisieren , VerstÑrken , VerdÅnnen
  DATA  Formen, Invertieren ,@,""
  DATA Text, Textart , Schreiben ,""
  DATA Optionen, Linienattribute , FÅllattribute , Muster , Kopierart , Kopiermodus ,""
  DATA Drucken, 9-Nadler , System,""
  DATA ***
  '
  ' Voreinstellungen
  '
  tg%=13                         ! Textgrîûe
  c_art%=3                       ! Kopierart
  aktiv%=1                       ! Bildschirmpointer auf den aktuellen Bildschirm
  f_modus%=1                     ! Rahmen sichtbar, keine FÅllung
  fm%=1                          ! Muster
  l_art%=0                       ! Linienart
  l_st%=1                        ! LinienstÑrke
  '
  ' Linienmuster aufbauen
  '
  alin%=&X11111111111111111010101010101010
  lin%=&X11111111111111111010101010101011
  lin%(1)=&X11111111111111111110000000110111
  lin%(0)=&X11111111111111110000000000000001
  lin%(2)=&X11111111111111111000000000111100
  lin%(3)=&X11111111111111111000100010001001
  lin%(4)=&X11111111111111111000000010000001
  lin%(5)=&X11111111111111111011011011011100
  lin%(6)=&X11111111111111111001010010100111
  lin%(7)=&X11111111111111111010101010101011
  lin%(10)=&X11111111111111111001001001010000
  lin%(9)=&X11111111111111111010000101000011
  lin%(8)=&X11111111111111111110000001111100
  lin%(11)=&X11111111111111111100000011000001
  lin%(12)=&X11111111111111111100000101000010
  lin%(13)=&X11111111111111111100110011001101
  lin%(14)=&X11111111111111111111111011111110
  lin%(15)=&X11111111111111111100000000000100
  '
  ' Muster aufbauen
  '
  DIM i%(32),j%(32)
  RESTORE muster
  FOR i=1 TO 32
    READ i%(i),j%(i)
  NEXT i
  muster:
  DATA 0,0,1,1,2,1,2,2,2,3,2,4,2,5,2,6,2,7,3,10,2,9,2,10,2,11,2,12,2,13,2,14
  DATA 2,14,2,15,2,16,2,17,2,18,2,19,2,20,2,21,2,22,2,23,2,24,3,1,3,2,3,3
  DATA 3,4,3,5,3,6
  CLS
RETURN
> PROCEDURE menu_aufbauen
  MENU m$()                      ! MenÅ erzeugen
  DEFTEXT 1,0,0,13
  TEXT 558,14,"Bild: "+STR$(aktiv%) ! Bild-Nummer anzeigen
RETURN
> PROCEDURE taste
  a%=MENU(14)                    ! Tastaturabfrage
  SELECT a%
  CASE 15104                     ! Bild laden
    @bild_laden
  CASE 15360
    @bild_speichern              ! Bild speichern
  CASE 15616
    @obj_laden
  CASE 15872
    @obj_speichern
  CASE 24832                     ! Undo auûerhalb der Zeichenfunktionen
    IF LEN(rette$)>1000          ! Puffermindestgrîûe gegeben ?
      SPUT rette$                ! dann ausgeben
      puffer$(aktiv%)=rette$     ! Bild-Puffer neu besetzen
      CLR rette$                 ! UNDO-Puffer lîschen
    ENDIF
  CASE 20480                     ! Cursor runter  / Bildpuffer wechseln
    @cursor_r                    ! Pointer Ñndern
    SPUT puffer$(aktiv%)         ! Pufferinhalt ausgeben
    CLR rette$
  CASE 18432                     ! Cursor hoch    / Bildpuffer wechseln
    @cursor_h
    SPUT puffer$(aktiv%)         ! wie oben
    CLR rette$
  CASE 283
    @ende
  ENDSELECT
  @menu_aufbauen                 ! MenÅ neu zeichnen
RETURN
> PROCEDURE menue
  MENU OFF
  IF k%<>2
    me%=MENU(0)
  ENDIF
  DEFTEXT 1,0,0,13
  DEFLINE 1,0,0,0
  @m_leer                        ! Mauspuffer leeren
  DEFMOUSE 5
  SELECT me%                     ! reagieren
  CASE 1
    ALERT 0," Kostas Lavassas:  MIKRODRAW   |  TOS - Magazin + Software   |     fÅr Atari ST und TT ",1," Aha ",a%
  CASE 11
    @bild_laden                  ! Bild laden
  CASE 12
    @bild_speichern              ! Bild speichern
  CASE 14
    @obj_laden                   ! GFA-Objekt laden
  CASE 15
    @obj_speichern               ! GFA-Objekt speichern
  CASE 17
    @ende                        ! Programm beenden
  CASE 20 TO 24
    @vollbild                    ! 20: Linie, 21: Rechteck, 22: Quadrat,
    @zeichnen                    ! 23: Kreis, 24: Ellipse
  CASE 25                        ! Freizeichnen
    @vollbild
    @freizeichnen
  CASE 26                        ! SprÅhen
    @spruhen
  CASE 27                        ! FÅllen
    @fill
  CASE 28                        ! Lupe
    @lupe
  CASE 29                        ! Radiergummi
    @radiergummi
  CASE 32                        ! Kopieren
    @vollbild
    @raster
    @kopieren
  CASE 33                        ! Bewegen
    @vollbild
    @raster
    @kopieren
  CASE 34                        ! Lasso kopieren
    @lasso
  CASE 35                        ! Lasso verschieben
    @lasso
  CASE 36                        ! Biegen
    @biegen
  CASE 37                        ! Verzerren
    @verzerren
  CASE 38                        ! Spiegeln horizontal
    @spiegeln_h
  CASE 39                        ! Spiegeln vertikal
    @spiegeln_v
  CASE 40 TO 42                  ! 40: Solarisation, 41: VerstÑrken
    @bild_manipulation           ! 42: VerdÅnnen
  CASE 43                        ! Format Ñndern (Formen)
    @formen
  CASE 44                        ! Invertieren
    @invertieren
  CASE 48                        ! Textart einstellen
    @textart
  CASE 49                        ! Text schreiben
    @text_schreiben
  CASE 52                        ! Linienattribute
    @linart
  CASE 53                        ! FÅllattribute
    @fuellattribute
  CASE 54                        ! FÅllmuster
    @muster
  CASE 55                        ! Kopierart
    @kopierart
  CASE 56                        ! Kopiermodus
    @kopiermodus
  CASE 59                        ! Drucken 9-Nadler
    @drucken
  CASE 60                        ! Drucken System (Hardcopy)
    @drucken
  ENDSELECT
  DEFMOUSE 8
  @m_leer
  CLR flag%
  @menu_aufbauen
RETURN
> PROCEDURE fehler
  IF ERR=19                      ! Routine kann am Ende entfallen
    ALERT 0," Diesen Programmteil | gibt es erst im | nÑchsten TOS-Magazin ! | Also: Dran bleiben ...",1," Ach was ",a%
    CLR me%
    MENU m$()
  ENDIF
  err=0
  RESUME weiter
RETURN
'
' ----------------------------SYSTEMFUKTIONEN---------------------------------
> PROCEDURE cursor_r
  INC aktiv%                     ! Zeiger auf Bildpuffer
  IF aktiv%>anzahl%
    aktiv%=1
  ENDIF
RETURN
> PROCEDURE cursor_h
  DEC aktiv%
  IF aktiv%<1
    aktiv%=anzahl%
  ENDIF
RETURN
> PROCEDURE ende
  ALERT 0,"Programm beenden?",1," Ja |NEIN",a%
  IF a%=1
    END
  ENDIF
RETURN
> PROCEDURE b_i
  VOID FRE(0)                    ! Garbage-Collection erzwingen
  GRAPHMODE 1
  DIM bild%(32256/4)             ! Hintergrund-RAM anmelden
  SGET c$                        ! aktuellen Bildschirm retten
  a%=XBIOS(3)                    ! Adresse erfragen
  b%=(VARPTR(bild%(0))+255) AND &HFFFF00 ! Hintergrundschirm initialisieren
RETURN
> PROCEDURE b_s
  SWAP a%,b%                     ! Pointer auf Bildschirme vertauschen
  VOID XBIOS(5,L:a%,L:b%,-1)     ! und neu anmelden
  SPUT c$                        ! Bild ausgeben
RETURN
> PROCEDURE b_o
  a%=MAX(a%,b%)                  ! am weitesten hinten liegenden Zeiger
  VOID XBIOS(5,L:a%,L:a%,-1)     ! beim System anmelden
  SPUT c$                        ! Bildschirm restaurieren
  CLR c$,a%                      ! Speicher aufrÑumen
  ERASE bild%()
RETURN
> PROCEDURE kreuz
  a$=INKEY$                      ! UNDO
  IF ASC(RIGHT$(a$))=97          ! UNDO gedrÅckt ?
    IF LEN(r1$)>1000             ! ja, Puffer mindestens 1000 Bytes lang ?
      c$=r1$                     ! ja, Puffer umkopieren
      puffer$(aktiv%)=r1$        ! und in aktuellen Schirm Åbernehmen
    ENDIF
  ENDIF
  IF y%=>0 AND y%<400            ! vertikale Position
    ALINE 0,y%,639,y%,1,alin%,0  ! horiziontale (!) Linie des Kreuzes
  ENDIF
  IF x%=>0 AND x%<640            ! horiziontale Position
    ALINE x%,0,x%,399,1,alin%,0  ! vertikale Linie ziehen
  ENDIF
  IF y%>199                      ! Horizontale in unterer HÑlfte
    y=1                          ! dann Koordinatenanzeige oben
  ELSE                           ! sonst unten
    y=25
  ENDIF
  PRINT AT(68,y);                ! Schreibposition setzen
  PRINT USING " X:### Y:###",x%,y%;! Koordinaten ausgeben
RETURN
> PROCEDURE m_leer
  REPEAT                         ! Mausbuffer leeren
  UNTIL MOUSEK=0
RETURN
> PROCEDURE vollbild
  VOID FRE(0)                    ! Speicher aufrÑumen
  SPUT puffer$(aktiv%)           ! auf vollen Bildschirm schalten
  SGET rette$                    ! UNDO-Puffer belegen
RETURN
> PROCEDURE raster
  CLR x1%,y1%,x2%,y2%,flag%,xl%,yl% ! Variablen aufrÑumen
  @b_i                           ! Hintergrund-Anti-Flimmern aktivieren
  IF f_flag%=1                   ! Dient nur beim Formen:
    fa=ym%/xm%                   ! ProportionalitÑtsfaktor
  ENDIF
  DEFLINE lin%,0,0,0
  REPEAT                         ! 1. Schleife
    MOUSE x1%,y1%,k%             ! Mausabfrage
    MOUSE x%,y%,k%               ! zweimal fÅr doppelte Variable
    @b_s                         ! Hintergrund restaurieren
    @kreuz                       ! Fadenkreuz einblenden
  UNTIL k%<>0                    ! bei Mausklick abbrechen
  IF k%=1                        ! Klick links ? dann
    @m_leer                      ! Mausbuffer leeren
    REPEAT                       ! 2. Schleife
      MOUSE x%,y%,k%             ! wieder doppelte Mausabfrage
      MOUSE x2%,y2%,k%
      @b_s                       ! Hintergrund restaurieren
      IF f_flag%=1               ! beim Formen:
        y%=y1%+ABS(x1%-x%)*fa    ! Grîûe berechnen
      ENDIF
      @kreuz                     ! Fadenkreuz zeigen
      BOX x1%,y1%,x%,y%          ! Auswahlrechteck zeichnen
    UNTIL k%<>0                  ! bei Mausklick abbrechen
  ENDIF
  IF k%=1                        ! Grîûe des Auswahlrechtecks berechnen
    xl%=ABS(x1%-x2%)
    yl%=ABS(y1%-y2%)
  ENDIF
  DEFLINE 1,0,0,0
  @b_o                           ! Flimmerfreiheit aus
RETURN
'
' ---------------------------PARAMETERFUNKTIONEN------------------------------
> PROCEDURE fuellattribute
  ALERT 0," FÅllattribute: | A - Rahmen sichtbar | B - mit Muster und Rahmen | C - mit Muster ohne Rahmen ",f_modus%," A | B | C ",f_modus%
RETURN
> PROCEDURE linart
  DEFMOUSE 8
  DEFFILL 1,0,0
  GET 40,25,290,260,c$           ! Hintergrund retten
  PBOX 40,25,290,260             ! Rahmen zeichnen
  PBOX 40,50,290,260
  DEFTEXT 1,,,13
  FOR i%=0 TO 15                 ! 15 Linienmuster
    DEFLINE lin%(i%),0,0,0       ! aktivieren
    LINE 54+i%*15,83,54+i%*15,135! und entsprechende Linie zeichnen
    IF i%<10                     ! und dazu die LinienstÑrken
      DEFLINE 1,i%*2+1
      LINE 59+i%*23,175,59+i%*23,240
    ENDIF
  NEXT i%
  DEFLINE 1,0,0,0
  TEXT 51,71,"LINIENMUSTER"      ! Auswahlbox beschriften
  TEXT 51,163,"LINIENSTéRKE"
  TEXT 51,43,"LINIENATTRIBUTE"
  LINE 40,145,290,145
  GET 51,81,57,139,x$            ! Wahlhintergrund retten
  MID$(x$,7)=STRING$(LEN(x$),255)! Rahmen um Linienmuster invertiert
  PUT 51+l_art%*15,81,x$,6       ! darstellen
  BOX 48+lint%*23,170,70+lint%*23,245 ! Rahmen um LinienstÑrken
  DO
    MOUSE x%,y%,k%
    EXIT IF k%=2
    IF k%                        ! Mausklick ?
      IF y%>81 AND y%<140        ! Maus im oberen Bereich (Linienmuster) ?
        IF x%>50 AND x%<57+15*15
          i%=(x%-50)/15          ! Muster aus Position berechnen
          IF i%<>l_art%          ! neues Muster ?
            PUT 51+l_art%*15,81,x$,6 ! alte Markierung lîschen und
            PUT 51+i%*15,81,x$,6 ! neue Markierung setzen
            l_art%=i%            ! Parameter Åbernehmen
          ENDIF
        ENDIF
      ENDIF
      IF y%>170 AND y%<240       ! LinienstÑrke ?
        IF x%>50 AND x%<275      ! Maus im Kasten ?
          i%=(x%-50)/23          ! Muster berechnen
          IF i%<>lint%           ! neues Muster ?
            GRAPHMODE 3          ! ja, auf XOR schalten
            BOX 48+lint%*23,170,70+lint%*23,245 ! alten Kasten lîschen
            PLOT 48+lint%*23,170
            GRAPHMODE 1          ! neuen Kasten zeichnen
            BOX 48+i%*23,170,70+i%*23,245
            lint%=i%
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  LOOP
  lins%=lint%*2+1                ! und Parameter Åbernehmen
  PUT 40,25,c$                   ! Hintergrund restaurieren
  CLR c$
  @m_leer
RETURN
> PROCEDURE muster
  DEFMOUSE 8
  CLR d%
  SGET c$                        ! Hintergrund retten
  '
  y=40                           ! Musterrahmen aufbauen:
  DEFFILL 1,0,0
  PBOX 155,56,483,244
  PBOX 157,78,481,242
  DEFTEXT 1,0,0,13
  TEXT 280,72,"Musterwahl"
  FOR i=1 TO 4                   ! vier Zeilen
    ADD y,40
    x=159
    FOR j=1 TO 8                 ! 8 Spalten
      INC d%
      DEFFILL 2,i%(d%),j%(d%)
      PBOX x,y,40+x,40+y
      ADD x,40                   ! neue Position berechnen
    NEXT j
  NEXT i
  @m_leer
  '
  DO                             ! Rahmen anwÑhlen
    MOUSE x%,y%,k%
    EXIT IF k%<>0                ! bis Maustaste gedrÅckt
  LOOP
  '
  IF x%>159 AND x%<479 AND y%>80 AND y%<240  ! und aus Mausposition gewÅnschtes
    fm%=1+INT((x%-159)/40)+INT((y%-80)/40)*8 ! FÅllmuster berechnen !
  ENDIF
  '
  SPUT c$                        ! Hintergrund restaurieren
  CLR c$
RETURN
'
' --------------------------DISKETTENOPERATIONEN------------------------------
> PROCEDURE bild_laden
  LOCAL flag%,se$
  @vollbild                      ! MenÅleiste weg
  FILESELECT #"BILD LADEN","\*.*","",se$
  IF se$<>""                     ! Dateinamen angegeben ?
    IF EXIST(se$)                ! Datei vorhanden ? dann
      OPEN "i",#1,se$            ! îffnen
      CLR v%
      IF RIGHT$(se$,4)=".PI3"    ! Degas ?
        v%=-34                   ! Farb-Daten abziehen
      ENDIF
      '
      IF LOF(#1)=32000 OR LOF(#1)=32034 ! Screen- oder Degas-Format
        flag%=1
      ELSE
        ALERT 0,"Komisches Format!",1," ok ",a% ! alles andere
      ENDIF
      CLOSE #1
    ENDIF
    IF flag%=1
      BLOAD se$,XBIOS(2)-v%      ! und 'rein damit
      SGET puffer$(aktiv%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE bild_speichern
  LOCAL flag%,se$,a%
  @vollbild                      ! Bildschirm freimachen
  '
  FILESELECT #"BILD SPEICHERN","\*.PIC","",se$ ! mit "PIC" auch Zugang zu SIGNUM
  '
  IF se$<>""                     ! Dateiname angegeben ?
    IF EXIST(se$)                ! schon vorhanden ? dann
      ALERT 0,"Bild Åberschreiben ?",1," JA |NEIN",a%
    ENDIF
    IF a%<>2                     ! ja
      BSAVE se$,XBIOS(2),32000   ! speichern
    ENDIF
  ENDIF
RETURN
> PROCEDURE obj_laden
  LOCAL se$
  @vollbild                      ! Bildschirm frei
  FILESELECT #"OBJEKT LADEN","\*.*","",se$
  IF se$<>""
    IF EXIST(se$)                ! Datei vorhanden ?
      OPEN "i",#1,se$            ! ja
      a$=INPUT$(LOF(#1),#1)      ! einlesen nach a$
      CLOSE #1
      @vollbild                  ! MenÅ weg
      PUT 1,1,a$                 ! und Objekt oben links anzeigen
      a%=VARPTR(a$)              ! Ausschnittsgrîûe ermitteln:
      x2%=DPEEK(a%)              ! untere rechte Ecke
      y2%=DPEEK(a%+2)            !
      x1%=1                      ! oben links
      y1%=1                      !
      xl%=1
      yl%=1
      @kopieren
    ENDIF
  ENDIF
RETURN
> PROCEDURE obj_speichern
  LOCAL se$,a$
  @vollbild                      ! MenÅ weg
  @raster                        ! Fadenkreuz einblenden, Ausschnitt erfragen
  CLR a%
  IF xl%>0 AND yl%>0             ! Ausschnitt grîûer als 0/0 ? dann
    FILESELECT #"OBJEKT SPEICHERN","\*.*","",se$
    IF se$<>""                   ! Dateiname angegeben ? dann
      IF EXIST(se$)              ! schon vorhanden ?
        ALERT 0,"Bild Åberschreiben ?",1," JA |NEIN",a%
      ENDIF
      IF a%<>2                   ! okay, also
        GET x1%,y1%,x2%,y2%,a$   ! Ausschnitt holen
        BSAVE se$,VARPTR(a$),LEN(a$) ! und ablegen
      ENDIF
    ENDIF
  ENDIF
RETURN
'
' ---------------------------ZEICHENFUNKTIONEN--------------------------------
'
> PROCEDURE zeichnen
  DEFFILL 1,i%(fm%),j%(fm%)      ! Aktuelle Muster aktivieren
  CLR flag%                      ! AktivitÑtsflag lîschen
  @b_i                           ! Flimmerfreiheit / Ein
  DO                             ! los gehts
    MOUSE x%,y%,k%               ! Mausabfrage
    EXIT IF k%=2                 ! Ausgang wenn rechte Maustaste
    @b_s                         ! Flimmerfreiheit: Swap
    xl%=x%-x1%                   ! Grîûe berechnen
    yl%=y%-y1%
    IF (me%=22 OR me%=23) AND flag% ! Nur bei Quadrat oder Kreis
      y%=y1%+xl%                 ! proportionale Ausdehnung
    ENDIF
    '
    IF flag%=1                   ! Objekt erstellen
      ON me%-19 GOSUB line,box,box,kreis,ellipse ! und zeichnen
    ENDIF
    '
    @kreuz                       ! Fadenkreuz einblenden
    '
    IF flag%=2                   ! Objekt bewegen & fixieren
      GOSUB bew_zeichnen
      puffer$(aktiv%)=c$
    ENDIF
    '
    IF k%=1                      ! Wenn linke Maustaste gedrÅckt
      INC flag%                  ! auf zum nÑchsten Durchmarsch
      IF flag%=1                 ! Startpunkt retten
        x1%=x%
        y1%=y%
      ENDIF
      @m_leer                    ! Mauspuffer leeren
    ENDIF
  LOOP
  @b_o                           ! Flimmerfreiheit aus
  SGET puffer$(aktiv%)           ! Neues Bild Åbernehmen
  CLR r1$                        ! Zwischenpuffer lîschen
RETURN
> PROCEDURE bew_zeichnen
  CLR flag%
  xl%=x%-x1%                     ! LÑnge  berechnen
  yl%=y%-y1%                     ! Breite berechnen
  SETMOUSE x1%,y1%               ! Maus auf Anfangspunkt positionieren
  @b_o
  SGET r1$                       ! UNDO-Puffer besetzen
  @b_i
  CLR c$
  DEFFILL 1,i%(fm%),j%(fm%)      ! Aktuelle Muster einstellen
  DO
    MOUSE x%,y%,k%
    a$=INKEY$                    ! Tastaturabfrage auf
    IF ASC(RIGHT$(a$))=97        ! UNDO
      c$=puffer$(aktiv%)         ! und altes Bild holen
    ENDIF
    EXIT IF k%=2
    @b_s
    @kreuz                       ! Fadenkreuz zeigen
    x1%=x%+xl%                   ! Neuen Endpunkt berechnen
    y1%=y%+yl%
    ON me%-19 GOSUB line,box,box,kreis,ellipse
    IF k%=1                      ! Mausklick links ? dann
      @b_o
      DEFLINE lin%(l_art%),lins%,2,2 !Linienmuster aktivieren
      CLR c$
      ON me%-19 GOSUB line,box,box,kreis,ellipse ! Objekt zeichnen
      DEFLINE 1,0,0,0
      @b_i
      @m_leer
    ENDIF
  LOOP
  DEFLINE 1,0,0
  CLR flag%
  @m_leer
RETURN
> PROCEDURE line
  LINE x%,y%,x1%,y1%             ! na was wohl ?
RETURN
> PROCEDURE box
  BOX x%,y%,x1%,y1%              ! normale Box, solange beweglich
  IF k%=1
    SELECT f_modus%              ! fertig ? dann je nach Wunsch
    CASE 1
      BOX x%,y%,x1%,y1%          ! normale Box
    CASE 2
      PBOX x%,y%,x1%,y1%         ! gefÅllte Box
    CASE 3
      BOUNDARY 0                 ! gefÅllt ohne Rand
      PBOX x%,y%,x1%,y1%
      BOUNDARY 1
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE kreis
  CIRCLE x1%,y1%,xl%             ! siehe Box
  IF k%=1
    SELECT f_modus%
    CASE 1
      CIRCLE x1%,y1%,xl%
    CASE 2
      PCIRCLE x1%,y1%,xl%
    CASE 3
      BOUNDARY 0
      PCIRCLE x1%,y1%,xl%
      BOUNDARY 1
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE ellipse
  ELLIPSE x1%,y1%,xl%,yl%        ! siehe Box
  IF k%=1
    SELECT f_modus%
    CASE 1
      ELLIPSE x1%,y1%,xl%,yl%
    CASE 2
      PELLIPSE x1%,y1%,xl%,yl%
    CASE 3
      BOUNDARY 0
      PELLIPSE x1%,y1%,xl%,yl%
      BOUNDARY 1
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE freizeichnen
  SGET rette$                    ! UNDO-Puffer belegen
  DO
    MOUSE x%,y%,k%
    EXIT IF k%=2
    a$=INKEY$                    ! UNDO abfragen und ausfÅhren
    IF ASC(RIGHT$(a$))=97
      SPUT rette$
    ENDIF
    IF k%=1                      ! Maustaste gedrÅckt ?
      x1%=x%                     ! Koordinaten merken
      y1%=y%
    ENDIF
    WHILE k%=1                   ! Maustaste immer noch gedrÅckt ?
      MOUSE x%,y%,k%             ! neue Position holen
      DRAW x1%,y1% TO x%,y%      ! und Linie zum vorhergehenden Punkt ziehen
      x1%=x%                     ! neue Position Åbernehmen
      y1%=y%
    WEND
  LOOP
  SGET puffer$(aktiv%)
RETURN
> PROCEDURE spruhen
  SETMOUSE 319,199               ! Maus zentrieren
  CLS
  PRINT AT(2,2);"SprÅhradius festlegen"
  @b_i                           ! Anti-Flimmern ein
  DO
    MOUSE x%,y%,k%               ! Maus abfragen
    @b_s                         ! umschalten
    d%=ABS(x%-319)/2             ! Position zu Kreisgrîûe umrechnen
    CIRCLE 319,199,d%            ! Kreis zeichnen
    EXIT IF k%=1                 ! bis Maustaste
  LOOP
  @b_o
  SPUT puffer$(aktiv%)           ! Bild wiederherstellen
  SGET rette$                    ! UNDO-Puffer belegen
  @m_leer
  MUL d%,2                       ! aus Radius Durchmesser
  DO
    MOUSE x%,y%,k%
    EXIT IF k%=2
    a$=INKEY$                    ! UNDO-Block
    IF ASC(RIGHT$(a$))=97
      SPUT rette$
    ENDIF
    IF k%=1                      ! Maustaste gedrÅckt ? dann
      FOR i=1 TO 6               ! 6 Punkte zufÑllig berechnen
        xx%=-d%/2+RANDOM(d%)     ! aus Durchmesser
        yy%=-d%/2+RANDOM(d%)
        l%=SQR(xx%*xx%+yy%*yy%)  ! liegt Punkt im Kreis mit Durchmesser d% ?
        IF l%<=d%/2              ! wenn ja, dann
          PLOT x%+xx%,y%+yy%     ! Punkt setzen
        ENDIF
      NEXT i
    ENDIF
  LOOP
  SGET puffer$(aktiv%)           ! Bildinformation Åbernehmen
RETURN
> PROCEDURE fill
  SPUT puffer$(aktiv%)
  SGET rette$
  DEFFILL 1,i%(fm%),j%(fm%)      ! Aktuelle Muster einsetzen
  DO
    MOUSE x%,y%,k%
    EXIT IF k%=2
    a$=INKEY$                    ! UNDO-Block
    IF ASC(RIGHT$(a$))=97
      SPUT rette$
    ENDIF
    IF k%=1                      ! auf Mausklick:
      FILL x%,y%                 ! FÅlle!
    ENDIF
  LOOP
  SGET puffer$(aktiv%)
RETURN
> PROCEDURE radiergummi
  HIDEM                          ! Maus weg
  SPUT puffer$(aktiv%)           ! MenÅ weg
  SGET rette$
  @raster                        ! Grîûe des Radiergummis erfragen
  @b_i
  DEFFILL 1,0,0
  DO
    MOUSE x%,y%,k%
    EXIT IF k%=2
    @b_s
    a$=INKEY$                    ! UNDO-Block
    IF ASC(RIGHT$(a$))=97
      c$=rette$
    ENDIF
    IF k%=1                      ! bei Mausklick:
      BOUNDARY 0                 ! randloses
      PBOX x%,y%,x%+xl%,y%+yl%   ! Rechteck zeichnen
      BOUNDARY 1
      SGET c$                    ! Puffer neu besetzen
      BOX x%,y%,x%+xl%,y%+yl%    ! und Position des Radiergummis anzeigen
    ELSE
      PBOX x%,y%,x%+xl%,y%+yl%   ! sonst nur Position anzeigen
    ENDIF
  LOOP
  @b_o
  SGET puffer$(aktiv%)
  SHOWM                          ! Maus wieder wecken.
RETURN
'
' -----------------------------Ende  Teil 1-----------------------------------
