
                     S  T   e   c   t   r  e
                            presents

                ////   /// ///   // // //     //   //
                // // //// ////  // // //     //   //
                //  //  // // // // // //     //   //
                //      // //  //// // //     //   //
                //      // //    // // ////// //////

                   T   r   a   n   q   u   i   l



Welocme to Mnilu . .... Now at least Mnilu Tranquil ,GFA BASIC
'Compiler' is here for all you GFA BASIC coders. It's not the
official GFA compiler (we personally have nothing to do with GFA
anyway) ,and nor can it replace the official compiler ,but it will
enable everyone without a Compiler to turn their .BAS or .GFA into
stand-alone .PRG files.


Postcardware
""""""""""""
Please note however that Mnilu is POSTCARDWARE. This means that if YOU use
Mnilu MORE THAN ONCE then YOU are expected to send us back a postcard in
return as the 'fee' of Mnilu. Please do not ignore this part. There is
really no point for us programming all sorts of non-commercial programs if
no interest in shown. So please do send us back a postcard if you like/
use Mnilu or other STectre prorgams. Sending a postcard is the least thing
you can do for us. See end of this file for more info.


WARNING! WARNING!
"""""""""""""""""

NOTE! The unregistered version of Mnilu Tranquil will only enable
to 'Compile' 1 file ,and to 'check' 2 files (checking or compiling
1 file each.)


Thereupon Mnilu will RESET your machine. See end of this file on how
to register your copy of Mnilu (basically it simply means sending us
a postcard).

>DO NOT RUN Mnilu Tranquil UNTIL YOU ARE PREPARED TO RESET YOUR MACHINE!<


This also means that you'll need to go through a reboot before you will
be able to run your .PRG file. The registered version of Mnilu is naturally
free of all alert-boxes, and this annoyingfull reset.

This version does not have any other limitations. See Postcard! below.


Mnilu Tranquil
""""""""""""""
Mnilu ,if you don't already know (hmmm ,why not??) was released back
in 1993. At that time it only enabled to 'compile' GFA BASIC v2 files
into stand-alone .PRG files. Mnilu did had a few problems ,espacially
in the memory departement as the finished .PRG files required quite
a bit of free memory to work properly.
Anyway we didn't got much feedback back from other people on it ,and
hence we stopped working on it .. .. Theoretically we could have
come out with support for v3.0 ++ GFA BASIC at the same time but it
didn't happend.


Then one day I came across the old Mnilu - filled with dust
all over it. And then we realised that it could be improved quite a
lot. Not only that but we also thought about adding support for
GFA BASIC 3.xx.


So here it is - Mnilu Tranquil. The 'second' version of Mnilu.
It is by no mean the 'old' Mnilu with added support for GFA BASIC 3.5E,
but the GFA v2 compiler part has also had a _huge_ face lift.

If you re-compile a file with Mnilu Tranquil then the new compiled
file will use around 55K of less memory when compared to the same
file compiled by Mnilu v1.61.



The compiler itself is dead-ez to use. It uses the 'standard' STectre
interface which will reassemble newer STectre programs.



MNLU_TRQ.PRG
""""""""""""

v2 / v3.5E                                     [Alt]/[Cntrl] - [2]/[3]
----------
From the main menu you'll have the possibility to select either GfA
BASIC v2 or GFA BASIC v3.5E files. 
The biggest benefit of compiling a file with v2 is that the compiled
file will use less memory and the length of the .PRG file will
also be smaller compared to one compiled with v3.5E. Anyway that is
purely your choice. If you don't have both v3.5E and v2 then you must
anyway select the version you have.

If you have both v3.5E and v2 then you can SAVE A and MERGE a v3.5E
into GFA v2. If it works ok then re-save it as .BAS and compile it with
v2 option.


The file to be compiled must naturally be in .BAS (v2) or .GFA (v3.5E)
format. That is .LST file will not be compiled.



Auto CLS / Unchanged                           [Alt]/[Cntrl] - [A]/[U]
-------------------- 
This is currently the only compiler option avaliable.
If you select  Auto CLS  then when your holy program will run then
the screen will automatically be cleared for it. This is quite like
running the program from the ugly (imho) GFA editor.


The second option is Unchanged. If you select this then the screen
will not be cleared for your great program. The name of your program
will as normal be shown on the top of screen with the normal Desktop
pattern (if ran from a desktop) as a background. If selecting Unchanged
then remember that the cursor might be on any wild place on the screen.
Before using any PRINT (if any) commands in this case you should atleast
have one empty PRINT/or place the cursor by using escape commands.

Selecting Unchanged is perhaps the most sensible option for Compiled
program ,it will also give a more professional feel .. .


That's all you need to select. Well almost .. ...
To select the file to compile click on Select ([Alt]/[Cntrl] - [S]) ,
and select your .BAS (v2) or .GFA (v3.5e) file.

The output (.PRG) file can also be elected if you are not happy with
the automatically selected name by clicking on Select ([Alt]/[Cntrl] - [T]).



Compiling process
"""""""""""""""""
Now to compile your dedicated file click on Compile ([Return]). Or
if you only want to check this file (eg not produce an executable
file on disk) then click on Check ([Alt]/[Cntrl] - [C]).

The Compiler is now 3-pass rather than 2-pass in the 'old' Mnilu.
During the first pass general work is done (including loading of
file etc). The second pass does the actual main work of turning
it all into a .PRG file. The third pass generally handles the saving
of an executable file. The third pass is not perfomed if Checking.

Please note that Mnilu will not check for any errors in your .BAS
or .GFA file.


After Compiling
"""""""""""""""

So there you are .. .. Now you've got a fully GEMDOS executable
file out of your .BAS or .GFA file.
[Users of the unregistered version will have to go through a reboot
first - hahahahaaaaaaha  :-)]

To run this file simply double-click on it and away it will start
to fly .. .
[It might _very_ occasionally happen that the file won't take off properly
the first time ,in this case reboot your machine and re-run the program.]


Anyway there are a few things to note on the compiled files:

Pressing the break [Cntrl][Alt][(Left)Shift] will automatically quit
from your program.

This 'problem' is ez to solve .. .

Use -> On Break Cont <- on the very first lines of your .BAS/.GFA files.
This will disable the Break.


And secondly u MUST ALWAYS exit your program with the commands
-> Quit <- or -> System <-. If you don't use System or Quit then
you will also see the word Mnilu coming up on your screen when
exting your program. Everything else might look just fine only till
that day arrives .. .. So always use -System- or -Quit- to terminate
your program. Failing to use -System or -Quit- can have fatal results.


Another thing well worth adding to your programs is Error handling
routine. If any errors comes up in your program then Mnilu will
simply display an alert-box and return back to the Desktop. Very
unprofessional. Having an -On Error Gosub- routine is hence higly
recommended.

See HEAD.LST for example ,and read on . ....


When running under Mnilu Tranquil you program will have access
to a few BIOS (yes ,it could be implemented better ,but due to a few
technical reasons we went for BIOS) calls:


-BIOS(&h6321)      If the result is 101 (&H65) then your program
                   is running under the Compiler.

Ex:

    Print
    IF Bios(&h6321)=101 Then
        Print "Running under the Mnilu Tranquil Compiler!"
    Else
        Print "Not running under the Compiler"
    ENDIF
    '
    Void Inp(2)                             ! wait for keypress
    '
    IF BIOS(&h6321)=101 Then
        System
    Else
        Edit
    Endif


As you can see above this humble 'program' above checks out whether
or not it is running under Mnilu Tranquil. If it is running under
Mnilu then the program uses -System- to exit ,or otherwise it uses
-Edit- and returns back to the editor. This can be called a conditional
running program.


(Using Edit command is same as using End / Stop in the compiler. As
metioned it will normally return you back to the Desktop ,but will not
always work properly. Use -System- or -Quit- to exit from your program).


-BIOS(&h6322)      This BIOS call (ONLY call this when you know
                   that your program is running under the Compiler ,
                   first call &H6321 to check it) will return a pointer
                   to an address which holds the command-line (if any)
                   passed to your program.

                   The string at that address is in normal GEMDOS
                   format: the very first byte at the address tells
                   how long the string is and thereupon the real
                   strings start from adress+1 ,which is not guranteed
                   to be null-terminated.

Ex: See HEAD.LST


A very simple HEAD.LST file is supplided ,and this goes through
everything mentioned here. It is highly recommended that you have
this file as a 'header' file on top of your program. This runs your
program in very condiotinal manner. If your program is running under
the compiler only then the Break is disabled ,a New error handling
routine is installed ,the Command line (if any) is extracted into
a normal string (cmnd$) and last -System- is used to exit.

Otherwise (not running under the Compiler) then nothing is done in
this departement. Please do take a look at HEAD.BAS ,it is not the
same one supplieded with the old Mnilu.



Memory management for your compiled programs
""""""""""""""""""""""""""""""""""""""""""""
This is sort of thing BASIC programmers are not always assumed to
understand about but anyway here it goes. If you don't understand much
here then simply forget it all.

GFA can be called a memory-hog. When the editor is ran then it grabs
all the avaliable memory and leaves 16k to the system. The Mnilu Compiler
also follows the same rules ,but for GFA v2 Compiled programs around
20 - 23 K of memory is given to the system ,while for GFA v3.5E compiled
programs around 40 - 43 K of memory is given back to the system.

The memory the system has left is avaliable for other programs/accessories
and the operating system (AES espacially uses this memory much ,when
displaying file selector etc etc).


One of the reason for grabbing all the memory is that unlike other
languages in BASIC you are free to use any new variables wherever
you want. You might start with a new variable /a new string etc in
the middle of your program. In languages like C and Pascal you can't
do that and must define all variables at the start of your program.

To find out how much memory _your_ program has (for variables/strings
etc . ..) use the   Fre(0)   command. This will tell you how much
memory your program has ,and this memory is _not_ avlaible to anyone
else (accs ,AES etc .. .)

To find out how much memory is left for the rest of the system use:
Print Gemdos(&h48,L:-1)


That is all fine though. You can make your program work regardless
of how the memory is setup. If you however want to give back more memory
to the sysetm (to be used by other programs/accessories) then use the
Reserve xxx  command. Where xxx is the memory in bytes _your_ program
wants to retain. To give back 150 000 bytes to the sytem use:  

    If Fre(0)-150000<0 Then                     ! negative ??
       Print "Too little Memory! Any key to exit."
       Void Inp(2)
       If Bios(&h6321)=&h65 Then      ! running under the compiler ?
          System                      ! yes ,back to desktop
       Else
          Edit                        ! otherwise back to the editor
      Endif
    Else
       Reserve Fre(0)-150000          ! all okay ,so give back 150000
    Endif                             ! bytes to the system
    ' Continue with rest of the program .. .



    ' At end of program :
    IF BIOS(&H6321)<>101 Then         ! get all the memory back
       Reserve                        ! if running under the editor
       Edit                           ! back to the editor
    Else
       System                         ! desktop ,if under the compiler
    Endif




If your programs wants to only keep 100 000 bytes (should be enough
for most programs) simply use: Reserve 100000


You must however never give back all the avaliable memory ,since
your program will then not have any memory left at all. Alsp remember
to have a (empty) RESERVE at the end of your program ,otherwise
the GFA BASIC editor won't re-get the memory.

Well ,that's a bit about memory management. The HEAD.LST file also
calculates out how much memory is avaliable. Now a bit about what
Mnilu (ohhh no) isn't so good at . ..


Mnilu Tranquil Does Not Support
"""""""""""""""""""""""""""""""

- No linking is possible. But this should not be a problem at all.
Linking C / Pascal files with GFA is totally pointless! To include
assembly language is not a big problem. You can include these small
assembly programs/instructons as DATA statements in your file and
call them. There are coversion programs avaliable to convert a
program into hex data statements. See 'Calling ASM subroutines' below.

- The minimum length of the compiled file will be around 25K for
GFA v2 files ,and around 43K for v3.5E files.
Hint: To reduce the size of the end file take out all  REM ' !.
As they don't do anything after all! Having small remarks is okey,
but large blocks of comments are something to be taken out.

- You can not create accessories with Mnilu (don't try as it will
not work). The main reason why we have not included support for it is
because at the end the acc will then take up quite a bit of memory.
And secondly we don't think that the 'reward' of Mnilu which also
compiles into accessories will be any better . ..

- The speed of the compiled program will bearly be faster than the one
offered by the GFA BASIC editor (doesn't matter much ,or does it?)

- Normal GfA BASIC Compiler's directives are not supported (so what??!?)



Whether or not you can make mtos compitable programs from Mnilu
is something we have no idea at all .. .. What needs to be improved
in this departement is something yu can tell us.



Calling Asm Subroutines from GFA BASIC v3.5
"""""""""""""""""""""""""""""""""""""""""""
This only works under GFA BASIC v3.5e:
First of all assemble your blinding-fast-great assembler routine
in almost normal way:

1) As your routine is a subroutine you must naturally end it with
RTS.

2) It must be position-independent ,since your assembly program
will not be relocated. If you really want to relocate it then
you can always muck up your own relocating routine . ...!
in practice it means that you can not use any instructions like
jmp ,jsr ,move.l #data,a0 etc .. ... use instead
bra ,bsr ,lea data(pc),a0.
                   ^^                the (pc) part is most important

In Devpac (2+) you can use the switch:  opt a+  so that your code
uses automatic-PC mode where possible. Note that this will not guarantee
position-independent code. Here you can use the  opt p+  check
to indicate whether or not your program really is pos-independent.
This should not be a big problem ,as asm programmers can always
find out ways around things!

For example to use memory variables use a system like:

	lea	regs(pc),a6

	move.b	5(a6),d0
	....
	move.b	#3,2(a6)

	....


regs	ds.b	1
	ds.b	1
        ....


You get the idea .. ..


Generally put   opt a+,p+  on top of your asm file.


3) You should save and restore all registers. Avoid using the stack
for that though.

4) The program will run in user mode. You should also be in user
mode before doing any RTS back to the BASIC program.


At the end assmeble your prog as normally with a .PRG extension.

Now enter this comand in the GFA BASIC (3.5e) editor:
INLINE addr%,len    Where len is the length of your program.
For example if your .PRG file is 100 bytes then enter  
 

   INLINE addr%,100


Move the cursor to the INLINE line and gently with your beautiful finger
press [Help]! Click on LOAD ,and select your .PRG file.

The INLINE command should be before you want to call your routine (top
of the program is preferred as you can easily re-load a new file).
When you want to call your asm-routine use:

   '
   code=addr%+&h1c            ! jump to the start of assembly
   CALL code                  ! and call it
   '
   ' The rest of your program - hopefully we will back here


The problem with CALL however is that you can not pass any parameter
to/from your asm routine. It's here where RCALL comes in: this allows
to specify what values will be in any data or address registers at
the start of the assembler routine. When the routine will return you
can also inspect any return values.

If you want to use RCALL then firstly you'll need to built up an
array by using:    DIM reg%(15)

Now reg%(0) will pseudo point to d0 ,reg%(1) = d1 .. ., reg%(7) = d7,
reg%(8) = a0 ,reg%(9) = a1 .. .. . ,reg%(14) = a6.

Before calling your asm routine set up these values as you want them
to be ,for example:   reg%(0)=Varptr(string$)


Now Call you routine with RCALL. Example:

   code=addr%+&h1c       ! jump to the start of assembly
   RCALL code,reg%()     ! and call it with parameters passed in registers
   ' The rest of your program - hopefully we will back here
   Print reg%(0)         ! print return value in d0


Note that any INLINE'd .PRG file(s) will be saved with the actual .GFA
file. If you do any changes with your asm-code then you'll need to re-load
the new file in the GFA BASIC editor.

That's all the help you'll get.


GFA BASIC 2
"""""""""""

If you don't have GfA BASIC 2 then it's avaliable through a 
few PD libraries at the same price as a normal PD Disk (although it's 
still copyright). Try The FaST Club disk PR.482 or Goodman PD disk 
GD500.


Disclaimer
""""""""""

STectre can not be held responsible for any kind of damage caused by the
use of Mnilu directly or indirectly. You do every thing at your own
responsibility. Let's hope that the people at GfA don't mind Mnilu.


Distribution
""""""""""""

    Mnilu might freely be distributed but all files (MNLU_TRQ.PRG
,MNLU_TRQ.RSC ,MNLU_TRQ.DOC and HEAD.LST) must NOT be changed in any
way. All files must be included when distributed in any way.



Postcard!
"""""""""

  -----------------------------------------------------------------
  This program is postcardware. If you like this porgam then please
    send us a postcard back. That is all what we request from you!
  -----------------------------------------------------------------


The unregistered version of Mnilu will reset your machine after
compiling one file. Annoying . ... .isn't it ??

To register your copy simply send us back a postcard and we'll tell
you exactly how you can do that in a few seconds.


Time to register!
"""""""""""""""""

To register:

1) If you have an (Internet) email address then send us a postcard
(via normal post) with your email address written on it (write your
normal address on it as well).

   We will send you complete information via email as soon as possible.


2) If you don't have an email address then:

 Take a postcard and write down a few words on it.
 Put the postcard in an envelope.
 Put one International Reply Coupon in the envelope as well. (Ask at your
     local postoffice for International Reply Coupons).
 And post your envelope/letter to us. Remember no postcard in it or no
     Reply Coupon then you won't get info on how to register our copy!

   We will send you complete information via normal mail as soon as possible.


As mentioned when you have the information it will only take up a few seconds
to 'register' your copy.

 
    ________________________________________________________
    |                                             ____     |
    | Mnilu Tranquil           |                  |  |     |
    |                          |                  |__|     |
    | .. ..                    |                           |
    |                          |                           |
    |                          |   STectre                 |
    |                          |      c/o Jabran Akhtar    |
    |                          |                           |
    |                          |   Stjernemyrvn. 30        |
    |                          |   0673  Oslo              |
    |                          |   Norway                  |
    |                                                      |
    --------------------------------------------------------



STectre
"""""""

c/o Jabran Akhtar                                       STectre

Stjernemyrvn. 30
0673  Oslo  ,Norway


Internet: jib@login.bigblue.no			        August '95


                                       __ ___ __  __ ___ _   __
                                      /_  /  /_  /   /  / ) /_
                                     __/ /  /_   \_ /  / \ /_



          Problems? Ideas? Write to us at the address above.

         We'll be happy to hear from _you_ also about what we
              should add to future versions of Mnilu


If you want to be 100% sure about getting back a reply from us then
please remember to include an International Reply Coupon (ask at your
local postoffice).


     Mnilu comes from:



     |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
     ||       |        |      ||      |        |      ||      ||
     ||  |||||||||  ||||  |||||  |||||||||  ||||  ||  ||  ||||||
     ||       ||||  ||||    |||  |||||||||  ||||    ||||    ||||
     |||||||  ||||  ||||  |||||  |||||||||  ||||  |  |||  ||||||
     ||       ||||  ||||      ||     |||||  ||||  ||  ||      ||
     |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||





     ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
     ZZ       Z        Z      ZZ      Z        Z      ZZ      ZZ
     ZZ  ZZZZZZZZZ  ZZZZ  ZZZZZ  ZZZZZZZZZ  ZZZZ  ZZ  ZZ  ZZZZZZ
     ZZ       ZZZZ  ZZZZ    ZZZ  ZZZZZZZZZ  ZZZZ    ZZZZ    ZZZZ
     ZZZZZZZ  ZZZZ  ZZZZ  ZZZZZ  ZZZZZZZZZ  ZZZZ  Z  ZZZ  ZZZZZZ
     ZZ       ZZZZ  ZZZZ      ZZ     ZZZZZ  ZZZZ  ZZ  ZZ      ZZ
     ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ




                          _-_-_-_-_-_-_-_-_



   Some of our other programs:


                     )                    ____
                     |    ////   /   /   (
                     |   /   /   / /     |
                 (   )   /   /   //      |---
                  \ /    /   /   / \     |     )
                   v     /////   /  \    (____/


                      J   a   h   a   n   h

 - 'make' Have you heard about   jokes .. ..!
 - 'jokes' ,'jokes' and 'jokes' of randomely selected verbs ,nouns .. .!
 - thousands and thousands of combinations may occur
 - enter your very own words if you wish
 - output to printer/disk or screen

 - Norwegian (Scandinavian?) version also avaliable


 ______________________________________________________________________
/                                                                      \
|                                                                      |
|                    / / / / / / / / / / / / / /                       |
|                   /        F o z C i        / \                      |
|                  / / / / / / / / / / / / / / \ \                     |
|                                                                      |
|                                                                      |
|   One of the best Caps-Lock indicator ever written for the ST range  |
| of computers. It uses a REAL LED indicator as on other machines: the |
|       disk drive LED. Uses less than 1400 bytes of memory!           |
|                      version 2 now released                          |
|                                                                      |
| => Make A Better Use Of Your Disk-Drive LED By using FozCi NOW! <=   |
|                                                                      |
\-----------------------------------------------------------------------
 \---------------------------------------------------------------------

We would also like to say a BIG thanks to all the people who wrote to
us regarding the bugs in the original version of FozCi. It has not been
possible to reply to all of you but as you can see as a result a bug-fixed
version of FozCi is now avaliable,



  88 8888  88888  8888888 8888888 8888  8 88888 888888  8888 8888888888
  888888.....88888888888888888888888888..88888888888888888888888..88 88
  8  888..88..8888888888888888888888888..88888888888888888888888..88888
  888888..88..88..8..88......88......88......888.....8......8888..88888
  888888......88..8..88...88888..88..88..88..888.....8..8.8.8888..8888
  888888..888888..8..88888...88..88..88..88..88..88..8..8.8.88888888888
   88888..8888888....88......888.....88..88..88......8..888.8888..88888
  888888..888888888..88.....8888888..88..88..888.....8..888.8888..888 8
  88888888888888....88888888888.....88888888888888888888888888888888888
  8    8888888888888888888888888888888888888888888888888888888888888888
  8  888888888     8888888  888 8888888888888  888888888888888   888 88

                    P    y    s    g    h    a    m

Virtual drives have been rather common in the ST range of computers.
Pysgham will also add sort of virtual drives to your machine but unlike
RAM disks the new drives will correspond to folders in other real drives.
If you for example have a much used folder on drive D such as :
D:\WP\TEXT\LETTER\ then with Pysgham you can install a new drive (f ex
H:) corresponding to D:\WP\TEXT\LETTER\. When installed by Pysgham you can
access drive H:  as any other normal drive ,but the files/folder displayed
in H: will be the one in D:\WP\TEXT\LETTER\. As an example H:\*.* will
equal D:\WP\TEXT\LETTER\*.* ,and H:\TEST\*.* will equal
D:\WP\TEXT\LETTER\TEST\*.*


You will now no longer need to select the directory D:\WP\TEXT\LETTER\
but only need to click on drive H. And still data can be saved/loaded
,proram ran ,file copying etc all can be performed just as normal.


Upto eight different drives of this kind might be installed at once by
Pysgham. As drives installed by Pysgham will (normally) correspond to real
drives therefore data saved on them will naturally not be lost when the
machine is switched off. 


Pysgham will also enable you to turn Write Verify On or Off for EACH drive.
You can for example have Write Verify Off for RAM disks ,and certain
hard drive partitions while keep Write Verify On on other partitions/
floppies. Say good bye to the old Verify On / Verify Off states. No
every drive can have it's own setting.

As well as that you can also turn certain drives Write Protected by
using Pysgham.

Latest version (August 1995): 1.50


    ................................................................
    One Jack - the program launcher - No need  to go through all the
    folders to  run a program - One Jack will do it  - AvaliablE NoW
    Fully useable  with all _all_ TOS's and ALL replacement desktops
    -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

Many thanks to Robin Willow! (-:


 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 ||      |  ||  |      |      |     |||  ||  |  |      |  ||||||||||  ||
 ||  |||||  ||  |  ||  |  |||||  ||  ||  ||  |  |  |||||  |||||||||  |||
 ||      |  ||  |     ||     ||    ||||  ||  |  |     ||  ||   |||  ||||
 ||||||  |  ||  |  |||||  |||||  |  |||  |  ||  |  |||||  |  |  |  |||||
 ||      |     ||  |||||      |  ||  |||  ||||  |      ||  ||||   ||||||
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



      Fed up with GEM's Show/Print/Cancel (Visa/skriv/Avbryt) ?

Use SuperView ,the most comprehensive file-viewer system ever written
for the ST. Completely replaces the GEM's offering ,or call it from
the supplided accessory.

Just look at a few of the features .. .

- displays NEOchrome,Deags(Elite) and Spectrum 512 pics
- support for 1ST Word & Protext WP files
- print files to parallel/serial/MIDI and parallel(direct)
- up to 9 files in memory at once
- replays sample files (STE support)
- decompacts Pack-Ice v2.4 packed files
- search forward/backward/research options
- up to 9 pre-defined search strings
- goto start/middle or end of file
- view files in either 8x8 or 8x16 fonts
- support for large screens                - displays ST font (A1/A2) files
- intelligent mouse scrolling              - swap between low/med res
- hex-mode converting                      - info-lines
- virus checker                            - up to 10 markers
- no need to load the program each time ,just copy it to the AUTO folder
- replaces Show/Print/Cancel (not fully on TOS 2+)
- .. . and lots more ,uses only 33 K!

          Quite simply the best file viewer ever written for the ST!
Once  you've  used   it   ,you'll   never   gonna   go   back  to  the
Show/Print/Cancel!
        No other file-viewer even  comes  close  to  SuperView ,if you
haven't seen it yet then get a copy NOW.

Not Multi-TOS compitable.
Latest version (May ,1994) is 1.18.



                          _-_-_-_-_-_-_-_-_



                      Shareware Software in STyle

                        __ ___ __  __ ___ _   __
                       /_  /  /_  /   /  / ) /_
                      __/ /  /_   \_ /  / \ /_


                         _-_-_-_-_-_-_-_-_



                  kea aap bhi jahanh par henh ??? ?
                hamari taraf se saari dunia ko aadaab!

-eof
