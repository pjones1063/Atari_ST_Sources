KEYPAD 0       ! =====> diese Zeile gilt nur fÅr die V3.0-Version <======
@intro
@datload
@main
PROCEDURE main
DO
@auswahl
@verteiler
@bildaufbau
LOOP
RETURN
PROCEDURE auswahl
regmem%=reg%
DO
@desk_taste
@auswertung
REPEAT
UNTIL MOUSEK=0
EXIT IF wahl%=1 OR wahl%=2 OR dkey%=ASC("q")
LOOP
RETURN
PROCEDURE auswertung
CLR wahl%
xp%=MOUSEX
yp%=MOUSEY
mkk%=MOUSEK
IF LEN(dkey$)=2
IF dkey%=72
CLR dkey%
xp%=550
yp%=(385/t%-(cz%*10/t%))+(zy%*10/t%)-5/t%
ENDIF
IF dkey%=80
CLR dkey%
xp%=550
yp%=(385/t%-(cz%*10/t%))+(zy%*10/t%)+15/t%
ENDIF
ENDIF
IF keyflg%
IF (dkey%=>65 AND dkey%<=90)
xp%=75+(dkey%-65)*20
yp%=16/t%+(25-(dkey%-65))*13/t%
ENDIF
IF (dkey%=>48 AND dkey%<=57)
xp%=260+(dkey%-48)*20
yp%=224/t%+(9-(dkey%-48))*13/t%
ENDIF
CLR keyflg%,dkey%
ENDIF
IF dkey%=0 OR dkey%=13
IF xp%>14 AND xp%<164 AND yp%>61/t% AND yp%<250/t%
my%=INT((yp%-62/t%)/27*t%)
@blinker(0,16,62+my%*27,161,83+my%*27)
menue%=my%+1
wahl%=2
ENDIF
IF xp%>540 AND xp%<628 AND yp%>385/t%-cz%*10/t% AND yp%<385/t%
zy%=INT((yp%-385/t%+cz%*10/t%)/10*t%)
zset%=1
IF zy%>0
FOR i%=1 TO zy%
ADD zset%,lng%(i%)
NEXT i%
ENDIF
PUT 538,370/t%-cz%*10/t%,zeilen$
@blinker(1,541,385-cz%*10+zy%*10-2*(t%-1),626,395-cz%*10+zy%*10)
IF mkk%=2
dkey$="  "
dkey%=98
ENDIF
ENDIF
xx1%=INT((xp%-65)/20)
ry%=25-INT((yp%-12/t%)/13*t%)
IF xx1%=ry% AND xx1%>-1 AND xx1%<=25
DPOKE 9954,MAX(20,yp%)
@blinker(0,67+ry%*20,346-ry%*13,85+ry%*20,337-ry%*13)
reg%=ry%
wahl%=1
ENDIF
xx2%=INT((xp%-250)/20)
IF xx2%=ry% AND xx2%>-1 AND xx2%<=9
@blinker(0,252+ry%*20,346-ry%*13,270+ry%*20,337-ry%*13)
reg%=ry%+26
wahl%=1
ENDIF
ENDIF
IF (dkey%=97 OR dkey%=98) AND LEN(dkey$)=1
wahl%=2
menue%=3-(dkey%-97)
ENDIF
IF dkey%=98 AND LEN(dkey$)=2
@liste
CLR wahl%,menue%
ENDIF
IF dkey%=ASC("s")
wahl%=2
menue%=suchen%
ENDIF
IF dkey%=ASC("i") OR (wahl%=2 AND menue%=import%)
wahl%=2
menue%=blaettern%
@karte_import(sta%,kges%)
IF back3%=1
CLR wahl%,menue%
ENDIF
ENDIF
IF dkey%=ASC("g") OR (wahl%=2 AND menue%=springen%)
wahl%=2
menue%=blaettern%
@karte_springen
IF ziel%>0
card%=ziel%-1
sprung%=1
ELSE
CLR wahl%,menue%
DEC card%
ENDIF
ENDIF
IF dkey%=ASC("u") OR (wahl%=2 AND menue%=update%)
@automatic
ENDIF
RETURN
PROCEDURE verteiler
IF wahl%=1
@aktion(2)
ELSE
IF dkey%<>ASC("q")
reg%=regmem%
IF menue%=suchen%
@aktion(0)
ENDIF
IF menue%=blaettern%
@aktion(1)
ENDIF
IF menue%=sortieren%
@sorter
ENDIF
ENDIF
IF menue%=progexit% OR dkey%=ASC("q")
@abbruch
ENDIF
ENDIF
CLR dkey%
RETURN
PROCEDURE aktion(modus%)
IF modus%=0
CLR such.exit%
@karte_suchen
IF such.exit%=1
GOTO o.ut
ENDIF
PRINT AT(36,23);"BREAK = < Esc >"
IF zy%=cz%-1
@blinker(0,540,380-cz%*10+2,626,386)
ELSE
@blinker(0,541,385-cz%*10+zy%*10-(t%-1),626,395-cz%*10+zy%*10)
ENDIF
ENDIF
IF sprung%=1
CLR sprung%
ELSE
CLR card%
ENDIF
DEFMOUSE 2
DO
nochmal:
INC card%
byte1%=sta%+(card%-1)*sg%
VOID FRE(0)
BMOVE byte1%,VARPTR(satz$),sg%
satz.pos%=1
FOR j%=1 TO cz%
ztxt$(j%)=MID$(satz$,satz.pos%,lng%(j%))
ADD satz.pos%,lng%(j%)
NEXT j%
mk%=MOUSEK
ck%=ASC(INKEY$)
IF modus%=2
IF card%>karten%
GOTO o.ut
ELSE
srt$=MID$(satz$,zset%,1)
IF reg%<26 AND (srt$<>CHR$(reg%+65) AND srt$<>CHR$(reg%+97))
IF mk%<2 AND ck%<>27
GOTO nochmal
ENDIF
ENDIF
IF reg%>25 AND (srt$<>CHR$(reg%+22))
IF mk%<2 AND ck%<>27
GOTO nochmal
ENDIF
ENDIF
ENDIF
ENDIF
IF modus%=0
IF card%>karten%
GOTO o.ut
ELSE
CLR s.pos2%,s.pos3%
IF zy%=cz%-1
s.pos%=INSTR(satz$,srch$)
ELSE
s.pos%=INSTR(MID$(satz$,zset%,lng%(zy%+1)),srch$)
ENDIF
IF flg_and%
IF zy%=cz%-1
s.pos2%=INSTR(satz$,srch2$)
ELSE
s.pos2%=INSTR(MID$(satz$,zset%,lng%(zy%+1)),srch2$)
ENDIF
ENDIF
IF flg_or%
IF zy%=cz%-1
s.pos3%=INSTR(satz$,srch2$)
ELSE
s.pos3%=INSTR(MID$(satz$,zset%,lng%(zy%+1)),srch2$)
ENDIF
ENDIF
IF s.pos%>0 OR (s.pos3%>0 AND (flg_or%=1))
sflg%=1
ELSE
IF ((s.pos%>0 AND s.pos2%>0) AND flg_and%=1)
sflg%=1
ELSE
IF MOUSEK=2 OR ck%=esc%
sflg%=1
ENDIF
ENDIF
ENDIF
IF sflg%
CLR sflg%
undo:
@karte_zeigen
ELSE
IF mk%<2 AND ck%<>27
GOTO nochmal
ENDIF
ENDIF
ENDIF
ELSE
@karte_zeigen
ENDIF
MOUSE xp%,yp%,mk%
IF modus%=1
IF (mk%=1 AND (yp%<yo% OR yp%>yu%))
SUB card%,2
ENDIF
IF ck%=10 OR (ck%=75 AND LEN(ckey$)=2)
SUB card%,2
ENDIF
IF ck%=115 AND LEN(ckey$)=2
SUB card%,6
ENDIF
IF ck%=116 AND LEN(ckey$)=2
ADD card%,4
ENDIF
ENDIF
VOID FRE(0)
IF ck%=103
@karte_springen
IF ziel%>0
card%=ziel%
modus%=1
ELSE
IF modus%<>1
GOTO undo
ENDIF
ENDIF
DEC card%
ENDIF
IF ck%=117
@bildaufbau
@automatic
GOTO undo
ENDIF
IF (mk% AND (yp%>yo% AND yp%<yu%)) OR (sh%>0 AND (sh% AND 4)=0) OR ck%=32
@karte_aendern
back3%=1
GOTO jump1
ENDIF
IF ck%=100
@karte_drucken
back3%=1
GOTO jump1
ENDIF
IF ck%=116 AND LEN(ckey$)=1
@karte_tauschen
GOTO jump1
ENDIF
IF ck%=105
@karte_import(byte1%,sg%)
GOTO jump1
ENDIF
IF ck%=82
@karte_einfuegen
GOTO jump1
ENDIF
IF ck%=127
@karte_loeschen
GOTO jump1
ENDIF
GOTO jump2
jump1:
IF back3%=1
IF modus%<>1
GOTO undo
ENDIF
ELSE
modus%=1
ENDIF
DEC card%
jump2:
EXIT IF MOUSEK=3 OR ck%=esc%
EXIT IF modus%<>1 AND (card%=karten% OR MOUSEK=2)! Abbruch, wenn
IF card%<0
card%=karten%-1
ENDIF
IF card%=>karten%
CLR card%
ENDIF
CLR ck%,sh%
LOOP
CLR ck%,sh%
o.ut:
DEFMOUSE 0
RETURN
PROCEDURE desk_taste
DO
dkey$=INKEY$
dkey%=ASC(RIGHT$(dkey$))
sh%=BIOS(11,-1)
IF LEN(dkey$)=1
IF dkey%=>48 AND dkey%<=57
keyflg%=1
ENDIF
IF (sh% AND 1) OR (sh% AND 2)
IF dkey%=>65 AND dkey%<=90
keyflg%=1
ENDIF
ENDIF
ENDIF
EXIT IF keyflg%
EXIT IF dkey%=98
EXIT IF dkey%=117 AND LEN(dkey$)=1
EXIT IF dkey%=97 AND LEN(dkey$)=1
EXIT IF dkey%=115 AND LEN(dkey$)=1
EXIT IF dkey%=105 AND LEN(dkey$)=1
EXIT IF dkey%=103 AND LEN(dkey$)=1
EXIT IF dkey%=72 AND LEN(dkey$)=2
EXIT IF dkey%=80 AND LEN(dkey$)=2
EXIT IF dkey%=13 OR dkey%=ASC("q")
IF dkey%=99
@dcolor
ENDIF
EXIT IF MOUSEK=1 OR MOUSEK=2
LOOP
LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE card_taste
DO
ckey$=INKEY$
ck%=ASC(RIGHT$(ckey$))
sh%=BIOS(11,-1)
EXIT IF ck%=esc%
EXIT IF ck%=32
EXIT IF ck%=103 AND LEN(ckey$)=1
EXIT IF ck%=105 AND LEN(ckey$)=1
EXIT IF ck%=117 AND LEN(ckey$)=1
EXIT IF ck%=100 AND LEN(ckey$)=1
EXIT IF ck%=127 AND LEN(ckey$)=1
EXIT IF ck%=82 AND LEN(ckey$)=2
EXIT IF ck%=75 AND LEN(ckey$)=2
EXIT IF ck%=77 AND LEN(ckey$)=2
EXIT IF ck%=115 AND LEN(ckey$)=2
EXIT IF ck%=116
EXIT IF sh%>0 AND (sh% AND 4)=0
EXIT IF MOUSEK OR ck%=13 OR ck%=10
IF ck%=72 AND LEN(ckey$)=2
DPOKE 9954,MAX(yo%,MIN(yu%,(MOUSEY DIV (16/t%))*16/t%-8/t%))
OUT 4,8
ENDIF
IF ck%=80 AND LEN(ckey$)=2
DPOKE 9954,MAX(yo%,MIN(yu%,(MOUSEY DIV (16/t%))*16/t%+24/t%))
OUT 4,8
ENDIF
LOOP
LPOKE XBIOS(14,1)+6,0
RETURN
PROCEDURE karte_zeigen
DEFFILL ,0,0
DEFMOUSE 0
shflg%=1
PBOX 8,yo%,627,yu%+24/t%+(t%-1)
BOX 13,yo%+5/t%,622,yu%-5/t%
LINE 8,yu%,627,yu%
OPEN "",#1,"VID:"
rep$=CHR$(0)+CHR$(8)+CHR$(9)+CHR$(10)+CHR$(11)+CHR$(12)+CHR$(13)
FOR j%=1 TO cz%
buf$=ztxt$(j%)
@xreplc
ztxt$(j%)=buf$
PRINT AT(4,j%+1+yo%/16*t%);pre$(j%);": ";
PRINT #1,ztxt$(j%);
NEXT j%
DEFTEXT ,0,,6-2*(t%-1)
IF modus%=1
IF d.flg%=0
d.flg%=1
mtx$="EINGABE = <Shift>/ EINFöGEN=<Insert>/"
mtx$=mtx$+" LôSCHEN=<Delete>/ IMPORT= < i >"
TEXT 70+120*(t%-1),yu%+10/t%,mtx$
mtx$="GOTO KARTE= < g >/ TAUSCHEN= < t >  /"
mtx$=mtx$+" DRUCKEN=   < d >/ EXIT =  <Esc>"
TEXT 70+120*(t%-1),yu%+20/t%+(t%-1),mtx$
GET 8,yu%+2*(2-t%),627,yu%+22/t%,mline$
ELSE
PUT 8,yu%+2*(2-t%),mline$
ENDIF
ELSE
mtx$="WEITER = <Return> / DRUCKEN= < d >"
TEXT 340+60*(t%-1),yu%+10/t%,mtx$
mtx$="EINGABE= <Shift>  / EXIT   = <Esc>"
TEXT 340+60*(t%-1),yu%+20/t%+(t%-1),mtx$
IF modus%=0 AND (s.pos%>0 OR s.pos3%>0) AND zy%<cz%-1
PRINT esc$;"p";
IF s.pos%
PRINT AT(15+s.pos%,zy%+2+yo%/16*t%);
PRINT #1,srch$;
ENDIF
IF s.pos2%
PRINT AT(15+s.pos2%,zy%+2+yo%/16*t%);
PRINT #1,srch2$;
ENDIF
IF s.pos3%
PRINT AT(15+s.pos3%,zy%+2+yo%/16*t%);
PRINT #1,srch2$;
ENDIF
PRINT esc$;"q";
ENDIF
CLR s.pos%,s.pos2%,s.pos3%
ENDIF
CLOSE #1
DEFTEXT ,0,,13/t%
TEXT 20,yu%+16/t%+(t%-1),STR$(card%)
@card_taste
DEFMOUSE 2
RETURN
PROCEDURE karte_aendern
HIDEM
PAUSE 10
DPOKE VDIBASE+34,0
PBOX 60,yu%+2*(2-t%)+1,626,yu%+20/t%+(t%-1)
DPOKE VDIBASE+34,1
mtx$="UP = <Control><Return> / EXIT = <Shift><Return>"
TEXT 244,yu%+16/t%+(t%-1),mtx$
IF ck%=32
mk%=1
ENDIF
IF sh% AND 8
mk%=2
ENDIF
OPEN "",#1,"VID:"
DO
CLR p.os%
FOR cnt%=1 TO cz%
IF (mk% AND (MOUSEY>yo% AND MOUSEY<yu%))
cnt%=MAX(1,MIN(INT((MOUSEY-yo%-7)/16*t%)+1,cz%))
@pcalc(1)
IF mk%=2
ztxt$(cnt%)=STRING$(lng%(cnt%),46)
ENDIF
CLR mk%
ENDIF
@path(1,ztxt$(cnt%),CHR$(46)+CHR$(0),*buf$,*du$,*du$)
PRINT AT(16,cnt%+1+yo%/16*t%);SPACE$(lng%(cnt%));" ";CHR$(174)
PRINT AT(16,cnt%+1+yo%/16*t%);! Cursor positionieren
FORM INPUT lng%(cnt%) AS buf$
sh%=BIOS(11,-1)
IF (sh% AND 1) OR (sh% AND 2)
o.ff%=1
ENDIF
IF (sh% AND 8)
al$="      CANCEL ??|Alte Karte restaurieren ?"
ALERT 2,al$,1,"OKAY|NEIN",back2%
IF back2%=1
o.ff%=2
ELSE
o.ff%=1
ENDIF
ENDIF
IF LEFT$(buf$)=esc$ OR LEFT$(buf$)=" "
o.ff%=1
ztxt$(cnt%)=RIGHT$(buf$,LEN(buf$)-1)
ztxt$(cnt%)=ztxt$(cnt%)+STRING$((lng%(cnt%)-LEN(buf$))+1,46)
ELSE
IF RIGHT$(buf$)=esc$ OR RIGHT$(buf$)=" "
o.ff%=1
ztxt$(cnt%)=LEFT$(buf$,LEN(buf$)-1)
ztxt$(cnt%)=ztxt$(cnt%)+STRING$((lng%(cnt%)-LEN(buf$))+1,46)
ELSE
ztxt$(cnt%)=buf$+STRING$(lng%(cnt%)-LEN(buf$),46)
ENDIF
ENDIF
PRINT AT(16,cnt%+1+yo%/16*t%);! Cursor positionieren
PRINT #1,ztxt$(cnt%);"  ";
VOID FRE(0)
BMOVE VARPTR(ztxt$(cnt%)),byte1%+p.os%,MAX(1,lng%(cnt%))
ADD p.os%,lng%(cnt%)
IF sh%=4 OR sh%=20
SUB cnt%,2
IF cnt%<0
cnt%=MAX(1,cz%-1)
ENDIF
CLR p.os%
@pcalc(0)
ENDIF
EXIT IF o.ff%>0
LPOKE XBIOS(14,1)+6,0
NEXT cnt%
EXIT IF o.ff%>0
LOOP
CLOSE #1
VOID FRE(0)
IF o.ff%=2
BMOVE VARPTR(satz$),byte1%,sg%
ELSE
buf$=SPACE$(sg%)
BMOVE byte1%,VARPTR(buf$),sg%
IF buf$<>satz$
@update(byte1%-sta%+1,byte1%,sg%)
ENDIF
ENDIF
VOID BIOS(11,0)
CLR o.ff%,sh%
PAUSE 10
SHOWM
RETURN
PROCEDURE pcalc(diff%)
IF (cnt%-diff%)>0
FOR j%=1 TO (cnt%-diff%)
ADD p.os%,lng%(j%)
NEXT j%
ENDIF
RETURN
PROCEDURE karte_suchen
search:
@lbox
PRINT AT(6,22);"1. Suchbegriff : ";
srchmem$=srch$
FORM INPUT 27 AS srch$
srch$=LEFT$(srch$,MIN(25,LEN(srch$)))
IF LEFT$(srch$,2)=esc$+esc$ OR RIGHT$(srch$)=esc$ OR srch$=""
srch$=srchmem$
such.exit%=1
ELSE
IF LEFT$(srch$)=esc$
srch$=""
GOTO search
ENDIF
PRINT AT(6,22);"1. Suchbegriff : ";srch$''
ENDIF
IF such.exit%=0
CLR flg_and%,flg_or%
ALERT 2,"Zweiter Suchbegriff?  ",3," AND | OR |NEIN",back3%
IF back3%<>3
IF back3%=1
flg_and%=1
PRINT AT(10,23);" U N D"
ENDIF
IF back3%=2
flg_or%=1
PRINT AT(10,23);" O D E R"
ENDIF
search2:
PRINT AT(6,24);"2. Suchbegriff : ";
srch2mem$=srch2$
FORM INPUT 27 AS srch2$
srch2$=LEFT$(srch2$,MIN(25,LEN(srch2$)))
IF LEFT$(srch2$,2)=esc$+esc$ OR RIGHT$(srch2$)=esc$ OR srch2$=""
srch2$=srch2mem$
PRINT AT(10,23);SPACE$(10)
PRINT AT(6,24);SPACE$(45)
CLR flg_and%,flg_or%
ELSE
IF LEFT$(srch2$)=esc$
srch2$=""
PRINT AT(6,24);SPACE$(45)
GOTO search2
ENDIF
PRINT AT(6,24);"2. Suchbegriff : ";srch2$''
ENDIF
ENDIF
ENDIF
shflg%=1
RETURN
PROCEDURE karte_springen
REPEAT
@lbox
PRINT AT(14,23);"GOTO Karte Nr. : ";
FORM INPUT 5,ziel$
ziel%=VAL(ziel$)
UNTIL ziel%<karten%+1
shflg%=1
@bildaufbau
RETURN
PROCEDURE karte_tauschen
IF hlp%=1
al$="Karte Nr. "+STR$(pk%)+"|mit Karte Nr. "
al$=al$+STR$(card%)+"|vertauschen?"
ALERT 2,al$,1,"NEIN|OKAY",back3%
IF back3%=2
CLR hlp%
buf$=SPACE$(sg%)
BMOVE sta%+(pk%-1)*sg%,VARPTR(buf$),sg%
BMOVE sta%+(card%-1)*sg%,sta%+(pk%-1)*sg%,sg%
BMOVE VARPTR(buf$),sta%+(card%-1)*sg%,sg%
pcrd%=(MIN(pk%,card%)-1)*s.ges%
pcrd2%=((MAX(pk%,card%)-MIN(pk%,card%))+1)*sg%! Offsetdifferenz
@update(pcrd%+1,sta%+pcrd%,pcrd2%)
ENDIF
ELSE
al$="Karte Nr. "+STR$(card%)
al$=al$+" puffern?|(nÑchste <T>-Taste = 2.Karte)"
ALERT 2,al$,1,"NEIN|OKAY",back3%
IF back3%=2
pk%=card%
hlp%=1
ENDIF
ENDIF
RETURN
PROCEDURE karte_einfuegen
LOCAL voll%
al$="Leerkarte an|Position "+STR$(card%)+"|einfÅgen ??"
ALERT 2,al$,1,"NEIN|OKAY",back3%
IF back3%=2
FOR i%=sta%+kges% DOWNTO sta%+kges%-sg%+1
IF PEEK(i%)>32 AND PEEK(i%)<>46 AND PEEK(i%)<>95
voll%=1
ENDIF
NEXT i%
IF voll%=1
al$="Letzte Karteikarte|ist nicht frei"
ALERT 1,al$,1,"Return",back3%
ELSE
BMOVE byte1%,byte1%+sg%,MAX(1,sg%*(karten%-card%))
buf$=STRING$(sg%,46)
BMOVE VARPTR(buf$),byte1%,sg%
@update(byte1%-sta%+1,byte1%,sg%*((karten%-card%)+1))
ENDIF
ENDIF
RETURN
PROCEDURE karte_loeschen
ALERT 2,"Karte "+STR$(card%)+" lîschen ??",1,"NEIN|OKAY",back3%
IF back3%=2
BMOVE byte1%+sg%,byte1%,MAX(1,sg%*(karten%-card%))
buf$=STRING$(sg%,46)
BMOVE VARPTR(buf$),sta%+kges%-sg%,sg%
@update(byte1%-sta%+1,byte1%,sg%*((karten%-card%)+1))
ENDIF
RETURN
PROCEDURE karte_drucken
IF OUT?(0)=TRUE
LPRINT
FOR k%=1 TO cz%
LPRINT pre$(k%);": ";ztxt$(k%)
NEXT k%
ELSE
ALERT 1,"Drucker nicht empfangsbereit!",1,"Weiter",back2%
ENDIF
RETURN
PROCEDURE karte_import(impad%,impln%)
IF impln%=kges%
al$="Kartei ab Start mit|Import-Datei Åberschreiben?"
ALERT 2,al$,1,"NEIN|OKAY",back3%
ELSE
al$="Nur aktuelle Karte oder|ab aktueller Karte mit|"
al$=al$+"Import-Datei Åberschreiben?"
ALERT 2,al$,1,"NEIN| Karte |ab Karte",back3%
IF back3%=3
impln%=kges%-(byte1%-sta%)
ENDIF
ENDIF
IF back3%>1
@head(1,"Import-Datei wÑhlen")
FILESELECT "\*.*","",import$
@head(0,"")
IF EXIST(import$)
OPEN "I",#1,import$
BGET #1,impad%,MIN(impln%,LOF(#1))
CLOSE #1
@update(impad%-sta%+1,impad%,impln%)
ENDIF
ENDIF
RETURN
PROCEDURE sorter
al$=" Kartei nach|Eintragszeile "+STR$(zy%+1)+"|>> "
al$=al$+pre$(zy%+1)+" <<|  sortieren ?"
ALERT 2,al$,1,"NEIN|OKAY",back3%
IF back3%=2
DEFMOUSE 2
vh=22/karten%
buf$=SPACE$(sg%)
FOR j%=0 TO karten%-1
sbuf1$=STRING$(lng%(zy%+1),0)
sbuf2$=sbuf1$
BMOVE sta%+(j%*sg%)+(zset%-1),VARPTR(sbuf1$),MAX(1,lng%(zy%+1))
LINE 100,(116+j%*vh)/t%,110,(116+j%*vh)/t%
FOR k%=j%+1 TO karten%-1
BMOVE sta%+(k%*sg%)+(zset%-1),VARPTR(sbuf2$),MAX(1,lng%(zy%+1))
IF sbuf1$=STRING$(lng%(zy%+1),46)
sbuf1$=STRING$(lng%(zy%+1),255)
ENDIF
IF sbuf2$=STRING$(lng%(zy%+1),46)
sbuf2$=STRING$(lng%(zy%+1),255)
ENDIF
IF sbuf1$<>sbuf2$
IF UPPER$(sbuf1$)>UPPER$(sbuf2$)
SWAP sbuf1$,sbuf2$
BMOVE sta%+(j%*sg%),VARPTR(buf$),sg%
BMOVE sta%+(k%*sg%),sta%+(j%*sg%),sg%
BMOVE VARPTR(buf$),sta%+(k%*sg%),sg%
ENDIF
ENDIF
NEXT k%
NEXT j%
@update(1,sta%,kges%)
DEFMOUSE 0
ENDIF
RETURN
PROCEDURE liste
buf$=SPACE$(MAX(1,lng%(zy%+1)))
REPEAT
@lbox
PRINT esc$;"p";
PRINT AT(6,23);">> ";pre$(zy%+1);" <<";esc$;"q";"  Liste ab Karte Nr. : ";
FORM INPUT 5 AS strt$
EXIT IF LEFT$(strt$)=esc$
strt%=VAL(strt$)
IF strt$=""
strt%=1
ENDIF
UNTIL strt%<karten%+1 AND strt%>0
IF LEFT$(strt$)<>esc$
OPEN "",#1,"VID:"
CLS
PRINT esc$;"p";
PRINT "Liste: '";pre$(zy%+1);"'";SPACE$(18);
PRINT "(<Taste> = nÑchste Zeile / <Esc> = Abbruch)";
PRINT STRING$(80,"=");esc$;"q";
rep$=CHR$(0)+CHR$(8)+CHR$(9)+CHR$(10)+CHR$(11)+CHR$(12)+CHR$(13)
FOR j%=strt%-1 TO karten%-1
BMOVE sta%+(j%*sg%)+(zset%-1),VARPTR(buf$),MAX(1,lng%(zy%+1))
@xreplc
PRINT esc$;"p";j%+1;SPACE$(6-LEN(STR$(j%+1)));"|";esc$;"q";" ";
PRINT #1,buf$;
PRINT
IF INP(2)=27
j%=karten%-1
ENDIF
LPOKE XBIOS(14,1)+6,0
NEXT j%
PRINT esc$;"p";
PRINT SPACE$(MAX(1,lng%(zy%+1)));"< Return >"
PRINT esc$;"q";
REPEAT
UNTIL INP(2)=13
CLOSE #1
ELSE
strt$=RIGHT$(strt$,LEN(strt$)-1)
ENDIF
CLS
shflg%=1
@bildaufbau
RETURN
PROCEDURE automatic
auto%=auto% XOR 1
IF auto%=1
al$="Automatische Daten-Sicherung|wird ausgeschaltet"
ALERT 1,al$,1,"OKAY",back3%
ELSE
al$="énderungen werden|automatisch auf|Disk gesichert"
ALERT 1,al$,1,"OKAY",back3%
ENDIF
DEFFILL 1,0,0
PBOX 16,144/t%-1,161,165/t%-1
@stext(20,159/t%,0,"UPDATING "+CHR$(32+10*(1-auto%))+"  < u >",2,2)
GET 10,56/t%,170,254/t%,m.bild$
CLR wahl%,menue%
@service
RETURN
PROCEDURE service
IF change%=1 AND auto%=0
al$="Alle bisherige(n)|énderung(en) auf|Diskette sichern ?"
ALERT 2,al$,1,"OKAY|NEIN",back2%
IF back2%=1
@tiptext("Aktuelle Kartei wird gesichert !")
CLR change%
@update(1,sta%,kges%)
shflg%=1
@bildaufbau
ENDIF
ENDIF
RETURN
PROCEDURE update(fseek%,crdad%,blkln%)
IF auto%=0
REPEAT
CLR back2%
IF EXIST(datei$)
IF fseek%=1 AND crdad%=sta% AND blkln%=kges%
BSAVE datei$,sta%,kges%
ELSE
OPEN "U",#1,datei$
SEEK #1,fseek%-1
BPUT #1,crdad%,blkln%
CLOSE #1
ENDIF
ELSE
al$=datei$+"|nicht gefunden !"
ALERT 1,al$,1,"OKAY",back2%
ENDIF
UNTIL back2%=0
ELSE
change%=1
ENDIF
RETURN
PROCEDURE lbox
DEFFILL ,2,8
PBOX 32,332/t%,416,390/t%
DEFFILL ,0,0
PBOX 30,330/t%,414,388/t%
BOX 32,332/t%,412,386/t%
RETURN
PROCEDURE bildaufbau
IF shflg%=1
@desk
CLR shflg%
ENDIF
PUT 10,11/t%,tt$
PUT 10,56/t%,m.bild$
PUT 538,370/t%-cz%*10/t%,zeilen$
GRAPHMODE 3
DEFFILL ,2,8
PBOX 541,385/t%-cz%*10/t%+zy%*10/t%-(t%-1),626,395/t%-cz%*10/t%+zy%*10/t%
GRAPHMODE 1
@register
DEFFILL ,0,0
RETURN
PROCEDURE desk
GRAPHMODE 1
DEFFILL ,2,8
PBOX 7,7/t%,636,396/t%
DEFFILL ,2,4
PBOX 3,3/t%,632,392/t%
DEFFILL ,0,0
RETURN
PROCEDURE register
DEFTEXT ,17,,6-2*(t%-1)
FOR i%=25 DOWNTO 0
PUT 55+i%*20,335/t%-i%*13/t%,cd$
TEXT 110+i%*20,345/t%-i%*13/t%,CHR$(65+i%)
NEXT i%
FOR i%=9 DOWNTO 0
PUT 240+i%*20,335/t%-i%*13/t%,cd$
TEXT 295+i%*20,345/t%-i%*13/t%,STR$(i%)
NEXT i%
DEFTEXT ,0,,13/t%
RETURN
PROCEDURE intro
t%=MIN(2,3-XBIOS(4))
r_xt%=2-SGN(XBIOS(4))
r_yt%=MIN(2,3-XBIOS(4))
@rahmen
DEFTEXT ,,,12/t%
@stext(32,24/t%,576,"VARIO-RAM-KART",6,4/t%)
DEFTEXT ,1,,6-2*(t%-1)
@stext(120,386/t%,400,"'Das groûe GFA BASIC Buch' (DATA BECKER)",3,2)
DEFTEXT ,0,,13/t%
al$="Datei bearbeiten|oder neu definieren ?"
ALERT 2,al$,1," OPEN |DEFINE",back%
IF back%=2
CLS
@define
ENDIF
esc%=27
esc$=CHR$(esc%)
suchen%=1
blaettern%=2
sortieren%=3
update%=4
springen%=5
import%=6
progexit%=7
zset%=1
@head(1,"Kartei wÑhlen ('.DEF'-Extension)")
REPEAT
CLR back2%
REPEAT
FILESELECT "\*.DEF","________.DEF",sel$
UNTIL EXIST(sel$) OR sel$=""
IF RIGHT$(sel$,4)<>".DEF"
IF sel$>""
ALERT 3,"Keine '.DEF'-Datei !",1,"Nochmal",back2%
ELSE
EDIT
ENDIF
ENDIF
UNTIL back2%=0
@head(0,"")
OPEN "I",#1,sel$
INPUT #1,datei$,titel$,karten%,cz%
DIM lng%(cz%),pre$(cz%),ztxt$(cz%)
FOR i%=1 TO cz%
INPUT #1,lng%(i%),pre$(i%)
ADD sg%,lng%(i%)
ztxt$(i%)=SPACE$(lng%(i%))
NEXT i%
CLOSE #1
kges%=sg%*karten%
satz$=SPACE$(sg%)
IF FRE(0)-50000<kges%
ALERT 3,"Speicher nicht ausreichend !",1,"Abbruch",back2%
@abbruch
ENDIF
ON BREAK GOSUB abbruch
RESERVE 30000
sta%=HIMEM+20000
@rahmen
yo%=((INT(((24-cz%)/2)-1)*16)+7)/t%
yu%=yo%+16/t%+cz%*16/t%
RETURN
PROCEDURE datload
lader:
VOID FRE(0)
IF EXIST(datei$)
@tiptext("Datei wird geladen !")
OPEN "I",#1,datei$
BGET #1,sta%,MIN(LOF(#1),sg%)
CLOSE #1
IF PEEK(sta%+sg%-1)=ASC(">")
IF PEEK(sta%+sg%-4)=ASC("<")
ON BREAK CONT
REPEAT
@lbox
PRINT AT(10,23);"Bitte User-Code eingeben : ";
FORM INPUT 5,code$
code=VAL(code$)
IF LEFT$(code$)=esc$
RESERVE XBIOS(2)-HIMEM-16384+FRE(0)
EDIT
ENDIF
UNTIL code=PEEK(sta%+sg%-2)+PEEK(sta%+sg%-3)*2^8
ON BREAK GOSUB abbruch
CLS
@rahmen
@tiptext("Datei wird geladen !")
ENDIF
ENDIF
OPEN "I",#1,datei$
BGET #1,sta%,MIN(LOF(#1),kges%)
CLOSE #1
ELSE
al.str$="Datei nicht gefunden"
al.str$=al.str$+"|auf anderer Disk suchen?"
ALERT 1,al.str$,2,"NEUE DAT|NEUE DSK|ABBRUCH",dummy%
IF dummy%=1
@tiptext("Moment bitte !")
fuell$=STRING$(500,46)
FOR i%=sta% TO sta%+kges% STEP 500
BMOVE VARPTR(fuell$),i%,500
NEXT i%
BSAVE datei$,sta%,kges%
ENDIF
IF dummy%=2
GOTO lader
ENDIF
IF dummy%=3
RESERVE XBIOS(2)-HIMEM-16384+FRE(0)
EDIT
ENDIF
ENDIF
@desk
@bild
@bildaufbau
DEFTEXT ,0,,13/t%
RETURN
PROCEDURE bild
SETCOLOR 1,0,7,0
SETCOLOR 2,7,0,0
DEFFILL 3,2,8
PBOX 12,13/t%,406,50/t%
DEFFILL 1,2,2
PBOX 10,11/t%,404,48/t%
DEFTEXT ,4,,26/t%
@stext(16,40/t%,385,titel$,4,4)
GET 10,11/t%,406,50/t%,tt$
GRAPHMODE 1
DEFFILL 1,2,8
PBOX 12,58/t%,170,254/t%
DEFFILL ,0,0
PBOX 10,56/t%,168,252/t%
BOX 12,56/t%+2,166,252/t%-2
FOR i%=63 TO 225 STEP 27
BOX 16,i%/t%-1,162,(i%+21)/t%
PBOX 16,i%/t%-1,161,(i%+21)/t%-1
NEXT i%
DEFTEXT 3,0,,13/t%
RESTORE m.text
FOR i%=78 TO 240 STEP 27
READ m.tx$
@stext(20,i%/t%,0,m.tx$,2,2)
NEXT i%
m.text:
DATA SUCHEN      < s >,BLAETTERN   < b >,SORTIEREN   < a >
DATA UPDATING *  < u >,GOTO KARTE  < g >,IMPORT      < i >
DATA Q U I T     < q >
GET 10,56/t%,170,254/t%,m.bild$
GRAPHMODE 1
DEFTEXT ,17,,6-2*(t%-1)
DEFFILL ,2,8
PBOX 558,13/t%,629,61/t%
DEFFILL ,0,0
PBOX 555,10/t%,626,58/t%
BOX 567,21/t%,585,12/t%
BOX 569,19/t%,583,14/t%
PBOX 595,11/t%,621,45/t%
GET 555,10/t%,629,61/t%,cd$
DEFFILL ,2,8
PBOX 538,370/t%-cz%*10/t%,630,390/t%
DEFFILL ,0,0
PBOX 538,370/t%-cz%*10/t%,628,388/t%
BOX 540,370/t%-cz%*10/t%+2/t%,626,380/t%-cz%*10/t%+2/t%
BOX 540,380/t%-cz%*10/t%+4/t%,626,388/t%-2/t%
DEFTEXT ,0,,6/t%+(t%-1)
GRAPHMODE 2
TEXT 544,386/t%-10/t%*cz%-6/t%,"Try <HELP>"
FOR i%=cz% DOWNTO 1
TEXT 544,386/t%-10/t%*(cz%-i%)-3/t%,pre$(i%)
NEXT i%
GET 538,370/t%-cz%*10/t%,630,390/t%,zeilen$
GRAPHMODE 1
RETURN
PROCEDURE abbruch
IF auto%<>0
CLR auto%
@service
auto%=1
ELSE
@service
ENDIF
ALERT 2,"Neue Kartei laden ?",3,"OKAY|NEIN|CONT",dummy
IF dummy<>3
RESERVE XBIOS(2)-HIMEM-16384+FRE(0)
IF dummy=1
RUN
ENDIF
IF dummy=2
EDIT
ENDIF
ENDIF
RETURN
PROCEDURE define
DIM bez$(20),ln$(20),ln%(20)
VOID BIOS(11,16)
FOR cz%=1 TO 20
PRINT "TITEL fÅr Zeile ";cz%'"(<Control><Return>=EINGABE-ENDE) :  "'
VOID BIOS(11,16)
FORM INPUT 10 AS bez$(cz%)
bez$(cz%)=bez$(cz%)+SPACE$(10-LEN(bez$(cz%)))
EXIT IF BIOS(11,-1)=4 OR BIOS(11,-1)=20
REPEAT
PRINT "LÑnge der Eintragszeile ";cz%'" (max. 60) :  "'
FORM INPUT 2,ln$(cz%)
ln%(cz%)=VAL(ln$(cz%))
UNTIL ln%(cz%)>0 AND ln%(cz%)<61
NEXT cz%
DEC cz%
CLS
PRINT "Disk-Filename der Datei (max. 8 Zeichen) :";
FORM INPUT 8,datei$
PRINT "Datei-öberschrift :";
INPUT titel$
REPEAT
PRINT "Karteikarten-Anzahl dieser Datei :";
INPUT karten%
UNTIL karten%>0
VOID BIOS(11,0)
OPEN "O",#1,datei$+".DEF"
datei$=datei$+".DAT"
WRITE #1,datei$,titel$
WRITE #1,karten%,cz%
FOR i%=1 TO cz%
WRITE #1,ln%(i%),bez$(i%)
NEXT i%
CLOSE #1
CLS
ERASE bez$()
ERASE ln$()
ERASE ln%()
RETURN
PROCEDURE blinker(b.flg%,bxl%,byo%,bxr%,byu%)
DEFFILL 1,2,8
GRAPHMODE 3
PBOX bxl%/r_xt%,byo%/r_yt%,bxr%/r_xt%,byu%/r_yt%
IF b.flg%=0
PAUSE 10
PBOX bxl%/r_xt%,byo%/r_yt%,bxr%/r_xt%,byu%/r_yt%
ENDIF
GRAPHMODE 1
RETURN
PROCEDURE head(h.flg%,h.txt$)
LOCAL h.res%,h.hlf%,h.dis%,h.re%,h.xr%,h.yr%,h.bxr%
h.txt$=LEFT$(h.txt$,MIN(38,LEN(h.txt$)))
h.xr%=2-SGN(XBIOS(4))
h.yr%=MIN(2,3-XBIOS(4))
IF h.xr%<>2
h.re%=1
ENDIF
IF h.flg%=1
h.hlf%=LEN(h.txt$)*4
h.dis%=2-h.yr%
IF h.xr%<>2
h.bxr%=481
ELSE
h.bxr%=319
ENDIF
GRAPHMODE 1
DEFTEXT 1,0,,13
GET 158*h.re%,0,h.bxr%,399/h.yr%/6,h.bg$
DEFFILL 1,2,2
PBOX 158*h.re%,16/h.yr%+h.dis%*16,h.bxr%,(50/h.yr%-h.dis%*12)+h.dis%*16
DEFFILL 1,0,0
PBOX 320/h.xr%-h.hlf%-2,16/h.yr%+h.dis%*16,320/h.xr%+h.hlf%+2,(50/h.yr%-h.dis%*12)+h.dis%*16
TEXT 320/h.xr%-h.hlf%,(44/h.yr%-h.dis%*10)+h.dis%*16,h.txt$
ELSE
PUT 158*h.re%,0,h.bg$
CLR h.bg$
ENDIF
RETURN
PROCEDURE tiptext(tip$)
LOCAL tln%
GRAPHMODE 1
DEFFILL ,0,0
DEFTEXT ,0,,13/t%
tln%=LEN(tip$)*4
PBOX 320/r_xt%-tln%-6,190/r_yt%-5,320/r_xt%+tln%+6,220/r_yt%+5
BOX 320/r_xt%-tln%-3,190/r_yt%-2,320/r_xt%+tln%+3,220/r_yt%+2
BOX 320/r_xt%-tln%-3,190/r_yt%-2,320/r_xt%+tln%+4,220/r_yt%+3
TEXT 320/r_xt%-tln%,212/r_yt%,tip$
GRAPHMODE 1
RETURN
PROCEDURE rahmen
LOCAL z$,j%,i%
FOR j%=1 TO 16/t%
must$=CHR$(RANDOM(128))+CHR$(RANDOM(128))
z$=z$+MKL$(0)+STRING$(36+40*(r_yt%-1),must$)+MKL$(0)
NEXT j%
FOR i%=32/r_yt% TO 360/r_yt% STEP 16/r_yt%/r_yt%
BMOVE VARPTR(z$),XBIOS(2)+i%*80*r_yt%,1280/r_yt%
NEXT i%
BOX 7/r_yt%,7/r_yt%,638-7/r_yt%,393/r_yt%
BOX 31/r_yt%,31/r_yt%,638-31/r_yt%,369/r_yt%
BOX 7/r_yt%,7/r_yt%,639-7/r_yt%,394/r_yt%
BOX 31/r_yt%,31/r_yt%,639-31/r_yt%,370/r_yt%
RETURN
PROCEDURE stext(s.xt%,s.yt%,s.xl%,s.txt$,s.xo%,s.yo%)
GRAPHMODE 2
TEXT s.xt%-1,s.yt%,s.xl%,s.txt$
TEXT s.xt%+1,s.yt%,s.xl%,s.txt$
TEXT s.xt%,s.yt%-1,s.xl%,s.txt$
TEXT s.xt%,s.yt%+1,s.xl%,s.txt$
TEXT s.xt%+s.xo%,s.yt%+s.yo%,s.xl%,s.txt$
GRAPHMODE 3
TEXT s.xt%,s.yt%,s.xl%,s.txt$
GRAPHMODE 1
RETURN
PROCEDURE path(p.flg%,p.str$,p.sgn$,p.adr%,d.adr%,f.adr%)
LOCAL p.cnt%
IF LEN(p.str$)
FOR p.cnt%=LEN(p.str$) DOWNTO 1
EXIT IF (INSTR(p.sgn$,MID$(p.str$,p.cnt%,1))=0) AND p.flg%
EXIT IF INSTR(p.sgn$,MID$(p.str$,p.cnt%,1)) AND (p.flg%=0)
NEXT p.cnt%
IF p.cnt%<1 OR LEN(p.str$)=1
IF (p.cnt%=1 AND p.flg%=0) OR (p.cnt%<1 AND p.flg%>0)
*p.adr%=""
*d.adr%=""
*f.adr%=p.str$
ELSE
*p.adr%=p.str$
*d.adr%=""
*f.adr%=""
ENDIF
ELSE
IF p.flg%
ADD p.cnt%,1
ENDIF
*p.adr%=LEFT$(p.str$,p.cnt%-1)! linken Teil isolieren
*d.adr%=RIGHT$(p.str$,LEN(p.str$)-LEN(LEFT$(p.str$,p.cnt%)))
*f.adr%=RIGHT$(LEFT$(p.str$,p.cnt%))
ENDIF
ENDIF
RETURN
PROCEDURE xreplc
IF rep$>"" AND buf$>""
FOR x.i%=1 TO LEN(rep$)
'      @rplc(1,0,buf$,MID$(rep$,x.i%,1),CHR$(255),buf$)
@rplc(1,0,buf$,MID$(rep$,x.i%,1),CHR$(255),*buf$)
NEXT x.i%
ENDIF
RETURN
PROCEDURE rplc(r.flg%,pos%,m.str$,s.str$,r.str$,r.adr%)
' FÅr V3.0 ist folgender Kopf gÅltig:
'  PROCEDURE rplc(rflg%,rpos%,mstr$,sstr$,rstr$,VAR radr$)
LOCAL gf%,ls$
REPEAT
gf%=INSTR(rpos%,mstr$,sstr$)
IF gf%
ls$=LEFT$(mstr$,gf%-1)
mstr$=ls$+rstr$+RIGHT$(mstr$,LEN(mstr$)-gf%-LEN(sstr$)+1)
rpos%=gf%+LEN(rstr$)+1
ENDIF
UNTIL gf%=0 OR rflg%=0
*radr%=mstr$
'  radr$=mstr$
RETURN
PROCEDURE dcolor
LOCAL ci%,cxt%,plane%,breit%,cxl%,cyo%,cxr%,cyu%,bbr,ct%,bx2$,button%
LOCAL col$,ctx$,bx$,rgb%,key$,i.mem%,cindex%,ci1%,cbx1%,cby1%,cbx2%,cby2%
LOCAL rot%,gruen%,blau%,ccolor%,cbk%,ci2%,cc1%,cc2%,cbr,dbr,dummy$,exflg%
DIM old_pal%(16),cv%(2,16)
FOR ci%=0 TO 15
old_pal%(ci%)=XBIOS(7,ci%,-1) AND &HFFF
NEXT ci%
cxt%=2-SGN(XBIOS(4))
cyt%=MIN(2,3-XBIOS(4))
GET 0,0,1,1,dummy$
plane%=2^DPEEK(VARPTR(dummy$)+4)
RESTORE convert.table
convert.table:
DATA 0,2,3,6,4,7,5,8,9,10,11,14,12,15,13,1
FOR ci%=0 TO 15
READ ccolor%
cv%(1,ci%)=ccolor%
cv%(2,ccolor%)=ci%
NEXT ci%
IF cxt%=1
IF cyt%=2
cv%(1,3)=1
cv%(2,1)=3
ELSE
cv%(1,1)=1
cv%(2,1)=1
ENDIF
ENDIF
breit%=400/cxt%
cxl%=320/cxt%-breit%/2
cyo%=160/cyt%
cxr%=320/cxt%+breit%/2
cyu%=240/cyt%
GET cxl%,cyo%,cxr%,cyu%,col$
bbr=(breit%-20)/plane%
cbr=(breit%-20)/5
dbr=(breit%-20)/15
DEFFILL ,0,0
PBOX cxl%,cyo%,cxr%,cyu%
BOX cxl%,cyo%,cxr%,cyu%
BOX cxl%+2,cyo%+2,cxr%-2,cyu%-2
FOR ci%=0 TO plane%-1
DEFFILL ci%,2,8
PBOX cxl%+11+ci%*bbr,cyo%+12/cyt%,cxl%+8+ci%*bbr+bbr,cyo%+40/cyt%
BOX cxl%+11+ci%*bbr,cyo%+12/cyt%,cxl%+8+ci%*bbr+bbr,cyo%+40/cyt%
NEXT ci%
FOR ci%=0 TO 4
BOX cxl%+10+ci%*cbr,cyo%+48/cyt%,cxl%+10+ci%*cbr+cbr,cyo%+68/cyt%
NEXT ci%
BOX cxl%+10+4*cbr-1,cyo%+48/cyt%-1,cxl%+11+4*cbr+cbr,cyo%+68/cyt%+1
DEFTEXT 1,,,5/cxt%+cxt%
DEFFILL ,2,8
RESTORE ctext
FOR ci%=0 TO 8
GRAPHMODE 2
READ ctx$
BOX cxl%+9+ci%*dbr,cyo%+48/cyt%,cxl%+9+ci%*dbr+dbr,cyo%+68/cyt%
TEXT cxl%+12+ci%*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
IF ci%=0 OR ci%=3 OR ci%=6
GRAPHMODE 3
PBOX cxl%+9+ci%*dbr,cyo%+48/cyt%,cxl%+9+ci%*dbr+dbr,cyo%+68/cyt%
ENDIF
NEXT ci%
ctext:
DATA R,Ò, ,G,Ò, ,B,Ò,
TEXT 362/cxt%+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),64/cxt%,"Cancel"
TEXT 434/cxt%+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),64/cxt%,"Return"
GET cxl%+9,cyo%+12/cyt%-2,cxl%+10+bbr,cyo%+40/cyt%+2,bx$
BOX cxl%+9,cyo%+12/cyt%-2,cxl%+10+bbr,cyo%+40/cyt%+2
GRAPHMODE 1
rot%=(XBIOS(7,0,-1) AND &HF00)/256
gruen%=(XBIOS(7,0,-1) AND &HF0)/16
blau%=(XBIOS(7,0,-1) AND &HF)
TEXT cxl%+13+2*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),HEX$(rot%)
TEXT cxl%+13+5*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),HEX$(gruen%)
TEXT cxl%+13+8*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),HEX$(blau%)
REPEAT
DO
IF MOUSEK AND MOUSEX>cxl%+9 AND MOUSEX<cxl%+9+11*dbr
IF MOUSEY>cyo%+48/cyt% AND MOUSEY<cyo%+68/cyt%
rgb%=INT((MOUSEX-cxl%-9)/dbr)
IF rgb%=1 OR rgb%=4 OR rgb%=7
IF rgb%=1
IF MOUSEK=1
rot%=(rot%+1) MOD 8
ELSE
DEC rot%
IF rot%<0
rot%=7
ENDIF
ENDIF
ctx$=HEX$(rot%)
TEXT cxl%+13+2*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ENDIF
IF rgb%=4
IF MOUSEK=1
gruen%=(gruen%+1) MOD 8
ELSE
DEC gruen%
IF gruen%<0
gruen%=7
ENDIF
ENDIF
ctx$=HEX$(gruen%)
TEXT cxl%+13+5*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ENDIF
IF rgb%=7
IF MOUSEK=1
blau%=(blau%+1) MOD 8
ELSE
DEC blau%
IF blau%<0
blau%=7
ENDIF
ENDIF
ctx$=HEX$(blau%)
TEXT cxl%+13+8*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ENDIF
VOID XBIOS(7,cv%(2,cindex%),rot%*256+gruen%*16+blau%)
PAUSE 5
ENDIF
ENDIF
ENDIF
key$=INKEY$
button%=MOUSEK
IF MOUSEK AND MOUSEX>cxl%+10+3*cbr AND MOUSEY>cyo%+48/cyt%
IF MOUSEX<cxl%+10+3*cbr+cbr AND MOUSEY<cyo%+68/cyt%
key$=CHR$(27)
ENDIF
ENDIF
IF MOUSEK AND MOUSEX>cxl%+10+4*cbr AND MOUSEY>cyo%+48/cyt%
IF MOUSEX<cxl%+10+4*cbr+cbr AND MOUSEY<cyo%+68/cyt%
key$=CHR$(13)
ENDIF
ENDIF
EXIT IF key$=CHR$(13) OR key$=CHR$(27)
exflg%=0
IF button% AND MOUSEX>cxl%+11 AND MOUSEX<cxr%-11
IF MOUSEY>cyo%+12/cyt% AND MOUSEY<cyo%+40/cyt%
exflg%=1
ENDIF
ENDIF
EXIT IF exflg%
LOOP
IF button% AND (MOUSEX>cxl%+11) AND (MOUSEX<cxr%-11)
IF (MOUSEY>cyo%+12/cyt%) AND (MOUSEY<cyo%+40/cyt%)
IF button%=1
REPEAT
i.mem%=cindex%
REPEAT
IF MOUSEX>cxl%+11 AND MOUSEX<cxr%-11
IF MOUSEY>cyo%+12/cyt% AND MOUSEY<cyo%+40/cyt%
cindex%=MAX(0,MIN(plane%-1,INT((MOUSEX-cxl%-9)/bbr)))! |
ENDIF
ENDIF
UNTIL MOUSEK=0 OR cindex%<>i.mem%
PUT cxl%+9+i.mem%*bbr,cyo%+12/cyt%-2,bx$
cbx1%=cxl%+9+cindex%*bbr
cby1%=cyo%+12/cyt%-2
cbx2%=cxl%+10+cindex%*bbr+bbr
cby2%=cyo%+40/cyt%+2
GET cbx1%,cby1%,cbx2%,cby2%,bx$
BOX cbx1%,cby1%,cbx2%,cby2%
rot%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF00)/256
gruen%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF0)/16
blau%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF)
ctx$=HEX$(rot%)
TEXT cxl%+13+2*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ctx$=HEX$(gruen%)
TEXT cxl%+13+5*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ctx$=HEX$(blau%)
TEXT cxl%+13+8*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
UNTIL MOUSEK=0
ELSE
ci1%=INT((MOUSEX-cxl%-9)/bbr)
GET cxl%+10,cyo%+12/cyt%-1,cxr%-9,cyo%+44/cyt%+1,bx2$
cbx1%=cxl%+10+ci1%*bbr
cby1%=cyo%+12/cyt%-1
cbx2%=cxl%+9+ci1%*bbr+bbr
cby2%=cyo%+40/cyt%+1
BOX cbx1%,cby1%,cbx2%,cby2%
REPEAT
UNTIL MOUSEK=0
DO
IF TIMER-ct%>50
ct%=TIMER
PUT cxl%+10,cyo%+12/cyt%-1,bx2$
GET cxl%+10,cyo%+12/cyt%-1,cxr%-9,cyo%+40/cyt%+1,bx2$
PAUSE 2
BOX cbx1%,cby1%,cbx2%,cby2%
ENDIF
exflg%=0
IF MOUSEK AND MOUSEX>cxl%+11 AND MOUSEX<cxr%-11
IF MOUSEY>cyo%+12/cyt% AND MOUSEY<cyo%+40/cyt%
exflg%=1
ENDIF
ENDIF
LOOP
ci2%=INT((MOUSEX-cxl%-9)/bbr)
cbx1%=cxl%+10+ci2%*bbr
cbx2%=cxl%+9+ci2%*bbr+bbr
BOX cbx1%,cby1%,cbx2%,cby2%
cc1%=XBIOS(7,cv%(2,ci1%),-1)
cc2%=XBIOS(7,cv%(2,ci2%),-1)
IF MOUSEK=1
VOID XBIOS(7,cv%(2,ci1%),cc2%)
ENDIF
VOID XBIOS(7,cv%(2,ci2%),cc1%)
rot%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF00)/256
gruen%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF0)/16
blau%=(XBIOS(7,cv%(2,cindex%),-1) AND &HF)
ctx$=HEX$(rot%)
TEXT cxl%+13+2*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ctx$=HEX$(gruen%)
TEXT cxl%+13+5*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
ctx$=HEX$(blau%)
TEXT cxl%+13+8*dbr+(2-cxt%)*3,(cyo%+66/cyt%)-cxt%-4*(2-cyt%),ctx$
PAUSE 10
PUT cxl%+10,cyo%+12/cyt%-1,bx2$
ENDIF
ENDIF
ENDIF
UNTIL key$=CHR$(13) OR key$=CHR$(27)
IF key$=CHR$(27)
FOR ci%=0 TO 15
VOID XBIOS(7,ci%,old_pal%(ci%))
NEXT ci%
ENDIF
PUT cxl%,cyo%,col$
ERASE old_pal%()
ERASE cv%()
RETURN
