' 3.02 format
' ===========================================================================
' FORMAT.LST
'
' This procedure formats a floppy disk from within your program.
' Parameters:
'      drive%          0=drive A, 1=drive B
'      maxside%        1=single sided, 2=double sided
'      diskname$       disk volume name, i.e., "12345678.123" or ""
' ===========================================================================
'
PROCEDURE format(drive%,maxside%,diskname$)
  ' *** Formats a floppy disk in drive A/B, SS/DS, w/volume name.
  LOCAL maxtrack%,maxsector%,interleave%,secdir%,secfat%,cntfat%
  LOCAL spc%,media%,buffer$,buffer%,abort&,i%,j%,type%,length%
  LOCAL error%,volnam$,handle%,bytes%,dum%
  '  Error checking for drive number
  IF drive%=0 OR drive%=1
    '  Error checking for number of sides
    IF maxside%=1 OR maxside%=2
      '  Formatting variables:
      maxtrack%=80                      !  Number of tracks to format: 80
      maxsector%=9                      !  Number of sectors per track: 9
      interleave%=1                     !  Interleave factor: 1
      '                                    change to 11 for 'twisted' format
      secdir%=7                         !  Number of sectors for directory: 7
      secfat%=5                         !  Number of sectors for FAT: 5
      '                                    change to 3 for IBM compatible format
      cntfat%=2                         !  Number of FATs: 2
      spc%=2                            !  Sectors per cluster: 2
      media%=249                        !  Medium description: 249
      '
      buffer$=SPACE$(10000)             !  Set up a buffer
      buffer%=VARPTR(buffer$)           !    and a pointer to it
      abort&=FALSE                      !  Abort flag
      '  Format sides
      FOR i%=0 TO maxside%-1
        IF abort&=FALSE
          ' NOTE:  The next line is too long to fit on a printed page.
          error%=XBIOS(10,L:buffer%,L:0,drive%,maxsector%,0,i%,interleave%,L:&H87654321,0)
        ENDIF
        IF error%
          abort&=TRUE
        ENDIF
      NEXT i%
      '  Format tracks
      FOR i%=1 TO maxtrack%-1
        FOR j%=0 TO maxside%-1
          IF abort&=FALSE
            ' NOTE:  The next line is too long to fit on a printed page.
            error%=XBIOS(10,L:buffer%,L:0,drive%,maxsector%,i%,j%,interleave%,L:&H87654321,&HE5E5)
            '  Display what's going on to the user
            PRINT AT(1,1);"Track: "+STR$(i%)+" Side: "+STR$(j%)
          ENDIF
          IF error%
            abort&=TRUE
          ENDIF
        NEXT j%
      NEXT i%
      IF abort&=FALSE                   ! If there's been no error
        '  Determine type of disk for boot sector
        '  0 = one side, 40 tracks   (stone-age)
        '  1 = two sides, 40 tracks  (likewise)
        '  2 = one side, 80 tracks
        '  3 = two sides, 80 tracks
        type%=0
        IF maxtrack%>70                 ! High density
          ADD type%,2
        ENDIF
        IF maxside%=2
          ADD type%,1
        ENDIF
        ~XBIOS(18,L:buffer%,L:0,type%,0) !  Create boot sector
        length%=maxtrack%*maxsector%*maxside%
        '  Adjust boot sector
        POKE buffer%+13,spc%            !  Sectors per cluster
        POKE buffer%+16,cntfat%         !  Number of FATs
        POKE buffer%+17,(secdir%*16) AND &HFF  ! Number of possible dir's
        POKE buffer%+18,(secdir%*16)/256  ! entries (low byte-high byte)
        POKE buffer%+19,(length%) AND &HFF  ! Number of sectors on disk
        POKE buffer%+20,(length%)/256   !  low byte-high byte format
        POKE buffer%+21,media%          !  Medium description
        POKE buffer%+22,(secfat%) AND &HFF  ! Sectors per FAT
        POKE buffer%+23,(secfat%)/256   !  low byte-high byte
        POKE buffer%+24,(maxsector%) AND &HFF ! Sectors per track
        POKE buffer%+25,(maxsector%)/256 ! low byte-high byte
        ~XBIOS(9,L:buffer%,L:0,drive%,1,0,0,1) ! Write adj boot sector
        '  Build a FAT, somehow, then write it
        buffer$=CHR$(media%)+CHR$(255)+CHR$(255)+STRING$(509,0)
        FOR i%=0 TO cntfat%-1
          ~BIOS(4,3,L:VARPTR(buffer$),1,i%*secfat%+1,drive% AND 1)
        NEXT i%
        '  Build the disk volume name
        volnam$=CHR$(drive%+65)+":\"+diskname$+CHR$(0)
        handle%=GEMDOS(&H3C,L:VARPTR(volnam$),8) ! Write disk name
        ~GEMDOS(&H3E,handle%)
        bytes%=DFREE(drive%+1)
        ' NOTE:  The next line is too long to fit on a printed page
        ALERT 1,"Format completed.|"+STR$(bytes%)+" bytes available.",1," OK ",dum%
      ELSE
        '  Time for some error messages
        ALERT 1,"Formatting error",1," Abort ",dum%  ! Generic "can't format"
      ENDIF                                          ! error
    ELSE
      ALERT 1,"Error:|Incorrect number of sides",1," Abort ",dum%
    ENDIF
  ELSE
    ALERT 1,"Error:|Incorrect drive specified",1," Abort ",dum%
  ENDIF
RETURN
