'
' 4.21 - 4.50 sound_effects3                                     SOUNDS_3.LST
' ===========================================================================
' This routine consists of three procedures (initio.sound, sound.string, and
' do.sound) which in concert make available thirty different XBIOS 32 format
' sound effects.  The sound effects included in this routine are:
'
'   bounce3, bounce4, bounce5, bounce6, tingeling1, tingeling2, siren,
'   chopper, surf, ting, ding, ploink, toing, bell, gong1, gong2, gong3,
'   dingdong, pieuw, poing, zap, dlink, shot, explosion1, explosion2,
'   laser, fft, steam, thrill, jingle.
'
' This routine is designed to initialize ALL 30 sound effects at once,
' storing each in a string array.  This method makes each sound immediately
' available for use, rather than reading data each time a sound effect is
' desired.  The initio.sound routine only needs to be called once.  To save
' space in your program, eliminate those sound effects that are not required.
'
' The format of the DATA lines in each sound effect is:
'      REG = 14 parameters for registers 0-13
'      END = end of sound-string
'      PAUSE = pause (followed by time)
'      VAR = decrease/increase tone : channel,start,+/-step,end-value
'
' To play a sound effect, simply call do.sound with the string array which
' holds the sound effect desired.  For example,
'           do.sound(sound$(7))         ! plays the siren sound effect
'
' NOTE:  WAVE 0,0 terminates all active sounds.
'        If Keyclick is on, any keypress will terminate sound.
'
' ===========================================================================
'
PROCEDURE initio.sound
  ' *** put sound-data in string (XBIOS 32 format)
  ' Call this routine ONCE to initialize all sound effects.
  DIM sound$(30)
  '
bounce3.sound:
  DATA REG,0,0,0,0,0,0,27,248,16,16,16,35,95,0
  DATA VAR,3,255,-1,116
  DATA PAUSE,255,END
  RESTORE bounce3.sound
  sound.string(s$)
  sound$(1)=s$
  '
bounce4.sound:
  DATA REG,0,216,4,219,5,0,0,254,16,0,0,223,118,0
  DATA VAR,0,0,22,0,END
  RESTORE bounce4.sound
  sound.string(s$)
  sound$(2)=s$
  '
bounce5.sound:
  DATA REG,82,2,251,13,34,0,0,248,16,0,0,0,86,0
  DATA VAR,0,0,11,0,END
  RESTORE bounce5.sound
  sound.string(s$)
  sound$(3)=s$
  '
bounce6.sound:
  DATA REG,0,0,0,0,0,0,0,252,16,0,0,20,70,0
  DATA VAR,1,0,1,255,END
  RESTORE bounce6.sound
  sound.string(s$)
  sound$(4)=s$
  '
tingeling1.sound:
  DATA REG,0,0,0,0,0,0,23,248,16,16,16,130,62,0
  DATA VAR,0,255,-106,116
  DATA PAUSE,255,END
  RESTORE tingeling1.sound
  sound.string(s$)
  sound$(5)=s$
  '
tingeling2.sound:
  DATA REG,0,0,0,0,0,0,0,254,16,0,0,207,88,0
  DATA VAR,0,0,41,0,END
  RESTORE tingeling2.sound
  sound.string(s$)
  sound$(6)=s$
  '
siren.sound:
  DATA REG,0,1,0,0,0,0,0,8,15,0,0,0,0,0,0,10
  DATA VAR,0,1,10,0,END
  RESTORE siren.sound
  sound.string(s$)
  sound$(7)=s$
  '
chopper.sound:
  DATA REG,176,0,238,1,119,12,26,227,16,11,14,111,2,12,END
  RESTORE chopper.sound
  sound.string(s$)
  sound$(8)=s$
  '
surf.sound:
  DATA REG,0,0,0,0,0,0,31,199,16,16,16,0,32,14,END
  RESTORE surf.sound
  sound.string(s$)
  sound$(9)=s$
  '
ting.sound:
  DATA REG,200,0,201,0,100,0,0,248,16,16,16,0,20,0,END
  RESTORE ting.sound
  sound.string(s$)
  sound$(10)=s$
  '
ding.sound:
  DATA REG,64,1,56,1,0,0,0,252,16,16,0,20,20,0,END
  RESTORE ding.sound
  sound.string(s$)
  sound$(11)=s$
  '
ploink.sound:
  DATA REG,2,15,2,15,0,0,0,252,16,16,0,20,20,10
  DATA VAR,1,240,-16,0
  DATA PAUSE,10
  DATA REG,2,15,2,15,0,0,0,252,0,0,0,20,20,10,END
  RESTORE ploink.sound
  sound.string(s$)
  sound$(12)=s$
  '
toing.sound:
  DATA REG,140,1,216,4,219,5,0,254,16,0,0,207,88,0
  DATA VAR 0,0,41,0,END
  RESTORE toing.sound
  sound.string(s$)
  sound$(13)=s$
  '
bell.sound:
  DATA REG,64,0,120,0,0,0,0,252,16,16,0,20,20,0,END
  RESTORE bell.sound
  sound.string(s$)
  sound$(14)=s$
  '
gong1.sound:
  DATA REG,1,5,0,5,2,5,0,248,16,16,16,0,20,1,END
  RESTORE gong1.sound
  sound.string(s$)
  sound$(15)=s$
  '
gong2.sound:
  DATA REG,210,3,232,3,209,7,0,248,16,16,16,111,163,0,END
  RESTORE gong2.sound
  sound.string(s$)
  sound$(16)=s$
  '
gong3.sound:
  DATA REG,0,13,0,12,0,15,0,248,16,16,16,200,200,2
  DATA PAUSE,250,END
  RESTORE gong3.sound
  sound.string(s$)
  sound$(17)=s$
  '
dingdong.sound:
  DATA REG,65,1,64,1,66,1,0,248,16,16,16,255,70,1
  DATA PAUSE,40
  DATA REG,65,1,242,0,127,1,0,248,16,16,16,255,100,1,END
  RESTORE dingdong.sound
  sound.string(s$)
  sound$(18)=s$
  '
pieuw.sound:
  DATA REG,1,0,0,0,0,0,0,254,16,0,0,0,35,1
  DATA VAR,0,50,1,100,END
  RESTORE pieuw.sound
  sound.string(s$)
  sound$(19)=s$
  '
poing.sound:
  DATA REG,1,0,0,0,0,0,0,254,16,0,0,0,35,1
  DATA VAR,0,100,-1,50,END
  RESTORE poing.sound
  sound.string(s$)
  sound$(20)=s$
  '
zap.sound:
  DATA REG,0,16,0,0,0,0,0,252,15,0,0,20,0,4
  DATA VAR,1,0,1,15
  DATA PAUSE,1
  DATA REG,0,16,0,0,0,0,0,252,0,0,0,20,0,4,END
  RESTORE zap.sound
  sound.string(s$)
  sound$(21)=s$
  '
dlink.sound:
  DATA REG,8,2,12,4,0,0,0,252,16,16,0,20,20,9
  DATA VAR,0,200,-20,0
  DATA PAUSE,1
  DATA REG,8,2,12,4,0,0,0,252,0,0,0,20,20,9,END
  RESTORE dlink.sound
  sound.string(s$)
  sound$(22)=s$
  '
shot.sound:
  DATA REG,0,0,0,0,0,0,15,199,16,16,16,0,16,0
  DATA PAUSE,25
  DATA REG,0,0,0,0,0,0,15,199,0,0,0,0,16,0,END
  RESTORE shot.sound
  sound.string(s$)
  sound$(23)=s$
  '
explosion1.sound:
  DATA REG,0,0,0,0,0,0,31,199,16,16,16,0,50,9,END
  RESTORE explosion1.sound
  sound.string(s$)
  sound$(24)=s$
  '
explosion2.sound:
  DATA REG,0,0,100,0,200,0,31,198,16,16,16,207,88,0
  DATA VAR,6,255,0,0,END
  RESTORE explosion2.sound
  sound.string(s$)
  sound$(25)=s$
  '
laser.sound:
  DATA REG,100,0,200,0,50,0,31,220,16,0,16,127,37,0
  DATA VAR,0,0,137,200
  DATA PAUSE,128,END
  RESTORE laser.sound
  sound.string(s$)
  sound$(26)=s$
  '
fft.sound:
  DATA REG,42,2,88,4,164,8,0,199,16,16,16,106,10,4
  DATA VAR 4,124,54,164,END
  RESTORE fft.sound
  sound.string(s$)
  sound$(27)=s$
  '
steam.sound:
  DATA REG,0,0,0,0,0,0,10,199,16,16,16,0,80,0
  DATA PAUSE,20
  DATA REG,0,0,0,0,0,0,10,255,0,0,0,0,80,100,END
  RESTORE steam.sound
  sound.string(s$)
  sound$(28)=s$
  '
thrill.sound:
  DATA REG,86,0,86,0,0,0,0,252,16,15,0,50,1,10
  DATA VAR,9,16,-1,0
  DATA PAUSE,0
  DATA REG,86,0,86,0,0,0,0,252,0,15,0,50,1,10,END
  RESTORE thrill.sound
  sound.string(s$)
  sound$(29)=s$
  '
jingle.sound:
  DATA REG,100,4,101,4,0,0,0,252,15,15,0,0,30,0
  DATA PAUSE,5
  DATA REG,100,3,101,3,0,0,0,252,15,15,0,0,30,0
  DATA PAUSE,5
  DATA REG,100,2,101,2,0,0,0,252,15,15,0,0,30,0
  DATA PAUSE,5
  DATA REG,100,1,101,1,0,0,0,252,15,15,0,0,30,0
  DATA PAUSE,5
  DATA REG,100,0,101,0,0,0,0,252,16,16,0,0,30,0,END
  RESTORE jingle.sound
  sound.string(s$)
  sound$(30)=s$
RETURN
'
'
PROCEDURE sound.string(VAR s$)
  ' *** This procedure is called by the initio.sound procedure.
  LOCAL n,snd$,snd,channel,begin,step%,end
  s$=""
  DO
    READ snd$
    snd$=UPPER$(snd$)
    EXIT IF snd$="END"
    IF snd$="REG"
      FOR n=0 TO 13
        READ snd
        s$=s$+CHR$(n)+CHR$(snd)
      NEXT n
    ENDIF
    IF snd$="PAUSE"
      READ snd
      s$=s$+CHR$(130)+CHR$(snd)
    ENDIF
    IF snd$="VAR"
      READ channel,begin,step%,end
      s$=s$+CHR$(128)+CHR$(begin)+CHR$(129)+CHR$(channel)+CHR$(step)
      s$=s$+CHR$(end)
    ENDIF
  LOOP
  s$=s$+CHR$(255)+CHR$(0)               ! terminator required
RETURN
'
'
PROCEDURE do.sound(sound$)
  ' *** Play the specified sound, for example, do.sound(sound$(7))
  VOID XBIOS(32,L:VARPTR(sound$))
RETURN
