                                    GFA
                                  Class 7

    We're going to move now into some of the commands GFA has available
that you may not fully understand why they're even needed. Let me assure 
you, at one time or another some of these more obscure commands can come in 
quite handy indeed. As with the other lessons, use the examples and 
explanations here in conjunction with your owners manual to get a really 
good grasp on the concepts involved. Don't be afraid of experimenting with 
the various commands as you'll discover a lot of the creativity process is 
derived from discovering new things you (and GFA) can do!

    First is the ASC function. Its' purpose is to determine the ASCII value 
of the first (or only) character in a string. Usage is: ASC(X$) where X$ is 
any variable name you supply. Lets look at an example (EX71):

A$="Tom"
Print "The original variable is ";A$;""
Print
B=Asc(A$)
Print "After using the 'ASC' function, the value is ";B;""
Pause 200
Edit

    This will print '84' as 84 is the ASCII value for the capitol 'T' 
(refer to appendix C for the entire list of ASCII values).

    Another similar function is VAL. You use it just like ASC, in other 
words, VAL(X$) where X$ is a variable you supply. What the VAL function 
does is convert the string variable into a numeric value as far as 
possible. It starts at the leftmost position of your string and converts 
any numbers into a numeric value until it encounters an alpha character 
(then it gives up). Lets look again at an example (EX72):

A$="Tom123"
B$="2003 Bob White Ct."
Print "Variable A$ is originally ";A$;""
Print
Print "Variable B$ is originally ";B$;""
A=Val(A$)
B=Val(B$)
Print
Print "After using the 'VAL' function on A$, its' value is ";A;""
Print
Print "After using the 'VAL' function on B$, its' value is ";B;""
Pause 300
Edit

    The numeric value of A$ will be 0 (nothing) as 'Tom123' has no numbers 
in the leftmost position before the alpha characters. The numeric value of 
B$ will be '2003' as it encounters those numbers before encountering the 
alpha characters. Another form of the VAL function is VAL? and you use it 
the same way you use VAL. It will tell you how many characters can be 
converted if you use the VAL function.

    Two more useful commands (at least for programming), are TRON and 
TROFF. They stand for Trace On and Trace Off and they do exactly as their 
name implies, they 'trace' your program while it's running displaying every 
command as it performs them. This can be very helpful in that you'll be 
able to see exactly where your program may not be doing exactly as you 
intended it to do. To use them, simply insert TRON in your program at the 
point where you want it to start showing the commands and TROFF where you 
want it to stop. They do slow down program execution considerably so be 
sure you get rid of them before you pass your program on to anyone else. 
Remember, they're just a programming (sort of a debugging type) of tool. 
Also, if you're using the GFA Compiler to compile your programs into stand 
alone programs, they will not compile with TRON and TROFF in them. Lets see 
how they work (EX73):

Tron
For X=1 To 25
 Print X
 Pause 25
Next X
Troff
Cls
For X=1 To 25
 Print X
 Pause 25
Next X
Edit

    Another short but useful function is FIX. You use it like this: FIX(X) 
where X is a numeric variable or a number. What it does is chop off any 
decimal portion of the value and leave you with the integer (whole number) 
portion. Example (EX74):

A=2.666
Print "Original value of 'A' is ";A;""
Print
B=Fix(A)
Print "After using the 'FIX' function, the value is ";B;""
Pause 300
Edit

    GFA also has a function that's just the opposite of FIX and that's 
FRAC. It's used exactly the same way, FRAC(X) where X is a numeric variable 
or number you provide. What FRAC does, is throw away the integer portion of 
the value and keep only the decimal portion. Now it wouldn't make much 
sense to try a command like this: FRAC(X%) - do you know why? Right, the 
'%' sign indicates the number is already an integer variable (no decimal). 
Lets look at another example (EX75):

A=2.666
B=Frac(A)
Print "The original value of 'A' was ";A;""
Print
Print "After using the 'FRAC' function, the value is ";B;""
Pause 300
Edit

    There's also a way we can store our current program in ASCII format and 
that's with the LIST command. Using it is simple, just LIST "Filename" 
where Filename is what you want to call your ASCII disk file of the 
program. If you don't provide a 'Filename', LIST will simply LIST the 
program to the screen, not the disk. By placing an 'L' in front of the LIST 
command, you can send a listing to your printer if you have one attached. 
If not, be prepared to wait about 30 seconds or so while the system figures 
out it's not there. Of course when you use the LLIST command, you needn't 
provide a Filename. As long as we're on the subject of placing the 'L' in 
front of commands to direct their output to the printer, lets discuss a few 
more. (I believe the 'L' is a carry over from the days when all printers 
were called 'Line Printers', therefore the 'L' in front of the command - 
just my theory though). You can place the 'L' in front of the PRINT command 
(LPRINT "Text") and your 'Text' will be printed on the printer instead of 
the screen. Another somewhat useful command if you're working with graphics 
is the HARDCOPY command. This performs the identical function to pressing 
'Alternate Help' from the desktop, in other words is does a 'screen dump' 
of what's on your screen.

    The next function we'll examine is the SPC function. It stands for 
'Space' (I think ??) and it's very easy to use. Usage is: SPC(X) where X is 
the number of spaces you want to print. SPC ONLY works with the PRINT 
command. Lets look at an example again (EX76):

Print "Tom";Spc(10);"Hayslett"
Pause 200
Edit

    Pardon me for using my name in these examples but then I don't know who 
is doing this now so it would be kind of tough for me to use yours huh? 
Anyway, lets move on to the SQR function. Guess what it does? Square roots. 
You use it like this: SQR(X) where X is the number you want the square root 
of. A simple example follows (EX77):

X=16 !Change this to see what happens
Y=Sqr(X)
Print "Original value of 'X' is ";X;""
Print
Print "After using the 'SQR' function, the value is ";Y;""
Pause 300
Edit

    Next in line is the STR$ function and it's used to transform a value 
into a character string. Usage is: STR$(x) where X is a numeric variable 
you supply (this is starting to sound like a broken record huh?). This 
function (STR$), will convert numeric values in any format (i.e. 
hexadecimal, binary or decimal) but to keep it simple, lets do a simple 
example (EX78):

A=526
B$=Str$(A)
Print "This is the numeric variable 'A'-> ";A;""
Print
Print "This is a string variable now with this string -> ";B$;""
Pause 300
Edit

    Another useful function is STRING$. You use it to easily repeat strings 
when you need multiple output of specific items. Usage is: STRING$(A,A$) or 
STRING$(A,B) where A is the number of times you want the string repeated 
and A$ is the character string you want to repeat. B represents a number 
value for the ASCII value of the character you'd like to repeat. Lets do 
another example (EX79):

A$="Tom"
Print String$(3,A$)
Pause 200
Edit

    This is easy as it prints 'TomTomTom'. The ASCII value of a capitol 'Z' 
is 90 (from appendix C) therefore if we use the command like this (EX710):

Print String$(10,90)
Print
Print "This is using the 'STRING$' function and ASCII codes...(90='Z')"
Print
Pause 100
A$=Chr$(244)
B$=Chr$(245)
Print String$(79,A$)
Print String$(79,B$)
Print
Print "These are ASCII codes 244 and 245, neat huh?"
Pause 300
Edit

    Another useful command is SWAP (this IS referring to programs too!). 
Usage is: SWAP X,Y where X and Y are the values you want to exchange 
(SWAP). You may only SWAP variables of the same type (i.e. you can NOT do 
this: SWAP X,A$ because they are different types of variables) but you may 
SWAP any like types of variables. This would be fine: SWAP A$,B$. Just 
remember that when you SWAP variables, you also SWAP their dimensions 
(remember the DIM command?). Lets look at another example (EX711):

X=10
Y=20
Z=1
Top:
Print
Print "Value for 'X' -> ";X;" Value for 'Y' -> ";Y;""
Print
Print "Getting ready to perform the function 'SWAP' on 'X' and 'Y' ..."
Swap X,Y
Pause 150
If Z=4
 Edit
Endif
Inc Z
Goto Top

    Another easy function to use is TAB. Like the SPC function, TAB only 
works with the PRINT command (or 'LPRINT'). Usage is: TAB(X) where X is the 
column number you want to TAB to. Another example (EX712):

Print
Print Tab(35);"GFA Basic !"
Pause 150
Edit

    Another GFA function is the INKEY$ function. All it does is read a 
character from the keyboard. This may also be used where we've been using 
'Key=INP(2) or VOID INP(2)' to wait for a key press from the user. Look at 
the example (EX713):

Print At(20,11);"Press any key to return to the editor..."
Repeat
Until Inkey$<>""
Edit

    On to bigger and better things! This is one of my favorites as I use it 
a lot and I see a lot of programs that could benefit by it. It's the INPUT$ 
function. Usage is: INPUT$(X) where X is the number of characters you want 
to read. When you use INPUT$ as in the following example, you can fix your 
programs so the user doesn't have to press return after entering a choice ( 
Y/N or a number, etc). If you assign it an 'X' value of 1, it only reads 1 
character and then reacts. Look over the following example (EX714):

Do
 Cls
 Print
 Print "Press any key or a 'Q' to exit.....-> ";
 X$=Input$(1)
 Print Tab(38);X$ !This shows the key they pressed
 Exit If X$="Q" Or X$="q" !Exit if they enter a q or Q
 Print At(10,10);"You entered a ";X$;""
 Pause 100
Loop
Edit
     Lets go through this together for a moment. First we're setting up a 
DO...LOOP so we know we'll need some type of EXIT IF condition. Next we 
clear the screen and ask the user to press any key. The 'X$=INPUT$(1)' only 
allows 1 key to be pressed and no return is needed so it reacts. Then we 
TAB out to column 38 and PRINT the key they pressed (X$). This is optional 
but if you don't do it, the INPUT$ function will not show the users key 
press. Then we simply simply check X$ to see if it equals 'Q' or 'q' (some 
folks leave their CAPS LOCK on all the time) if it doesn't, we print what 
they entered and do the loop again. When they enter a q, they return to the 
editor.

    We already learned a little about the INPUT and INPUT #X commands but 
if you experimented with them (which you DID do right?), you probably found 
out that INPUT doesn't like commas'. We can fix that though, simply add 
LINE in front of INPUT and you have the LINE INPUT function that works just 
like INPUT except it just loves commas (and most other oddball characters 
too!). Now if you use LINE INPUT and then PRINT that line to disk using the 
PRINT #1 command, you'd better read it back in with a LINE INPUT #1 
command. Lets do an example of entering strings with commas and odd 
characters (EX715):

Print At(1,10);
Line Input "Enter something with commas'...",A$
Print
Print "You entered '";A$;"'"
Pause 200
Edit

    That was easy huh? So is the last command for this lesson (Whew!). This 
is the LOCAL command and all it does is allow you to declare a variable as 
a LOCAL variable, in other words, you can use the same variable name inside 
a Procedure that you use in your program as long as you issue the LOCAL 
command first. You have to do this so GFA can keep the proper values stored 
in the proper variables. Lets look at one more example (EX716):

A=100
Print
Print "Outside the procedure, A is equal to ";A;""
Pause 100
@Try_it
Edit
'
Procedure Try_it
 Local A
 A=50
 Print
 Print "Inside the procedure, A is equal to ";A;""
 Pause 100
Return

    That's it! I know, finally. My hands are sore from typing as I'm sure 
yours must be getting also. Anyway, until the next lesson, keep plugging 
away, we're almost there!

 Tom Hayslett
 STar Users Group

