                                    GFA
                                  Class 3

     This lesson we're going to learn a little about making our programs a
bit more graphically pleasing. We've already learned how to use the PRINT 
command to place characters on the screen so lets move on to another way to 
put our text on the screen. The DEFTEXT command (stands for 'define text') 
allows us to change several characteristics of our text. After you use the 
DEFTEXT command, you can use the TEXT command at any time in your program 
to place your custom formatted TEXT on the screen. Your TEXT will always 
appear in the same style, color and size as the last DEFTEXT command you 
issued. To change the style (or color and size), simply enter the DEFTEXT 
command again. The TEXT command is similar to the PRINT AT command except 
that instead of using the column and row to define where you'll PRINT, you 
now must use the 'pixel' location. A pixel is only a dot on the screen and 
in medium resolution, the ST has 640 dots or pixels horizontally and 200 
pixels vertically. When you issue the TEXT command with the pixel location 
to begin your TEXT at, remember that the location you provide represents 
the lower left of the first letter in your TEXT. The usage of the DEFTEXT 
command is as follows: DEFTEXT A,B,C,D . A,B,C & D are simply numeric 
variables you supply to tell GFA how you want your TEXT to look. The first 
variable (A), is the number of the color you want your TEXT in (0-3 for 
medium resolution, 0-15 for low and 0-1 for high). The second variable (B), 
defines the style of TEXT as follows: 0 - normal, 1 - bold, 2 - light, 4 - 
italic, 8 - underlined, 16 - for outlined and to get any combination of 
these, you simply add the values together (i.e. Bold italics would be 1 for 
bold + 4 for italics = 5). The third variable (C), may be 0,90,180 or 270 
and it defines the rotation of the TEXT in degrees (i.e. 180 is upside 
down). The last variable (D), defines the height of the characters in 
pixels with 4 being very small and 32 being large. Lets look at an example 
to help us ingest all this (EX31):

DEFTEXT 3,16,0,32  !Change the numbers and 'Play'
TEXT 250,100, "Hello there!"
PAUSE 200
EDIT

     We can also put graphic shapes on the screen rather easily by using 
the proper command and supplying the pixel coordinates where we want our 
shape drawn. Three commonly used commands for this are BOX, CIRCLE and 
ELLIPSE. The BOX command is used as follows: BOX A,B,C,D where A and B 
represent the pixel locations of the upper left hand corner of the box and 
C and D represent pixel locations for the lower right hand corner. You may 
also draw rounded corners on a box by simply placing an 'R' in front of the 
command (i.e. RBOX A,B,C,D). Lets draw a box (EX32):

BOX 100,50,540,150
PAUSE 200
CLS
RBOX 100,50,540,150
PAUSE 200
EDIT

     The CIRCLE command is similar:CIRCLE A,B,C where A and B are the pixel 
locations for the center of the CIRCLE and C is the radius (in number of 
pixels) (EX33).

CIRCLE 320,100,140
PAUSE 200
EDIT

     Again, the ELLIPSE command is easy to use: ELLIPSE A,B,C,D where A and 
B are the pixel locations for the center (just like CIRCLE) and C is the 
length of the horizontal axis and D is the length of the vertical axis 
(EX34):

ELLIPSE 320,100,140,30
PAUSE 200
EDIT

     Now, lets move on to the DEFFILL and FILL commands. DEFFILL stands for 
define fill and it just allows us to define a fill pattern and color of our 
choice. FILL is used to fill an area that we provide the coordinates for 
with the pattern we defined in the DEFFILL command. Usage is: DEFFILL A,B,C 
where A is the color to use (same as before) and B and C are the patterns. 
Many patterns are available so I'll refer you to your GFA owners manual as 
they have pictures of all the available patterns and their corresponding 
numbers. Usage of the FILL command is as follows: FILL A,B where A is the 
horizontal pixel location to begin the FILL and B is the vertical pixel 
location. If you're filling an enclosed are (BOX,CIRCLE or ELLIPSE), be 
sure your coordinates are inside the shape and not just on the border as 
the FILL command will work on the border. It simply fills all areas of the 
same color with your pattern. If your shape isn't fully closed, it can also 
'leak' out to the rest of the screen. Now an example (EX35):

BOX 100,50,540,150
DEFFILL 1,2,9
FILL 101,51
PAUSE 200 EDIT

     Another way you can FILL a shape that's much faster is to add a 'P' in 
front of the shapes command (PBOX,PCIRCLE or PELLIPSE). You must issue the 
DEFFILL statement BEFORE the PBOX or FILL or else it will have no effect (a 
PBOX without a DEFFILL first would simply draw a BOX). As in the BOX 
command, you may also use the 'R' for rounded corners with the PBOX command 
(i.e. PRBOX) to get a filled BOX with rounded corners. Lets do another 
example (EX36):

BOX 100,50,540,150
DEFTEXT 3,4,0,13
TEXT 265,100,"Plain 'BOX'"
@NEW_SCREEN    !Remember our GOSUB?
CIRCLE 320,100,80
TEXT 265,100,"Plain 'CIRCLE'"
@NEW_SCREEN
ELLIPSE 320,100,140,30
TEXT 265,100,"Plain 'ELLIPSE'"
@NEW_SCREEN
DEFFILL 1,2,16
PBOX 100,50,540,150
TEXT 265,160."Filled 'BOX' (PBOX)"
@NEW_SCREEN
PCIRCLE 320,100,80
TEXT 265,160,"Filled 'CIRCLE' (PCIRCLE)"
@NEW_SCREEN
PELLIPSE 320,100,140,30
TEXT 265,160,"Filled 'ELLIPSE' (PELLIPSE)"
@NEW_SCREEN
PRBOX 100,50,540,150
TEXT 265,160,"Filled BOX with rounded corners (PRBOX)"
PRINT AT(28,23);"Press any key to continue..."
KEY=INP(2)
EDIT
'
PROCEDURE NEW_SCREEN
  PRINT AT(27,23);"Press any key for next shape..."
  KEY=INP(2)
  CLS
RETURN

     Lets go on to another helpful graphic command and that's the GRAPHMODE 
command. GRAPHMODE determines how the graphic shape you place on the screen 
will affect other shapes already there. Usage is: GRAPHMODE A where A may 
be 1,2,3 or 4. 1 is the default mode and it indicates 'replace', in other 
words, whatever you put on the screen covers up whatever was already there. 
2 is 'transparent' mode, your new graphic allows the old to show through. 3 
is called 'XOR' and it sort of inverses whatever is there. For a better 
explanation of 3 and an explanation of 4, please refer to your GFA manual 
(they're seldom used). We'll combine an example of this command later with 
some of the others.

     Two other graphic commands that work hand in hand with those we've 
already learned are the DEFLINE (define line) and LINE commands. The 
DEFLINE command must be issued before the LINE command and its' usage is: 
DEFLINE A,B,C,D where A defines the style (1 - 6, see your GFA manual), B 
defines the lines width in pixels and C and D define the beginning and 
ending styles of the LINE (i.e. 0-normal, 1-an arrow, 2-rounded). The LINE 
command draws a LINE in the style defined in DEFLINE between two points. 
Usage is: LINE A,B,C,D where A and B are the pixel locations of the 
beginning of the LINE and C and D are the ending pixel locations of the 
LINE. Time for an example (EX37):

FOR X=1 TO 3
  DEFLINE 1,10,X,X
  LINE 100,100,540,100
  PAUSE 200
NEXT X
EDIT

     Another important graphic command is DRAW or DRAW TO. Usage is DRAW 
A,B to DRAW a single pixel at location A,B or DRAW A,B TO C,D to DRAW a 
line between the two pixel locations (A,B and C,D). It's very similar to 
the LINE command except that you may continue the line you're drawing by 
adding additional 'TO's in the command. The PLOT command is identical to 
the DRAW command when you only supply it with A,B. They both DRAW a single 
dot (pixel) at the location you specify. Lets do an example (EX38):

DRAW 10,10 TO 630,10 TO 630,190 TO 10,10
PAUSE 200
EDIT
     This draws a triangle between the points we provided.

     Now to add a little COLOR to our programs. The COLOR command 
determines what color will be used when you issue the BOX, CIRCLE, ELLIPSE, 
LINE or RBOX commands. It's use is very simple: COLOR A where A is one of 
the available colors for the resolution you're in (0-15 for low, 0-3 for 
medium and 0-1 for high).

     Lets venture into a few of the STs' more unique commands like the 
mouse. Two very easy commands that affect the mouse are HIDEM (hide mouse) 
and SHOWM (show mouse). Using them is as simple as (EX39):

HIDEM
? "No mouse on screen now..."
PAUSE 300
SHOWM
? "Here's your mouse back..."
PAUSE 300
EDIT

     A command that controls the shape of the mouse is the DEFMOUSE (define 
mouse) command. Usage is: DEFMOUSE A where A can be any number between 1 
and 7 to choose any of 7 predefined mouse shapes. Advanced users can also 
use this command to create their own mouse shape but we'll keep it simple 
here. Run the following example (EX310):

FOR X=1 TO 7
  DEFMOUSE X
  PRINT AT(25,11);"This is mouse shape "X"..."
  PAUSE 300
NEXT X
EDIT

     Another mouse command is simply MOUSE. This command reads the 
horizontal and vertical locations of the mouse pointer and it also reads 
the status of the mouse buttons. Usage is: MOUSE A,B,C where A is the 
horizontal pixel location, B is the vertical pixel location and C is the 
current status of the mouse buttons. C can be 1 of 4 values (0-3). 0 
indicates no buttons are being pressed, 1 indicates the left button is 
being pressed, 2 indicates the right button is being pressed and a 3 
indicates both the left and the right buttons are being pressed together. 
An example (EX311):

PRINT AT(27,23);"Press right mouse button to exit..."
DO
  MOUSE A,B,C
  VSYNC   !What's this? Read below...
  PRINT AT(1,1);"Horizontal location - "A""
  PRINT AT(1,2);"Vertical location   - "B""
  PRINT AT(1,3);"Button status       - "C""
  EXIT IF C=2   !Set our loop exit condition
LOOP
EDIT
     I dropped a new command on you while you weren't looking! The VSYNC 
command allows you to coordinate your screen updates with the refresh rate 
of the ST. It gets very complicated but lets just say that anytime you get 
a real bad screen flicker, this command will usually help out. To see what 
I mean, go back to the previous program and put a remark symbol (') in 
front of the line with the VSYNC and see what the program does without its' 
help.

     Another way to read just a particular item from the mouse (i.e. if you 
only need 1 of the 3 MOUSE variables), is to use another form of the MOUSE 
command. These are MOUSEX, MOUSEY and MOUSEK. As you may have guessed, 
MOUSEX reads only the horizontal pixel location while MOUSEY reads the 
vertical pixel location and MOUSEK reads only the mouse button status. An 
example (EX312):

K=MOUSEK
HIDEM
PRINT AT(28,11);"You can't see the mouse,"
PRINT AT(28,12);"but right click to exit."
REPEAT
UNTIL K=2
EDIT

     With the preceding commands we've learned, you can actually begin to 
write some of your own 'GEM' type routines. Examine the following program 
and make sure you understand it all as it will help you to build your own 
routines (EX313).

Graphmode 2     !'Transparent' drawing mode
Color 3         !Sets color for drawing to color 3
Defline 1,18    !Defines the line as solid and 18 dots thick
Deffill 2,2,4   !Set a solid fill in color 2
Prbox 20,20,620,180  !Puts a filled,rounded box on screen
Rbox 20,20,620,180   !This draws the thick border
Defline 1,6
Rbox 280,147,360,163  !Our exit box
Deftext 1,0,0,32  !Set text to big and color 1
Text 260,70,"Sample !"
Deftext 3,4,0,13
Text 100,90,"This is how you could build your own 'Dialog' type boxes!"
Text 210,110,"Click in the box to exit..."
Print At(39,20);"Exit!"
Defmouse 3        !Defines mouse shape as the hand
Do
  Mouse A,B,C     !Reads mouse position and button status
  If A=>286 And A=<354 And B=>153 And B=<157 Then
    If C=1 Then   !If mouse is in the right place, check button status
      X=1
    Endif
  Endif
  Exit If X=1     !Exit loop if all was correct
Loop
Deffill 1,2,8
Graphmode 3       !Sets graphmode to 'XOR' (Read the book!)
Prbox 280,147,360,163   !Turns our exit box inverse
Pause 10          !Pauses momentarily
Edit

     That's all for this lesson but as always, remember that using these 
commands is the key to learning them. Have fun!

     Tom Hayslett
     STar Users Group

