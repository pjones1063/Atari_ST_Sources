                                 GFA BASIC
                                  Class 1

BASIC
     What is it? BASIC stands for Beginners All purpose Symbolic 
Instruction Code. BASIC consists of commands (specific words) that when 
entered through a BASIC interpreter form a 'Statement'. A statement is 
simply an instruction to the computer to perform a specific task. All 
computers understand only 1 language directly, called machine language. 
Machine language consists of series of numbers (1's and 0's). Assembly 
language is sometimes referred to as machine language. Any programming 
language other than Assembly or machine language is known as an 
interpreted language, in other words, the computer translates the commands 
you enter into machine language which it can understand. This translation 
is what sometimes causes other languages to be slower than Assembly 
language. Why learn another language then? Why not learn Assembly and save 
the time of this translation? Simple, Assembly or machine language is 
cryptic! The commands are not easily understood and every different 
computer chip uses a different set of instructions. Assembly is by far the 
fastest and most efficient language, also the hardest to learn (in my 
opinion anyway). BASIC on any computer uses an interpreter for you to 
enter your code. The interpreter then translates those commands into 
machine language. The relative ease of learning and using BASIC is why
we're here.  Lets proceed...

     Through the course of this instruction the only thing that's required 
is GFA Basic itself. After you learn to write your own programs you may 
want to consider purchasing the GFA Compiler. It allows you to convert 
your basic programs into regular .PRG files that you can run from the 
desktop without having to load GFA Basic first. Also, the GFA Companion is 
helpful in constructing GEM menus, alert boxes, text boxes and 'pop-up' 
menus. The companion also includes a very good disk tutorial for GFA 
beginners. Items I strongly urge you to get immediately are:

DIOX95.ARC - A shareware program that constructs dialog boxes for you and
actually writes the GFA source code to merge into your own programs.

GFATIPS.ARC - A series of GFA tutorials with example programs included
written by John Holder (author of GFA Companion)

Misc GFA programs - you can print them out and use them to study other
programmers techniques.

     The 3 items mentioned above are available on the STarBase BBS (904-
581-2866, 1200/2400 baud, 24 hours daily) if you have a modem or from the 
STar library if you contact Hobart Neighbors. All the files include 
documentation which I suggest you print out as much as possible as it
makes a good source for future reference. Several of the ST magazines have
ongoing articles pertaining to GFA Basic, some very good. Other suggested
reading sources are:

GFA Basic Training - Reboot Camp - An excellent tutorial written 
specifically for the GFA novice. This will teach you a lot of the basics 
if you're a true beginning programmer.

GFA Basic Book - Written by the author of GFA Basic himself. This book is 
for intermediate to advanced level programmers. A lot of good info here 
although it gets quite complex at times. Save this for when you've truly 
mastered the main commands and functions of the language.

GFA Basic Quick Reference Guide by Abacus - Another reference type of book 
that includes additional examples of some of the commands. Very similar to 
the GFA book that comes with the language.

On to the good stuff...

(***NOTE*** the familiarization with the editor and keyboard commands 
referenced here were covered in our User Group lessons, if you're reading 
this from the tutorial, please study your GFA Owners Manual and learn to 
use the editor, it works!)

     Initially we'll cover familiarization with the editor in GFA. You'll 
learn how to use both the mouse and the keyboard to perform all the needed 
functions. We'll then progress to some of the most basic commands (and the 
most frequently used commands) to thoroughly familiarize you with them. 
Three different filename extensions will be used, .BAS (or .GFA),.BAK and 
.LST. The .BAS extender indicates that the program is a basic program that 
requires the GFA Basic interpreter (or the Run Only version) to run the 
program. Almost all the Basic interpreters use the .BAS extension so to 
identify the GFA only programs, some programmers began using .GFA as an 
extension to differentiate between the different interpreters. You CAN 
modify your GFA Basic program to list and load programs with a .GFA 
extension instead of the .BAS extension however, this should be left to 
those with some experience modifying programs in this fashion. The second 
time you save a file, GFA automatically renames any previous version of 
your program to .BAK to provide you with a backup. The .LST extension 
indicates a GFA program saved in ASCII format. To load these type of 
programs, you need to use the Merge feature within the interpreter. The 
advantage to saving your files in ASCII format is that they can be 
viewed/printed from the desktop. The disadvantage is that they take longer 
to save/load. Subroutines that you intend to use in different programs 
should be saved in this format as they can then be merged into any of your 
programs.

     One thing to remember when using GFA is that you may only enter 1 
command per line. This tends to make your listings (programs) a little 
longer but this is also where GFA gains a lot of its speed. The 
interpreter will check each line you enter after you press <RETURN>. If 
there's an error, it will tell you. You may enter your commands in either 
upper or lowercase letters and GFA will automatically correct them for 
you. For ease of illustration, I'll show all GFA commands in uppercase 
letters.

     Some of the commands we'll learn to use during this first lesson will 
include:

PRINT (or ?) -
simply tells the computer to print a statement on the screen. EXAMPLE:
PRINT "Hello there!"  -  notice the text we want printed is enclosed in
quotation marks. The computer will print anything between the quotation marks up to a maximum of 255 characters. Instead of typing 
PRINT you may use the question mark and GFA will change it for you to 
PRINT. This is simply a shortcut. EXAMPLE: ? "Hello there!"  - notice you 
still need the quote marks.

PRINT AT(X,Y) - tells GFA to print a statement at a specific location with 
'X' being the column and 'Y' being the row. EXAMPLE: PRINT 
AT(10,10);"Hello there!" - the quotes are still there and the only 
difference is this statement will print Hello there! beginning at the 10th 
column and the 10th row.

REM (or ' or !) - tells GFA to ignore the statement that follows as it is 
only a comment for your use. Uses would be to insert comments in your 
program such as REM This changes colors. If you ever need to find where 
you change the colors in your program, it's easier to look for the comment 
you left yourself explaining what you did. REM or ' may be used at the 
beginning of a line only and indicates that GFA should ignore the entire 
line. The ' symbol is a shortcut. When you want to enter a comment on the 
same line as your statement, use the ! character. The ! tells GFA that the 
text following it is simply a comment for your use. EXAMPLE (EX1):

REM Program to print Hello there! (GFA ignores this)
' By Tom Hayslett (GFA ignores this line also)
PRINT "Hello there!"  !Actual program

PAUSE X - Tells GFA to wait a specified period of time before continuing. 
'X' can be any whole number. 50=1 second so if your command is PAUSE 100, 
you're telling GFA to wait 2 seconds and then continue. EXAMPLE (EX2):

REM Program to pause
PAUSE 50   !Waits 1 second
PAUSE 300  !Waits 6 seconds

CLS - Tells GFA to clear the screen. This will help keep your program 
looking more professional and it's very fast. It doesn't need anything 
else used with it to work. EXAMPLE: CLS

KEY=INP(2) - This statement tells GFA to wait for the user to press any 
key. This can be very useful when you want to display information to 
whomever is using your program and you want your program to continue after 
they've read the information and pressed any key. EXAMPLE: KEY=INP(2) The 
2 in parentheses indicates we're waiting for any input from the keyboard. 
GFA uses this command to wait for input from other sources also but we'll 
save them for another lesson.


EDIT - Tells GFA to return you to the editor. Again, no additional 
commands are needed. Now, lets use what we've learned to write a short and 
simple program. See if you can follow exactly what we're doing in the 
following program (EX3).

REM Our first program in GFA
PRINT AT(35,11);"Hello there!"  !Prints at column 35, row 11
PRINT AT(30,22);"Press any key to continue..."
KEY=INP(2)   !Wait for a key to be pressed
CLS   !Clears the screen
PRINT AT(35,11);"Thank you!"
PAUSE 250  !Pauses for 5 seconds
CLS
PRINT "Returning to the editor..."
PAUSE 150
EDIT  !Returns us to the GFA editor

      That's it for the introduction and some of the simpler yet most 
commonly used commands. Hopefully I'll be able to keep writing these files 
to help you beginners progress. Don't forget though that after you do 
become somewhat proficient at the language yourself, I expect to learn 
some tricks from you!

          Tom Hayslett
          STar Users Group
  
