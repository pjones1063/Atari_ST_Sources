                                    GFA
                                  Class 4

    We'll move on now to several commands that are very necessary in any 
programing environment. Lets begin with two simple and easy yet very 
powerful and time saving commands, SGET and SPUT. They stand for 'Screen 
Get' and 'Screen Put' respectively and all they do is copy the entire 
screen into a character string variable for use later in your program. The 
advantage here is speed as the whole screen can be almost instantly saved 
or replaced but the disadvantage is that each screen you reserve with SGET 
uses 32K of memory. Example (EX41):

Deftext 1,5,0,32
Text 220,70,"Screen #1"
Sget Screen1$
Pause 50
Cls
Text 220,130,"Screen #2"
Sget Screen2$
Pause 50
@Flip_them
Edit
'
Procedure Flip_them
 Repeat
 Hidem
 For X=30 Downto 1
 Vsync
 Sput Screen1$
 Pause X
 Vsync
 Sput Screen2$
 Pause X
 Exit If Mousek<>0
 Next X
 Until Mousek<>0
 Showm
Return

 If you don't need the entire screen copied into a variable, you could use 
the GET and PUT commands to copy just a selected portion of the screen into 
a variable. Usage is: GET A,B,C,D TEMP$ where A and B are the upper left 
horizontal and vertical pixel locations, C and D are the lower right hand 
corner pixel locations and TEMP$ is the character string variable you 
supply to hold that particular section of the screen. Usage of the PUT 
command is exactly the same except you only need provide the A and B 
locations and of course it places the variable TEMP$ at the locations you 
provide. Lets look at an example (EX42):

Circle 320,30,25
Get 294,4,346,56,Temp$
Pause 50
Put 50,50,Temp$
Pause 50
Put 100,100,Temp$
Pause 50
Put 400,150,Temp$
Pause 200
Edit

 Two other commands that are very easy to use are DATE$ and TIME$. They 
simply provide you with the date and time as your ST currently has it (i.e. 
if you don't have a clock or haven't set the time via the CONTROL.ACC, 
you'll probably show Nov 25, 1985). No additional items are needed with 
either command so they're use is easy. Example (EX43):

Print At(25,11);"Current time is ";Time$;""
Print At(25,12);"Todays' date is ";Date$;""
Pause 200
Edit

 Another frequently used routine we need to learn is the 'READ...DATA' 
routine. When you use the READ command, you use any variable you choose and 
you're telling your program to READ the value of that variable from a list 
you provide in a DATA statement. You MUST be sure to use the correct type 
of variable to read the type of data you're using. If you tell the program 
to READ X, be sure you only have numeric values in your DATA statement. If 
you tell it to READ X$, then you may use characters or whatever in your 
DATA statement. Example (EX44):

For A=1 To 10
 Read X
 Print At(23,12);"The value of 'X' is now ";X;"..."
 Pause 50
Next A
Edit
Data 10,20,30,40,50,60,70,80,90,100

 If we wanted to use some of our variables again, we could issue the 
RESTORE command which tells GFA that it can start back at the first DATA 
item the next time we issue a READ command. For example (EX45):

For A=1 To 10
 Read X$
 Print At(28,11);"Hello ";X$;" ! "
 Pause 100
 If A=5 Then
 Print At(20,11);"Returning to first 'DATA' value..."
 Pause 200
 Cls
 Restore
 Endif
Next A
Data Celia,Robert,Gordon,Hobart,Joe,Tom,Brett,Andy

 *** Please notice that even though we supply 8 ***
 names (data items), the routine only uses
 5 of them because the RESTORE command sets
 the next READ back to the first DATA item.

 Okay, now to move on. So far we've been using the EDIT command in our 
examples to return us to the editor without having to click on the 'RETURN' 
box but when we actually write a program we can't end it that way. We need 
to know how to properly exit to the GEM desktop. There are several GFA 
commands that allow this, END closes all open files and terminates your 
programs execution. STOP will stop your program but if you're working with 
open disk files, it will not close those files (you may continue from the 
point you stopped by issuing the CONT command - stands for continue). QUIT 
and SYSTEM are another 2 commands to terminate your program and like END 
they will also close all open files but the big difference is that both of 
these will return you to the GEM desktop, even if you're using GFA. END 
will return you to the editor. (Sorry, no example here, type QUIT or SYSTEM 
while in GFA and run them to see what they do 8-) ...)
  Another helpful command is FRE(0). It reports the amount of free RAM 
available to you for GFAs' use at any given time. If you're writing a 
program it can help you determine how much memory you're using so you can 
make sure your program will function properly on any ST (i.e. a 520 ST with 
512K of RAM). Here's an example of how to use it (EX46):

X%=Fre(0)
Print X%
Pause 100
Sget Screen1$
X%=Fre(0)
Print X%
Pause 100
Edit

 There's also a command to let you know how much free space is on the disk 
you're using and that's the DFREE command. Usage is DFREE(X) where X is the 
value of the drive you want to check the free space on. X may be between 0 
and 15 and 0 stands for the default disk, 1 is for drive A:, 2 is for drive 
B:, etc on up to 15. Example (EX47):

X%=Dfree(1)
Print X%
Pause 200
Edit

 To see what files are actually on a disk there are two different commands 
you may use. One is FILES and the other is DIR. Both commands allow the 
conventional use of wildcards (? and *) and usage is FILES "A:*.*" or FILES 
"A:\TEST\*.BAS" or DIR "A:*.LST" etc. The difference between the two is the 
FILES command not only shows you the name of the files but also their 
creation dates and the file size while the DIR command only shows the names 
of the files. You may direct the output of either of these commands to 
other than the screen (for example to a file on disk in ASCII format) by 
specifying a TO file. FILES "A:*.*" to "A:XXX.XXX" or DIR "A:*.BAS" TO 
"A:GFA.DAT" etc. If you wanted, you may also direct the output to a printer 
by specifying "LST:" as the TO device. Ever want to know how to zip off 
some disk labels? Example (EX48):

Files "A:*.*"
Pause 300
Dir "A:*.*"
Pause 300
Edit

 Other available commands to manipulate disk files are MKDIR and RMDIR for 
the 'make directory' and 'remove directory' functions. Usage is similar to 
DIR and FILES in that you must specify complete paths etc. MKDIR "A:\TEST" 
makes a directory (folder) on drive A: called 'TEST'. RMDIR "A:\TEST" 
removes a directory (folder) from drive A: called 'TEST'. You may also 
change your current path by switching into and out of directories (folders) 
by issuing the CHDIR command. Its' use is similar to the other disk type 
commands in that you must issue the pathname you want to change to. Usage 
is CHDIR "A:\TEST" to change to a folder called 'TEST' or CHDIR "\" to move 
back to the root directory of the disk you're using. To find out what 
directory you're currently in you may use the DIR$ command as follows: 
DIR$(x) where x may be 0-15 to represent the drive number (same as the 
DFREE command). If you have more than one drive connected and online, you 
can change drives by using the CHDRIVE command as follows: CHDRIVE X where 
x may again be 0-15 to tell GFA what drive to switch to. You may also 
rename files on disk by using the NAME command as follows: NAME "A:OLDFILE" 
AS "A:NEWFILE". Another helpful command to see if a file already exists on 
disk is the EXIST command used as follows: EXIST("Filename"). A value of -1 
is returned if the condition is true (if the file exists) and a condition 
of 0 is returned if the condition is false. You may also delete a disk file 
with the KILL command as follows: KILL "A:TEST". You can use wildcards (? 
and *) to specify which files to delete but be careful! Okay, we've just 
had a lot of reading so lets do an example to show us all these various 
things in use (EX49):

Rem Short disk files routines
Chdrive 1
Print "Creating a file on disk called 'TEST'"
Files "A:*.*" To "A:TEST" !Put list in file 'A:TEST'
Print At(25,12);"Press any key for a directory of A:"
Key=Inp(2)
Cls
Dir "A:*.*" !Directory to the screen
Print
X%=Dfree(1)
Print "There are ";X%;" bytes available"
Print At(26,24);"Press any key to continue..."
Key=Inp(2)
Cls
Print "Now creating a directory (folder) called 'TESTDIR'"
Mkdir "A:\TESTDIR"
Chdir "A:\TESTDIR"
Cls
Print "Now in the directory we just made..."
Files "A:*.*"
Pause 150
Chdir "A:\"
Cls
Print "Now back in the root directory..."
Files "A:*.*"
Print
Print "Notice our new directory called 'TESTDIR'?"
Print "(Press a key when ready)"
Key=Inp(2)
Cls
Print "Now copying our 'TEST' file to our new directory"
If Exist("A:TEST") Then
 Name "A:TEST" As "A:\TESTDIR\TEST"
Endif
Cls
Print "Here's a directory of what's in our folder now..."
Files "A:\TESTDIR\*.*"
Pause 100
Kill "A:\TESTDIR\TEST"
Cls
Print "Just killed our test file, here's another directory"
Files "A:\TESTDIR\*.*"
Pause 100
Rmdir "A:\TESTDIR"
Cls
Print "Just removed our directory, see?"
Files "A:*.*"
Print
Print At(26,23);"Press any key to continue..."
Key=Inp(2)
Edit

 That's it for this lesson. Remember that practice makes perfect and the 
only way we all get any better is using all of these enough to at least be 
familiar with what they can do!

 Tom Hayslett
 STar Users Group

