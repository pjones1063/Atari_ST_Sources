                                    GFA
                                  Class 8

     Lets begin by getting some of the remaining 'odds and ends'  commands 
out of the way so we can press on to some routines. First command we'll 
look at is the ABS function and its' purpose is to return the absolute 
value of a numeric variable you supply. Usage is ABS(x) where 'x' is any 
numeric value or variable. The absolute value of any number is always equal 
to or greater than zero. Lets look at an example (EX81):

X=-17
Y=17
Print Abs(X)  !Both will return 17!
Print Abs(Y)
Pause 200
Edit

     Next is the LEN function. Its purpose is to determine the length of a 
string you supply. Usage is LEN(X$) where 'X$' is of course your string or 
character string variable. Look at the following example (EX82):

X$="Hello there !"
Print Len(X$)     !Prints the 'length'(LEN) of 'X$' - 13
Pause 200
Edit

     The above example prints 13 as the LEN function counts every character 
including the spaces and punctuation.

     Next is the LOF function. LOF stands for length of file and it helps 
you determine how long one of your files are. You must first OPEN a channel 
then you may use the LOF function to determine the files length. Run the 
following example and notice that it prints the LOF twice, once when the 
file is empty and then again after we write a short string to the file  
(EX83):

Open "O",#1,"TEST"   !Open channel #1 for a file named 'TEST'
Print Lof(#1)     !Should print 0, file is empty !
Print #1,"Hello there !"    !Put something in it...
Print Lof(#1)       !Now our length is 15 !
Close #1
Pause 200
Edit

     The next 4 commands all function identically and do pretty much the 
same thing just on different parts of variables we provide. We'll look at 
them as a group since they're so closely related. They are LEFT$, RIGHT$, 
MID$ and INSTR. Their purpose is to help you determine the contents of a 
character string variable and the first two (LEFT$ and RIGHT$) are used 
exactly the same way: LEFT$(X$,A) where 'X$' represents the variable you 
provide and 'A' represents any whole number you provide. What it does is 
count 'A' characters to the left in your string variable and return just 
that portion of the string. RIGHT$ works exactly the same except from the 
right side of your string. Perhaps this short example will help (EX84):

X$="Hello there !"
Print Left$(X$,5)  !This prints Hello (the left 5 characters of X$)
Print Right$(X$,7) !This prints there! (the right 7)
Pause 200
Edit

     Simple huh? Okay, lets move on to the third command, MID$. It returns 
a portion of a string you supply but it can take its portion from anywhere 
in the string, even the MIDdle. You use it as follows: MID$(X$,A,B). Notice 
we have one more variable here ('B')? That's because we have to tell it 
where to start counting characters ('A') and how many to count ('B'). Lets 
see MID$ in action (EX85):

X$="Hello there Tom"
Print Left$(X$,5)    !Prints 'Hello'
Print Right$(X$,3)      !Prints 'Tom'
Print Mid$(X$,7,5)     !Prints 'there'
Pause 200
Edit

     MID$ in the above example started at the seventh position in our 
string and took the next 5 characters. Neat huh? Now, for the last of the 4 
commands, INSTR. It's a little different than the first 3 we learned but it 
IS related. Its purpose is to help you determine if a string you provide is 
contained within another string (INSTR - IN STRing). Usage is INSTR(A$,B$) 
and all it does is check to see if 'B$' is present in the 'A$' string and 
if so, returns its position (for further manipulation with LEFT$, RIGHT$ or 
MID$). Lets look at another example (EX86):

A$="This is only a test!"
B$="only"
Print Instr(A$,B$)    !Should print 9
Pause 200
Edit

     It prints 9 because the string 'only' IS in the first string (A$) and 
it begins at the ninth position. Lets go on to a routine now...

     This is the ON BREAK, ON BREAK GOSUB and ON BREAK CONT set of commands 
and they let you control whether the CONTROL + SHIFT + ALTERNATE keys will 
'break' the current program or how the program will react when a user tries 
to 'break' (stop) the program. To render the break keys useless simply 
enter the command ON BREAK CONT as it stands for on break continue and your 
program will just keep chugging away when someone presses the break keys. 
To turn them back on, just enter ON BREAK in your program and after that 
point they will react as usual (stopping the program). The ON BREAK GOSUB 
Procedure just tells your program that if the break keys are pressed, gosub 
to 'Procedure'. This is simpler than it sounds, look at the following 
(EX87):

On Break Gosub Warning  !'Warning' is our procedures name
Do
  Print At(25,11);"Press the 'break' keys anytime..."
  Print At(26,13);"(CONTROL + SHIFT + ALTERNATE)"
Loop
Edit
'
Procedure Warning  !Go here if they press the break keys
  Cls
  Print At(25,11);"You're in the 'Break' Procedure now..."
  Pause 200
  On Break  !Turn the break keys back on...
  Cls
Return

     Another helpful routine is the ON ERROR and ON ERROR GOSUB Procedure 
routines and yep!, you guessed it, they work very much like the previous 
set of routines except they direct your program to a particular location in 
the event an error occurs. Normal errors in GFA (i.e. division by 0), show 
you an error alert and terminate the program. You can prevent this from 
happening by using the ON ERROR commands (this is sometimes referred to as 
'Error trapping' because that's what you're doing, 'trapping' errors and 
sending them to your procedure instead of allowing them to end the 
program). You MUST issue the ON ERROR GOSUB Procedure command BEFORE an 
error occurs for it to work and it's only good for the next occurrence of 
an error (1 time). You can issue the command again and it would then be 
good for the next occurrence of an error. GFA will even let you issue the 
command in your 'error trapping' procedure which effectively makes the 
command good for all errors. If for some reason you want the program to 
return to the normal error handling routines, just issue the ON ERROR 
command and any future errors will work as usual. There are several other 
commands that should (or could), be used in conjunction with the ON ERROR 
GOSUB Procedure commands so lets go over those before getting into an 
example. First is the RESUME command. Its purpose is to tell your program 
where to go to continue processing after an error has occurred. It may ne 
used 1 of 3 ways: RESUME, RESUME NEXT or RESUME 'Label:'  . The first way 
(RESUME), sends your program right back to the line that the error occurred 
in. The second way (RESUME NEXT), sends your program to the line following 
the line the error occurred in. The third way (RESUME 'Label:'), directs 
the program to a 'Label:' just as the GOTO command does. Lets dig into the 
following example (EX88):

X=1       !Set up our counter
On Error Gosub Goof   !Sets up where to go in case of an error
Again:    !A label to return to
Print "Now attempting to divide 3 by 0 ..."
Pause 100   !The pause must be BEFORE the error occurs
Print 3/0 !3 divided by 0? This is an error, lets gosub Goof
Edit
Procedure Goof
  Cls
  Print "Oops, you can't divide by 0 !!!"
  Pause 200
  On Error Gosub Goof  !For our next error
  Inc X    !Increment our counter by 1
  If X=3
    Cls
    Resume Next   !Return to the line AFTER the error (Edit)
  Else     !If X <> 3
    Cls
    Resume Again    !Return to the label 'Again:'
  Endif
Return

     The next function we're going to examine also works with the ON ERROR 
routines and that's the ERR command. It's simply a variable that contains 
the number of the last error that occurred. Appendix B in the GFA Owners 
Manual contains a listing of the error codes by number and what they 
translate to. If an error occurs, you can PRINT ERR to see the number of 
the offending error. Check out this example (EX89):

On Error Gosub Goof
Print 3/0 !Our little divide by 0 error
@Tom   !Cause another error (Procedure not found - 19)
Edit
Procedure Goof
  Cls
  Print "Error number ";Err;" occurred..."
  Pause 200
  On Error Gosub Goof
  Resume Next
Return

     Another function that works with these error trapping routines is 
FATAL and it will only represent 1 of 2 values that indicate whether or not 
the error was FATAL (producing those infamous little cherry bombs across 
your screen). If FATAL contains a value of 0, the error was NOT FATAL but 
if it contains the value -1, kiss it goodbye...These 2 values (-1 and 0) 
are always used by GFA to determine a true/false condition where -1 is true 
and 0 is false. In fact, GFA has the 2 commands TRUE and FALSE for you to 
use if they're easier to remember than the -1 and 0. To see how FATAL, TRUE 
and FALSE work, lets look at another example (EX810):

On Error Gosub Goof
Error 100   !Force error number 100
Error 5
Error 32
Error 109   !Definitely Fatal if it really happens!!
Edit
Procedure Goof
  Cls
  Print At(25,12);"Error number ";Err;" occurred..."
  Pause 100
  If Err=109
    Fatal=True
  Endif
' This 'If' condition is never met because using 'Error 109' doesn't
' really cause the error to happen (or you'd see 9 little bombs  8-)
  If Fatal=True   !Does Fatal = -1?
    Print At(18,12);"This is a 'Fatal' error (causes bombs!)..."
    Pause 200
    Edit
  Else
    Print At(18,12);"This error isn't fatal, you may continue...."
    Pause 100
    On Error Gosub Goof
    Cls
    Resume Next   !Return to line AFTER the error
  Endif
Return

     Enough with the errors (you'll never make any anyway right?).
Another set of functions we'll learn are BIN$, OCT$ and HEX$. They all work 
the same, only the output is different and you use them as follows: BIN$(X) 
(or OCT$(X) or HEX$(X)) where 'X' is any numeric variable you supply. All 
three of these functions, convert your variable (X), to a string containing 
the binary (BIN$), octal (OCT$) or hexidecimal (HEX$) value of 'X'. Have 
you ever wondered what those values looked like? The following example will 
show you a few (EX811):

For A=0 To 29
  Cls
  B$=Bin$(A) !Convert 'A' to binary and store it in B$
  Vsync
  Print At(20,11);"The number is ";A;" ..."
  Print At(20,13);"After BIN$, its' value is ";B$;" ..."
  Pause 25
Next A
For A=0 To 39
  Cls
  B$=Oct$(A)  !Now do it for octal
  Vsync
  Print At(20,11);"The number is ";A;" ..."
  Print At(20,13);"After OCT$, its' value is ";B$;" ..."
  Pause 25
Next A
For A=0 To 59
  Cls
  B$=Hex$(A) !And finally, hexadecimal
  Vsync
  Print At(20,11);"The number is ";A;" ..."
  Print At(20,13);"After HEX$, its' value is ";B$;" ..."
  Pause 25
Next A
Edit

     One final command for this lesson is the DEFLIST function. It stands 
for Define LISTing and it allows you to change the way your program looks 
when you use the LIST command. DEFLIST may be used with either of 2 values, 
0 or any other. Usage is: DEFLIST 0 or DEFLIST 1 depending on what you want 
the LIST command to show. If you use 0, it lists all GFA command words in 
all capitol letters and all variables in lowercase letters and DEFLIST 1 is 
the same as the default (first letters of commands and variables 
capitalized only). The LIST command is used like this: LIST "" and it will 
send a current file listing to your screen. Look at the two screen examples 
of 'LISTing'  used in the next routine (EX812):

Deflist 0   !All capitols
X=1
Top:
Cls
Print "Hello there!"
Print At(24,24);"Press any key to continue..."
Void Inp(2)
List ""
Pause 250
If X=1
  Deflist 1
  Inc X
  Goto Top
Endif
Edit

     That wraps up another lesson, hope you're enjoying soaking up all this 
good stuff!

     Tom Hayslett
     STar Users Group

