                                    GFA
                                  Class 5

     This lesson we'll learn a few more GEM commands and go a little deeper 
into some of the finer things in GFA. First on the agenda is the infamous 
little Alert Box that pops up when least expected. Alert boxes are very 
easy to use in GFA, in fact they're only one line commands. The command is 
(of course) ALERT but there are several variables we need to supply it to 
make it function properly. Proper use is: ALERT A,TEXT$,B,BUTTON_TEXT$,C 
where each of these is as follows: A is a variable between 0 and 3. It 
determines what (if any) predefined shape will appear in your alert box. A 
0 indicates no shape, a 1 indicates an exclamation point, a 2 is a question 
mark and 3 is the stop sign. The next item (TEXT$), is the string of text 
you want displayed in the box. It may have up to 4 lines of text, each 
containing no more than 30 characters (including spaces) and the lines are 
separated by the '|' symbol (right under your delete key). The next 
variable (B), is the number of the button you want to become the default 
button, that is, the button that will be selected if the user just presses 
return. A 0 means no default (this forces a mouse click), 1,2 or 3 indicate 
buttons 1-3 since 3 buttons is the most you may have. The next variable 
(BUTTON_TEXT$), is of course the text for your buttons. Each button may 
have up to 8 characters and again they're separated by the '|' symbol. The 
last variable (C), is any variable you choose to contain either 1,2 or 3 
(depending on which button the user selected) so you can have your program 
perform the appropriate function. Lets look at an example (EX51):

Text$=" This is an example | of a 'STOP' box... "
Alert 3,Text$,1," Great! |So what?",B%
If B%=1
  Alert 1,"Thank you !",0," Bye! ",Void
  Edit
Endif
If B%=2
  Print "You must know this already!"
  Pause 200
  Edit
Endif

     Notice that in our second alert box, we used a variable called VOID 
for our returned value. VOID is a GFA command word and it's used when you 
need to supply a variable but the value returned is not needed. This could 
easily be any other variable but VOID is much faster (especially for the 
compiler).

     The next little GEM we'll learn (pun intended), is the fileselector 
routine. We've all seen them, the box that always pops up when we want to 
save or load a file. Again, this command is easy to use in GFA but you can 
experiment and make it much more powerful when you become familiar with its 
operations and functions. The command usage is: FILESELECT "Path", 
"Filename",TEMP$ where Path is the default path you wish to use (must be at 
least '\*.*') and filename is the default filename or mask (i.e. this may 
be '\*.BAS' to only show you files ending with .BAS, '\*.*' to show all 
files, etc.) and TEMP$ is the variable that will hold the string value of 
the file that was selected (if the user clicks on cancel, TEMP$ will equal 
""). Lets take a closer look at exactly how this works in the following 
example (EX52):

Repeat
  Fileselect "\*.*","*.*",Temp$
  If Temp$=""
    Temp$="Cancel"
  Endif
  Print At(20,10);"You clicked on ";Temp$;""
  Pause 150
  Print At(20,23);"Press right mouse button to exit..."
  Pause 50
  Cls
Until Mousek=2
Edit

     Another command we need to know is the CHAIN command. This command 
allows you to load and run another GFA basic program but be forewarned that 
it deletes the program you currently have in memory. Usage is: CHAIN 
"TEMP$" where TEMP$ is the name of the file you want to load and execute. 
Here's an example (EX53):

Print "Now saving this program..."
Save "TEST.BAS"
Print
Print "Press and hold the left mouse button to exit..."
If Mousek=1
  Edit
Endif
Pause 100
Cls
Print "Now loading and running the program..."
Chain "tes*.bas"

     Notice we used another new command called SAVE? This command allows us 
to save any program currently in memory at any point in our program. Simply 
use SAVE "FILENAME" where FILENAME is what you want to call your program. 
You may also insert a 'P' in front of the SAVE command to make it PSAVE 
(PSAVE stands for Protected SAVE) and your program will work but it can not 
be listed in the editor. This means nobody (even you!) can look at your 
code once it's been PSAVEd so make sure you save a copy regularly first 
(just in case you decide to modify something, trust me). The LOAD command 
also functions the same as the SAVE command, LOAD "FILENAME" loads a 
program into memory.

     Here's a fun command that I know you've all been waiting for, the 
SETCOLOR command. Unlike the COLOR command which only lets us specify which 
color to DRAW in or to make graphics shapes in, the SETCOLOR command 
modifies the actual color registers in the ST in effect making new colors 
for you (sort of like the CONTROL.ACC does). A word of caution here, if you 
use this command and reset colors in a program, try to be courteous and set 
them back to what they were before you changed them. Have you ever used a 
program and when you went back to the desktop you had some really putrid 
looking colors there? Yuk !! You may use the SETCOLOR command either of two 
ways and neither is easy to figure out so here goes: SETCOLOR X,A<B<C where 
X is the number of the color register you want to change (0-15 for low res, 
0-3 for medium res and 0 or 1 for high res) and A,B and C are the values 
for Red, Green and Blue (0-7). These numbers correspond to the little scale 
you see in the control panel when you move the RGB sliders up and down to 
change the colors. The other way to use SETCOLOR is as follows: SETCOLOR 
X,Y. Seems easier huh? X is the same as before but now Y stands for the 
computed color number between 1 and 1911. To compute this number, multiply 
the Red value times 256 and add it to the Green value multiplied by 16 then 
add the Blue value to that! Confused? I told you it wasn't easy...Actually, 
it's not as bad as it sounds. If your Red value is 2, Green value 3 and 
Blue value 6 (remember our sliders 0-7?) the formula would look like this: 
(2 * 256) + (3 *16) + 6 = 566. The easiest way to find out what colors you 
like is to write a short routine like the one below that cycles through all 
of them and lets you pause to write down the numbers of the colors you 
like. Examine the following routine (EX54):

Z=0   Hidem
For A=1 To 1911    !Sets our counter through all colors
  B=1911-A         !This counts backwards
  C=A+27   D=C+39
  Setcolor 0,A     !Medium res color 0
  Setcolor 1,B     !color 1
  Setcolor 2,C     !color 2
  Setcolor 3,D     !color 3
  Deftext Z,0,0,32
  Vsync
  Text 165,90,"Graphics change too!"
  Print At(10,18);"Background color is ";A;""
  Print At(10,20);"Text color is ";D;""
  Print At(21,23);"Press left mouse button to pause..."
  Print At(28,24);"(Right button to exit)"
  Pause 5
  Exit If Mousek=2   !exit if right button pressed
  If Mousek=1        !if left button pressed
    Repeat
    Until Mousek=0   !do nothing (pause) until no button
  Endif
  Inc Z
  If Z=3
    Z=0
  Endif
Next A
Showm
Edit

     Another helpful command is the SETTIME command. This command sets the 
time and date internally to what you specify and it even remains set when 
you exit to the desktop. This could be used very easily for a custom time 
setting routine if you don't have an internal clock. Usage is: SETTIME 
Newtime$,Newdate$ where Newtime$ and Newdate$ are 2 variables you supply to 
hold the time and date as set by the user. The format for entering the time 
is 'HH:MM:SS' or 'HHMMSS' and for the date it's 'DD/MM/YY'. A sample of how 
to use this follows (EX55):

Input "Please enter the correct time (HHMMSS) ",Newtime$
Input "Please enter the correct date (DD/MM/YY) ",Newdate$
Settime Newtime$,Newdate$
Print At(20,10);"Time is now set to ";Time$;""
Print At(20,12);"Date is now set to ";Date$;""
Pause 300
Edit

     Another command I've purposely omitted until now is the GOTO command. 
GOTO enables unconditional branching to any part of your program and there 
is no built in Return as there is with a GOSUB command. You must use a 
LABEL (a name followed by a colon ':') to tell your GOTO where to go. You 
may NOT use a GOTO to jump into or out of FOR...NEXT loops or Procedures 
although you may use them within both. An example may help to clarify this 
(EX56):

Tom:       !Our 'LABEL'
Cls
For X=1 To 5
  Print At(39,11);X
  Pause 40
Next X
Alert 3," Want to do | it again ??? ",1," Yes | No ",C%
If C%=1
  Goto Tom
Else
  Edit
Endif

     Although we've briefly touched on the INPUT command, there are several 
variations to it that allow more flexibility. One of these variations is 
the FORM INPUT command. It simply allows you a little more control over 
what a user may enter into your program. It's used as follows: FORM INPUT 
X,TEMP$ where X is the maximum number of characters you want input and 
TEMP$ is the variable that will hold the input. When a user reaches the 
maximum you've specified, he cannot go any further. A bell will sound and 
all he can do is press return to get his input accepted. Lets look at 
another example (EX57):

Print At(17,11);"How old are you? (Max of 2 characters) ";
Form Input 2,Age$   !Input is limited to 2 characters
Print At(25,15);"You are ";Age$;" years Young!"
Pause 200
Edit

     One final command for this lesson is the ERROR command. Usage is ERROR 
X where X is the number of the error you want to simulate. Why would you 
ever need this? Try the last example and see! (EX58):

Error 100
Void Inp(2)
Edit

     Until next time...

     Tom Hayslett
     STar Users Group

