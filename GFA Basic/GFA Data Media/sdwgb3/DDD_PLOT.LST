' DDD_PLOT.LST
'
rez%=XBIOS(4)
IF rez%<>2
  a1$="  3-D Plotter is intended|"
  a2$="for High resolution Monitors|"
  a3$="    but may be used in|"
  a4$="    Medium Resolution"
  ALERT 2,a1$+a2$+a3$+a4$,1,"Ok|Cancel",b
  IF b=2
    EDIT
  ENDIF
ENDIF
factor=rez%/2 ! Adjustment factor for medium and high resolution
'
adjust_parameter
three_d_plotter
finish
EDIT
'
'
PROCEDURE adjust_parameter
  output$="screen"  ! Output$ = "metafile" or "printer" or "screen"
  hidden!=TRUE  ! Hidden-Line Model or wire-frame drawing
  plane!=FALSE  ! As Block or just the Function plane?
  auto_scal!=FALSE  ! Scale data axis automatically for Min-Max
  output_vertical!=FALSE  ! Output in Vertical format (landscape)
  x_step=20 ! Distance of axis subdivisions of x axis
  y_step=20 ! Distance of axis subdivisions of y axis
  wx=35 ! Turning angle of x axis
  wy=45 ! Turning angle of y axis
  xg%=200 ! Size along x axis (in Pixels)
  yg%=200*factor  ! Size along y axis (in Pixels)
  zg%=200*factor  ! Size along z axis (in Pixels)
  label%=2  ! Label every x grouping (0 for none)
  from_x=0  ! Beginning of x axis
  to_x=360  ! End of x axis
  from_y=0  ! Beginning of y axis
  to_y=360*factor ! End of y axis
  from_z=-2 ! Beginning of z axis
  to_z=2  ! End of z axis
  xpos%=320 ! Position along x axis of the screen
  ypos%=280*factor  ! Position along y axis of the screen
  IF factor=0.5
    SUB ypos%,20
  ENDIF
  g_mem%=400000 ! Storage area for one graphic page
  '   ! With : FX-85 about 400 Kb
  ' !        Atari-Laser Printer about 1.4 Mb.
  '
  lines%=(to_x-from_x)/x_step+1 ! Number of subdivisions of x axis
  columns%=(to_y-from_y)/y_step+1 ! Number of subdivisions of y axis
  '
  DIM points(lines%,columns%) ! Array of points to plot
  '
  PRINT AT(2,2);"Values are being calculated for Function....."
  FOR cnt%=1 TO lines%
    x=(cnt%-1)*x_step+from_x  ! Actual x value
    FOR j%=1 TO columns%
      y=(j%-1)*y_step+from_y  ! Actual y value
      '
      ' -----------------------
      ' THE FUNCTION
      points(cnt%,j%)=COS(RAD(x))-SIN(RAD(y))
      ' -----------------------
    NEXT j%
  NEXT cnt%
  '
  ' if output to screen
  ' the resolution is adjusted.
  ' factor=1 for hi res
  ' .5 for medium
  IF output$="screen"
    x_res%=640
    y_res%=400*factor
    ' ! 640 by 400*factor
  ELSE
    ' Check for GDOS installed
    IF NOT GDOS?
      ALERT 1,"GDOS not installed.",1," Return ",a%
      EDIT
    ENDIF
    '
    ' Parameter for open_workstation:
    ' 21 for printer
    ' 31 for metafile
    IF output$="printer"
      output%=21
    ELSE
      output%=31
    ENDIF
    '
    ' Reserve memory for Graphics page
    RESERVE FRE(0)-g_mem%
    h%=V_OPNWK(output%) ! open_workstation
    '
    ' if V_OPNWK failed
    IF h%=0
      a1$="OPEN WORKSTATION ERROR:|"
      a2$=" Handle was not found|"
      a3$=" or not enough memory."
      ALERT 3,a1$+a2$+a3$,1," Return ",a%
      RESERVE FRE(0)+g_mem%
      EDIT
    ELSE
      ' Pass Handle and
      ' determine Graphics resolution.
      V~H=h%
      x_res%=INTOUT(0)
      y_res%=INTOUT(1)
    ENDIF
    ' Clear Graphics page
    '   ~V_CLRWK()
    ' ENDIF for output$<>"screen"
  ENDIF
  '
  ' If output in Vertical format,
  ' swap x and y axis.
  IF output_vertical!
    SWAP x_res%,y_res%
  ENDIF
  ' Calculate enlargement factor
  ver=MIN(x_res%/640,y_res%/200) !400)
  '
  ' Delete screen for output or
  ' print output ready message
  ' and then process.
  IF output$="screen"
    CLS
  ELSE
    PRINT AT(1,4);" Graphic Output is being calculated and processed...."
    PRINT AT(1,6);" (Graphic Resolution"'x_res%'"mal"'y_res%;")"
  ENDIF
  '
  IF output$<>"screen" OR output_vertical! OR plane!
    label%=0
    ' Do not label if the output is not
    ' on the screen in vertical format,
    ' or as a plane.
  ENDIF
RETURN
'
PROCEDURE three_d_plotter
  LOCAL i1p,j1p,p180,xf,yf,w,bc%,maxi,mini,ma_x%,ma_y%,mi_x%,mi_y%,to%
  LOCAL cnt%,j%,p_per_line,p_per_column,p_per_unit,ic%,jc%,s,c,k%,last%
  '
  ' if automatic Min-Max scaling of the
  ' point values, determine min and max
  ' as well as the position in the point
  ' matrix.
  IF auto_scal!
    maxi=points(1,1)
    mini=points(1,1)
    ma_x%=1
    mi_x%=1
    ma_y%=1
    mi_y%=1
    FOR cnt%=1 TO lines%
      FOR j%=1 TO columns%
        IF maxi<points(cnt%,j%)
          maxi=points(cnt%,j%)
          ma_x%=cnt%
          ma_y%=j%
        ENDIF
        IF mini>points(cnt%,j%)
          mini=points(cnt%,j%)
          mi_x%=cnt%
          mi_y%=j%
        ENDIF
      NEXT j%
    NEXT cnt%
    ' The new values to scale
    ' the point axis
    from_z=mini
    to_z=maxi
  ENDIF
  '
  ' The scaling factors for the three
  ' axes of the drawing. The names stand
  ' for Pixels Per Unit.
  p_per_line=xg%/lines%
  p_per_column=zg%/columns%
  p_per_unit=yg%/(to_z-from_z)
  '
  ' The zero array element is equal to
  ' the minimum size in order to draw
  ' the 'apron' easily if desired.
  FOR cnt%=0 TO lines%
    points(cnt%,0)=from_z
  NEXT cnt%
  FOR j%=1 TO columns%
    ' The same along the other array dimensions.
    points(0,j%)=from_z
  NEXT j%
  '
  ' Values that are larger than the
  ' maximum or smaller than the minimum
  ' to be displayed! are set to MIN or
  ' MAXpoint.
  FOR cnt%=0 TO lines%
    FOR j%=0 TO columns%
      points(cnt%,j%)=MIN(points(cnt%,j%),to_z)
      points(cnt%,j%)=MAX(points(cnt%,j%),from_z)
      SUB points(cnt%,j%),from_z
    NEXT j%
  NEXT cnt%
  '
  ' Array for the polygon corner points
  ' and the coordinates for the
  ' labels.
  DIM px(4),py(4),pz(4)
  DIM xscnt%(lines%),yscnt%(lines%)
  DIM xsj%(columns%),ysj%(columns%)
  '
  ' Variables for the label coordinates
  ic%=lines%+1
  jc%=columns%+1
  ' Parameters for turning the object
  sy=SIN(RAD(wy))
  cy=COS(RAD(wy))
  sx=SIN(RAD(wx))
  cx=COS(RAD(wx))
  ' Size of plot divided by two.
  DIV xg%,2
  DIV yg%,2
  DIV zg%,2
  '
  ' If only the 'apron' should be drawn
  ' run to 1, otherwise, to 0.
  IF plane!
    to%=1
  ELSE
    to%=0
  ENDIF
  '
  ' Loop through all points in the
  ' matrix and expand the Polygon corner
  ' points coordinates.
  FOR cnt%=lines%-1 DOWNTO to%
    i1p=cnt%*p_per_line+p_per_line
    FOR j%=columns%-1 DOWNTO to%
      j1p=j%*p_per_column+p_per_column
      '
      ' The first polygon corner point.
      IF cnt%=0
        px(0)=i1p
      ELSE
        px(0)=cnt%*p_per_line
      ENDIF
      py(0)=yg%-points(cnt%,j%)*p_per_unit
      IF j%=0
        pz(0)=j1p
      ELSE
        pz(0)=j%*p_per_column
      ENDIF
      '
      ' The second Polygon corner point.
      px(1)=i1p
      py(1)=yg%-points(cnt%+1,j%)*p_per_unit
      IF j%=0
        pz(1)=j1p
      ELSE
        pz(1)=j%*p_per_column
      ENDIF
      '
      ' The third corner point.
      px(2)=i1p
      py(2)=yg%-points(cnt%+1,j%+1)*p_per_unit
      pz(2)=j1p
      '
      IF cnt%=0
        px(3)=i1p
      ELSE
        px(3)=cnt%*p_per_line
      ENDIF
      py(3)=yg%-points(cnt%,j%+1)*p_per_unit
      pz(3)=j1p
      '
      ' Turning point of coordinates
      ' around the x axis.
      FOR k%=0 TO 3
        vx=px(k%)-xg%
        vz=pz(k%)-zg%
        px(k%)=(cy*vx-sy*vz+xpos%)*ver
        pz(k%)=sy*vx+cy*vz+zg%
      NEXT k%
      ' Turning point of coordinates
      ' around the y axis.
      FOR k%=0 TO 3
        vy=py(k%)-yg%
        vz=pz(k%)-zg%
        py(k%)=(cx*vy-sx*vz+ypos%)*ver
      NEXT k%
      '
      ' The last polygon corner point
      ' should be equal to the first.
      px(4)=px(0)
      py(4)=py(0)
      '
      ' If output is vertical then
      ' swap the x and y
      IF output_vertical!
        FOR last%=0 TO 4
          SWAP px(last%),py(last%)  ! coordinates.
        NEXT last%
      ENDIF
      '
      ' If output should be done with
      ' hidden lines, use POLYFILL,
      ' otherwise, use POLYLINE.
      IF hidden!
        DEFFILL 1,0
        POLYFILL 5,px(),py()
      ELSE
        POLYLINE 5,px(),py()
      ENDIF
      '
      ' If the minimum or maximum
      ' is here mark it.
      IF auto_scal!
        DEFFILL 1,1
        IF points(cnt%+1,j%+1)==0
          PCIRCLE px(2),py(2),3
        ENDIF
        IF points(cnt%+1,j%+1)==maxi-from_z
          PCIRCLE px(2),py(2),3
        ENDIF
      ENDIF
      '
      ' Mark the label coordinates
      IF j%=0
        DEC ic%
        xscnt%(ic%)=px(1)
        yscnt%(ic%)=py(1)
      ENDIF
      IF cnt%=0
        DEC jc%
        xsj%(jc%)=px(3)
        ysj%(jc%)=py(3)
      ENDIF
      '
    NEXT j%
  NEXT cnt%
  '
  ' Complete labeling.
  ' (only if output$ = "screen",
  ' output_vertical!=FALSE and
  ' plane!=FALSE)
  IF label%<>0
    DEFTEXT 1,0,0,4
    bc%=label%-1
    xf=(to_x-from_x)/(lines%-1)
    FOR cnt%=1 TO lines%
      INC bc%
      IF bc%=label%
        bc%=0
        w=TRUNC(from_x*10000)/10000
        LINE xscnt%(cnt%),yscnt%(cnt%),xscnt%(cnt%)+(20*ver),yscnt%(cnt%)
        TEXT xscnt%(cnt%)+(20+2)*ver,yscnt%(cnt%)+2*ver,STR$(w)
      ENDIF
      ADD from_x,xf
    NEXT cnt%
    '
    yf=(to_y-from_y)/(columns%-1)
    bc%=label%-1
    FOR j%=1 TO columns%
      INC bc%
      IF bc%=label%
        bc%=0
        w=TRUNC(from_y*10000)/10000
        LINE xsj%(j%),ysj%(j%),xsj%(j%)-20*ver,ysj%(j%)
        TEXT xsj%(j%)-20*ver-LEN(STR$(w))*6,ysj%(j%)+2*ver,STR$(w)
      ENDIF
      ADD from_y,yf
    NEXT j%
  ENDIF
  '
  IF auto_scal!
    PRINT AT(1,1);"Drawn Minimum:"'mini
    PRINT AT(1,2);"Drawn Maximum:"'maxi
  ENDIF
  '
  ERASE px(),py(),pz(),xscnt%(),yscnt%(),xsj%(),ysj%()
RETURN
PROCEDURE finish
  IF output$="screen"
    ~INP(2)
  ELSE
    ~V_UPDWK()
    ~V_CLSWK()
    RESERVE FRE(0)+g_mem%
    ALERT 1,"Output completed.",1," Return ",a%
  ENDIF
RETURN
