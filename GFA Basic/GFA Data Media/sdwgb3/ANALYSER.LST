' ANALYSER.LST
'
' reserve storage space
RESERVE FRE(0)-33000
'
dimension
' procedure call for the main menu
@choose
' if necessary, delete resource
~RSRC_FREE()
' release storage space
RESERVE FRE()+33000
EDIT
'
PROCEDURE dimension
  DIM word&(20)   ! RSC Header, 18 Words
  DIM tree_name$(50)      ! Tree name
  DIM tree_sum%(50)
  DIM ob_name$(1000)      ! Object name
  DIM obtype$(12) ! Object type
  DIM obflag$(8)  ! Object flags
  DIM num_obj%(50)        ! Number of Objects per tree
  '
  obtype$(0)="G_BOX"      ! Text definitions
  obtype$(1)="G_TEXT"
  obtype$(2)="G_BOXTEXT"
  obtype$(3)="G_IMAGE"
  obtype$(4)="G_USERDEF"
  obtype$(5)="G_IBOX"
  obtype$(6)="G_BUTTON"
  obtype$(7)="G_BOXCHAR"
  obtype$(8)="G_STRING"
  obtype$(9)="G_FTEXT"
  obtype$(10)="G_FBOXTEXT"
  obtype$(11)="G_ICON"
  obtype$(12)="G_TITLE"
  '
  obflag$(0)="selectable" ! More text definitions
  obflag$(1)="default"
  obflag$(2)="exit"
  obflag$(3)="editable"
  obflag$(4)="rbutton"
  obflag$(5)="lastob"
  obflag$(6)="touchexit"
  obflag$(7)="hidetree"
  obflag$(8)="indirect"
RETURN
'
PROCEDURE choose
  choose_line     ! draws command line
  a_out!=FALSE
  '
  REPEAT
    '
    ' Branches after key press to applicable procedures
    ' Permitted keys are the numbers 1 through 5, the  <Esc> key
    ' and Function Keys F1 - F5 and F10
    '
    SELECT INP(2)
    CASE 27,196
      ' <Esc> or <F10>        ! End program
      ALERT 2,"End Program?",1,"Ok|Cancel",r%
      IF r%=1
        a_out!=TRUE
      ENDIF
    CASE 49,187
      ' <1> or <F1>   ! Load RSC file
      op_rcs
    CASE 50,188
      ' <2> or <F2>   ! Save LST file
      IF file_ok!
        store_help_file
        choose_line
      ELSE
        ALERT 3,"No RSC File|was loaded!",1,"Cancel",r%
      ENDIF
    CASE 51,189
      ' <3> or <F3>   ! show info
      IF file_ok!
        show_info
        choose_line
      ELSE
        ALERT 3,"No RSC File|was loaded!",1,"Cancel",r%
      ENDIF
    CASE 52,190
      ' <4> or <F4>   ! Display in VIEW Mode
      IF file_ok!
        view_mode
        choose_line
      ELSE
        ALERT 3,"No RSC File|was loaded!",1,"Cancel",r%
      ENDIF
    CASE 53,191
      ' <5> or <F5>   ! process in WORK mode
      IF file_ok!
        work_mode
        choose_line
      ELSE
        ALERT 3,"No RSC File|was loaded!",1,"Cancel",r%
      ENDIF
    DEFAULT
      ALERT 3,"Unknown Command",1,"Cancel",r%
    ENDSELECT
  UNTIL a_out!=TRUE
  '
RETURN
'
PROCEDURE choose_line
  CLS
  PRINT CHR$(27)+"p";     ! turn on inverse print
  PRINT " LOAD RSC <F1> |";
  PRINT " SAVE LST <F2> |";
  PRINT " INFO <F3> |";
  PRINT " VIEW <F4> |";
  PRINT " WORK <F5> |";
  PRINT " QUIT <F10> ";
  PRINT CHR$(27)+"q";     ! turn off inverse print
RETURN
PROCEDURE op_rcs
  rsc_file$=""
  FILESELECT "\*.RSC","",rsc_file$
  '
  IF rsc_file$="" OR RIGHT$(rsc_file$,1)="\"
    ALERT 1,"No RSC file |is being loaded!",1,"Cancel",r%
  ELSE IF NOT EXIST(rsc_file$)
    ALERT 3,"RSC File not found!",1,"Cancel",r%
  ELSE
    read_header
    '
    IF word&(18)<>l_rsc_file%
      ALERT 3,"Not valid|RSC File Format!",1,"Cancel",r%
    ELSE IF word&(12)<1
      ALERT 3,"Not Object Tree Structure!",1,"Cancel",r%
    ELSE
      '
      ~RSRC_FREE()
      file_ok!=RSRC_LOAD(rsc_file$)
      IF file_ok!
        num_tree%=word&(12)
        init_name
        ALERT 1,"RSC File Loaded!",1,"Continue",r%
      ELSE
        ALERT 3,"Error during Load!",1,"Cancel",r%
      ENDIF
    ENDIF
  ENDIF
RETURN
PROCEDURE read_header
  '
  ' read the first 18 words of the RSC file
  ' and determine the length of the file
  '
  OPEN "I",#1,rsc_file$
  l_rsc_file%=LOF(#1)
  BGET #1,V:word&(1),36
  CLOSE #1
RETURN
PROCEDURE init_name
  IF file_ok!
    k%=0
    FOR cnt%=0 TO (num_tree%-1)
      tree_sum%(cnt%)=k%      ! Index of all objects
      tree_name$(cnt%)="tree_"+STR$(cnt%)     ! Set Tree name
      hd_out!=FALSE
      ~RSRC_GADDR(0,cnt%,tree_adr%)
      j%=0
      '
      REPEAT
        ob_name$(k%)="obj_"+STR$(cnt%)+"."+STR$(j%)     ! Object name
        IF BTST(OB_FLAGS(tree_adr%,j%),5)       ! Is Bit 5 set?
          num_obj%(cnt%)=j%       ! Number of Objects in the tree
          hd_out!=TRUE
        ENDIF
        INC j%
        INC k%
      UNTIL hd_out!
    NEXT cnt%
  ENDIF
RETURN
PROCEDURE show_info
  PRINT CHR$(27)+"p";     ! Turn on inverse print
  sp%=10
  PRINT AT(sp%,4);"|  ";rsc_file$
  PRINT AT(sp%,5);"|  File Length   ";
  PRINT USING "| ##### |",word&(18)
  PRINT AT(sp%,6);"|  Object Trees         |";
  PRINT USING "    ### |",word&(12)
  PRINT AT(sp%,7);"|  Object               |";
  PRINT USING "    ### |",word&(11)
  PRINT AT(sp%,9);"|  TEDINFO Structures  |";
  PRINT USING "    ### |",word&(13)
  PRINT AT(sp%,10);"|  ICONBLK Structures  |";
  PRINT USING "    ### |",word&(14)
  PRINT AT(sp%,11);"|  BITBLK  Structures  |";
  PRINT USING "    ### |",word&(15)
  PRINT AT(sp%,13);"|  Free Strings         |";
  PRINT USING "    ### |",word&(16)
  PRINT AT(sp%,14);"|  Free Images          |";
  PRINT USING "    ### |",word&(17)
  '
  FOR cnt%=0 TO (num_tree%-1)
    PRINT AT(sp%,cnt%+16);USING "|  Tree ###",cnt%;
    PRINT USING "  With ### Objects  |",num_obj%(cnt%)+1
  NEXT cnt%
  '
  PRINT CHR$(27)+"q";     ! Turn off inverse print
  ~INP(2)
RETURN
PROCEDURE view_mode
  cnt%=0
  count!=TRUE
  '
  REPEAT
    '
    IF count!
      ~RSRC_GADDR(0,cnt%,tree_adr%)
      ~FORM_CENTER(tree_adr%,x%,y%,w%,h%)
      DEFFILL 0,0,0
      PBOX 0,0,639,199-17
      OB_Y(tree_adr%,0)=0
      ~OBJC_DRAW(tree_adr%,0,10,0,0,639,199)
      DEFFILL 1,1,1
      PBOX 0,199-16,639,199
      PRINT CHR$(27)+"p";
      LOCATE 25,1
      PRINT USING "tree ###, remaining ###",cnt%,num_tree%-1-cnt%;
      PRINT "    previous |-|    next |+|       quit |Esc|";
      PRINT CHR$(27)+"q";
    ENDIF
    '
    w%=INP(2)
    SELECT w%       ! Keyboard dependent branch
    CASE &H2B       ! + Key pressed
      IF cnt%<(num_tree%-1)
        INC cnt%
        count!=TRUE
      ELSE
        count!=FALSE
        SOUND 1,15,3,1,16
        SOUND 1,0,0,0,0
      ENDIF
    CASE &H2D       ! - Key pressed
      IF cnt%>0
        DEC cnt%
        count!=TRUE
      ELSE
        count!=FALSE
        SOUND 1,15,3,1,16
        SOUND 1,0,0,0,0
      ENDIF
    ENDSELECT
    ' Cancel, when <Esc> is pressed
  UNTIL w%=27
  choose_line
RETURN
PROCEDURE work_mode
  menu_tree!=FALSE
  alt_obj%=65535
  PRINT
  INPUT "Which Tree number ";tree%
  CLS
  ' determine Tree address
  IF tree%>=0 AND tree%<num_tree%
    ~RSRC_GADDR(0,tree%,tree_adr%)
    '
    ' if third object is G_TITLE,
    ' draw Menu Tree
    IF OB_TYPE(tree_adr%,3)=32
      ~MENU_BAR(tree_adr%,1)
      ' Check menu, then delete it
      m_tree
      ~MENU_BAR(tree_adr%,0)
    ELSE
      ~FORM_CENTER(tree_adr%,x%,y%,w%,h%)
      OB_Y(tree_adr%,0)=0
      ~OBJC_DRAW(tree_adr%,start_ob%,10,0,0,639,199)
      d_tree
      '
      IF alt_obj%<>65535
        ~OBJC_CHANGE(tree_adr%,alt_obj%,0,0,0,639,199,0,1)
      ENDIF
    ENDIF
  ELSE
    ALERT 3,"Not valid Tree number!",1," Cancel ",r%
  ENDIF
  choose_line     ! return to main menu
RETURN
PROCEDURE m_tree
  '
  ' turn off DISABLED for all objects
  obj%=-1
  REPEAT
    INC obj%
    OB_STATE(tree_adr%,obj%)=BCLR(OB_STATE(tree_adr%,obj%),3)
  UNTIL BTST(OB_FLAGS(tree_adr%,obj%),5)  ! until last_ob
  '
  ON MENU GOSUB dummy
  DO UNTIL INKEY$=CHR$(27)
    ON MENU
    '
    IF MOUSEK AND 1
      '
      ON MENU
      obj%=MENU(5)    ! Object number of selected object
      title%=MENU(4)  ! Object number of the menu title above it
      ot%=OB_TYPE(tree_adr%,obj%)
      of%=OB_FLAGS(tree_adr%,obj%)
      alt_obj%=obj%
      ob_index%=obj%+tree_sum%(tree%)
      '
      GRAPHMODE 1
      DEFFILL 1,1,1
      PBOX 0,199-32,639,199
      LOCATE 24,1
      PRINT CHR$(27)+"p";     ! turn on inverse print mode
      '
      PRINT "ob_type: ";obtype$(ot%-20);      ! Object type
      PRINT USING "Object No.: ### ",obj%;    ! Object number
      PRINT '''ob_name$(obj%)         ! Object name
      PRINT "ob_flags: ";     ! and Object flag
      '
      ' Object flags
      FOR cnt%=0 TO 8
        IF BTST(of%,cnt%)
          PRINT obflag$(cnt%)''
        ENDIF
      NEXT cnt%
      '
      ' If right mouse button is also
      ' pressed, find Object name
      IF MOUSEK AND 2
        PRINT AT(50,24);"New Name: ";ob_index%'
        INPUT ob_name$(ob_index%)
      ENDIF
      ~MENU_TNORMAL(tree_adr%,title%,1)
      '
      ' Turn off inverse print mode
      PRINT CHR$(27)+"q";
    ENDIF
  LOOP
RETURN
PROCEDURE d_tree
  DO UNTIL INKEY$=CHR$(27)
    MOUSE mx%,my%,mk%
    '
    IF mk%<>0
      obj%=OBJC_FIND(tree_adr%,0,7,mx%,my%)
      ot%=OB_TYPE(tree_adr%,obj%)
      of%=OB_FLAGS(tree_adr%,obj%)
      '
      ' Valid object number? (not equal to -1)
      IF obj%<>65535
        ob_index%=obj%+tree_sum%(tree%)
        '
        ' Selected objects are inverted with
        ' objc_change and are displayed
        ' normally when calling other
        ' objects
        '
        IF alt_obj%<>65535
          ~OBJC_CHANGE(tree_adr%,alt_obj%,0,0,0,639,199,0,1)
        ENDIF
        '
        ~OBJC_CHANGE(tree_adr%,obj%,0,0,0,639,199,1,1)
        '
        GRAPHMODE 1
        DEFFILL 1,1,1
        PBOX 0,199-32,639,199
        PRINT AT(1,24);
        ' Turn on inverse print mode
        PRINT CHR$(27)+"p";
        '
        PRINT "ob_type: ";obtype$(ot%-20);
        PRINT USING "  Object No.: ### ",obj%;
        PRINT "   ";ob_name$(ob_index%)
        PRINT "ob_flags: ";
        '
        FOR cnt%=0 TO 8
          IF BTST(of%,cnt%)
            PRINT obflag$(cnt%);"  ";
          ENDIF
        NEXT cnt%
        '
        IF mk% AND 2
          PRINT AT(50,24);"New Name: ";
          INPUT ob_name$(ob_index%)
        ENDIF
        '
        ' Turn off inverse print mode
        PRINT CHR$(27)+"q";
        alt_obj%=obj%
      ENDIF
    ENDIF
  LOOP
RETURN
PROCEDURE store_help_file
  error_1$=CHR$(34)+"RSC FIle not found!"+CHR$(34)
  error_2$=CHR$(34)+"Error during Load|of RSC File!"+CHR$(34)
  can$=CHR$(34)+"Cancel"+CHR$(34)
  '
  header_lst$=""
  FILESELECT "\*.LST","",header_lst$
  '
  IF header_lst$<>"" AND RIGHT$(header_lst$,1)<>"\"
    '
    OPEN "O",#1,header_lst$
    ALERT 2,"Save Procedure rsc_init too?",1,"Yes|No",r%
    IF r%=1
      PRINT #1,"PROCEDURE rsc_init"
      PRINT #1,"IF EXIST("+CHR$(34);rsc_file$;CHR$(34)+")"
      PRINT #1,"RESERVE FRE(0)-33000"
      PRINT #1,"~RSRC_FREE()"
      PRINT #1,"file_ok!=RSRC_LOAD("+CHR$(34);rsc_file$;CHR$(34)+")"
      PRINT #1,"ELSE"
      PRINT #1,"ALERT 3,";error_1$;",1,";can$;",r_1%"
      PRINT #1,"EDIT"
      PRINT #1,"IF NOT file_ok!"
      PRINT #1,"ALERT 3,";error_2$;",1,";can$;",r_2%"
      PRINT #1,"ENDIF"
      PRINT #1,"ENDIF"
      PRINT #1,"RETURN"
    ENDIF
    '
    PRINT #1,"PROCEDURE rsc_obj_names"
    k%=0
    FOR cnt%=0 TO (num_tree%-1)
      PRINT #1,"  ~RSRC_GADDR(0,";STR$(cnt%);",";tree_name$(cnt%);".adr%)"
      PRINT #1,"  '"
      PRINT #1,"  ' tree ";STR$(cnt%)
      PRINT #1,"  '"
      PRINT #1,"  ";tree_name$(cnt%);"%=";STR$(cnt%)
      PRINT #1,"  '"
      '
      FOR j%=0 TO num_obj%(cnt%)
        PRINT #1,"      ";ob_name$(k%);"%=";STR$(j%)
        INC k%
      NEXT j%
    NEXT cnt%
    '
    PRINT #1,"RETURN"
    CLOSE #1
    ALERT 1,"RSC File stored.",1,"Continue",r%
  ELSE
    ALERT 1,"RSC File|was not stored!",1,"Continue",r%
  ENDIF
RETURN
PROCEDURE dummy
RETURN
