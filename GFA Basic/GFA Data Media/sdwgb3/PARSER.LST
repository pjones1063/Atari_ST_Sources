' PARSER.LST
' this is a new improved version, than that which appears in the book dated July 1989.
'
num_var|=3
DIM var$(num_var|)
DIM value(num_var|)
var$(1)="X"
var$(2)="Y"
var$(3)="Z"
value(1)=196
value(2)=3
value(3)=-4
'
function$="3+((87-x)+INT(10/y))*2-z"
'
parser
'
PRINT
PRINT " Parser VALUE:"'erg
PRINT
PRINT " Parser message:"'report$
'
PROCEDURE parser
  LOCAL i&,j&,k&,characters$,alt_characters$,check$,func_name$
  LOCAL k_beg&,k_end&,k_len&,k_term$,k_value,function_found!
  LOCAL left_expression$,right_expression$,left_term$
  LOCAL l_eval$,pos&,const&,finished!,num_operators&
  LOCAL left_value,left_rest$,right_value,right_rest$
  num_operators|=4
  DIM operator$(num_operators|)
  functions_value(function$,num_var|,var$(),value())
RETURN
'
PROCEDURE functions_value(function$,num_variables|,VAR variable$(),value())
  operator$(1)="^"
  operator$(2)="*/"
  operator$(3)="\"   !modulo
  operator$(4)="#~"  !plus und minus after monadic filtering
  '
  ' predefined return notification (error notification)
  report$="ok"
  '
  function$=UPPER$(function$)
  replace_variables(function$)
  filter_monadic(function$)
  erg=@f_evaluate(function$)
RETURN
'
PROCEDURE replace_variables(VAR replace$)
  FOR i&=1 TO num_variables|
    replace(variable$(i&),STR$(value(i&)),replace$)
  NEXT i&
RETURN
'
PROCEDURE replace(search$,replace$,VAR org$)
  pos&=INSTR(org$,search$)
  WHILE pos&
    org$=LEFT$(org$,pos&-1)+replace$+MID$(org$,pos&+LEN(search$))
    pos&=INSTR(org$,search$)
  WEND
RETURN
'
PROCEDURE filter_monadic(VAR eval$)
  ' Evaluate double monadic operators
  finished!=FALSE
  REPEAT
    IF INSTR(eval$,"++")
      replace("++","+",eval$)
    ELSE IF INSTR(eval$,"--")
      replace("--","+",eval$)
    ELSE IF INSTR(eval$,"+-")
      replace("+-","-",eval$)
    ELSE IF INSTR(eval$,"-+")
      replace("-+","-",eval$)
    ELSE IF INSTR(eval$,"()")
      report$="Illegal setting of parenthesis"
      eval$="1"
    ELSE
      finished!=TRUE
    ENDIF
  UNTIL finished!
  '
  ' Replace + and - with # and ~, if they are not monadic operators
  alt_characters$="*"  ! initialise with operator
  FOR i&=1 TO LEN(eval$)
    characters$=MID$(eval$,i&,1)
    IF characters$="+" OR characters$="-"
      IF INSTR("#~*/^(\",alt_characters$)=0
        IF characters$="+"
          MID$(eval$,i&)="#"
        ELSE
          MID$(eval$,i&)="~"
        ENDIF
      ENDIF
    ENDIF
    alt_characters$=MID$(eval$,i&,1)
  NEXT i&
RETURN
'
FUNCTION f_evaluate(eval$)
  ' Analyse parathesis and functions
  pos&=INSTR(eval$,")")
  WHILE pos&
    ' search for belonging opening parenthesis
    FOR i&=pos&-1 DOWNTO 1
      characters$=MID$(eval$,i&,1)
      EXIT IF characters$="("
    NEXT i&
    IF i&<1
      report$="Missing opening parathesis"
      RETURN 1
    ENDIF
    k_beg&=i&                            ! begining pos of parenthesis
    k_end&=pos&                          ! end pos of parenthesis
    k_len&=k_end&-k_beg&-1               ! length of parethesis expression
    k_term$=MID$(eval$,k_beg&+1,k_len&)  ! expression in parenthesis
    k_value=@analyse_operators(k_term$)
    '
    ' in case function name before parenthesis
    IF k_beg&>=3
      func_name$=MID$(eval$,k_beg&-3,3)
    ELSE
      func_name$=""
    ENDIF
    function_found!=TRUE
    transform
    '
    ' ersetze den Klammerterm durch seinen Wert
    IF function_found!
      eval$=LEFT$(eval$,k_beg&-4)+STR$(k_value)+MID$(eval$,k_end&+1)
    ELSE
      eval$=LEFT$(eval$,k_beg&-1)+STR$(k_value)+MID$(eval$,k_end&+1)
    ENDIF
    pos&=INSTR(eval$,")")
  WEND
  '
  IF INSTR(eval$,"(")
    report$="Fehlende schliežende Klammer"
    RETURN 1
  ENDIF
  '
  ' dann Ausdruck ohne Klammern ausvalueen
  op_aus=@analyse_operators(eval$)
  RETURN op_aus
ENDFUNC
'
PROCEDURE transform
  IF func_name$="INT"
    k_value=INT(k_value)
  ELSE IF func_name$="FIX"
    k_value=FIX(k_value)
  ELSE IF func_name$="FRC"   ! FRAC-Function
    k_value=FRAC(k_value)
  ELSE IF func_name$="ABS"
    k_value=ABS(k_value)
  ELSE IF func_name$="SGN"
    k_value=SGN(k_value)
  ELSE IF func_name$="RND"
    k_value=RND(k_value)
  ELSE IF func_name$="SQR"
    k_value=SQR(k_value)
  ELSE IF func_name$="EXP"
    k_value=EXP(k_value)
  ELSE IF func_name$="LGN"   ! natural Logarithms
    k_value=LOG(k_value)
  ELSE IF func_name$="LOG"   ! base 10 Logarithms
    k_value=LOG10(k_value)
  ELSE IF func_name$="SIN"
    k_value=SIN(k_value)
  ELSE IF func_name$="COS"
    k_value=COS(k_value)
  ELSE IF func_name$="TAN"
    k_value=TAN(k_value)
  ELSE IF func_name$="ATN"
    k_value=ATN(k_value)
  ELSE IF func_name$="RAD"
    k_value=RAD(k_value)
  ELSE IF func_name$="DEG"
    k_value=DEG(k_value)
  ELSE IF func_name$="FAK"   ! self defined factorial
    IF k_value<=100
      erg=1
      FOR i&=1 TO k_value
        MUL erg,i&
      NEXT i&
      k_value=erg
    ELSE
      report$="Factorial paremeter too large"
    ENDIF
  ELSE
    function_found!=FALSE
  ENDIF
RETURN
'
FUNCTION analyse_operators(op_string$)
  FOR i&=1 TO num_operators|
    j&=0
    REPEAT
      INC j&
      characters$=MID$(op_string$,j&,1)
      IF INSTR(operator$(i&),characters$)  ! character at j position an operator?
        '
        right_expression$=""
        FOR k&=j&+1 TO LEN(op_string$)
          check$=MID$(op_string$,k&,1)
          EXIT IF INSTR("#~*/^\",check$)
          right_expression$=right_expression$+check$
        NEXT k&
        right_rest$=MID$(op_string$,k&)
        '
        left_expression$=""
        FOR k&=j&-1 DOWNTO 1
          check$=MID$(op_string$,k&,1)
          EXIT IF INSTR("#~*/^\",check$)
          left_expression$=check$+left_expression$
        NEXT k&
        left_rest$=LEFT$(op_string$,k&)
        '
        left_value=VAL(left_expression$)
        right_value=VAL(right_expression$)
        '
        IF characters$="#"
          erg=left_value+right_value
        ELSE IF characters$="~"
          erg=left_value-right_value
        ELSE IF characters$="*"
          erg=left_value*right_value
        ELSE IF characters$="/"
          IF right_value=0
            report$="Division by 0"
            RETURN 1
          ELSE
            erg=left_value/right_value
          ENDIF
        ELSE IF characters$="\"
          erg=left_value\right_value
        ELSE IF characters$="^"
          erg=left_value^right_value
        ENDIF
        '
        ' Insert result into op_string$
        left_term$=left_rest$+STR$(erg)
        op_string$=left_term$+right_rest$
        j&=LEN(left_term$)
      ENDIF
    UNTIL j&=LEN(op_string$)
  NEXT i&
  RETURN VAL(op_string$)
ENDFUNC
