'
' ### Speicherroutinen (PrÑfix: mem_ )
'
'                       Anforderung & Freigabe
FUNCTION mem_alloc(art$,size%,clear!)           ! Speicheranforderung mit Fehlerbehandlung
  ' 13-07-94
  LOCAL adr%
  '
  adr%=GEMDOS(72,L:size%)               ! Begin des Speicherbereichs
  IF adr%=0                             ! Speicher konnte nicht angefordert werden
    ~@warning("Fehler bei der Speichervergabe! ("+art$+") Beende Programm!")
    ~@pterm                             ! Programm beenden
  ENDIF                                 ! ENDE: Speicher konnte nicht angefordert werden
  IF clear!                             ! Falls Speicher lîschen
    ~@rj_mfill(adr%,size%,0)            ! Speicherbereich mit 0-Bytes fÅllen
  ENDIF                                 ! ENDE: Falls Speicher lîschen
  '
  RETURN adr%                           ! RÅckgabe der Speicherblock-Adresse
ENDFUNC
FUNCTION mem_free(adr%)                         ! Speicherfreigabe
  ' 24-10-94
  LOCAL back%
  '
  IF adr%                       ! Wenn Startadresse vorhanden ist
    back%=GEMDOS(73,L:adr%)     ! Speicher freigeben
  ENDIF                         ! ENDE: Wenn Startadresse vorhanden ist
  '
  RETURN TRUE                   ! Funktion lÑuft immer korrekt
ENDFUNC
'               Vergleich,FÅllen,Vertauschen,Testen
FUNCTION mem_cmp(src%,dst%,len%)                ! Speicherbereiche vergleichen
  ' 02-10-94
  ' RÅckgabe:   TRUE = Speicherbereiche gleich
  '             -X   = Speicherbereiche an Stelle X verschieden
  LOCAL a%                                      !
  '
  IF len%<32700                                 !
    RETURN @mem_cmpfast(src%,dst%,len%)          !
  ELSE                                          !
    FOR a%=0 TO len%-1                          !
      IF BYTE{src%+a%}<>BYTE{dst%+a%}           !
        RETURN -a%                              !
      ENDIF                                     !
    NEXT a%                                     !
  ENDIF                                         !
  '
  RETURN TRUE                                   ! Funktion OK
ENDFUNC
FUNCTION mem_cmpfast(src%,dst%,len&)            ! Speicherbereiche bis 32KB schnell vergleichen
  ' 18-08-94
  LOCAL a$,b$
  '
  a$=SPACE$(len&)
  b$=a$
  BMOVE src%,V:a$,len&
  BMOVE dst%,V:b$,len&
  IF a$<>b$
    RETURN 0
  ELSE
    RETURN -1
  ENDIF
ENDFUNC
FUNCTION mem_fill(adr1%,len%,asc&)              ! Speicherbereich mit bestimmtem ASCII-Wert fÅllen
  ' 24-10-94
  ' adr%  = Startadresse
  ' len%  = LÑnge
  ' asc&  = ASCII mit dem der Speicher gefÅllt werden soll
  LOCAL a%,high%,fill_len%
  LOCAL fill$                                !
  '
  fill$=STRING$(32760,CHR$(asc&))                               !
  fill_len%=32760                                               !
  high%=0                                                       !
  REPEAT                                                        !
    FOR a%=1 TO (len%-high%)/fill_len%                          !
      BMOVE V:fill$,adr1%+high%,fill_len%                       !
      ADD high%,fill_len%                                       !
    NEXT a%                                                     !
    fill_len%=MIN(32760,MAX(1,(len%-high%)/2))                  !
  UNTIL high%=len%                                              !
  fill$=""                                                      !
  RETURN TRUE
ENDFUNC
FUNCTION mem_swap(adr1%,adr2%,len%)             ! Speicherblîcke vertauschen
  ' 12-09-94
  ' adr1% = Quelladresse
  ' adr2% = Zieladresse
  ' len%  = LÑnge des Aktionsblockes
  LOCAL a%
  LOCAL spc%
  LOCAL swap$
  '
  IF len%<32700                                 ! Falls der Aktionsblock kleiner als Puffer
    spc%=len%                                   ! Puffergrîûe = Grîûe des Aktionsblocks
  ELSE                                          !
    spc%=@ggt(len%,32700)                       ! Puffergrîûe = GGT
  ENDIF                                         !
  swap$=SPACE$(spc%)                            ! Puffergrîûe einstellen
  FOR a%=0 TO (len%/spc%)-1                     ! Aktionsblock/Puffer mal
    BMOVE adr2%+a%*spc%,V:swap$,spc%            ! Zielblock zwischenspeichern
    BMOVE adr1%+a%*spc%,adr2%+a%*spc%,spc%      ! Quelleblock in Zielblock
    BMOVE V:swap$,adr1%+a%*spc%,spc%            ! Zielblock(Puffer) -> Quelle
  NEXT a%                                       !
  '
  RETURN TRUE
ENDFUNC
FUNCTION mem_is(start%,len%,asc&)               ! Besteht der Speicherblock nur aus asc&-Zeichen ?
  ' 30-06-94
  LOCAL a%                              !
  '
  FOR a%=0 TO len%-1                    !
    IF BYTE{start%+a%}<>asc&            !
      RETURN FALSE                      !
    ENDIF                               !
  NEXT a%                               !
  '
  RETURN TRUE                           !
ENDFUNC
'                       Speicher-Bitoperationen
FUNCTION mem_sbit(adr%,bit&)                    ! Bit bit& an Addresse adr% setzen
  ' 08-07-1994
  BYTE{adr%}=BSET(BYTE{adr%},bit&)      ! Bit setzen
  '
  RETURN BYTE{adr%}                     ! Aktuellen adr%-Wert liefern
ENDFUNC
FUNCTION mem_cbit(adr%,bit&)                    ! Bit bit& an Addresse adr% lîschen
  ' 08-07-1994
  BYTE{adr%}=BCLR(BYTE{adr%},bit&)      ! Bit lîschen
  '
  RETURN BYTE{adr%}                     ! Aktuellen adr%-Wert liefern
ENDFUNC
FUNCTION mem_tbit(adr%,bit&)                    ! Adresse adr% auf bit& testen
  ' 09-07-94
  '
  RETURN BTST(BYTE{adr%},bit&)              !
ENDFUNC
'                       Speicher-Statistik
FUNCTION mem_banz(adr%,len%,wert&)              ! Anzahl der BYTES im Block
  ' 12-09-94
  LOCAL a%              ! Schleifenvariable
  LOCAL anz%            ! Anzahl des Byte-Werts wert&
  '
  IF wert&<0 OR wert&>255       !
    RETURN -1                   !
  ELSE                          !
    FOR a%=0 TO len%-1          !
      IF BYTE{adr%+a%}=wert&    !
        INC anz%                !
      ENDIF                     !
    NEXT a%                     !
  ENDIF                         !
  '
  RETURN anz%                   !
ENDFUNC
FUNCTION mem_wanz(adr%,len%,wert&)              ! Anzahl der WORDS im Block
  ' 12-09-94
  LOCAL a%              ! Schleifenvariable
  LOCAL anz%            ! Anzahl des Byte-Werts wert&
  '
  FOR a%=0 TO len%-1 STEP 2     !
    IF WORD{adr%+a%}=wert&      !
      INC anz%                  !
    ENDIF                       !
  NEXT a%                       !
  '
  RETURN anz%                   !
ENDFUNC
FUNCTION mem_lanz(adr%,len%,wert%)              ! Anzahl der LONGS im Block
  ' 12-09-94
  LOCAL a%              ! Schleifenvariable
  LOCAL anz%            ! Anzahl des Byte-Werts wert&
  '
  FOR a%=0 TO len%-1 STEP 4     !
    IF LONG{adr%+a%}=wert%      !
      INC anz%                  !
    ENDIF                       !
  NEXT a%                       !
  '
  RETURN anz%                   !
ENDFUNC
'                       Speicher-Dekodierung
FUNCTION mem_encrypt(adr%,len%,key&)            ! Speicher verschlÅsseln
  ' 24-10-94
  LOCAL a%
  '
  FOR a%=0 TO len%-1
    BYTE{adr%+a%}=BYTE{adr%+a%} XOR key&
  NEXT a%
  '
  RETURN TRUE
ENDFUNC
