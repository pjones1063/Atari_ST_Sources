'               ######################################################
'               ### Zeichenkettenroutinen (PrÑfix: str_ ) 27-10-94 ###
'               ######################################################
'
' ### INFORMATIONEN öBER STRINGS
FUNCTION str_cfind(str$,asc&,n&)        ! Position des n-ten asc& Zeichens liefern
  ' 30-06-94
  LOCAL a&,anz&                         ! Schleifenvariable
  '
  FOR a&=1 TO LEN(str$)                 ! gesamten String durchlaufen
    IF ASC(MID$(str$,a&,1))=asc&        ! Falls asc& an aktueler Position
      INC anz&                          ! Anzahl der asc& erhîhen
      IF anz&=n&                        ! Falls das n-te asc& gefunden wurde
        RETURN a&                       ! Position zurÅckliefern
      ENDIF                             ! ENDE: Falls das n-te asc& gefunden wurde
    ENDIF                               ! ENDE: Falls asc& an aktueler Position
  NEXT a&                               ! Ende gesamten String durchlaufen
  '
  RETURN 0                              ! Kein n-tes asc&-Zeichen
ENDFUNC
FUNCTION str_canz(str$,asc&)            ! Anzahl der asc&-Zeichen in str$ liefern
  ' 30-06-94
  LOCAL a&,anz&
  '
  FOR a&=1 TO LEN(str$)                 ! gesamten String durchlaufen
    IF ASC(MID$(str$,a&,1))=asc&        ! Falls asc& an aktueler Position
      INC anz&                          ! Anzahl der asc& erhîhen
    ENDIF                               ! ENDE: Falls asc& an aktueler Position
  NEXT a&                               ! Ende gesamten String durchlaufen
  '
  RETURN anz&                           ! Anzahl der asc& zurÅckliefern
ENDFUNC
FUNCTION str_iscin(str$,clist$)         ! Ist ein Char aus einer Liste im String ?
  ' 27-10-94
  LOCAL a&
  LOCAL len&
  '
  len&=LEN(clist$)
  FOR a&=1 TO len&
    IF INSTR(str$,MID$(clist$,a&,1))
      RETURN TRUE
    ENDIF
  NEXT a&
  '
  RETURN FALSE
ENDFUNC
'
' ### BESTIMMTE TEILSTRINGS LIEFERN
FUNCTION str_before$(str$,asc&,nr&)     ! String vor dem nr&-ten asc&-Zeichen liefern
  ' 30-09-94
  LOCAL pos&                            ! Position des asc&-Zeichens in str$
  '
  pos&=@str_cfind(str$,asc&,nr&)        ! Position des n-ten asc& Zeichens liefern
  IF pos&                               ! Falls asc&-Zeichen vorhanden
    RETURN LEFT$(str$,pos&-1)           ! String zurÅckliefern
  ENDIF                                 ! ENDE: Falls asc&-Zeichen vorhanden
  '
  RETURN str$                           ! Kein asc&-Zeichen vorhanden
ENDFUNC
FUNCTION str_after$(str$,asc&,nr&)      ! String nach dem nr&-ten asc&-Zeichen liefern
  ' 30-09-94
  LOCAL pos&                            !
  '
  pos&=@str_cfind(str$,asc&,nr&)        ! Position des n-ten asc& Zeichens liefern
  IF pos&                               !
    RETURN RIGHT$(str$,LEN(str$)-pos&)  ! String zurÅckliefern
  ELSE                                  ! Kein Zeichen vorhanden
    RETURN ""                           ! Leerstring zurÅckliefern
  ENDIF                                 !
ENDFUNC
FUNCTION str_cutlast$(str$,nr&)         ! Letzte nr& Zeichen abschneiden
  ' 30-09-94
  LOCAL len&                    !
  '
  len&=MAX(0,LEN(str$)-nr&)     !
  '
  RETURN LEFT$(str$,len&)       !
ENDFUNC
FUNCTION str_cutfirst$(str$,nr&)        ! Erste nr& Zeichen abschneiden
  ' 30-09-94
  LOCAL len&                    !
  '
  len&=MAX(0,LEN(str$)-nr&)     !
  '
  RETURN RIGHT$(str$,len&)      !
ENDFUNC
FUNCTION str_cutleft$(str$,asc&)        ! Rechten Teil vor dem ersten asc&-Zeichen zurÅckliefern
  ' 30-09-94
  LOCAL pos&                            !
  '
  pos&=@str_cfind(str$,asc&,1)          ! Position des ersten asc&-Zeichens
  IF pos&                               ! Falls asc& gefunden
    RETURN RIGHT$(str$,LEN(str$)-pos&)  ! rechten Reststring zurÅckliefern
  ELSE                                  ! asc& nicht in str$ vorhanden
    RETURN str$                         ! String unverÑndert
  ENDIF                                 ! ENDE: Falls asc& gefunden
ENDFUNC
FUNCTION str_cutright$(str$,asc&)       ! Linken Teil nach dem letzten asc&-Zeichen zurÅckliefern
  ' 30-09-94
  LOCAL pos&                            !
  '
  anz&=@str_canz(str$,asc&)             ! Anzahl der asc&-Zeichen in str$
  IF anz&                               ! asc& vorhanden
    pos&=@str_cfind(str$,asc&,anz&)     ! Position des letzten asc&-Zeichens
    RETURN LEFT$(str$,pos&-1)           ! linken Reststring zurÅckliefern
  ELSE                                  ! asc& nicht vorhanden
    RETURN str$                         ! String unverÑndert
  ENDIF                                 ! ENDE: asc& vorhanden
ENDFUNC
'
' ### STRINGS BESCHAFFEN BZW éNDERN (SEMANTIK)
FUNCTION str_readmem$(adr%,len&)        ! Text aus Speicher auslesen
  ' 30-09-94
  LOCAL txt$                    !
  '
  IF len&<32767 AND len&>0      ! Nur falls sinnvolle LÑngenangaben
    txt$=SPACE$(len&)           !
    BMOVE adr%,V:txt$,len&      !
  ENDIF                         !
  '
  RETURN txt$                   !
ENDFUNC
FUNCTION str_tohex$(str$)               ! Text in Hex codieren
  ' 30-09-94
  LOCAL a&              !
  LOCAL len&            ! LÑnge des Åbergebenen Textes
  LOCAL hex$            ! Hex-Darstellung des aktuellen Zeichens
  LOCAL txt$            ! String fÅr HEX Wert
  '
  len&=LEN(str$)                                !
  IF len&<16350                                 ! Falls Text nicht zu lang
    FOR a&=1 TO len&                            !
      hex$=HEX$(ASC(MID$(str$,a&,1)))           !
      txt$=txt$+@str_fillv$(2,48,hex$)          !
    NEXT a&                                     !
  ENDIF                                         ! ENDE: Falls Text nicht zu lang
  '
  RETURN txt$                                   !
ENDFUNC
FUNCTION str_fmhex$(str$)               ! Text aus Hex decodieren
  ' 12-09-94
  LOCAL a&
  LOCAL txt$
  '                                                     !
  FOR a&=1 TO LEN(str$) STEP 2                       !
    txt$=txt$+CHR$(VAL("&H"+MID$(str$,a&,2)))        !
  NEXT a&                                               !
  '
  RETURN txt$                                           !
ENDFUNC
'
' ### STRING-I/O
FUNCTION str_prall(str$,x&,y&)          ! Alle Zeichen an x&,y& ausgeben
  ' 12-09-94
  LOCAL a&
  '
  LOCATE x&,y&                  ! Cursor positionieren
  FOR a&=1 TO LEN(str$)         ! Alle Zeichen durchlaufen
    OUT 5,ASC(MID$(str$,a&,1))  !
  NEXT a&                       !
  '
  RETURN len&                   !
ENDFUNC
'
' ### STRINGS ALS GANZES VERéNDERN (SYNTAX)
FUNCTION str_lower$(str$)               ! String in Kleinbuchstaben
  ' 12-09-94
  LOCAL a&                                      !
  '
  FOR a&=0 TO LEN(str$)-1                       !
    BYTE{V:str$+a&}=BYTE{V:str$+a&} OR 32       ! Das 6te Bit wird gesetzt
  NEXT a&                                       !
  '
  RETURN str$                                   !
ENDFUNC
FUNCTION str_revers$(str$)              ! String in umgekehrter Reihenfolge
  ' 12-09-94
  LOCAL a&              !
  LOCAL txt$            !
  '
  FOR a&=LEN(str$) DOWNTO 1     !
    txt$=txt$+MID$(str$,a&,1)   !
  NEXT a&                       !
  '
  RETURN txt$                   !
ENDFUNC
FUNCTION str_repl$(str$,find$,repl$)    ! In str$ find$ durch repl$ ersetzen
  ' 26-10-94
  LOCAL stelle&         !
  LOCAL links$          !
  LOCAL rechts$         !
  '
  IF str$<>""                                   !
    REPEAT                                      !
      stelle&=INSTR(str$,find$)                 !
      IF stelle&                                !
        links$=LEFT$(str$,stelle&-1)            !
        rechts$=RIGHT$(str$,LEN(str$)-(stelle&+LEN(find$)-1))  !
        str$=links$+repl$+rechts$               !
      ENDIF                                     !
    UNTIL stelle&=0                             !
  ENDIF                                         !
  '
  RETURN str$                                   !
ENDFUNC
FUNCTION str_fillv$(str$,len&,asc&)     ! String vorne mit asc& auffÅllen
  ' 30-09-94
  LOCAL strlen&                         !
  '
  strlen&=len&-MIN(len&,LEN(str$))      !
  str$=STRING$(strlen&,CHR$(asc&))+str$ !
  '
  RETURN str$                           !
ENDFUNC
FUNCTION str_fillh$(str$,len&,asc&)     ! String hinten mit asc& auffÅllen
  ' 30-09-94
  LOCAL strlen&                         !
  '
  strlen&=len&-MIN(len&,LEN(str$))      !
  str$=str$+STRING$(strlen&,CHR$(asc&)) !
  '
  RETURN str$                           !
ENDFUNC
