FUNCTION mat_init_symb                          ! Mathematische Konstanten
  ' 17-09-94
  LET mat_exp=2.718281828459            ! NatÅrliche Basis
  LET mat_euler=0.577216                ! Euler'sche Konstante
  '
  RETURN TRUE
ENDFUNC
'                       Vektor-Funktionen
FUNCTION mat_vekmulskal(skal,VAR vek())         ! Multiplikation mit einem Skalar
  ' 13-09-94
  LOCAL a&,anz&
  '
  anz&=DIM?(vek())              !
  FOR a&=0 TO anz&-1            !
    MUL vek(a&),skal            !
  NEXT a&                       !
  '
  RETURN TRUE                   !
ENDFUNC
FUNCTION mat_vekstdskal(VAR vek1(),vek2())      ! Standardskalarprodukt zweier Vektoren
  ' 13-09-94
  LOCAL a&                      !
  LOCAL anz&                    !
  LOCAL skalprod                !
  '
  IF @mat_vekdimok(vek1(),vek2())       ! Vektoren auf gleiche Dimension testen
    anz&=DIM?(vek1())                   !
    FOR a&=0 TO anz&-1                  !
      ADD skalprod,vek1(a&)*vek2(a&)    !
    NEXT a&                             !
  ELSE                                  !
    RETURN -1                           !
  ENDIF                                 !
  '
  RETURN skalprod                       !
ENDFUNC
FUNCTION mat_vekadd(VAR vek1(),vek2())          ! Addition zweier Vektoren
  ' 13-09-94
  LOCAL a&                              !
  LOCAL anz&
  '
  IF @mat_vekdimok(vek1(),vek2())       ! Vektoren auf gleiche Dimension testen
    anz&=DIM?(vek1())                   !
    FOR a&=0 TO anz&-1                  !
      ADD vek1(a&),vek2(a&)             !
    NEXT a&                             !
  ENDIF                                 ! ENDE: Vektoren auf gleiche Dimension testen
  '
  RETURN TRUE                           !
ENDFUNC
'                       Algebraische Hilfs-Funktionen
FUNCTION mat_veknorm(p,VAR vek())               ! Norm eines Vektors (FÅr p=2 eukl. Norm)Ñ
  ' 13-09-94
  LOCAL a&,anz&
  LOCAL norm
  '
  anz&=DIM?(vek())              ! Anzahl der Vektorelemente bestimmen
  FOR a&=0 TO anz&-1            ! Alle Vektorelemente durchlaufen
    ADD norm,ABS(vek(a&))^p     ! ABS, da p auch ungerade sein kann
  NEXT a&                       ! Ende: Alle Vektorelemente durchlaufen
  norm=norm^(1/p)               ! p-te Wurzel ziehen
  '
  RETURN norm                   !
ENDFUNC
FUNCTION mat_vekwinkel(VAR vek1(),vek2())       ! Der zwischen 2 Vektoren eingeschlossene Winkel in Grad
  ' 13-09-94
  LOCAL nenner,zaehler
  LOCAL winkel
  '
  nenner=@mat_veknorm(2,vek1())*@mat_veknorm(2,vek2())
  zaehler=@mat_vekstdskal(vek1(),vek2())
  winkel=DEG(ACOS(zaehler/nenner))
  '
  RETURN winkel
ENDFUNC
FUNCTION mat_vekcopy(VAR vek1(),vek2())         ! vek1 nach vek2 kopieren
  ' 13-09-94
  LOCAL a&
  LOCAL anz&
  '
  IF @mat_vekdimok(vek1(),vek2())       ! Vektoren auf gleiche Dimension testen
    anz&=DIM?(vek2())                   !
    FOR a&=0 TO anz&-1                  !
      vek1(a&)=vek2(a&)                 !
    NEXT a&                             !
  ENDIF                                 !
  '
  RETURN TRUE                           !
ENDFUNC
'                       Vektor I/O
FUNCTION mat_vekprint(x&,y&,hv!,VAR vek())      ! Einfache Ausgabe eines Vektors
  ' 13-09-94
  LOCAL a&,anz&
  '
  anz&=DIM?(vek())
  IF hv!
    PRINT AT(x&,y&);
  ENDIF
  PRINT AT(x&+a&,y&);
  FOR a&=0 TO anz&-1
    IF hv!
      PRINT vek(a&)'
    ELSE
      PRINT AT(x&,y&+a&);vek(a&)
    ENDIF
  NEXT a&
  '
  RETURN TRUE
ENDFUNC
'                       Test Funktionen
FUNCTION mat_vekdimok(VAR vek1(),vek2())        ! Vektoren auf gleiche Dimension testen
  ' 13-09-94
  LOCAL anz1&,anz2&     !
  '
  anz1&=DIM?(vek1())    !
  anz2&=DIM?(vek2())    !
  '
  RETURN anz1&=anz2&    !
ENDFUNC
'                       Stochastik-Funktionen
FUNCTION mat_hypervert(k%,n%,m%,n2%)            ! Hypergeometrische Verteilung
  ' 17-09-94
  LOCAL tmp1,tmp2,tmp3
  '
  tmp1=COMBIN(m%,k%)
  tmp2=COMBIN(n%-m%,n2%-k%)
  tmp3=COMBIN(n%,n2%)
  '
  RETURN (tmp1*tmp2)/tmp3
ENDFUNC
FUNCTION mat_poissonvert(k%,lambda)             ! Poissonverteilung
  ' 17-09-94
  '
  RETURN (lambda^k%/FACT(k%))*mat_exp^-lambda
ENDFUNC
FUNCTION mat_gaussvert(x,a,rho)                 ! Normalverteilung (Gauûverteilung)
  ' 17-09-94
  LOCAL tmp
  LOCAL tmp2
  '
  IF rho<>0
    tmp=1/(SQR(2*PI)*rho)
    tmp2=mat_exp^(-0.5*((x-a)^2/rho^2))
    RETURN tmp*tmp2
  ENDIF
  '
  RETURN 0
ENDFUNC
FUNCTION mat_weibullvert(x,p,gamma)             ! Weibull-Verteilung
  ' 17-09-94
  IF x>=0
    RETURN (gamma*p*x)^(p-1)*mat_exp^(-gamma*x^p)
  ENDIF
  '
  RETURN 0
ENDFUNC
'              Hyperbolische Funktionen und ihre Inversen
FUNCTION mat_sinh(x)                            ! Hyperbelsinus
  ' 17-09-94
  '
  RETURN 0.5*(mat_exp^x-mat_exp^-x)
ENDFUNC
FUNCTION mat_arsinh(x)                          ! Area-Hyperbelsinus
  ' 17-09-94
  '
  RETURN ln(x+SQR(x^2+1))
ENDFUNC
FUNCTION mat_cosh(x)                            ! Hyperbelcosinus
  ' 17-09-94
  '
  RETURN 0.5*(mat_exp^x+mat_exp^-x)
ENDFUNC
FUNCTION mat_arcosh(x)                          ! Area-Hyperbelcosinus
  ' 17-09-94
  LOCAL tmp
  '
  tmp=SQR(x^2-1)
  IF x<=0
    RETURN ln(x-tmp)
  ENDIF
  '
  RETURN ln(x+tmp)
ENDFUNC
FUNCTION mat_tanh(x)                            ! Hyperbeltangens
  ' 17-09-94
  LOCAL tmp
  LOCAL tmp2
  '
  tmp=mat_exp^x
  tmp2=mat_exp^-x
  '
  RETURN (tmp-tmp2)/(tmp+tmp2)
ENDFUNC
FUNCTION mat_artanh(x)                          ! Area-Hyperbeltangens
  ' 17-09-94
  '
  IF ABS(x)<1
    RETURN 0.5*ln((1+x)/(1-x))
  ENDIF
  '
  RETURN 0
ENDFUNC
FUNCTION mat_coth(x)                            ! Hyperbelcotangens
  ' 17-09-94
  LOCAL tmp
  LOCAL tmp2
  '
  tmp=mat_exp^x
  tmp2=mat_exp^-x
  '
  RETURN (tmp+tmp2)/(tmp-tmp2)
ENDFUNC
FUNCTION mat_arcoth(x)                          ! Area-Hyperbelcotangens
  ' 17-09-94
  '
  IF ABS(x)>1
    RETURN 0.5*ln((x+1)/(x-1))
  ENDIF
  '
  RETURN 0
ENDFUNC
FUNCTION mat_sech(x)                            ! Hyperbelsekans
  ' 17-09-94
  '
  RETURN 2/(mat_exp^x+mat_exp^-x)
ENDFUNC
FUNCTION mat_cosech(x)                          ! Hyperbelcosekans
  ' 17-09-94
  '
  RETURN 2/(mat_exp^x-mat_exp^-x)
ENDFUNC
'                       Radix-Operationen
FUNCTION mat_radix_val(base&,radix$)
  ' 09-10-94
  LOCAL a&
  LOCAL asc&
  LOCAL len&
  LOCAL value
  LOCAL char$
  '
  '  PRINT radix$;"(";base&;") = ";
  len&=LEN(radix$)
  FOR a&=0 TO len&-1
    char$=MID$(radix$,len&-a&,1)
    asc&=ASC(char$)
    SELECT asc&
    CASE 48 TO 57
      ADD value,(asc&-48)*base&^a&
    CASE 65 TO 90
      ADD value,(asc&-55)*base&^a&
    CASE 97 TO 122
      ADD value,(asc&-87)*base&^a&
    ENDSELECT
  NEXT a&
  '
  RETURN value
ENDFUNC
FUNCTION mat_radix_get$(base&,value)
  ' 09-10-94
  LOCAL exp&
  LOCAL last&
  LOCAL last$
  LOCAL str$
  '
  value=INT(value)
  REPEAT
    INC exp&
    last=value MOD base&^exp&
    SUB value,last
    DIV last,base&^(exp&-1)
    SELECT last
    CASE 0 TO 9
      last$=CHR$(48+last)
    DEFAULT
      last$=CHR$(55+last)
    ENDSELECT
    str$=last$+str$
  UNTIL value=0
  '
  RETURN str$
ENDFUNC
FUNCTION mat_radix_add(base1&,radix1$,base2&,radix2$)
  ' 09-10-94
  LOCAL add1,add2
  '
  add1=@mat_radix_val(base1&,radix1$)
  add2=@mat_radix_val(base2&,radix2$)
  '
  RETURN add1+add2
ENDFUNC
FUNCTION mat_radix_sub(base1&,radix1$,base2&,radix2$)
  ' 09-10-94
  LOCAL sub1,sub2
  '
  sub1=@mat_radix_val(base1&,radix1$)
  sub2=@mat_radix_val(base2&,radix2$)
  '
  RETURN sub1-sub2
ENDFUNC
FUNCTION mat_radix_mul(base1&,radix1$,base2&,radix2$)
  ' 09-10-94
  LOCAL mul1,mul2
  '
  mul1=@mat_radix_val(base1&,radix1$)
  mul2=@mat_radix_val(base2&,radix2$)
  '
  RETURN mul1*mul2
ENDFUNC
FUNCTION mat_radix_div(base1&,radix1$,base2&,radix2$)
  ' 09-10-94
  LOCAL div1,div2
  '
  div1=@mat_radix_val(base1&,radix1$)
  div2=@mat_radix_val(base2&,radix2$)
  '
  RETURN div1/div2
ENDFUNC
'                       Komplexe-Operationen
FUNCTION mat_cmplx_do$(real,imag)       ! Komplexe Zahl erstellen
  ' 09-10-94
  LOCAL cmplx$
  '
  cmplx$=STR$(real)+"|"+STR$(imag)
  '
  RETURN cmplx$
ENDFUNC
FUNCTION mat_cmplx_real(cmplx$)         ! Realteil liefern
  ' 09-10-94
  RETURN VAL(LEFT$(cmplx$,INSTR(cmplx$,"|")))
ENDFUNC
FUNCTION mat_cmplx_imag(cmplx$)         ! ImaginÑrteil liefern
  ' 09-10-94
  LOCAL len&
  '
  len&=LEN(cmplx$)
  '
  RETURN VAL(RIGHT$(cmplx$,len&-INSTR(cmplx$,"|")))
ENDFUNC
FUNCTION mat_cmplx_len(cmplx$)          ! Betrag (Modul) einer komplexen Zahl
  ' 09-10-94
  LOCAL img,rea
  '
  rea=@mat_cmplx_real(cmplx$)
  img=@mat_cmplx_imag(cmplx$)
  '
  RETURN SQR(rea^2+img^2)
ENDFUNC
FUNCTION mat_cmplx_add$(cmpl1$,cmpl2$)  ! Addition komplexer Zahlen
  ' 09-10-94
  LOCAL img1,img2
  LOCAL rea1,rea2
  '
  rea1=@mat_cmplx_real(cmpl1$)
  img1=@mat_cmplx_imag(cmpl1$)
  rea2=@mat_cmplx_real(cmpl2$)
  img2=@mat_cmplx_imag(cmpl2$)
  '
  RETURN @mat_cmplx_do$(rea1+rea2,img1+img2)    ! Komplexe Zahl erstellen
ENDFUNC
FUNCTION mat_cmplx_sub$(cmpl1$,cmpl2$)  ! Subtraktion komplexer Zahlen
  ' 09-10-94
  LOCAL img1,img2
  LOCAL rea1,rea2
  '
  rea1=@mat_cmplx_real(cmpl1$)
  img1=@mat_cmplx_imag(cmpl1$)
  rea2=-@mat_cmplx_real(cmpl2$)
  img2=-@mat_cmplx_imag(cmpl2$)
  '
  RETURN @mat_cmplx_do$(rea1-rea2,img1-img2)    ! Komplexe Zahl erstellen
ENDFUNC
FUNCTION mat_cmplx_mul$(cmpl1$,cmpl2$)  ! Multiplikation komplexer Zahlen
  ' 09-10-94
  LOCAL img1,img2
  LOCAL rea1,rea2
  '
  rea1=@mat_cmplx_real(cmpl1$)
  img1=@mat_cmplx_imag(cmpl1$)
  rea2=@mat_cmplx_real(cmpl2$)
  img2=@mat_cmplx_imag(cmpl2$)
  '
  RETURN @mat_cmplx_do$(rea1*rea2-img1*img2,rea1*img2+rea2*img1)    ! Komplexe Zahl erstellen
ENDFUNC
FUNCTION mat_cmplx_div$(cmpl1$,cmpl2$)  ! Division komplexer Zahlen
  ' 09-10-94
  LOCAL img1,img2
  LOCAL rea1,rea2
  LOCAL nenner
  LOCAL zaehler1,zaehler2
  '
  rea1=@mat_cmplx_real(cmpl1$)
  img1=@mat_cmplx_imag(cmpl1$)
  rea2=@mat_cmplx_real(cmpl2$)
  img2=@mat_cmplx_imag(cmpl2$)
  '
  nenner=rea2^2+img2^2
  zaehler1=rea1*rea2+img1*img2
  zaheler2=rea2*img1-rea1*img2
  '
  RETURN @mat_cmplx_do$(zaehler1/nenner,zaehler2/nenner)    ! Komplexe Zahl erstellen
ENDFUNC
'                       INT -> Rîmische-Ziffer
FUNCTION mat_int2roman$(zahl&,modern!)  ! Integer in rîmische Ziffer umwandlen
  ' 23-10-94
  LOCAL a&,b&
  LOCAL len&
  LOCAL idx&
  LOCAL ziffer&
  LOCAL int$
  LOCAL one$,ten$,hek$,mil$     !
  LOCAL roman$
  '
mat_romandata:
  DATA 0,,,,
  DATA 1,I   ,X   ,C   ,M
  DATA 2,II  ,XX  ,CC  ,MM
  DATA 3,III ,XXX ,CCC ,MMM
  DATA 4,IV  ,XL  ,CD  ,MMMM
  DATA 5,V   ,L   ,D   ,MMMMM
  DATA 6,VI  ,LX  ,DC  ,MMMMMM
  DATA 7,VII ,LXX ,DCC ,MMMMMMM
  DATA 8,VIII,LXXX,DCCC,MMMMMMMM
  DATA 9,IX  ,XC  ,CM  ,MÆ|Ø
  IF zahl&>0                            ! Ist die Zahl positiv
    IF zahl&<10000                      !
      int$=STR$(zahl&)                  ! Zahl in String
      len&=LEN(int$)                    ! Anzahl der Ziffern
      FOR a&=len& DOWNTO 1              ! Alle Ziffern durchlaufen
        ziffer&=VAL(MID$(int$,len&-a&+1,1))     !
        RESTORE mat_romandata                   !
        FOR b&=0 TO ziffer&                     !
          READ idx&,one$,ten$,hek$,mil$         !
        NEXT b&                                 !
        SELECT a&                               !
        CASE 4                                  ! ### Tausender
          roman$=roman$+TRIM$(mil$)             !
        CASE 3                                  ! ### Hunderter
          roman$=roman$+TRIM$(hek$)             !
        CASE 2                                  ! ### Zehner
          roman$=roman$+TRIM$(ten$)             !
        CASE 1                                  ! ### Einer
          roman$=roman$+TRIM$(one$)             !
        ENDSELECT                               !
      NEXT a&                                   ! Ende Alle Ziffern durchlaufen
    ELSE                                        !
      RETURN "Zahl zu groû !"                   !
    ENDIF                                       !
  ENDIF                                         ! ENDE: Ist die Zahl positiv
  IF modern!                                    !
    roman$=@mat_romanmodern$(roman$)            !
  ENDIF                                         !
  '
  RETURN roman$                                 ! Zahl in rîmischer Schreibweise zurÅck
ENDFUNC
FUNCTION mat_romanmodern$(old$)         ! Unterroutine fÅr int2roman (moderne Schreibweise)
  ' 24-10-94
  LOCAL new$
  '
  new$=@str_repl$(old$,"XLIX","IL")             ! 49   moderne Schreibweise
  new$=@str_repl$(new$,"XCIX","IC")             ! 99   moderne Schreibweise
  new$=@str_repl$(new$,"CDIC","ID")             ! 499  moderne Schreibweise
  new$=@str_repl$(new$,"CMIC","IM")             ! 999  moderne Schreibweise
  '
  RETURN new$
ENDFUNC
'                       Numerische Integration
FUNCTION mat_integral(a,b,fun$,n&)              ! Numerische Integration
  ' 27-10-94
  LOCAL i&
  LOCAL idx&
  LOCAL intervall
  LOCAL integral
  LOCAL sum
  LOCAL tmp
  '
  ~@expr1_init(1)                            !
  intervall=(b-a)/n&                            !
  ~@expr1_setvar("x",a+intervall)            ! Variable x initialisieren
  sum=@expr1_main(fun$,fehler!)              !
  IF NOT fehler!                                !
    FOR i&=2 TO n&-1                            !
      variablen_wert(0)=a+i&*intervall          ! Variable neu einfÅhren oder aendern
      ADD sum,@expr1_main(fun$,fehler!)      !
    NEXT i&                                     !
    variablen_wert(0)=a                         ! Variable neu einfÅhren oder aendern
    tmp=@expr1_main(fun$,fehler!)            !
    variablen_wert(0)=b                         ! Variable neu einfÅhren oder aendern
    tmp=(tmp+@expr1_main(fun$,fehler!))/2    !
    ~@expr1_end                              !
    '
    integral=intervall*(tmp+sum)                !
  ENDIF                                         !
  '
  RETURN integral                               !
ENDFUNC
