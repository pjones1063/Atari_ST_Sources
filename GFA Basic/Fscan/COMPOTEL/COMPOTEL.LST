'  *** **** ***
' ** COMPOTEL **
'  *** **** ***
' Auteur FSCAN, derniŠre version le 03/12/95
'
' Composeur de num‚ro t‚l‚phonique (pass‚ en paramŠtre ou entr‚ au clavier)
' Ce programme peut etre ex‚cut‚ de plusieurs fa‡ons :
' => Comme .PRG appel‚ directement :
'   num‚ro compos‚ au clavier pendant l'ex‚cution du programme
' => Comme .TTP :
'   num‚ro de t‚l = paramŠtre pass‚ dans la ligne de commande
' => Comme .PRG :
'   cr‚ation d'un fichier factice dont le nom comporte le num‚ro de t‚l.
'   puis faire glisser icone de ce fichier factice sur le programme actuel
'   ex. de noms : "46223344.TEL", "16146223.344", "11.TEL", "3614.TEL", ...
' => Comme application GEM :
'   cr‚‚er des fichiers factices dans un r‚pertoire
'   installer une application du type appel du prog par les fichiers .TEL
'
Reserve Fre(0)-10000             ! Reserve de la m‚moire pour les Mallocs
'
@Tester_texte_param
' @Hp_off                        !  => d‚fini librement par l'utilisateur
Spoke &H484,(Peek(&H484) Xor 1)  !  Coupe/R‚tablit le clic clavier
'
Duree=0.2                        ! Dur‚e du sample en secondes
Prescale=1                       ! Fr‚quence = 25 kHz
Fech=24584                       ! Fr‚quence d'‚chantillonnage
Mode%=2                          ! 8 bits mono
Gain_out%=10                     ! Gain en sortie ‚ventuellement (cf Init_dma)
'
Cls
Print "COMPOTEL 03/12/95 par FSCAN"
Print
If Texteparam$=""                ! Si pas de num‚ro pass‚ en paramŠtre
  Print "Appuyez sur une des touches :"
  Print "1,2,3,4,5,6,7,8,9,A,B,C,D,* ou #"
  Print
  Print "Cliquez pour quitter"
  Print
  Key$=""
  While (Mousek=0)
    Key$=Inkey$
    If (Key$<>"")
      @Emet_tonalite(Key$,Duree)
    Endif
  Wend
Else
  Print "Composition du num‚ro : ";
  For Pos%=1 To Len(Texteparam$)
    Key$=Mid$(Texteparam$,Pos%,1)
    @Emet_tonalite(Key$,Duree)
  Next Pos%
Endif
Spoke &H484,(Peek(&H484) Xor 1)  !  Coupe/R‚tablit le clic clavier
End
'
Procedure Emet_tonalite(Key$,Duree)
  Restore Tonalites
  Tch$=""
  Key$=Upper$(Key$)
  While ((Key$<>Tch$) And (Tch$<>"FinData"))
    Read Tch$,Fsignal1,Fsignal2
  Wend
  If (Key$=Tch$)
    Print Key$;
    @Generation_tonalite(Fsignal1,Fsignal2) ! G‚n‚ration du sample en m‚moire
    @Init_dma(1)  ! Audition du sample (1 seule fois, pas en boucle)
    Pause 10
    @Buffoper(0)
  Endif
  '
  ' DATAs sous la forme : touche$,fr‚quence1%,fr‚quence2%
  Tonalites:
  Data 0,1336,941
  Data 1,1209,697
  Data 2,1336,697
  Data 3,1477,697
  Data 4,1209,770
  Data 5,1336,770
  Data 6,1477,770
  Data 7,1209,852
  Data 8,1336,852
  Data 9,1477,852
  Data *,1209,941
  Data #,1477,941
  Data A,1633,697
  Data B,1633,770
  Data C,1633,852
  Data D,1633,941
  Data FinData,10,10
Return
'
Procedure Init_dma(Code_oper)
  '
  @Buffoper(0)
  '
  Src=0         ! DMAPLAY
  Dst=1         ! reli‚ au DAC
  Srcclk=0      ! horloge interne (compatible STE)
  ' Prescale=3    ! fr‚quence => 25 kHz
  Protocol=1    ! mode non handshaking
  @Devconnect(Src,Dst,Srcclk,Prescale,Protocol)
  '
  ' SOUNDCMD(LTATTEN,Gain_out << 4)
  Mode=0    ! Gain sortie gauche
  Donnee=Gain_out%*8
  '  @Sndcmd(Mode,Donnee)   ! => D‚fini librement par l'utilisateur
  '
  ' SOUNDCMD(RTATTEN,Gain_out << 4)
  Mode=1    ! Gain sortie droite
  Donnee=Gain_out%*8
  '  @Sndcmd(Mode,Donnee)   ! => D‚fini librement par l'utilisateur
  '
  ' SOUNDCMD(ADDERIN,adderin)
  Mode=4    ! ADDITIONNEUR ADDERIN
  Donnee=3  ! branchement sur l'entr‚e micro (ADC) et la matrice
  @Sndcmd(Mode,Donnee)
  '
  ' SETBUFFER(0,adr,adr+lng_buffer+1)
  Reg=0     ! Buffer utilis‚ pour la lecture (1 = enregistrement)
  Begaddr=Adr
  Endaddr=Begaddr+Lng_buffer+1  ! Dernier octet du Buffer + 1
  @Setbuffer(Reg,Begaddr,Endaddr)
  '
  ' SETMODE(1)
  ' mode=0 !  8 bits st‚r‚o
  ' mode=1 ! 16 bits st‚r‚o
  ' mode=2 !  8 bits mono
  Mode=Mode%
  @Setmode(Mode)
  '
  Playtracks=0  ! Nombre de pistes utilis‚es en restitution - 1
  Rectracks=0   ! Nombre de pistes utilis‚es en enregistrement - 1
  @Settracks(Playtracks,Rectracks)
  '
  @Setmontracks(0)     ! S‚lection de la piste qui sera ‚cout‚e
  '
  @Buffoper(Code_oper)         ! Restitution en boucle
Return
'
'
Procedure Generation_tonalite(Freq1,Freq2)
  Lng_buffer=Int(2*Fech*Duree)
  Adr_buf_temp=Gemdos(72,L:Lng_buffer) ! R‚servation m‚moire buffer
  Adr=Gemdos(72,L:Lng_buffer) ! R‚servation m‚moire buffer
  Sinusbase$=Space$(256)
  Adr_sinus%=Varptr(Sinusbase$)
  If (Adr<>-1)
    ' G‚n‚ration du buffer temporaire :
    Nb_periode2%=Freq2*Duree
    Nb_val2%=2*Fech/Freq2         ! Nombre de valeurs par p‚riode
    Pas=256/Nb_val2%
    @Generation_sinus_base(Adr_buf_temp,Nb_val2%-1)
    For Cpt%=1 To Nb_periode2%-1
      Bmove Adr_buf_temp,Adr_buf_temp+Cpt%*Nb_val2%,Nb_val2%
    Next Cpt%
    ' G‚n‚ration du buffer en Adr :
    Nb_periode1%=Freq1*Duree
    Nb_val1%=2*Fech/Freq1         ! Nombre de valeurs par p‚riode
    Pas=256/Nb_val1%
    Pointeur_sinus%=Adr_sinus%
    @Generation_sinus_base(Adr,Nb_val1%-1)
    For Cpt%=1 To Nb_periode1%-1
      Bmove Adr,Adr+Cpt%*Nb_val1%,Nb_val1%
    Next Cpt%
    '
    ' Addition des buffers => buffer en Adr
    '
    ' Chargement de la routine de retraitement Basse r‚solution:
    Restore Addition_asm
    Routine$=""
    Do
      Read Code$
      Exit If Code$="fin"
      Code$="&H"+Code$
      Code%=Val(Code$)
      Routine$=Routine$+Mki$(Code%)
    Loop
    Routine%=Gemdos(72,L:42)
    Bmove Varptr(Routine$),Routine%,42
    Addition_asm:
    Data 206F,0004,226F,0008,246F,000C,2012,1210,1419,0241
    Data 00FF,0242,00FF,D242,0441,00FF,E241,10C1,51C8,FFE8
    Data 4E75
    Data fin
    '
    Longueur%=Lng_buffer
    Void C:Routine%(L:Adr,L:Adr_buf_temp,L:Varptr(Longueur%))
    Void Gemdos(73,L:Routine%)
    '
    Void Gemdos(73,L:Adr_buf_temp)
    Void Gemdos(73,L:Adr)
  Else
    Print "Pas assez de m‚moire pour cr‚er le sample"
    End
  Endif
Return
'
Procedure Generation_sinus_base(Adr_sinus%,Nbpoint%)
  Coeff=2*Pi/Nbpoint%
  For I%=0 To Nbpoint%-1 Step 2
    Val%=127+127*Sin(Coeff*I%)
    If (Val%<0)
      Add Val%,128
    Endif
    Poke Adr_sinus%+I%,Val%
    Poke Adr_sinus%+I%+1,Val%
  Next I%
Return
'
' ******************************************************
'
Procedure Hp_on
  Void Xbios(&H1D,0)   ! R‚tablit le son du HP
Return
Procedure Hp_off
  Void Xbios(&H1E,64)   ! Coupe le son du HP
Return
Procedure Devconnect(Src,Dsr,Srcclk,Prescale,Protocol)
  Void Xbios(&H8B,Src,Dst,Srcclk,Prescale,Protocol)
Return
Procedure Sndcmd(Mode,Donnee)
  Void Xbios(&H82,Mode,Donnee)
Return
Procedure Setbuffer(Reg,Begaddr,Endaddr)
  Void Xbios(&H83,Reg,L:Begaddr,L:Endaddr)
Return
Procedure Setmode(Mode)
  Void Xbios(&H84,Mode)
Return
Procedure Settracks(Playtracks,Rectracks)
  Void Xbios(&H85,Playtracks,Rectracks)
Return
Procedure Setmontracks(Montrack)
  Void Xbios(&H86,Montrack)
Return
Procedure Buffoper(Mode)
  Void Xbios(&H88,Mode)
Return
Procedure Buffptr(Pointer)
  Void Xbios(&H8D,L:Pointer)
Return
'
' ******************************************************
'
Procedure Tester_texte_param
  Longparam%=Peek(Basepage+128)
  Texteparam$=""
  If (Longparam%>0)
    For Pos%=0 To Longparam%
      Texteparam$=Texteparam$+Chr$(Peek(Basepage+128+1+Pos%))
    Next Pos%
  Endif
Return
