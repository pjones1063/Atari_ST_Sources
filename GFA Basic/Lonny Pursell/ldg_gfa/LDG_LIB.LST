' $C+  !not needed for this example, but might be needed for other library calls
REM #lib new lib !requires GBE Lib!
'
CLS
'
' first init ldg so we can call it
ldg_!=@ldg_init(ver&)
PRINT "LDG found: ";ldg_!
PRINT "cookie address: ";ldg_%
PRINT "version: ";HEX$(ver&,4)
PRINT
'
IF ldg_!=FALSE    !ldg init failed?
  PRINT "LDG init failed - aborted"
  EDIT
ENDIF
'
IF @ldg_libpath("cookies.ldg",t$)=FALSE
  PRINT "Library cookies.ldg not found"
  EDIT
ENDIF
'
' open the library
@open_cookies.ldg
'
' dump the address of the cookie jar using the lib
PRINT "cookie jar address=";@getcookiejar,LPEEK(&H5A0)
'
' dump a cookie using the lib
PRINT "cookie found=";@getcookie(CVL("_CPU"),v%)
PRINT "cpu=";v%
'
' install a cookie
' PRINT "newcookie=";@newcookie(CVL("_GBE"),32)
'
' remove a cookie
' PRINT "removecookie=";@removecookie(CVL("_GBE"))
'
' dump library specific info
' @ldg_debug(cookies_lib%)
'
' done with lib, so close it
@close_cookies.ldg
'
PRINT
PRINT "done"
EDIT
' -- cookies.ldg bindings for test purposes (see cook_ldg.h)
> PROCEDURE open_cookies.ldg
  cookies_lib%=@ldg_open("cookies.ldg")
  IF cookies_lib%>FALSE
    ' get the addresses for all 4 library calls
    cookie_getcookiejar%=@ldg_find("Cookie_GetCookieJar",cookies_lib%)
    cookie_getcookie%=@ldg_find("Cookie_GetCookie",cookies_lib%)
    cookie_newcookie%=@ldg_find("Cookie_NewCookie",cookies_lib%)
    cookie_removecookie%=@ldg_find("Cookie_RemoveCookie",cookies_lib%)
  ELSE
    PRINT "Error at open_cookies.ldg"
    EDIT
  ENDIF
RETURN
> PROCEDURE close_cookies.ldg
  IF @ldg_close(cookies_lib%)<>FALSE
    PRINT "Error at close_cookies.ldg"
    EDIT
  ENDIF
RETURN
> FUNCTION getcookiejar
  $F%
  RETURN C:cookie_getcookiejar%()
ENDFUNC
> FUNCTION getcookie(id%,VAR val%)
  $F%
  RETURN C:cookie_getcookie%(L:id%,L:V:val%)=1 !convert to boolean
ENDFUNC
> FUNCTION newcookie(id%,val%)
  $F%
  RETURN C:cookie_newcookie%(L:id%,L:val%)=1
ENDFUNC
> FUNCTION removecookie(id%)
  $F%
  RETURN C:cookie_removecookie%(L:id%)=1
ENDFUNC
'
' ---------------------------------------------------------------------------------------
> FUNCTION get_cookie(id%,VAR result%) !v1.00
  $F%  !return: false=not found/true=found
  LOCAL asm%
  asm%=LONG{HIMEM+24}
  RETURN C:asm%(L:id%,L:V:result%)
ENDFUNC
' -- LDG bindings by Lonny Pursell v1.00 --
> FUNCTION ldg_init(VAR version&)
  $F%
  ' return: true=init ok, or false=failed
  LOCAL ldg!
  CLR version&,ldg_%,ldg_open%,ldg_close%,ldg_find%,ldg_error%,ldg_libpath%,ldg_global%
  ldg!=@get_cookie(CVL("LDGM"),ldg_%)
  IF ldg_%>FALSE
    version&=WORD{ldg_%}
    ldg_open%=LONG{ldg_%+134}
    ldg_close%=LONG{ldg_%+138}
    ldg_find%=LONG{ldg_%+142}
    ldg_error%=ldg_%+150
    ldg_libpath%=LONG{ldg_%+164}
    ldg_global%=LONG{GB+4}
  ENDIF
  RETURN ldg!
ENDFUNC
> FUNCTION ldg_open(lib$)
  $F%
  ' return: lib descriptor, or negative error code (see ldg.h in devkit)
  LOCAL desc%
  lib$=lib$+CHR$(0)
  desc%=C:ldg_open%(L:V:lib$,L:ldg_global%)
  IF desc%=FALSE           !failed?
    desc%=WORD{ldg_error%} !get actual error code
  ENDIF
  RETURN desc%
ENDFUNC
> FUNCTION ldg_close(desc%)
  $F%
  ' null=closed ok, or negative error code
  RETURN C:ldg_close%(L:desc%,L:ldg_global%)
ENDFUNC
> FUNCTION ldg_find(func$,desc%)
  $F%
  ' return: address of function, null=not found
  func$=func$+CHR$(0)
  RETURN C:ldg_find%(L:V:func$,L:desc%)
ENDFUNC
> FUNCTION ldg_libpath(lib$,VAR path$)
  $F%
  ' return: true=found, false=not found
  LOCAL buff%,ret%
  INLINE buff%,130
  CHAR{buff%}=lib$
  ret%=C:ldg_libpath%(L:buff%,L:ldg_global%)
  path$=CHAR{buff%}
  RETURN ret%=1
ENDFUNC
> PROCEDURE ldg_debug(desc%)
  LOCAL i&,num&,list%,name%,info%,func%
  PRINT
  PRINT "    magic: ";MKL$(LONG{desc%})
  PRINT "  lib ver: $";HEX$(WORD{desc%+4},4)
  PRINT "       id: ";WORD{desc%+6}
  PRINT "      num: ";WORD{desc%+8}
  PRINT "     list: ";LONG{desc%+10}
  PRINT "    infos: ";CHAR{LONG{desc%+14}}
  PRINT " basepage: ";LONG{desc%+18}
  PRINT "    flags: %";BIN$(WORD{desc%+22},16)
  PRINT "    close: ";LONG{desc%+24}
  PRINT "proto ver: %";HEX$(WORD{desc%+28},4)
  PRINT "     path: ";CHAR{desc%+30}
  PRINT " user_ext: ";LONG{desc%+158}
  PRINT " addr_ext: ";LONG{desc%+162}
  PRINT
  num&=WORD{desc%+8}
  LET list%=LONG{desc%+10}
  FOR i&=0 TO num&-1
    LET name%=LONG{list%}
    info%=LONG{list%+4}
    func%=LONG{list%+8}
    ADD list%,12
    PRINT " num: ";i&+1
    PRINT "name: ";CHAR{name%}
    PRINT "info: ";CHAR{info%}
    PRINT "func: ";func%
    PRINT
  NEXT i&
RETURN
' eof
