'      xbios(4) returns 0 if low , 1 if medium, and 2 if high resolution
Rez=Xbios(4)
'
' set x_size to the width and y_size to the height of the screen
If Rez=0
  X_size=320
  Y_size=200
Endif
If Rez=1
  X_size=640
  Y_size=200
Endif
If Rez=2
  X_size=640
  Y_size=400
Endif
'
Gosub Screen_1                   ! each subroutine draws one screen
Gosub Wait_key                   ! wait for the user to press a key
Cls                              ! clear screen before calling next subroutine
Gosub Screen_4
Gosub Wait_key
Cls
Gosub Screen_2
Gosub Wait_key
Cls
Gosub Screen_3
Gosub Wait_key
Cls
Gosub Screen_5
'
'
'
'
' PROCEDURE wait_key
'
'      This subroutine pauses the program until the user presses a key.
'
Procedure Wait_key
  Repeat
  Until Inkey$<>""
Return                           ! end of wait_key
'
'
' PROCEDURE polar_to_rect
'
'      This procedure converts from the polar coordinate system to the
' rectangular coordinate system.  Pass r (radius) and theta (é) to
' polar_to_rect and it will return the x and y values.
'
Procedure Polar_to_rect(R,Theta,X%,Y%)
  *X%=R*Cos(Theta)
  *Y%=R*Sin(Theta)
Return                           ! end of polar_to_rect
'
'
' PROCEDURE limacon
'
'      This procedure returns the value of r (radius) necessary to draw
' a limacon given the angle of theta (é) and two scaling factors, m and n.
'
Procedure Limacon(Theta,M,N,R%)
  *R%=M+N*Cos(Theta)
Return                          ! end of limacon
'
'
' PROCEDURE rose
'
'      This procedure returns the value of r (radius) necessary to draw
' a rose given the angle theta (é), the number of leaves, n, and a scaling
' factor m. n determines the number of leaves in the rose. If n is even,
' then the rose will have 2n petals; if n is odd, there will be n leaves.
'
Procedure Rose(Theta,N,M,R%)
  *R%=M*Cos(N*Theta)
Return                         ! end of rose
'
'
' PROCEDURE denominator
'
'      This routine returns the denominator of a fraction in a number with
' a fractional component. The algorithm came from Dan Sandberg's article,
' Programming Insight: 0.8660254 ~ SQR(3)/2, from the May 1985 issue of BYTE.
'
Procedure Denominator(Num,D%)
  Local K
  Local A
  Local B
  Local Found!
  '
  K=1
  Found!=False
  A=Num
  Gosub Denom(A,*Found,*B)
  If Found!=False              ! check for such constants as
    A=Num/Sqr(2)               ! square root of 2
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num/Sqr(3)               ! square root of 3
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num/Sqr(5)               ! square root of 5
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num/Pi                   ! pi
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num/Pi^2                 ! pi^2
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num/Exp(1)               ! e
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num*Pi                   ! 1/pi
    K=Pi
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False
    A=Num*Pi^2                 ! 1/pi^2
    K=Pi^2
    Gosub Denom(A,*Found,*B)
  Endif
  If Found!=False              ! if denominator wasn't found reset k to one
    K=1
  Endif
  '
  *D%=B*K
Return                         ! end of denominator
'
'
' PROCEDURE denom
'
'      This routine actually calculates the denominator of the fraction.
' denom sets the boolean variable, found, to TRUE if the denominator is
' found. it returns the denominator in n%.
'
Procedure Denom(A,Fd%,N%)
  Local C
  Local Dun!
  Local Temp
  C=Abs(A)
  Temp=1
  Repeat
    Dun!=False
    Temp=Temp/C
    C=(1/C)-Int(1/C)
    If Temp>10000000
      Dun!=True
    Endif
  Until C<1.0E-07 Or Dun!=True
  If Dun!=False
    *N%=Int(Temp)
    *Fd%=True
  Endif
Return                         ! end of denom
'
'
' PROCEDURE screen_1
'
'      This procedure draws the first screen using the procedures limacon
' and polar_to_rect.
' NOTE: the following variables are GLOBAL: rez, x_size, and y_size.
'
Procedure Screen_1
  Local Steps               !number of divisions between upper and lower limits
  '                          of the function
  Local X_scale,Y_scale     !scaling factors
  Local L_limit,U_limit     !limits of funtion
  Local Theta_inc           !theta increment
  Local X,Y,X1,Y1           !end points of each line
  Local Theta,R             !angle and radius (polar coordinates)
  If Rez=0
    Steps=1000*Pi
  Endif
  If Rez=1
    Steps=2000*Pi
  Endif
  If Rez=2
    Steps=4000*Pi
  Endif
  '
  Y_scale=Y_size/2
  L_limit=0
  U_limit=2*Pi
  X_scale=X_size/2
  Theta_inc=X_scale/Steps
  '
  For Theta=L_limit To U_limit Step Theta_inc
    Gosub Limacon(Theta,Y_scale*3/4,Y_scale*3/4,*R)
    Gosub Polar_to_rect(R,Theta,*X,*Y)
    X1=X
    Y1=Y
    Gosub Limacon(Theta,Y_scale*3/4,-Y_scale*3/4,*R)
    Gosub Polar_to_rect(R,Theta,*X,*Y)
    If Rez<>1
      Line X1+X_scale,Y1+Y_scale,X+X_scale,Y+Y_scale
    Else
      Line X1*2+X_scale,Y1+Y_scale,X*2+X_scale,Y+Y_scale
    Endif
  Next Theta
Return                         ! end of screen_1
'
'
' PROCEDURE screen_2
'
'      This procedure draws the second screen using the procedures limacon
' and polar_to_rect.
' NOTE: the following variables are GLOBAL: rez, x_size, and y_size.
'
Procedure Screen_2
  Local Steps                !number of divisions between upper and lower limits
  '                           of function
  Local Y_scale,X_scale      !scaling factors
  Local L_limit,U_limit      !limits of funtion
  Local Theta_inc            !theta increment
  Local X,Y,X1,Y1            !endpoints of each line
  Local Theta,R              !angle and radius (polar coordinate system)
  If Rez=0
    Steps=250*Pi
  Endif
  If Rez=1
    Steps=500*Pi
  Endif
  If Rez=2
    Steps=1000*Pi
  Endif
  '
  Y_scale=Y_size/2
  L_limit=0
  U_limit=2*Pi
  X_scale=X_size/(U_limit-L_limit)
  Theta_inc=X_scale/Steps
  For Theta=L_limit To U_limit Step Theta_inc
    Gosub Limacon(Theta,Y_scale*9/14,Y_scale,*R)
    Gosub Polar_to_rect(R,Theta,*X,*Y)
    X1=X
    Y1=Y
    Gosub Limacon(Theta,Y_scale*9/14,-Y_scale,*R)
    Gosub Polar_to_rect(R,Theta,*X,*Y)
    If Rez<>1
      Line X+X_size*15/16,Y+Y_size/2,X1+X_size/16,Y1+Y_size/2
    Else
      Line X*2+X_size*15/16,Y+Y_size/2,X1*2+X_size/16,Y1+Y_size/2
    Endif
  Next Theta
Return                         ! end of screen_2
'
'
' PROCEDURE screen_3
'
'      This procedure draws the third screen using the SIN() and COS()
' functions along with the LINE command.
' NOTE: the following variables are GLOBAL: rez, x_size, and y_size.
'
Procedure Screen_3
  Local Steps               !number of divisions between upper and lower limits
  '                          of function
  Local Y_scale,X_scale     !scaling factors
  Local L_limit,U_limit     !limits of funtion
  Local X1,Y1,X2,Y2         !end points of each line
  Local I                   !looping variable
  Local I_inc               !i increment
  '
  If Rez=0
    Steps=500*Pi
  Endif
  If Rez=1
    Steps=750*Pi
  Endif
  If Rez=2
    Steps=1000*Pi
  Endif
  '
  Y_scale=Y_size/2
  L_limit=0
  U_limit=8*Pi
  X_scale=X_size/2
  I_inc=X_scale/Steps
  '
  For I=L_limit To U_limit Step I_inc
    X1=Sin(I)+1
    X2=Sin(I-3*Pi/4)+1
    Y1=Cos(I*3/4)+1
    Y2=Cos((I-3*Pi/4)*3/4)+1
    Line X1*X_scale,Y1*Y_scale,X2*X_scale,Y2*Y_scale
    Pause 1
  Next I
Return                         ! end of screen_3
'
'
' PROCEDURE screen_4
'
'      This procedure draws the fourth screen using the SIN() and COS()
' funcitions and the LINE command.
' NOTE: the following variables are GLOBAL: rez, x_size, and y_size.
'
Procedure Screen_4
  Local Steps               !number of divisions between upper and lower limits
  '                          of function
  Local Y_scale,X_scale     !scaling factors
  Local L_limit,U_limit     !limits of funtion
  Local I_inc               !i increment
  Local X1,Y1,X2,Y2         !end points of each line
  Local I                   !looping variable
  If Rez=0
    Steps=250*Pi
  Endif
  If Rez=1
    Steps=500*Pi
  Endif
  If Rez=2
    Steps=1000*Pi
  Endif
  '
  Y_scale=Y_size/2
  L_limit=0
  U_limit=5*Pi
  X_scale=X_size/2
  X_inc=X_scale/Steps
  '
  For I=L_limit To U_limit Step X_inc
    X1=Sin(I)+1
    X2=Sin(I-3*Pi/4)+1
    Y1=Cos(I*5/6)+1
    Y2=Cos((I-3*Pi/4)*5/6)+1
    Line X1*X_scale,Y1*Y_scale,X2*X_scale,Y2*Y_scale
    Pause 1
  Next I
Return                         ! end of screen_4
'
'
' PROCEDURE screen_5
'
'      This procedure draws the fifth screen using the procedures rose,
' polar_to_rect, and denominator.
' NOTE: the following variables are GLOBAL: rez, x_size, and y_size.
'
Procedure Screen_5
  Local Steps               !number of divisions between upper and lower limits
  '                          of function
  Local Y_scale,X_scale     !scaling factors
  Local L_limit,U_limit     !limits of funtion
  Local Theta_inc           !theta increment
  Local N                   !the number of petals drawn on the rose
  '                          NOTE: fractions yield interesting results
  Local X,Y,X1,Y1           !end points of each line
  Local Theta,R             !angle and radius (polar coordinate system)
  Local Den                 !denominator of the fraction (if found)
  Local Found!              !boolean flag indicating whether the denominator
  '                          was found or not
  If Rez=0
    Steps=1000*Pi
  Endif
  If Rez=1
    Steps=2000*Pi
  Endif
  If Rez=2
    Steps=4000*Pi
  Endif
  '
  Y_scale=Y_size/2
  L_limit=0
  X_scale=X_size/2
  '
  Print "    This routine draws flowers with the"
  Print "number of petals that you specify."
  Print "If you enter an odd number, n, a flower"
  Print "with n petals will be drawn. If you"
  Print "enter an even number, n, a flower with"
  Print "2n petals will be drawn. Flowers with"
  Print "large numbers of petals look like"
  Print "filled-in circles, so keep your number"
  Print "small. You can stop the drawing at any"
  Print "time by pressing a key. When the"
  Print "drawing has stopped, press any key to"
  Print "continue."
  Print
  Repeat
    Input "Input a positive number  (0 to quit)  ";N
  Until N>=0
  While N>0
    Cls
    U_limit=1
    Den=1
    If Int(N)<>N                   ! if the number isn't an integer,
      '                              find the denominator of the fraction
      Found!=False
      Gosub Denominator(N,*Den)    ! the denominator is returned in d
      U_limit=Den
    Endif
    If Odd(N*Den) And Odd(Den)     ! if the number is odd, the upper limit
      '                              should be pi * the denominator
      U_limit=Pi*U_limit
    Else
      U_limit=2*Pi*U_limit         ! if the number is even, the upper limit
      '                              should be 2pi * the denominator
    Endif
    Theta_inc=X_scale/Steps
    Theta=L_limit
    Repeat
      Gosub Rose(Theta,N,Y_scale,*R)
      Gosub Polar_to_rect(R,Theta,*X,*Y)
      X1=X
      Y1=Y
      Gosub Rose(Theta-Pi/(3*N),N,Y_scale,*R)
      Gosub Polar_to_rect(R,Theta-Pi/(3*N),*X,*Y)
      If Rez=1
        Line X1*2+X_scale,Y1+Y_scale,X*2+X_scale,Y+Y_scale
      Else
        Line X1+X_scale,Y1+Y_scale,X+X_scale,Y+Y_scale
      Endif
      Theta=Theta+Theta_inc
    Until Theta>U_limit Or Inkey$<>""
    Gosub Wait_key
    Print "Previous Number = ";N;" (";N*Den;"/";Den;")"
    Repeat
      Input "Input a positive integer  (0 to quit)  ";N
    Until N>=0
  Wend
Return                         ! end of screen_5
