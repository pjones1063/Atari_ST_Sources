' MODUL ALERT
' ===========
' Mit diesem Modul lassen sich ALERTs leicht in einer externen Datei verwalten.
' Dadurch kann
' a) der Anwender diese Fehlertexte in Grenzen seinem Geschmack anpassen,
' b) der Programmierer die Fehlertexte leichter pflegen,
' c) der Programmierer Fehlertexte mit (momentan 2) variablen Texten benutzen.
'
' Ich schlage vor, zum Programm einen SYS-Ordner anzulegen, in dem sich alle
' vom Programm benîtigten Dateien befinden, z.B. PROGRAMM.RSC, PROGRAMM.INF,
' und eben auch PROGRAMM.ALT - die Alerttexte.
'
' Die ALT-Datei muû ziemlich zu Anfang des Programms geladen werden, damit auch
' Fehlermeldungen, die schon im Initialisierungsteil des Programms auftreten
' kînnen, mit @alert() ausgegeben werden kînnen. Deshalb sollte die ALT-Datei
' z.B. auch vor der RSC-Datei geladen werden.
'
' Formatbeschreibung der ALERT-Strings:
' -------------------------------------
' #nnn bbb [s][1..15|1..15|1..15|1..15|1..15][1..10|1..10|1..10]
'
' #     = Zeiger, daû diese Zeile gÅltig ist
' nnn   = Fehler-Nummer, rechtsbÅndig, max. 3-stellig, mit fÅhrenden Nullen!
' bbb   = Button-Status fÅr drei verschiedene ProgrammzustÑnde. Momentan
'         benutze ich selbst nur den ersten Status, es ist aber durch diese
'         drei Zahlenwerte leicht mîglich, auch eine 3-Button-Alertbox je nach
'         Programmkontext mit einem anderen Default-Button zu zeigen.
'         Beispiel:
'         bbb=312       Status 1 = Button 3 ist DEFAULT-Button
'                       Status 2 = Button 1 ist DEFAULT-Button
'                       Status 3 = Button 2 ist DEFAULT-Button
' s     = Symbol fÅr ALERT-Box
'         0 = Nichts, 1 = Rufzeichen, 2 = Fragezeichen, 3 = Stopschild
'
' Es folgen dann nach GEM-Norm max. 5 Zeilen Ö max. 15 Zeichen ALERTBOX-Text
' sowie max. 3 Button-Texte Ö max. 10 Zeichen. Der lÑngste Button-Text gibt die
' Breite der Buttons (und ggf. der Alertbox) vor.
'
' ALT-Datei laden:
' ----------------
' FÅge einfach die Funktion @lade_programm_alt im Initialisierungsteil des
' Programmtextes an der entsprechenden Stelle ein. Die benîtigten Variablen
' sind ausfÅhrlich in der Funktion beschrieben.
' Zeilen, die nicht mit # beginnen, werden ignoriert.
'
' ALERT-Meldung ausgeben und auswerten:
' -------------------------------------
' An der gewÅnschten Programmstelle einfach den Befehl mit der gewÅnschten
' Fehlernummer einfÅgen, ggf. mit einem oder den beiden variablen Texten.
' Beispiele (vorab wird die entspr. in der ALT-Datei stehende Zeile gezeigt):
'
'       #001 222 [2][Programm|beenden?][Beenden| Abbruch ]
'       @alert(1,1,"","")
'
'       #100 111 [0][%s1 Dateien auf|Laufwerk %s2 |lîschen?][Lîschen| Abbruch ]
'       @alert(100,1,STR$(gefundene_dateien&),"A:")
'
' ALERT-Texte wÑhrend der Programmentwicklung Ñndern
' --------------------------------------------------
' FÅge die Zeile
' @change_programm_alt
' als erste Zeile in Dein Programm ein und REMme sie. Wenn Du einen Fehler-
' text Ñndern willst, entREMme diese Zeile und starte Dein Programm.
' So kannst Du bequem vor dem nÑchsten Programmstart einen, mehrere oder alle
' ALT-Datei-Zeilen Ñndern oder prÅfen. Die Prozedur ist ausreichend gut dokumen-
' tiert, kurzes Ausprobieren dÅrfte die Arbeitsweise rasch nÑherbringen.
'
> FUNCTION lade_programm_alt
$F%
'
' RETURN: FALSE, wenn zu wenig Speicher oder Datei falsch, sonst TRUE
' ======
' GLOBAL al_text$()           !Feld fÅr den benîtigten ALERT-String
' GLOBAL al_but&()            !Feld fÅr 3 verschiedene Button-Codes,
'                             !siehe Formatbeschreibung des ALERT-Strings
' GLOBAL programm_alt$        !Dateiname mit Pfad
' GLOBAL pfad_sysdaten$       !Zugriffspfad fÅr SYS-Dateien=SYS-Ordner
' GLOBAL prg$                 !Programm-Name ohne Endung
' GLOBAL alt$                 !Datei-Endung fÅr Alert-Datei, mit Punkt
' GLOBAL sys$                 !Name des SYS-Ordners ohne Pfad
LOCAL alert$                  !Dateiname ohne Pfad
LOCAL button|                 !RÅckgabewert der Alertbox(en)
LOCAL foo%                    !Parameter-Dummy
LOCAL al_cnt%                 !Anzahl gelesene Zeilen%
LOCAL al_nr&                  !Nummer des Fehlertextes
LOCAL i%                      !Laufvariable
'
alert$=prg$+alt$
'
alert_suchen_nochmal:
IF NOT EXIST(programm_alt$)
  ' ALERTBOX VOR @alert_in
  ALERT 3,alert$+" nicht gefunden.|Es muû in einem Ordner|namens "+sys$+" sein.",1," Suchen | Ende ",button|
  SELECT button|
  CASE 1      !SUCHEN
    @fileselect(FALSE,suche$+alert$,"*"+alt$,pfad_sysdaten$,alert$,programm_alt$,foo%)
    GOTO alert_suchen_nochmal
  CASE 2      !ABBRUCH
    RETURN FALSE              !Unbedingter Programmabbruch
    ' END     !Ende           !END reicht ggf. aus
  ENDSELECT
ENDIF
'
al_cnt%=@zeilenzaehler(programm_alt$)
IF al_cnt%=0
  RETURN FALSE                !Unbedingter Programmabbruch
ENDIF
'
~GRAF_MOUSE(busybee&,0)                       !MAUS-Cursor
ERASE al_text$(),al_but&()                    !Sicher ist sicher...
DIM al_text$(al_cnt%),al_but&(al_cnt%)        !Lese-Feld und Button_feld
OPEN "i",#1,programm_alt$                     !Datei îffnen,
RECALL #1,al_text$(),TRUE,al_cnt%             !einlesen
CLOSE #1                                      !und wieder zumachen.
'
INSERT al_text$(0)=""                         !FÅr OPTION BASE 1 REMmen
'
FOR i%=0 TO al_cnt%                           !Alle Zeilen durch
  IF LEFT$(al_text$(i%))="#"                  !Nur mit "#" Alerttext:
    al_nr&=VAL(MID$(al_text$(i%),2))          !fo_a_error_number
    ' ----------------------------------------!
    al_but&(al_nr&)=VAL(MID$(al_text$(i%),6)) !fo_adefbttn
    ' ----------------------------------------!
    al_text$(al_nr&)=TRIM$(MID$(al_text$(i%),10)) !fo_astring
  ENDIF
NEXT i%
RETURN TRUE
ENDFUNC
> FUNCTION alert(fehler&,butcode&,al_var_1$,al_var_2$)
$F%
'
' RETURN: Nummer des vom User gedrÅckten Alert-Buttons
' ======
' EXTERN fehler&      !Nummer des Fehler-Strings
' EXTERN butcode&     !Defaultbutton-Status, momentan immer 1, siehe auch
'                     !Formatbeschreibung des Alert-Strings
' EXTERN al_var_1$    !String, der in den Fehlertext ab %s1 eingefÅgt wird.
' EXTERN al_var_2$    !String, der in den Fehlertext ab %s2 eingefÅgt wird.
'
LOCAL al_var_1&       !Pointer auf 1. variablen Fehlertext
LOCAL al_var_2&       !Pointer auf 2. variablen Fehlertext
LOCAL text$
LOCAL button|         !RÅckgabewert der Alertbox(en)
LOCAL var_1$          !Platzhalter fÅr 1. variablen Fehlertext
LOCAL var_2$          !Platzhalter fÅr 2. variablen Fehlertext
LOCAL var_lang&       !LÑnge von var_1$/var_2$
'
LET var_1$="%s1"
LET var_1$="%s2"
LET var_lang&=LEN(var_1$)
'
' al_but&() enthÑlt drei Buttoncodes fÅr den DEFAULT-Button,
'           wobei durch Aufruf mit butcode& der gewÅnschte gewÑhlt wird.
'
al_var_1&=INSTR(al_text$(fehler&),var_1$)
SELECT al_var_1&
CASE 0
button|=FORM_ALERT(VAL(MID$(STR$(al_but&(fehler&)),butcode&,1)),al_text$(fehler&))
DEFAULT
al_var_2&=INSTR(al_text$(fehler&),var_2$)
SELECT al_var_2&
CASE 0
  text$=LEFT$(al_text$(fehler&),PRED(al_var_1&))
  text$=text$+al_var_1$+MID$(al_text$(fehler&),al_var_1&+var_lang&)
  button|=FORM_ALERT(VAL(MID$(STR$(al_but&(fehler&)),butcode&,1)),text$)
DEFAULT
  text$=LEFT$(al_text$(fehler&),PRED(al_var_1&))
  text$=text$+al_var_1$+MID$(al_text$(fehler&),al_var_1&+var_lang&,al_var_2&-al_var_1&-var_lang&)
  text$=text$+al_var_2$+MID$(al_text$(fehler&),al_var_2&+var_lang&)
  button|=FORM_ALERT(VAL(MID$(STR$(al_but&(fehler&)),butcode&,1)),text$)
ENDSELECT
ENDSELECT
'
RETURN button|
ENDFUNC
> PROCEDURE change_programm_alt !-!PP
' LOCAL alt$()        !Feld fÅr die Alerttext-Zeilen
LOCAL datei$          !Dateiname der Alerttexte mit Pfad
LOCAL i%              !Laufvariable
LOCAL j&              !Laufvariable
LOCAL nnn%            !Anzahl gelesene Zeilen
LOCAL in$             !Vom Programmierer gewÅnschte Fehlernummer
LOCAL default&        !Nummer des Default-Alertbuttons
LOCAL button|         !RÅckgabewert der Alertbox(en)
LOCAL loop&           !Anzahl Durchlauf-Schleifen bei Anzeige ALLER Texte
LOCAL max_alt&        !Max.-Anzahl Fehlertext-Zeilen
'
'
' *****
' Hier kommt der Name DEINER .ALT-Datei hin!
datei$="K:\MS\SYS\MAILSERV.ALT"
' *****
LET max_alt&=150
'
'
OPEN "i",#1,datei$
ERASE alt$()                          !Sicher ist sicher
DIM alt$(PRED(max_alt&))
RECALL #1,alt$(),max_alt&,nnn%
CLOSE #1
'
LOCATE 1,1                            !Dirty Ausgabe vor Programmstart...
ALERT 2,"Welche Fehlertexte Ñndern?",2,"Alle|Einzelne",button|
SELECT button|
CASE 1                !Alle
ALERT 2,"Anzahl DurchgÑnge|je Fehlertext?",1,"1|2| 3 ",loop&
FOR i%=0 TO PRED(max_alt&)          !OPTION BASE 0
  CLS
  FOR j&=1 TO loop&
    LOCATE 1,1
    FORM INPUT 255 AS alt$(i%)
    default&=VAL(MID$(alt$(i%),6,1))
    button|=FORM_ALERT(default&,MID$(alt$(i%),10))
    MID$(alt$(i%),6,3)=STRING$(3,STR$(button|))
  NEXT j&
NEXT i%
CASE 2                !einzelne
DO
  CLS
  LOCATE 1,1
  PRINT "Welchen Fehlertext Ñndern (Abbruch mit [ 0 ] oder[ -1 ]) ";
  FORM INPUT 3 AS in$
  i%=VAL(in$)
  EXIT IF i%<1      !Abbruchbedingung erfÅllt
  DEC i%            !wegen OPTION BASE 0 Fehlernummer DECreasen...
  LOCATE 1,4
  FORM INPUT 255 AS alt$(i%)
  default&=VAL(MID$(alt$(i%),6,1))
  button|=FORM_ALERT(default&,MID$(alt$(i%),10))
  MID$(alt$(i%),6,3)=STRING$(3,STR$(button|))
LOOP UNTIL i%=-1
CASE 3
in$=""
ENDSELECT
'
IF VAL(in$)=0
OPEN "o",#1,datei$
STORE #1,alt$(),max_alt&
CLOSE #1
ENDIF
'
ERASE alt$()          !Kann wieder weg...
RETURN
