' voila l'algorithme pour le calcul d'un polygone en gfa
DIM y(200,1)
' on prends un ecran d'une hauteur de 200
' a deux dimension:une pour le cote droit
' une autre pour le cote gauche...
DIM xpoly(5),ypoly(5)
' format du tableau:
' 1er sommet
' 2eme sommet
' ...
' pour boucler:on remet le 1er sommet
' puis -1 pour indiquer la fin
' le tout etant entre dans le sens trigonometrique
' (inverse du sens horaire)
point=0
ajoute_sommet(320,40)
ajoute_sommet(40,100)
ajoute_sommet(320,160)
ajoute_sommet(600,100)
ajoute_sommet(320,40)
ajoute_sommet(-1,-1)
point=0
REPEAT
  dy=ypoly(point+1)-ypoly(point)
  IF (dy<>0)
    ' si DELTA Y=0,cela ne sert a rien de calculer quoiqueque ce soit...
    IF (dy>0)
      ' on est du cote gauche...
      cote=0
      x1=xpoly(point)
      y1=ypoly(point)
      x2=xpoly(point+1)
      y2=ypoly(point+1)
      ' on est oblige de fixer l'ordre des parametres,car on trace
      ' du haut vers le bas pour simplifier la tache
    ELSE
      ' bah sinon,c'est la droite
      cote=1
      x1=xpoly(point+1)
      y1=ypoly(point+1)
      x2=xpoly(point)
      y2=ypoly(point)
    ENDIF
    approx_lin(x1,x2,y1,y2,m)
  ENDIF
  ' hop,mine de rien on a fait un cote,la...
  ' ...on fait le suivant!
  point=point+1
UNTIL (xpoly(point+1)=-1)
' affichage !
' d'abord on cherche le debut et la fin
' du polygone,pour ne pas perdre du temps et affiche
' des valeurs non efface...
point=0
ymin=200 ! plus grande valeur possible
ymax=0   ! plus petite valeur possible
REPEAT
  IF (ypoly(point)<ymin)
    ymin=ypoly(point)
  ELSE
    IF (ypoly(point)>ymax)
      ymax=ypoly(point)
    ENDIF
  ENDIF
  point=point+1
UNTIL (xpoly(point+2)=-1)
' puis on relit les extremetees...
FOR i=ymin TO ymax
  FOR j=y(i,0) TO y(i,1)
    PSET j,i,1
  NEXT j
NEXT i
' la routine vu la derniere fois,adapte aux polygones:
PROCEDURE approx_lin(x1,x2,y1,y2,m)
  ' on considere que l'on va du haut vers le bas
  ' dans cette routine.
  '
  ' c'est la que l'on se rend compte de la sup‚riorit‚e de l'assembleur
  ' au niveau vitesse...
  ' recod‚e en assembleur, cette routine prends 10 lignes
  ' au pire 20,en n'utilisant aucune astuce
  ' (addx.l...je vous en avais parl‚ dans l'article pr‚c‚dent)
  m=(x2-x1)/(y2-y1)
  gain=SGN(m)
  mint=TRUNC(m)
  mfloat=FRAC(m)*1000*gain
  sauveint=x1
  sauvefloat=(0.5*1000)
  cpt=0
  FOR i=y1 TO y2
    y(i,cote)=sauveint
    PSET sauveint,i,1
    sauvefloat=sauvefloat+mfloat
    IF sauvefloat>1000
      sauvefloat=sauvefloat-1000
      sauveint=sauveint+gain
      cpt=cpt+1
    ENDIF
    sauveint=sauveint+mint
  NEXT i
RETURN
' pour se faciliter la tache:
PROCEDURE ajoute_sommet(x,y)
  xpoly(point)=x
  ypoly(point)=y
  point=point+1
RETURN
