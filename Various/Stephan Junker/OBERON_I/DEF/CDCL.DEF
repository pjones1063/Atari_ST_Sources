DEFINITION CDCL;

(* CDCL (CircularDoubleChainedList) implements a double pointer chained
 * list, i.e. a list of records which have one pointer to the next and one
 * to the previous element. The last element points to the first, so that
 * there is no really first and last element.
 * The base type Element can be extended for all purposes.
 *
 * Usage:
 * First allocate a variable of type List and initialize it. Then edit the
 * list using Add, Append, Insert and Delete.
 * The list is empty if root is NIL.
*)


TYPE Elem*    = POINTER TO Element;
     Element* = RECORD
                  next-,prev- : Elem;
                END(*RECORD*);
     List*    = POINTER TO ListDesc;
     ListDesc*= RECORD
                  root- : Elem;

                  PROCEDURE(l : List) Init*;
                    (* initializes a list of elements *)

                  PROCEDURE(l : List) Add*(e : Elem);
                    (* adds element e at the beginning of list l *)

                  PROCEDURE(l : List) Append*(e : Elem);
                    (* adds element e at the end of list l *)

                  PROCEDURE(l : List) Delete*(e : Elem);
                    (* deletes element e in list l. The memory is not disposed! *)

                  PROCEDURE(l : List) Insert*(next, e : Elem);
                    (* inserts element e in list l in front of element next. This element
                     * will become the next element of e. If next is NIL, e will become
                     * the last element. This is done quicker with l.Append(e).
                     * If next is equal to list.root, e will become the first element in
                     * the list. This is done quicker with l.Add(e).
                     *)
                END;


END CDCL.
