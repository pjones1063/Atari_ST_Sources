MODULE WinView; (* SJ 31.10.93 / 7.12.94 *)

(*
 WinView implements viewers which are displayed using standard AES
 windows. Most window functions are served automatically, but they can
 of course be overridden if a service doesn't meet your specification.

 An ACCLOSE message is reacted on by closing and deleting the windows.
 The viewers, however, remain present and can be reopened later. The
 message event is not deleted in the event record so that other handlers
 will receive this message, too. Other handlers must work the same way.
 *)


CONST
  UpdateAll* = NIL; (* aspect: update everything *)



TYPE
  Viewer*      = POINTER TO ViewDesc;
  ViewDesc*    = RECORD(Model.DependDesc)
    nextWin-    : Viewer;
    handle-     : INTEGER;
    elements-   : SET;
    opened-     : BOOLEAN;
    x-,y-,w-,h- : INTEGER; (* position and size of work space *)
    fx-,fy-,fw-,fh- : INTEGER; (* maximum size *)
    xOff-,yOff- : LONGINT; (* offset in pixels *)
    lSize-,cSize-:INTEGER; (* pixels per line/column *)
    dw-,dh-     : LONGINT; (* width and height of data in pixels *)
    title-,info-: ARRAY 160 OF CHAR;
    children-   : LinkedList.Desc;
    parent-     : Viewer;
  END;


VAR
  Windows- : Viewer; (* the list of viewers *)
  minYPos- : INTEGER;

  Iconify*: PROCEDURE (v: Viewer; all, inOne: BOOLEAN);
  (*
   Executed to iconify one or all windows. Implemented in module
   IconifiedViewer. If not linked, no iconify works.
   *)



PROCEDURE(v : Viewer) Redraw*(x,y,w,h : INTEGER);
(*
 This procedure redraws the rectangle x,y,w,h (absolute) in viewer v.
 *)


PROCEDURE(v : Viewer) Snap*;
(*
 corrects the size and coordinates to certain rastered values.
 Override if desired. Default: Do nothing.
 *)


PROCEDURE(v : Viewer) VSlider*;
(*
 sets the vertical slider according to the values in v.dh and v.yOff.
 Override if this is not what you desire
 *)


PROCEDURE(v : Viewer) HSlider*;
(*
 sets the horizontal slider according to the values in v.dw and v.xOff.
 Override if this is not what you desire
 *)


PROCEDURE(v : Viewer) Fulled*;
(*
 sets the size of the window to full size or, if it has already full
 size, to the size it had before
 *)


PROCEDURE(v: Viewer) UpdateRect*(x,y,w,h : INTEGER);
(*
 calls v.Redraw in order to redraw the rectangle x,y,w,h.
 Window update is switched on and the mouse is invisible.
 *)


PROCEDURE(v : Viewer) Update*(aspect : Model.Aspect);
(*
 calls v.UpdateRect with the whole window as rectangle. aspect is
 ignored
 *)


PROCEDURE(v : Viewer) PageUp*;
(*
 displays the data of the previous page
 *)


PROCEDURE(v : Viewer) PageDown*;
(*
 displays the data of the next page
 *)


PROCEDURE(v : Viewer) PageLeft*;
(*
 displays the data of the page to the left
 *)


PROCEDURE(v : Viewer) PageRight*;
(*
 displays the data of the page to the right
 *)


PROCEDURE GetViewer*(handle : INTEGER; VAR v : Viewer) : BOOLEAN;
(*
 returns true if the viewer with the AES handle is found
 *)


PROCEDURE GetTop*(VAR v : Viewer) : BOOLEAN;
(*
 returns the current top viewer. If there is no viewer, false is
 returned
 *)


PROCEDURE(v : Viewer) IsTop*() : BOOLEAN;
(*
 returns true if v is the current top viewer
 *)


PROCEDURE(v : Viewer) LineUp*;
(*
 displays the data of the previous line
 *)


PROCEDURE(v : Viewer) LineDown*;
(*
 displays the data of the next line
 *)


PROCEDURE(v : Viewer) ColLeft*;
(*
 displays the data one column to the left
 *)


PROCEDURE(v : Viewer) ColRight*;
(*
 displays the data one column to the right
 *)


PROCEDURE(v : Viewer) Open*;
(*
 opens a window at x,y with size w,h as defined in the viewer. Those values
 refer to the size of the work area! If opening fails, an error message is
 shown and v.opened will be FALSE.
 If you do not return to the event loop immediately, you have to call
 v.Update( WinView.UpdateAll) since the open method will not redraw it.
 This is because opening is followed by a redraw message and two redraws
 would be done if Open would call it.
 *)


PROCEDURE(v : Viewer) Close*;
(*
 closes the window defined by v. Closing implies deleting from the sight of
 the AES, so the window handle will be available again. However, the
 contents of v is untouched and the viewer may be opened again without any
 changing
 *)


PROCEDURE(v : Viewer) SetPos*(x,y : INTEGER);
(*
 sets the position of viewer v. The viewer is redrawn at the new position
 *)


PROCEDURE(v : Viewer) SetSize*(w,h : INTEGER);
(*
 sets the size of viewer v. The viewer is redrawn with the new size
 *)


PROCEDURE(v : Viewer) SetElements*(elements : SET);
(*
 sets the window elements of viewer v. The viewer is redrawn with the new
 elements
 *)


PROCEDURE(v : Viewer) SetFullSize*(fx,fy,fw,fh : INTEGER);
(*
 sets the maximum size of a viewer. This size is used if the window is to
 be fulled. This setting has no direct affect on the viewer.
 *)


PROCEDURE(v : Viewer) SetOffset*(xOff,yOff : LONGINT);
(*
 sets the offset in x and y direction. The offset defines the number of
 pixels invisible at the left and upper margin and tells the redraw
 procedure where to start with the redraw. These values are changed by the
 procedures which react on WM_ARROW and WM_xSLID messages. The contents of
 the viewer is redrawn immediately
 *)


PROCEDURE(v : Viewer) SetLCSize*(lSize,cSize : INTEGER);
(*
 sets the size of a line and a column in pixels. These values are used by
 the procedures reacting on WM_ARROW in order to shift the contents. This
 setting has no direct affect on the viewer.
 *)


PROCEDURE(v : Viewer) SetDataWH*(dw,dh : LONGINT);
(*
 sets the size of the whole data to display in pixels. These values are
 used by the procedures which set the horizontal and vertical sliders. Both
 are redrawn after this setting
 *)


PROCEDURE(v : Viewer) SetTitle*(title : ARRAY OF CHAR);
(*
 sets the title of the window
 *)


PROCEDURE(v : Viewer) HandleKeyEvent*(shiftbits : SET; scancode : INTEGER;
                                      char : CHAR) : BOOLEAN;
(*
 is called if a key is pressed and v is the top window. It reacts on some
 standard keys to scroll the window, override for others. If a key is
 responded to, return true in order to clear the event.
 *)


PROCEDURE(v : Viewer) Topped*;
(*
 called if the user wants to top viewer v
 *)


PROCEDURE(v : Viewer) HSlid*(pos : INTEGER);
(*
 called if the user slided the horizontal slider to position Pos
 *)


PROCEDURE(v : Viewer) VSlid*(pos : INTEGER);
(*
 called if the user slided the vertical slider to position Pos
 *)


PROCEDURE(v : Viewer) Sized*(newW, newH : INTEGER);
(*
 called if the user changed the size of viewer v to newW, newH
 *)


PROCEDURE(v : Viewer) Moved*(newX, newY : INTEGER);
(*
 called if the user moved viewer v to position newX, newY
 *)


PROCEDURE(v : Viewer) HandleMsgEvent*(VAR msgBuf : Evnt.msgbuf) : BOOLEAN;
(*
 is called if a message is received which concerns the viewer v. The
 messages WMREDRAW, WMTOPPED, WMCLOSED, WMFULLED, WMARROWED, WMHSLID,
 WMVSLID, WMSIZED and WMMOVED are serviced. Override for other messages
 *)


PROCEDURE(v : Viewer) HandleMouseEvent*(mbut : SET; mx, my, clicks : INTEGER) : BOOLEAN;
(*
 Is called if a mouse event occurred in the work area of viewer v.
 Must return true if the event should not be distributed further.
 A mouse event occurs on every movement of the mouse.
 Default: Do nothing.
 *)


PROCEDURE(v : Viewer) HandleButtonEvent*(mbut : SET; mx, my, clicks : INTEGER) : BOOLEAN;
(*
 Is called if a mouse event occurred in the work area of viewer v.
 Must return true if the event should not be distributed further.
 A mouse event occurs on button clicks.
 Default: Do nothing.
 *)


PROCEDURE(v : Viewer) Initialize*;
(*
 Intializes a new viewer. It is stored in a list, so don't dispose its
 memory! The fields are initialized as follows: handle = -1, x = fx = 0, y
 = fy = minY, w = 620, h = = 340, fw = maxX + 1, fh = maxY + 1 - minY,
 opened = FALSE, xPos = 0, yPos = 0, lSize = 16, cSize = 8, elements = all
 elements, title = "Untitled", info = "".
  *)


PROCEDURE(v : Viewer) Remove*;
(*
 removes v from the viewer list and disposes its memory. It will be
 closed if open.
 *)


PROCEDURE CloseAll*;
(*
 closes all windows. This can be used before calling a program
 *)


PROCEDURE OpenAll*;
(*
 opens all windows again which were closed by CloseAll. OpenAll may only be
 called after CloseAll. This can be used after calling a program
 *)


PROCEDURE (v: Viewer) SetTrace*(set: BOOLEAN);
(*
 If set = TRUE, switch tracing on, else switch it off and release all
 models. When tracing, the current model is stored in a list when a new
 model is assigned to the viewer. The the user can switch back to the
 previous model selecting the close button with the shift key pressed. He
 can switch to the next model by pressing the alternate key when selecting
 the close button. The current trace list is cleared.
 *)


PROCEDURE (self: Viewer) SetModel*(m: Model.Ptr);
(*
 Set the model of the viewer. This causes an Update(NIL) message.
 *)


END WinView.