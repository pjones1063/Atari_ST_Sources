DEFINITION Math;

(*****************************************************************************)
(* Oakwood-compatible Math                                                   *)
(* --------------------------------------------------------------------------*)
(* Mathematical functions for the type REAL.                                 *)
(* --------------------------------------------------------------------------*)
(* 27-Okt-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

CONST
  pi = 3.1415926535897932384626433832795028841972;
  e  = 2.7182818284590452353602874713526624977572;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE sqrt ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the positive square root of <x>.
   <x> must not be negative.
 *)


PROCEDURE exp ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the mathematical constant e raised to the
   power of <x>.
 *)


PROCEDURE power ((* in / -- *) x    : REAL;
                 (* in / -- *) base : REAL ): REAL;

(* Returns an approximation to the result obtained by raising <base> to
   the power of <x>.
   If <base> is negative, <x> must not have a fractional part.
   If <base> is zero, <x> must be greater than zero.
 *)


PROCEDURE ln ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the natural logarithm of <x>.
   <x> must be greater than zero.
 *)


PROCEDURE log ((* in / -- *) x    : REAL;
               (* in / -- *) base : REAL ): REAL;

(* Returns an approximation to the result obtained by computing the
   logarithm of <x> to the base <base>.
   Both <x> and <base> must be greater than zero.
 *)


PROCEDURE round ((* in / -- *) x : REAL ): REAL;

(* Returns the nearest integral value to the value of <x>.
   If the value of <x> is midway between two integral values, the next
   even integral value will be returned.
 *)


(* The angle in all trigonometric functions is measured in radians *)

PROCEDURE sin  ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the sine of <x>. *)


PROCEDURE cos ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the cosine of <x>. *)


PROCEDURE tan ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the tangent of <x>.
   <x> must not be an odd multiple of pi/2.
 *)


PROCEDURE arcsin ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse sine of <x>, in the
   range (-pi/2, pi/2].
   |<x>| must be less than or equal to one.
 *)


PROCEDURE arccos ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse cosine of <x>, in the
   range [0, pi].
   |<x>| must be less than or equal to one.
 *)


PROCEDURE arctan ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse tangent of <x>, in the
   range (-pi/2, pi/2].
 *)


PROCEDURE arctan2 ((* in / -- *) y : REAL;
                   (* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse tangent of <y> / <x>, in the
   range (-pi, pi].
   If <x> is zero, then <y> must not be zero.

   This routine can be used to transform rectangular to polar cordinates.
 *)


PROCEDURE sinh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the hyperbolic sine of <x>. *)


PROCEDURE cosh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the hyperbolic cosine of <x>. *)


PROCEDURE tanh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the hyperbolic tangent of <x>. *)


PROCEDURE arcsinh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse hyperbolic sine of <x>. *)


PROCEDURE arccosh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse hyperbolic cosine of <x>.
   <x> must not be less than one.
 *)


PROCEDURE arctanh ((* in / -- *) x : REAL ): REAL;

(* Returns an approximation to the inverse hyperbolic tangent of <x>.
   |<x>| must be less than one.
 *)

END Math.
