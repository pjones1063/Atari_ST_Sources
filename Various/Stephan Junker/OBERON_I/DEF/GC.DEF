MODULE GC;

(*
 GC is the abbreviation of Garbage Collector. A garbage collector
 scans the memory for allocated data which is not referenced
 anymore. This data is then disposed. This GC offers a special feature:
 It installs a coroutine in module XCoroutines. If this coroutine is
 executed, it performs a small part of the collection and transfers
 execution to the previously active coroutine. This way, garbage is
 constantly removed without the user taking notice of it. It is of course
 possible to do a complete collection at once. When memory gets short, the
 collector is automatically called by Storage.
 It is possible to store procedures to be called if a specific object
 (memory area) is to be collected. It is also possible to deny collection.
 For example, Files needs to close the GEMDOS file if a file handle object
 is collected. Only use this feature if really needed. The more procedures
 are installed, the slower the collection, because for every object to be
 collected the array of finalize procedures must be scanned.
 It is also possible to store a procedure for whole class of objects.
 *)



TYPE
  FinaleProc* = PROCEDURE (obj: S.PTR) : BOOLEAN;
  PtrProc* = PROCEDURE (ptr: S.PTR);



PROCEDURE Dispose*(obj: S.PTR);
(*
 You have to dispose an object using this procedure if you want the stored
 finalization procedures to be executed. SYSTEM.DISPOSE calls Storage.Dispose
 directly.
 *)


PROCEDURE Collect*;
(*
 Collect all garbage immediately.
 Should not be necessary if you enabled coroutine execution.
 *)


PROCEDURE NotifyWhenCollectable*(obj: S.PTR; proc: FinaleProc;
  allInstances: BOOLEAN);
(*
 Stores procedure to be notified if obj is going to be collected. Collection
 can be inhibited if proc answers false. All those returning true will be
 removed from the notifier list.
 If allInstances is true, proc will be called for all objects with the same
 type descriptor as obj. Then obj is not needed anymore after a call of
 this procedure, so you may dispose it using SYSTEM.DISPOSE if you just
 allocated it for this purpose.
 *)


PROCEDURE AllPointersDo*(proc: PtrProc);
(*
 Execute proc for every pointer known to the system. The pointer given to
 proc is a pointer to the pointer! This way it is possible to change all
 references of an object to another object (but time consuming).
 *)


END GC.