DEFINITION LowReal;

(*****************************************************************************)
(* M2-ISO-LowReal, STJ-Oberon-2-Version                                      *)
(* --------------------------------------------------------------------------*)
(* Access to underlying properties of the type REAL.                         *)
(* --------------------------------------------------------------------------*)
(* 15-Okt-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

IMPORT S:=SYSTEM;

(* The following constants refer only to the default properties of stored
   real number values.

  radix      : Radix to represent real number values
  places     : Number of 'radix' places to store real number values
  expoMin    : Minimum exponent
  expoMax    : Maximum exponent
  large      : Largest real number value
  small      : Smallest positive real number value, represented to maximal
               precision (normalized)
  IEC559     : Implementation conforms to IEC 559:1989 (IEEE 754:1987) in
               all regards
  LIA1       : Implementation conforms to ISO/IEC 10967-1:199x in all regards
  rounds     : Each real number operation produces a result nearest to the
               mathematical result.
  gUnderflow : There are values between 0.0 and 'small' (denormalized)
  exception  : Each real number operation that attempts to produce a value
               out of range raises an exception
  extend     : Real number expressions can be computed to higher precision
               than the stored values.
  nModes     : Number of bits needed for the status flags for mode control
 *)

CONST
  radix      = 2;
  places     = 24; (* 23 + 'hidden bit' *)
  expoMin    = -126;
  expoMax    = 127;
  large      = S.VAL(REAL,7F7FFFFFH);
  small      = S.VAL(REAL,00800000H);
  IEC559     = FALSE;
  LIA1       = FALSE;
  rounds     = FALSE;
  gUnderflow = FALSE;
  exception  = FALSE;
  extend     = FALSE;
  nModes     = 1;

TYPE
  Modes = SET;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE exponent ((* in / -- *) x : REAL ): INTEGER;

(* Returns the exponent value of <x>, in the range [expoMin..expoMax].
   <x> must not be zero (else 0 will be returned).
 *)


PROCEDURE fraction ((* in / -- *) x : REAL ): REAL;

(* Returns the significant part of <x>. *)


PROCEDURE sign ((* in / -- *) x : REAL ): REAL;

(* Returns one of the following values:

   -1.0, if <x> is less than zero
    1.0, if <x> is greater than zero
   1.0 or -1.0, if x is zero, in order to distinguish between +0.0 and
   -0.0, for implementations that support these.
 *)


PROCEDURE succ ((* in / -- *) x : REAL ): REAL;

(* Returns the next value of <x> greater than <x>, if such a value exists
   (else +Inf will be returned).
 *)


PROCEDURE ulp ((* in / -- *) x : REAL ): REAL;

(* Returns the value of a unit in the last place of <x>

   Either ulp(x) = succ(x) - x or ulp(x) = x - pred(x) or both are true.
 *)


PROCEDURE pred ((* in / -- *) x : REAL ): REAL;

(* Returns the previous value of <x> less than <x>, if such a value exists
   (else -Inf will be returned).
 *)


PROCEDURE intpart ((* in / -- *) x : REAL ): REAL;

(* Returns the integral part of <x>. For negative values -intpart(abs(x))
   will be returned.
 *)


PROCEDURE fractpart ((* in / -- *) x : REAL ): REAL;

(* Returns the fractional part of <x>.
   The following relationship holds:

   x = intpart(x) + fractpart(x).
 *)


PROCEDURE scale ((* in / -- *) x : REAL;
                 (* in / -- *) n : INTEGER  ): REAL;

(* Returns the value of x * radix^n, if such a value exists (else +Inf
   or 0.0 will be returned).
 *)


PROCEDURE trunc ((* in / -- *) x : REAL;
                 (* in / -- *) n : INTEGER  ): REAL;

(* Returns the value of the most significant <n> places of <x>.
   <n> must be greater than zero (else 0.0 will be returned).
 *)


PROCEDURE round ((* in / -- *) x : REAL;
                 (* in / -- *) n : INTEGER  ): REAL;

(* Returns the value of <x> rounded to the most significant <n> places.
   <n> must be greater than zero (else 0.0 will be returned).
 *)


PROCEDURE synthesize ((* in / -- *) expart  : INTEGER;
                      (* in / -- *) frapart : REAL    ): REAL;

(* Returns the real number value constructed from <frapart> and <expart>
   that satisfies the relationship: x = synthesize(exponent(x), fraction(x)).
 *)


PROCEDURE setMode ((* in / -- *) m : Modes );

(* Sets status flags appropriate to the underlying implementation of
   type REAL.
 *)


PROCEDURE currentMode ( ): Modes;

(* Returns the current status flags. *)

END LowReal.
