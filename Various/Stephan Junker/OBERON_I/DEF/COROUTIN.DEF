MODULE Coroutines; (* SJ 9.12.94 *)

(*
 Module Coroutines provides non-preemptive threads each with its
 own stack but otherwise sharing a common address space.
 Coroutines can explicitly transfer control to other coroutines
 which are then resumed from the point where they did their last
 transfer of control.

Operations

ú Init(p, s, c)   creates and initialises a new coroutine c with a
                  stack of s bytes and a body provided as the procedure
                  p.  An initialised coroutine can be started by a
                  Transfer to it.  In this case its execution will start
                  at the first instruction of p. Procedure p must never
                  return.

ú Transfer(f, t)  transfers control from the currently executing
                  coroutine to the coroutine t. The state of the currently
                  executing coroutine is saved in f.  When control is
                  transferred back to f later, f will be restarted in the
                  saved state.

Source:

Proposed by Prof Hanspeter M”ssenb”ck, ETH.
 *)



TYPE
  Coroutine* = RECORD
  END;
  Body* = PROCEDURE;



PROCEDURE Init* (body: Body; stackSize: LONGINT;
          VAR cor: Coroutine);


PROCEDURE Transfer* (VAR from, to: Coroutine);


PROCEDURE Dispose* (VAR co: Coroutine);
(*
 Free the stack memory of co.
 (Additional procedure by SJ)
 *)


END Coroutines.

