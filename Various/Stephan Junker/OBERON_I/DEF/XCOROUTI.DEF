MODULE XCoroutines; (* SJ 27.2.95 *)

(*
 Extended coroutine control.
 If a coroutine calls Task.Exit with -1 as parameter (severe error), it is
 removed from the list and execution transferred to the main routine.
 *)



TYPE
  CoroutinePtr* = POINTER TO Coroutines.Coroutine;

  Coroutine* = POINTER TO RECORD(LinkedList.ElemDesc)
  END;


VAR
  main- : Coroutine;
  (*
   To be used by the main program as source when calling
   Coroutines.Transfer. main is not entered in the coroutine list.
   *)

  current-: Coroutine;
  (*
   A pointer to the currently active coroutine. To be used as source
   coroutine when calling Transfer.
   *)

  previous-: Coroutine;
  (*
   A pointer to the previously active coroutine. To be used as destination
   coroutine when calling Transfer if you want to transfer to the routine
   which called the current one.
   *)



PROCEDURE New*(body: Coroutines.Body; stackSize: LONGINT) : Coroutine;
(*
 Answer a new coroutine. The coroutine is added to the list.
 *)


PROCEDURE Transfer*(from, to: Coroutine);
(*
 Transfer cpu access from coroutine from to coroutine to.
 *)


PROCEDURE TransferTime*(from, to: Coroutine; time: LONGINT);
(*
 Transfer cpu access from coroutine from to coroutine to. Subsequent calls
 of Transfer or TransferTime will be ignored until time * 5ms has elapsed.
 *)


PROCEDURE ClearTime*;
(*
 Reset the timer so that the next transfer is executed.
 *)


PROCEDURE Next*() : Coroutine;
(*
 Answer the next coroutine in the list or main if none.
 *)


PROCEDURE Add*(VAR coroutine : Coroutines.Coroutine) : Coroutine;
(*
 Add a coroutine to the list. Answer the coroutine.
 *)


PROCEDURE Remove*(coroutine: Coroutine);
(*
 Remove a coroutine from the list and dispose its stack memory. If the
 removed coroutine is the current one, Transfer is called to transfer
 operation to the next coroutine.
 *)


END XCoroutines.