MODULE StringDictionary;


(*
 Stores extensions of type ElementDesc in a hash table. The key to an
 element is a string. Several elements with the same key are stored in a
 linked list.
 *)


TYPE
  KeyPtr* = POINTER TO ARRAY 100 OF CHAR;

  ElementDesc* = RECORD (* for extension *)
    next*: Element;     (* use only if you know what you are doing! *)
    key* : KeyPtr;      (* dito *)
  END;

  ElementProc* = PROCEDURE (e: Element);

  Desc* = RECORD
  END;
  Ptr* = POINTER TO Desc;



PROCEDURE (elem: Element) SetKey*(aKey: ARRAY OF CHAR);
(*
 Set the key of the receiver to aKey.
 *)


PROCEDURE (elem: Element) Key*(VAR aKey: ARRAY OF CHAR);
(*
 Answer the key of the receiver.
 *)


PROCEDURE (VAR dict: Desc) InitializeTo*(size: INTEGER);
(*
 Initialize the receiver to a dictionary with size number of element lists.
 size should be a prime number.
 *)


PROCEDURE (VAR dict: Desc) Size*() : INTEGER;
(*
 Answer the number of elements stored in the receiver.
 *)


PROCEDURE (VAR dict: Desc) Add*(elem: Element);
(*
 Add elem to the receiver. If an element with the same key exists, it is
 replaced.
 *)


PROCEDURE (VAR dict: Desc) Remove*(aKey: ARRAY OF CHAR);
(*
 Remove the element with that key. Do nothing if the key is not found.
 *)


PROCEDURE (VAR dict: Desc) TestAt*(
  aKey: ARRAY OF CHAR;
  VAR elem: Element) : BOOLEAN;
(*
 Store the element stored for aKey in elem. Answer true if found.
 *)


PROCEDURE (VAR dict: Desc) At*(aKey: ARRAY OF CHAR) : Element;
(*
 Answer the element stored for aKey. Abort with HALT if not found.
 *)


PROCEDURE (VAR dict: Desc) Do*(aBlock: ElementProc);
(*
 Call aBlock with every element in the receiver. The order is arbritrary.
 *)


END StringDictionary.