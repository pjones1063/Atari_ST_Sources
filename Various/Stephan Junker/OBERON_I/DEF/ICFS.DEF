MODULE ICFS;

(*
 Support of Dirk Haun's ICFS.
 If it is not installed, a primitive replacement handles the messages
 GETPOS and FREEPOS. All others return a -1.
 *)



TYPE
  Config* = RECORD
    version- : INTEGER;
    config-  : INTEGER;
    xsize-, ysize-, xspace-, yspcace-: INTEGER;
  END;



PROCEDURE GetSize*(VAR w, h: INTEGER) : INTEGER;
(*
 Answer the size of an iconized window in w and h. Answer the version of
 ICFS.
 *)


PROCEDURE GetPos*(VAR x, y, w, h: INTEGER) : INTEGER;
(*
 Answer the position and size of an iconized window in w and h. Answer the
 window number for identification.
 *)


PROCEDURE FreePos*(handle: INTEGER) : INTEGER;
(*
 Free the window position with number handle.
 *)


PROCEDURE Snap*(handle: INTEGER; VAR x, y: INTEGER) : INTEGER;
(*
 Answer a new window coordinate so that the icon window is positioned in
 the normal raster.
 *)


PROCEDURE GetBigPos*(wf, hf: INTEGER; VAR x, y, w, h: INTEGER) : INTEGER;
(*
 Answer the position and size of a big iconized window in w and h. Answer
 the window number for identification.
 *)


PROCEDURE FreeAll*() : INTEGER;
(*
 Free all window positions.
 *)


PROCEDURE Info*(VAR conf: Config) : INTEGER;
(*
 Answer the configuration data of ICFS.
 *)


PROCEDURE Configure*(config: SET) : INTEGER;
(*
 Set the configuration of ICFS.
 *)


PROCEDURE SetSize*(nw, nh: INTEGER) : INTEGER;
(*
 Set the size of an iconized window to nw and nh.
 *)


PROCEDURE SetSpace*(nx, ny: INTEGER) : INTEGER;
(*
 Set the space between iconized windows to nw and nh.
 *)


PROCEDURE NextInfo*(VAR conf: Config) : INTEGER;
(*
 Answer the next configuration
 *)


PROCEDURE WinOpen*(handle: INTEGER) : INTEGER;
(*
 Answer the number of open windows
 *)


END ICFS.