MODULE TermWin; (* Stephan Junker  9.11.93 *)

(* TermWin extends the object WinView.Viewer in order to provide a simple
 * method of displaying text data in a window. The usual output procedures
 * WriteChar etc. are implemented as procedures bound to the viewer.
 * Input of characters is automatically displayed. If return or enter
 * is pressed, a stored procedure is called with the contents of the
 * current line as argument. The string is written into and read from the
 * terminal, but the line is not left. If other behaviour is desired,
 * just override HandleKeyEvent (by extending WriteTerminal.Viewer) and
 * react on the desired keys. For example, react on cursor up and down
 * by displaying a command history. ReadTerminal works only with the
 * characters stored in the terminal window, so you may write a different
 * string without causing trouble.
 *
 * Usage:
 * Allocate and initialize an object of type TermWin.Viewer (or an
 * extension of that type). Use the methods Open and Close to open and
 * close the window. Store a procedure to handle string inputs.
 *)



TYPE
  Viewer*   = POINTER TO ViewDesc;

  StringProc* = PROCEDURE (v: Viewer; VAR string: ARRAY OF CHAR);

  ViewDesc* = RECORD(WinView.ViewDesc)
    rows-,cols- : INTEGER;
    curx-,cury- : INTEGER;
    scx-,scy-   : INTEGER;
    station-    : INTEGER;
    cw-,ch-     : INTEGER;
    edstart-    : INTEGER;
    curon-      : BOOLEAN;
    memory-     : S.PTR;
    handler     : StringProc;
  END;


PROCEDURE (v : Viewer) StoreHandler*(handler: StringProc);
(*
 Stores handler to be called whenever the user hits return with the string
 in the current line as parameter.
 *)


PROCEDURE (v : Viewer) CursorOn*;


PROCEDURE (v : Viewer) CursorOff*;


PROCEDURE(v : Viewer) SetCursor*(col,row : INTEGER);
  (* changes the position where the next output has to appear. If one
     of the parameter exceeds its limits, it will be set at the maximum
     value. *)


PROCEDURE(v : Viewer) ClearHome*;
  (* clears the memory of viewer v and the window if opened *)


PROCEDURE (v : Viewer) CursorUp*;
  (* set cursor in previous line. Scroll down and clear first line if
     cursor is in first line *)


PROCEDURE (v : Viewer) ClearEOS*;
  (* clears from cursor to end of screen *)


PROCEDURE (v : Viewer) ClearSOS*;
  (* clears from start of screen to cursor *)


PROCEDURE (v : Viewer) ClearEOL*;
  (* clears from cursor to end of line *)


PROCEDURE (v : Viewer) InsertLine*;
  (* inserts a line above the current line. The line is cleared and
     cursor set at column 0 *)


PROCEDURE (v : Viewer) DeleteLine*;
  (* deletes the current line. Cursor is set at column 0 *)


PROCEDURE (v : Viewer) SaveCursor*;
  (* saves the current cursor position *)


PROCEDURE (v : Viewer) RestoreCursor*;
  (* restores the current cursor position *)


PROCEDURE (v : Viewer) ClearLine*;
  (* clears the line the cursor is in. Cursor is sest in column 0 *)


PROCEDURE (v : Viewer) ClearSOL*;
  (* clears from start of line to cursor *)


PROCEDURE (v : Viewer) Backspace*;
  (* cursor left and overwrite character with space *)


PROCEDURE (v : Viewer) Delete*;
  (* delete character by shifting the rest of the line *)


PROCEDURE (v : Viewer) Insert*;
  (* shifts the line to the right and inserts a space *)


PROCEDURE(v : Viewer) LineFeed*;
  (* set cursor in following row, scroll if needed *)


PROCEDURE(v : Viewer) SetSize*(cols,rows : INTEGER);
  (* changes the size of viewer v. The memory size is adjusted and its
     previous contents transferred to the new location. If size became
     smaller, the data will be cut, else the new characters will be
     cleared. The old memory is of course disposed. If the window is
     open, it will also be changed in size. *)


PROCEDURE(v : Viewer) SetFont*(fontId,fontHeight : INTEGER);
  (* sets the font used to display the characters. FontId is the value
     used for VstFont, and FontHeight is used for VstPoint. Correct
     function with proportional fonts is not guaranteed. The number of
     characters per line is calculated using the maximum size of a
     character, so there will be an unused margin at the right. The cursor
     position is calculated as the product of v.col and maximum width
     of characters (v.cw), so this will cause problems.
     If the window is open, it will be updated immediatly. *)


PROCEDURE(v : Viewer) Initialize*;
  (* initializes a viewer. The size is set to 80 columns and 22 rows
     (640*400 screen with 8*16 font). A closer and mover is provided.
     The title is "Terminal window", but you can change it using
     v.SetTitle. The screen is cleared, of course, and cursor is in
     row 0, col 0. Cursor means the position where the next output
     will appear. This cursor is set invisible *)


PROCEDURE(v : Viewer) WriteChar*(c : CHAR);
  (* writes a character into the memory of viewer v at the current cursor
     position. The position is increased. If the end of line is reached,
     output will continue in the next line. If the last line is reached,
     the output is shifted up one line. If the window is not open, it will
     be opened *)


PROCEDURE(v : Viewer) WriteString*(str : ARRAY OF CHAR);
  (* writes a string into the memory of viewer v at the current cursor
     position. It follows the same procedure as WriteChar. *)


PROCEDURE (v : Viewer) Tabulator*;
  (* sets the cursor to the next tabulator position *)


PROCEDURE(v : Viewer) WriteLn*;


PROCEDURE(v : Viewer) WriteInt*(Value : LONGINT);


PROCEDURE(v : Viewer) WriteFInt*(Value : LONGINT; Base,Adj,Len : INTEGER; Fill : CHAR);


PROCEDURE(v : Viewer) WriteReal*(Value : REAL; n,Adj,Len : INTEGER; Fill : CHAR);


PROCEDURE(v : Viewer) SetEditStart*;
  (* normally, the editing of a string starts in column zero. If there is
     a prompt or so, set the start at the current column with this
     procedure. After a handler call, the start is column 0 again. *)


PROCEDURE(v : Viewer) Remove*;


PROCEDURE (v : Viewer) HandleKeyEvent*(shift : SET;
                               scan : INTEGER; ascii : CHAR) : BOOLEAN;


END TermWin.