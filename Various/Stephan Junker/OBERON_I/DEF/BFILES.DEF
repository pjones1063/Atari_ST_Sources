MODULE BFiles; (* Buffered FilesSystem for OBERON. By Dirk Theisen *)

(* Version 0.3ž(!) *)

(*
   This is a Module to access files in a way it is done in System-OBERON.
   I only changed the interface to type-bound-procedures and so implemented
   a /simple/ emulation of the OBERON-FS.
   Behaviour may be slight different (please tell me).

   Restictions:
     Unlike System-OBERON everey file opened by "New" or "Old" MUST be
     closed at the end and may no longer be accessed after that (as in
     GEMDOS). Filenames are restricted to GEMDOS-names (8+3).
   New:
     SetPath, GetPath, Rename and Delete behave exactly like their GEMDOS-
     pendants (in fact they are).

   NOTE: This is the first public Version. The new browser makes use of it,
         but that is no garantee for it to work korrekt. Use it with care
         (but use it :-) )!

                     THIS MODULE IS IN BETA-STATE!

                   (don't tell me, You didn't know!)

*)



  CONST

    (* res *)
    FileNotFound*      = -33;
    FolderNotFound*    = -34;
    SetOutOfRange*     = -64;

    BufSize*           = 4096; (* should be MAX(INTEGER)>=BufSize=2^x>=4 *)


  TYPE
    File*   = POINTER TO FileDesc;

    Rider*  = RECORD
                eof-  : BOOLEAN;
                res-  : LONGINT;
                base- : File;
              END;

    FileDesc* = RECORD
                  name-    : FileName.path;
                END;

    (* Sorry - only one buffer per file yet! *)



  PROCEDURE SetPath*(p: ARRAY OF CHAR; VAR res : INTEGER);

  PROCEDURE GetPath*(VAR p: ARRAY OF CHAR; VAR res: INTEGER);

  PROCEDURE Delete*(name : ARRAY OF CHAR; VAR res : INTEGER);
  (* file <name> may NOT be open!! *)


  PROCEDURE Rename*(old : ARRAY OF CHAR; new : ARRAY OF CHAR; VAR res : INTEGER);


  PROCEDURE (f : File) TimeAndDate*() : LONGINT;	(* SJ *)
  (*
   Returns the time and date of that file. Date in the upper, time in the
   lower half.
   *)


  PROCEDURE (f : File) SetTimeAndDate*(timeDate: LONGINT); (* SJ *)
  (*
   Sets the time and date of that file. Format as above.
   *)


  PROCEDURE (f : File) GetDate* (VAR t : LONGINT; VAR d : LONGINT);
  (* not implemented yet *)


  PROCEDURE Old*(name : ARRAY OF CHAR): File;


  PROCEDURE New*(name : ARRAY OF CHAR): File;


  PROCEDURE (f : File) Length*(): LONGINT;
  (* return correct length of file f *)


  PROCEDURE (f : File) Close*;


  PROCEDURE (VAR f : File) Purge*;
  (* deletes an open file, without closing it (hope this is intended) *)


  PROCEDURE (f : File) Register*;


  PROCEDURE (VAR r : Rider) Set* (f : File; pos : LONGINT);
  (* must be called before 1st read/write! *)


  PROCEDURE (VAR r : Rider) Read* (VAR x : SYSTEM.BYTE);


  PROCEDURE (VAR r : Rider) Write*(x : SYSTEM.BYTE);


  PROCEDURE (VAR r : Rider) ReadBytes*(VAR x : ARRAY OF SYSTEM.BYTE; n : LONGINT);


  PROCEDURE (VAR r : Rider) WriteBytes*(VAR x : ARRAY OF SYSTEM.BYTE; n : LONGINT);


  PROCEDURE (VAR r : Rider) Pos*(): LONGINT;


END BFiles.