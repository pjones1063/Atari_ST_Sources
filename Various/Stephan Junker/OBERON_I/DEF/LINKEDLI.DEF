MODULE LinkedList;

(*
 LinkedList implements a list of elements which are connected by a pointer
 to the next and previous element. The last element is connected with the
 first.
 To store elements, you must extend ElemDesc to hold the data you desire.
 This is very time and space efficient, but not very flexible. Such
 elements can only be stored in one LinkedList.

 LinkedList is an advanced version of DCL. DCL will not be supported
 anymore.
 *)


TYPE
  Element*  = POINTER TO ElemDesc;
  ElemDesc* = RECORD
    next-, prev- : Element;
  END;

  Desc* = RECORD
    root- : Element; (* first element in list *)
  END;
  Ptr* = POINTER TO Desc;

  DoProc* = PROCEDURE (element: Element);



PROCEDURE (VAR self: Desc) Initialize*;
(*
 Initializes a list. The list is empty afterwards.
 *)


PROCEDURE (VAR self: Desc) IsEmpty*() : BOOLEAN;
(*
 Answer TRUE if the list is empty.
 *)


PROCEDURE (VAR self: Desc) First*() : Element;
(*
 Answer the first element in the list, NIL if empty.
 *)


PROCEDURE (VAR self: Desc) Last*() : Element;
(*
 Answer the last element in the list, NIL if empty.
 *)


PROCEDURE (VAR self: Desc) Add*(e: Element);
(*
 Adds e at the end of the receiver.
 *)


PROCEDURE (VAR self: Desc) AddInFrontOf*(e, next: Element);
(*
 Add e to the linked list in front of next. If next is the root, e will
 become the root.
 *)


PROCEDURE (VAR self: Desc) AddBehind*(e, prev: Element);
(*
 Add e to the linked list behind prev.
 *)


PROCEDURE (VAR self: Desc) MergeWith*(VAR aList: Desc);
(*
 Add all elements stored in aList to the receiver by merging the two lists.
 *)


PROCEDURE (VAR self: Desc) Remove*(e: Element);
(*
 Remove e from the receiver list.
 *)


PROCEDURE (VAR self: Desc) SetRoot*(e: Element);
(*
 Set e as root of the list. The other elements change position as well.
 *)


PROCEDURE (VAR self: Desc) Insert*(e: Element);
(*
 Adds e at the beginnig of the receiver, so that it will become the first
 element.
 *)


PROCEDURE (VAR self: Desc) MakeRoot*(e: Element);
(*
 Make e the root of the list. The other elements will keep there position.
 *)


PROCEDURE (VAR self: Desc) Do*(aBlock: DoProc);
(*
 For each element in the receiver, evaluate aBlock with that element as
 the argument.
 *)


PROCEDURE (VAR self: Desc) ReverseDo*(aBlock: DoProc);
(*
 For each element in the receiver, evaluate aBlock with that element as
 the argument. Start with the last element.
 *)


PROCEDURE (VAR self: Desc) Includes*(e: Element) : BOOLEAN;
(*
 Answer true if the receiver contains e.
 *)


END LinkedList.
