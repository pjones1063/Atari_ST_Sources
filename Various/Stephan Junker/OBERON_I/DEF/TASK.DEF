MODULE Task; (* Stephan Junker  29.3.93 / 12.11.93 / 25.11.94 *)

(*
 Task plays a key role in the OPE design. It is possible to mark the
 starting point of a task by Task.Init. It is then possible to terminate
 that task anywhere using Task.Exit. This procedure calls the procedures
 stored by Task.StoreExit which should clean up the global variables. It is
 important to set unused pointers to NIL, otherwise their memory will not
 be disposed. You could perform this by an explicit call of an exit
 procedure, but what if there was an exception and your module had to be
 terminated earlier? Therefore you should always link a procedure here.
 OPE will initialize a new task whenever a module is executed. A client
 module may use a new task if a breakdown should not terminate the whole
 program.
 A typical task call will look like this:

 PROCEDURE Run() : INTEGER;
  BEGIN
   Task.Init;
   DoIt;
   Task.Exit(0);
  END Run;

 Run will execute DoIt and return the task return value. If it is
 terminated correctly and Task.Exit(0) reached, the return value is 0. If
 there was an exception and DoIt was forced to terminate, the return value
 will be a negative value reflecting the kind of error. These values are
 identical to the TOS error values.
 Task.Run implements this kind of task call.
 *)



TYPE
  Proc* = PROCEDURE;

  ProcElem = POINTER TO RECORD(LinkedList.ElemDesc)
    proc : Proc;
  END;



VAR
  level* : INTEGER;
  retCode-: INTEGER;
  (*
   Contains the parameter of Exit when the exit procedures are called.
   *)



PROCEDURE StoreInit*(proc: Proc);
(*
 Store a procedure to be called every time a new task is initialized.
 Then Task.level already contains the new level.
 *)


PROCEDURE Init*;
(*
 Initialize a task. All procedures stored with StoreInit are called.
 *)


PROCEDURE StoreExit*(proc : Proc);
(*
 stores a procedure to be called every time a task is terminated. Then
 Task.level still has the level of the task to be terminated.
 *)


PROCEDURE Exit*(retcode: INTEGER);
(*
 Terminate a task. All procedures stored with StoreExit are called.
 Program execution is continued in the procedure that called the procedure
 which called Task.Init.
 retcode is returned to the calling task.
 *)


PROCEDURE Run*(proc: Proc) : INTEGER;
(*
 Calls proc in a new task and returns the task return value.
 *)


PROCEDURE CallExits*;
(*
 Call the stored exit procedures.
 *)


END Task.
