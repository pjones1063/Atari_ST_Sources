a  =AND ~
ab =ABS( ~)
ad =S.ADR( ~)
ac =ARRAY OF CHAR
ar =ARRAY ~ OF
as =ASSEMBLER
   =  ~
   =END;
b  =BEGIN
   =END ~;
bl =BOOLEAN
bt =S.BYTE
cp =CAP( ~)
cs =CASE ~ OF
   =END;
c  =CHAR
cr =CHR( ~)
cn =CONST
   =  ~
dc =DEC( ~);
dp =S.DISPOSE( ~);
dv =DIV ~
e  =ELSE
ea =END(*ASSEMBLER*);
es =ELSIF ~ THEN
en =  ~
   =END;
ec =END(*CASE*);
ef =END(*FOR*);
ei =END(*IF*);
el =END(*LOOP*);
er =END(*RECORD*);
ew =END(*WHILE*);
eh =END(*WITH*);
et =EXIT
f  =FALSE
fo =FOR ~ := TO BY DO
   =END;
i  =IF ~ THEN
   =END;
ip =IMPORT
   =  ~;
in =IN ~
ic =INC( ~);
il =INCL( ~);
it =INTEGER
l  =LOOP
   =  ~
   =END;
li =LONGINT
lo =LONG( ~);
lr =LONGREAL
m  =MOD ~
mo =MODULE ~;
   =
   =END .
ne =NEW( ~);
ni =NIL
n  =NOT ~
od =ODD( ~);
of =OF ~
o  =OR ~
or =ORD( ~);
p  =PROCEDURE ~
pc =(*
   = ~
   = *)
pr =S.PTR
pt =POINTER TO ~
ra =REAL
re =RECORD
   =  ~
   =END;
rp =REPEAT
   =  ~
   =UNTIL ;
r  =RETURN ~;
rt =RETURN TRUE
rf =RETURN FALSE
rd =IO.ReadChar( ~);
ri =IO.ReadInt( ~);
rr =IO.ReadReal( ~);
rs =IO.ReadString( ~);
s  =SET
sh =SHORT( ~);
si =SHORTINT
sz =SIZE( ~)
sn =S.NEW( ~);
to =TO ~
t  =TRUE
tc =TRUNC( ~)
th =THEN
ty =TYPE
   =  ~
u  =UNTIL ~
v  =S.VAL( ~)
vr =VAR
   =  ~
vp =VAR ~
w  =WHILE ~ DO
   =
   =END;
wt =WITH ~ DO
   =END(*WITH*);
wc =IO.WriteChar( ~);
wi =IO.WriteInt( ~);
wl =IO.WriteLn;
wr =IO.WriteReal( ~);
ws =IO.WriteString( ~);
rc =IO.ReadChar();
ri =IO.ReadInt();
rs =IO.ReadString( ~);
