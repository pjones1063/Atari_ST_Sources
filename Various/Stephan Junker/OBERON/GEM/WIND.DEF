DEFINITION Wind; (* SJ *)

(* aes module wind with some extensions. The aes handle is replaced by a
   pointer to a window definition record which can be extended if more 
   window information must be stored. This is done by Window for example
*)

IMPORT DCL:=DoubleChainedList;


CONST (* element bits *)
  TITLE* = 0; CLOSER* = 1; FULLER* = 2; MOVER* = 3; INFOLINE* = 4;
  SIZER* = 5; UPARROW* = 6; DNARROW* = 7; VSLIDER* = 8; LFARROW* = 9;
  RTARROW* = 10; HSLIDER* = 11;

  (* get/set types *)
  ELEMENTS* = 1; NAME* = 2; INFO* = 3; WORK* = 4; CURR* = 5; PREV* = 6;
  FULL* = 7; HSLIDE* = 8; VSLIDE* = 9; TOP* = 10; FIRST* = 11; NEXT* = 12;
  NEWDESK* = 14; HSLSIZE* = 15; VSLSIZE* = 16; SCREEN* = 17;

  (* update type *)
  ENDUPD* = 0; BEGUPD* = 1; ENDMCTRL* = 2; BEGMCTRL* = 3;

  (* calc type *)
  WHOLE* = 0; WORKSP* = 1;


TYPE info*   = POINTER TO desc;
     desc*   = RECORD (DCL.elem) Opened* : BOOLEAN END;


VAR First* : info;

(* the first window descriptor in the list. Avoid direct access to the list *)


PROCEDURE GetInfo*(Handle : INTEGER; VAR Info : info) : BOOLEAN;

(* searches for the window with AES handle Handle. Returns FALSE if not
   found.
*)

PROCEDURE Create*(Elements : SET; X,Y,W,H : INTEGER; w : info) : BOOLEAN;

(* tells AES to create a new window. If it has no windows left, an error
   message is shown and FALSE returned. w must be initialized, because
   Create does not know which extended type it points to. It serves as
   a replace for the AES window handle. If the AES handle is needed, it
   can be found in w.Handle. The current process number is stored and all
   procedures in this module check if a window belongs to the calling
   task.
*)

PROCEDURE Open*(w : info; X,Y,W,H : INTEGER);

(* opens a window that was created before. An error message is shown,
   if the window is already opened.
*)

PROCEDURE Close*(w : info);

(* closes a window so that it can be reopened *)


PROCEDURE Delete*(w : info);

(* deletes a window which cannot be reopened afterwards *)


(* The Get?/Set? procedures are derived from the AES wind_get/wind_set
   procedures *)

PROCEDURE GetXYWH*(wn : info; Type : INTEGER; VAR x,y,w,h : INTEGER);

(* Type can be WORK, CURR, PREV, FULL, FIRST or NEXT *)


PROCEDURE GetVal*(w : info; Type : INTEGER) : INTEGER;

(* Type can be HSLIDE, VSLIDE, HSLSIZE or VSLSIZE. Returns position or size *)


PROCEDURE GetTop*(VAR w : info) : BOOLEAN;

(* returns the top window. FALSE means no window open or top window
   belonging to a different task.
*)

PROCEDURE SetElements*(w : info; Elements : SET);

(* set the elements of a window *)


PROCEDURE SetAddress*(w : info; Type : INTEGER; Address : LONGINT);

(* Type can be NAME,INFO or NEWDESK *)


PROCEDURE SetCurr*(wn : info; x,y,w,h : INTEGER);

(* set current size of a window *)


PROCEDURE SetVal*(w : info; Type,Val : INTEGER);

(* Type can be HSLIDE,VSLIDE,HSLSIZE or VSLSIZE *)


PROCEDURE SetTop*(w : info);

(* Type can be HSLIDE,VSLIDE,HSLSIZE or VSLSIZE *)


PROCEDURE Find*(X,Y : INTEGER; VAR w : info) : BOOLEAN;

(* finds window under the position X,Y. Returns FALSE if no window there *)


PROCEDURE Update*(Type : INTEGER);


PROCEDURE Calc*(Type : INTEGER; Elements : SET; InX,InY,InW,InH : INTEGER;
                VAR OutX,OutY,OutW,OutH : INTEGER);

(* calculates the whole or work space of a window *)


END Wind.
