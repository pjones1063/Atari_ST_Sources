MODULE Event; (* SJ 23.1.93 / 19.2.93 *)

(* Event.Multi tries to simplifie the waiting for multiple events.
   For every kind of event, a procedure can be stored which is called
   if the according event is received. Therefore Event.Multi only
   terminates when Exit is set to true. After the call of KeyProc, the
   keyboard buffer is emptied.
*)

CONST 
  KEY = 0; BUTTON = 1; MOUSE1 = 2; MOUSE2 = 3; MESSAGE = 4;
  TIME = 5;

(* the events bits *)


TYPE 
  evptr     = POINTER TO events;
  evproc    = PROCEDURE (Events : evptr);
  events    = RECORD
                 (* input parameters *)
                 Which  : SET; (* the events to wait for *)
                 Clicks : INTEGER;
                 Mask   : SET;
                 State  : SET;
                 M1Flags,M1x,M1y,M1w,M1h : INTEGER;
                 M2Flags,M2x,M2y,M2w,M2h : INTEGER;
                 Time   : LONGINT;
                 KeyProc,ButProc,MsgProc,TimeProc,
                 M1Proc,M2Proc : evproc; 

                 (* return variables *)
                 Events : SET; (* events recognized *)
                 MsgBuf : Evnt.msgbuf;
                 Mx,My  : INTEGER;
                 Mbut   : SET; (* the button that made the event *)
                 Shift  : SET; (* CAPSLOCK excluded, RSHIFT -> LSHIFT *)
                 Scan   : INTEGER;
                 Ascii  : CHAR;
                 NClicks: INTEGER;
              END(*RECORD*);

VAR Exit : BOOLEAN; 

(* TRUE = leave Event.Multi *)


VAR Shift : SET; 

(* contains the original shift bits returned by Evnt.Multi *)


PROCEDURE Multi(VAR e : events);

(* wait for all kinds of events. The procedure is only terminated if Exit
   is set to true. If an event occurs, the accordinig procedure in the
   event record is called. The shift bits are changed : capslock is deleted,
   if right shift is set, it is deleted and left shift set instead. This
   is the format other modules need.
*)

END Event.
