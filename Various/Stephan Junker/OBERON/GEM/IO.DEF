DEFINITION IO; (* SJ  20.2.93 / 15.5.93 *)

(* IO is a standard module for text input/output. There are three link
   compatible versions : TOS\IO.MOD, TOS2\IO.MOD and GEM\IO.MOD.
   Link compatible means that a program developped with GEM IO can be
   linked with TOS IO to run under a TOS environment, as long as only the
   common procedures are used. This is achieved by appending additional
   procedures at the end, so that the procedure numbers of the existing
   procedures are not changed. Using module IO under ObnShell will always
   be the GEM version because this version is linked in OBNSHELL.PRG, so
   that your output will appear in the i/o window of the shell. If you
   want to link your program, set the desired path for the linker and
   you can choose between TOS or GEM i/o.
   
   This is the definition for GEM\IO.MOD. All procedures not available in
   TOS2\IO.MOD are marked with (* not in TOS2\IO.MOD *). All procedures not 
   available in TOS\IO.MOD and TOS2\IO.MOD are marked with 
   (* not in TOS\IO.MOD *).
   
   There is no restriction in number of columns (but the output buffer is 
   only 256 characters long) and the number of lines is only restricted by 
   the memory size.
   The user can set the cursor in any line and edit it. However, the simple 
   input of a string without leaving the current line is also possible.

   Escape sequences will not work. Try to avoid them.
   
   All procedures waiting for input use Event.Multi. You can set the 
   event parameters used. Window.Key is linked in the event descriptor
   as keyboard routine. All other events will be served normally. 
   
   Module Key is used to assign and call the edit procedures. They are
   exported to be assigned to other key combinations if desired.
*)


CONST left = 0; right = 1; center = 2; noadj = 3; leftadd = 4; rightadd = 5;

(* format codes for WriteInt and WriteReal.
   left     : add character Fill in front of the number until Len is reached.
   right    : add character Fill at the end of the number until Len is reached.
   center   : add character Fill in front and at the end of the number until 
              Len is reached.
   noadj    : do not format the string.
   leftadd  : adds as much characters Fill as Len determines in front of
              the number.
   rightadd : adds as much characters Fill as Len determines in front of
              the number.
*)


PROCEDURE Init(PhysRows,PhysCols : INTEGER; OutputMem : LONGINT); (* not in TOS2\IO.MOD *)

(* Call of Init is necessary before using an input or output procedure. 
   PhysRows and PhysCols sets the real size of the window. OutputMem
   is the memory size that shall be used for text memory. This size
   determines the actual size of the window. The window only shows 
   a part of the output. The number of columns per line should not exceed
   256, because the output buffer 256 bytes long. The number of lines seems
   to be unlimited, but if the output memory overflows, the needed space
   is deleted at the beginning of the memory. Note that the memory is 
   deallocated on exit from the task that opened the window.
   Init does not open the i/o window. This can be done explicitly by calling
   Open or implicitly by using any input or output procedure.
*)   

PROCEDURE Open; (* not in TOS\IO.MOD *)

(* opens the i/o window if not already open *)


PROCEDURE Close; (* not in TOS\IO.MOD *)

(* closes the i/o window, but does not delete it so that it can be reopened
   using procedure Open. This is necessary before calling a program.
*)

PROCEDURE SetEvents(VAR Events : Event.events); (* not in TOS\IO.MOD *)

(* Sets the event parameters to be used for Event.Multi. Only Events.KeyProc
   is set to Window.Key, the other events can be used by the calling
   module. None of the event procedures is allowed to set Events.Exit
   to TRUE.
*)

PROCEDURE SetOutputMode(InsertMode : BOOLEAN);

(* sets the output mode. Chose between insert (InsertMode = TRUE) and
   overwrite (InsertMode = FALSE) mode.
*)

PROCEDURE SetPos(x,y : INTEGER); (* not in TOS\IO.MOD *)

(* sets the position of the work space of the i/o window.
   Default is 0 and 40 for x and y.
*)

PROCEDURE SetSize(Rows,Cols : INTEGER); (* not in TOS\IO.MOD *)

(* sets the size of the work space of the i/o window. Changes the value
   set with Init.
*)

PROCEDURE SetTabSize(TabSize : INTEGER); (* not in TOS2\IO.MOD *)

(* sets the number of characters to advance if the tabulator key is pressed.
   Default is 8.
*)

PROCEDURE SetTitle(Title : LONGINT); (* not in TOS\IO.MOD *)

(* sets the window title. Title is the address of a global (static)
   string. Easiest setting is done with SYSTEM.ADR("window title").
   Default is "STDIO".
*)

PROCEDURE SetFont(FontId,FontHeight : INTEGER); (* not in TOS\IO.MOD *)

(* sets the font to be used and its height. A redraw is forced *)


(* ---------------------------- input -----------------------------------*)

PROCEDURE KeyPressed() : BOOLEAN;

(* Returns true if there is a key available *)

   
PROCEDURE ReadChar() : CHAR;

(* Waits for a key to be pressed. The character is output before leaving 
   ReadChar. Keys returning an ascii code smaller than " " are ignored.
*)

PROCEDURE ReadKey(VAR Shift : SET; VAR Scan : INTEGER; VAR Ascii : CHAR);

(* Waits for a key to be pressed. The character is not output. All keys 
   are returned without any interpretation.
*)

PROCEDURE ReadString(VAR Input : ARRAY OF CHAR);

(* lets the user edit a string. He is not allowed to leave the line or
   to set the cursor left from the cursor position at the call of 
   ReadString. Only return and enter will leave ReadString.
*)

PROCEDURE ReadLine(VAR Line : ARRAY OF CHAR; VAR Shift : SET;
                   VAR Scan : INTEGER); (* not in TOS2\IO.MOD *)

(* lets the user edit the whole screen as he desires. If a key is pressed
   which is no editing character and no stored editing function, its shift
   bits and scancode are returned and the contents of the line the cursor
   is in is stored in Line. Scan will be 1CH for Return and 72H for Enter. 
   Others may be ignored by calling ReadLine again. If the bit for right 
   shift is set, the bit for left shift will be set and for right shift 
   will be cleared.
*)

PROCEDURE ReadInt(Base : INTEGER; VAR Value : LONGINT) : BOOLEAN;

(* Waits for a string to input and converts it to an integer number
   using NumStr.ToLInt. It returns false if the input was no correct number.
*)

PROCEDURE ReadReal(VAR Value : REAL) : BOOLEAN;

(* Waits for a string to input and converts it to a real number using 
   NumStr.ToReal. It returns false if the input was no correct number.
*)

(* ---------------------------- output ----------------------------------*)

PROCEDURE BufferOn;

(* Switches to buffer output mode. Output done by WriteChar or WriteString 
   is stored in a buffer and written on call of OutputBuffer or WriteLn. 
   This is useful if a line is written by several calls of WriteChar, 
   because it saves time. It can also be used if the output needs a 
   correction afterwards.
*)

PROCEDURE BufferOff;

(* Writes the buffer contents and switches to direct output mode. All 
   output done by WriteChar and WriteString appears on the screen 
   immediately. This is the default mode.
*)

PROCEDURE PrevOutMode;

(* returns to the output mode that was used before the last call of 
   BufferOn or BufferOff.
*)

PROCEDURE OutputBuffer;

(* Writes the buffered output onto the screen *)


PROCEDURE WriteChar(c : CHAR);

(* Writes character c onto the screen (or into the buffer) *)


PROCEDURE WriteString(Output : ARRAY OF CHAR);

(* Output is written into the i/o window (or into the buffer if buffer is
   on). No escape sequences are interpreted.
*)

PROCEDURE WriteLn;

(* If buffer is on, the buffer is written and cleared. The rest of the 
   line is deleted. The cursor is set into the following line in column 0. 
   If the cursor is in the last line, the screen is scrolled up.
*)

PROCEDURE Return;

(* same function as WriteLn, but the rest of the line is not deleted.
   Should be used after ReadString and ReadLine, because the user can
   press return in the middle of the edited line and it is not recommended
   to delete a part of the input.
*)
   
PROCEDURE WriteInt(Value : LONGINT; Base,Adj,Len : INTEGER; Fill : CHAR);

(* Writes an integer value with any base Base. For example, base 10 is
   decimal, 16 hexadecimal and so on. The string is formatted with
   Strings.Adjust. See constant definitions for explanation of Adj,Len 
   and Fill.
*)

PROCEDURE WriteReal(Value : REAL; n,Adj,Len : INTEGER; Fill : CHAR);

(* Writes a real value with n digits after the decimal point. See constant 
   definitions for explanation of Adj,Len and Fill.
*)

PROCEDURE ClearToEOL;

(* If buffer is on, the buffer is written and cleared. Clears the rest of 
   the line starting at the cursor position.
*)


(* ---------------------------- cursor ----------------------------------*)

PROCEDURE CursorOn;

(* switches cursor on. Nothing is done if already on *)


PROCEDURE CursorOff;

(* switches cursor off. Nothing is done if already off *)


PROCEDURE SetCursor(Row,Col : INTEGER);

(* sets the cursor at the desired logical position. The part of the output
   shown in the window may be changed to keep the cursor visible.
*)

PROCEDURE GetRow() : INTEGER;

(* Returns the logical row the cursor is in *)


PROCEDURE GetCol() : INTEGER;

(* Returns the logical column the cursor is in *)


PROCEDURE SetBufPos(Col : INTEGER);

(* Sets the cursor position in the output buffer. Position 0 is the first
   character written into the buffer.
*)

PROCEDURE GetBufPos() : INTEGER;

(* returns the cursor position in the output buffer. This position is
   different from the column which is not changed during buffered output.
*)

PROCEDURE PrevBufPos;

(* restores the cursor position of the buffer that was used before the last
   call of SetBufPos.
*)

PROCEDURE WrapOn;

(* Enables wrap mode which automatically writes a character into the
   next line if the current one is full.
*)

PROCEDURE WrapOff;

(* Disables wrap mode so that output will stop in the last line *)


(* ---------------------------- edit procedures --------------------------*)

(* the edit procedures are exported for reassigning them to other keys
   if desired. They can also be called directly.
*)

PROCEDURE CursorLeft;

(* sets cursor one position to the left. Nothing happens in column 0.
   Assigned to cursor left key.
*)

PROCEDURE CursorRight;

(* sets cursor one position to the left.
   Assigned to cursor right key.
*)

PROCEDURE CursorUp;

(* sets cursor one row up. Nothing happens in row 0.
   Assigned to cursor up key.
*)

PROCEDURE CursorDown;

(* sets cursor one row down. The i/o memory is scrolled up if the cursor
   was in the last row. 
   Assigned to cursor down key.
*)

PROCEDURE Backspace; (* not in TOS2\IO.MOD *)

(* sets the cursor one position to the left and deletes the character.
   The rest of the line is shifted to the left. 
   Assigned to backspace key.
*)

PROCEDURE DeleteChar; (* not in TOS2\IO.MOD *)

(* Deletes the character the cursor is at. The rest of the line is shifted 
   to the left. 
   Assigned to delete key.
*)

PROCEDURE InsertChar; (* not in TOS2\IO.MOD *)

(* shifts the rest of the line to the right and inserts a space character.
   Assigned to insert key.
*)

PROCEDURE DeleteLine; (* not in TOS2\IO.MOD *)

(* deletes the current line by shifting the rest of the screen one line up.
   Assigned to delete key with control.
*)

PROCEDURE InsertLine; (* not in TOS2\IO.MOD *)

(* inserts an empty line by shifting the rest of the screnn one line down.
   Assigned to insert key with control.
*)

PROCEDURE DeleteRestLine; (* not in TOS2\IO.MOD *)

(* clears the rest of the current line.
   Assigned to delete key with shift.
*)

PROCEDURE ClearHome;

(* clears the screen and sets the cursor in the upper left corner.
   Assigned to clear home key.
*)

PROCEDURE Tabulator; (* not in TOS2\IO.MOD *)

(* sets the cursor one tabulator (8 columns) to the right. 
   Assigned to tab key.
*)

PROCEDURE ClearToEOS;

(* If buffer is on, the buffer is written and cleared. Clears the rest of 
   the screen starting at the cursor position.
   Assigned to escape key.
*)

PROCEDURE PageUp; (* not in TOS2\IO.MOD *)

(* sets the cursor into the previous physical page.
   Assigned to cursor up key with shift.
*)

PROCEDURE PageDown; (* not in TOS2\IO.MOD *)

(* sets the cursor into the next physical page.
   Assigned to cursor down key with shift.
*)

PROCEDURE Top; (* not in TOS2\IO.MOD *)

(* sets the cursor into the first physical row in column 0 (upper left
   corner).
   Assigned to cursor up key with control.
*)

PROCEDURE Bottom; (* not in TOS2\IO.MOD *)

(* sets the cursor into the last physical row in column 0 (lower left
   corner).
   Assigned to cursor down key with control.
*)

PROCEDURE LeftMargin; (* not in TOS2\IO.MOD *)

(* sets the cursor into column 0 of the current row.
   Assigned to cursor left key with shift.
*)

PROCEDURE RightMargin; (* not in TOS2\IO.MOD *)

(* sets the cursor behind the last character # " " of the current row.
   Assigned to cursor right key with shift.
*)

PROCEDURE WordLeft; (* not in TOS2\IO.MOD *)

(* sets the cursor onto the first character of the nearest word to the left.
   Assigned to cursor left key with control.
*)

PROCEDURE WordRight; (* not in TOS2\IO.MOD *)

(* sets the cursor onto the first character of the nearest word to the right.
   Assigned to cursor right key with control.
*)

PROCEDURE OffsetLeft; (* not in TOS2\IO.MOD *)

(* if the part of the output shown on the screen does not start in
   logical column 0, the part is shifted 16 columns to the right and
   the screen is redrawn.
   Assigned to cursor left key with shift and control.
*)

PROCEDURE OffsetRight; (* not in TOS2\IO.MOD *)

(* The part of the output shown on the screen is shifted 16 columns to the 
   left and the screen is redrawn.
   Assigned to cursor right key with shift and control.
*)

END IO.