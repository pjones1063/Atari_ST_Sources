DEFINITION Window; (* SJ *)

(* window control library. Everything needed to control a window is stored
   in a window definition record which is an extension to Wind.desc. Once
   the window is created, the module controls the window elements.
*)

CONST (* scroll numbers *)
  UPPAGE* = 0; DNPAGE* = 1; UPLINE* = 2; DNLINE* = 3;
  LFPAGE* = 4; RTPAGE* = 5; LFLINE* = 6; RTLINE* = 7;


TYPE info*     = POINTER TO desc;
     snapproc* = PROCEDURE ( Info : info; VAR x,y,w,h : INTEGER);
     infoproc* = PROCEDURE ( Info : info );
     keyproc*  = PROCEDURE ( Info : info; Shift : SET; Scan : INTEGER;
                             Ascii : CHAR);
     butproc*  = PROCEDURE ( Info : info; Buttons : SET; Clicks,Mx,My : INTEGER );
     posproc*  = PROCEDURE ( Info : info; Pos : INTEGER);
     xywhproc* = PROCEDURE ( Info : info; x,y,w,h : INTEGER);
     desc*     = RECORD(Wind.desc)
                   x*,y*,w*,h* : INTEGER; (* position / size of work area *)
                   Topval*   : INTEGER;(* highest value -> last topped *)
                   Elements* : SET;    (* window elements *)
                   Snap*     : snapproc; (* snapping of window position and size *)
                   SnapX*    : INTEGER;  (* for 'SnapFactor' *)
                   SnapY*    : INTEGER;
                   SnapW*    : INTEGER;
                   SnapH*    : INTEGER;
                   Redraw*   : xywhproc; (* used for redrawing *)
                   Scrolls*  : ARRAY 8 OF infoproc;
                   HSlider*  : infoproc; (* sets horizontal slider *)
                   VSlider*  : infoproc; (* sets vertical slider *)
                   Key*      : keyproc; (* called by Window.Key *)
                   Button*   : butproc; (* called by Window.Button *)
                   HSlided*  : posproc; (* called on hor. slided message *)
                   VSlided*  : posproc; (* called on vert. slided message *)
                   Topped*   : infoproc; (* called on top message *)
                   Closed*   : infoproc; (* called on close message *)
                   Fulled*   : infoproc; (* called on full message *)
                   Sized*    : xywhproc; (* called on size message *)
                   Moved*    : xywhproc; (* called on moved message *)
                 END(*RECORD*);

PROCEDURE Open*(wn : info);

(* opens a window with the position and size in wn.x,wn.y,wn.w and wn.h,
   which are corrected by wn.Snap.
*)

PROCEDURE Redraw*(wn : info; x,y,w,h : INTEGER);

(* redraws a window using the procedure linked in w.Redraw *)


PROCEDURE WmRedraw*(VAR Msg : Evnt.msgbuf);

(* can be called if a redraw message is received *)


PROCEDURE WmTopped*(VAR Msg : Evnt.msgbuf);

(* can be called if a top message is received *)


PROCEDURE WmClosed*(VAR Msg : Evnt.msgbuf);

(* can be called if a close message is received *)


PROCEDURE WmFulled*(VAR Msg : Evnt.msgbuf);

(* can be called if a full message is received *)


PROCEDURE WmArrowed*(VAR Msg : Evnt.msgbuf);

(* can be called if an arrowed message is received *)


PROCEDURE WmMoved*(VAR Msg : Evnt.msgbuf);

(* can be called if a move message is received *)


PROCEDURE WmSized*(VAR Msg : Evnt.msgbuf);

(* can be called if a size message is received *)


PROCEDURE Key*(Shift : SET; Scan : INTEGER; Ascii : CHAR);

(* calls the key procedure of the top window. If there is no top window or
   the top window does not belong to the current process, nothing is done.
*)

PROCEDURE Button*(Buttons : SET; Clicks : INTEGER; Mx,My : INTEGER);

(* can be called if a button is pressed. The button procedure of the top
   window is called with coordinates relative to the origin of the window.
   If there is no window at Mx,My, nothing is done.
*)

PROCEDURE WmHSlid*(VAR Msg : Evnt.msgbuf);

(* can be called if a horizontal slided message is received *)


PROCEDURE WmVSlid*(VAR Msg : Evnt.msgbuf);

(* can be called if a vertical slided message is received *)


PROCEDURE Top*(VAR w : info) : BOOLEAN;

(* if the top window belongs to the calling task, its descriptor is
   returned, else if the task owns windows, the window, which was last
   topped, is topped and its descriptor returned, else FALSE is returned.
*)

PROCEDURE CallMsg*(VAR Msg : Evnt.msgbuf);

(* calls the procedures of this module corresponding to the message *)


PROCEDURE Create*(Elements : SET; FullX,FullY,FullW,FullH : INTEGER;
                  Info : info) : BOOLEAN;

(* create new window. The variables in Info are set to default variables :
   Snap is linked to a routine which changes x,y,w,h to factors of
   SnapX,SnapY,SnapW,SnapH respectively; SnapX .. SnapH are set to 1);
   Redraw .. VSlided do nothing; Topped .. Moved are linked to procedures
   which which execute the desired command (Note : Info.Closed will only
   close the window. If it shall be deleted, the programmer must link
   Wind.Delete); x,y,w,h are set to FullX,FullY,FullW,FullH respectively.
   The AES handle is stored in Info.Handle. If AES has no windows left,
   FALSE is returned (an error message is shown by Wind.Create).
*)


END Window.

