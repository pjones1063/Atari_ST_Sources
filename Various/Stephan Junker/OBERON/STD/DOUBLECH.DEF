MODULE DoubleChainedList; (* SJ *)

(* DoubleChainedList implements a double pointer chained list, i.e.
   a list of records which have one pointer to the next and one to the
   previous element. The base type elem can be extended for all purposes.
   The process number and a user-defined handle is stored and both can be
   searched. Used in Wind,VdiControl etc. to store opened windows etc. *)


TYPE elptr*  = POINTER TO elem;
     elem*   = RECORD
                 Next*,Prev* : elptr;
                 Handle*,Task* : INTEGER;
               END(*RECORD*);
     dproc*  = PROCEDURE (Elem : elptr);


PROCEDURE Add*(VAR List : elptr; Elem : elptr);

(* adds an element at the beginning of List *)


PROCEDURE Extract*(VAR List : elptr; Elem : elptr);

(* extracts an element from List *)


PROCEDURE New*(VAR List : elptr; Elem : elptr; Handle : INTEGER);

(* initialize Elem and add it to List *)


PROCEDURE Search*(List : elptr; Handle : INTEGER; VAR Elem : elptr) : BOOLEAN;

(* search element with Handle. RETURN FALSE if not found *)


PROCEDURE Find*(List : elptr; Handle : INTEGER; VAR Elem : elptr) : BOOLEAN;

(* search element with Handle. RETURN FALSE if not found and show error *)


PROCEDURE Delete*(VAR List : elptr; Handle : INTEGER; VAR Elem : elptr) : BOOLEAN;

(* extracts the first elements with handle Handle. FALSE is returned if
   no element has this handle. The extracted element is returned.
*)

PROCEDURE SearchTask*(List : elptr; Task : INTEGER; VAR Elem : elptr)
          : BOOLEAN;

(* returns the first element with task Task. Returns FALSE if no task
   found.
*)

PROCEDURE DeleteTask*(VAR List : elptr; Task : INTEGER; Delete : dproc);

(* runs through List, calls Delete on every element which has the task
   number Task and extracts the element. Delete may be NIL.
*)

END DoubleChainedList.
