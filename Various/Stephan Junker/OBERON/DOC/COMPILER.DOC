




                          Oberon Compiler V1.16
                            Benutzeranleitung

                             Stand Juli 93




Allgemeines
===========

 Der Compiler des Oberon-Systems (COMPILE.TTP) entstand aus dem Oberon-1
 Compiler von Niklaus Wirth. Er wurde unter anderem um einen Makroassembler
 erweitert und ist jetzt fast auf Oberon-2-Standard.


Aufruf,Parameter
================

 Der Compiler sollte von einer Shell aus benutzt werden, die zumindest in
 der Lage ist, Environmentvariablen zu setzen, denn der Compiler liest
 dort seine Optionen. Beim Aufruf kann man als Kommando einige Optionen
 sowie eine Liste von Namen, getrennt mit Leerzeichen, Åbergeben. Diese
 Module werden nacheinander Åbersetzt. Die Syntax sieht also so aus:

  compile {<Option>} <Name> {<Name>}

 Es wird nur die normale KommandoÅbergabe unterstÅtzt, so daû die Kommando-
 zeile auf 128 Zeichen begrenzt ist. Dies ist aber vollauf ausreichend, da
 man normalerweise nur einen Namen angibt. Das Format des Namens wird
 flexibel gehandhabt. Ein Name mit Pfadangabe wird dort zuerst gesucht.
 Danach wird er wie ein Name ohne Pfad in den Suchpfaden gesucht. Wird
 keine Datei gefunden, wird der Compiler wieder verlassen. In jedem Fall
 wird der Name mit der Extension .MOD versehen.
 Die Optionen haben die allgemeine Syntax:

  -<Option><Parameter>

 Die Art der Option wird mit einem Buchstaben (groû oder klein) angegeben,
 eventuelle Parameter folgen ohne Leerzeichen. Einige Optionen sind sowohl
 Åber Environmentvariablen als auch Åber Kommandozeile setzbar. Dabei gilt:
 Die Option in der Kommadozeile wird wirksam.
 Folgende Optionen sind implementiert:

  -e        : Weist den Compiler an, bei dem ersten gefundenen Fehler
              den Programmlauf abzubrechen. Normalerweise wird die Datei
              komplett Åbersetzt und die Fehler in einer Datei gespeichert.

  -w        : Schaltet die Ausgabe von Warnungen ein. Warnungen werden
              erzeugt, wenn ein Fehler des Programmierers vorliegen kînnte,
              die der Compiler aber Åbersetzen kann. Dies wird zum Beispiel
              bei Schreibzugriffen auf globale Variable eines anderen
              Moduls getan. Warnungen werden normalerweise unterdrÅckt.

  -i        : Schaltet den Indexcheck aus, da er defaultmÑûig eingeschaltet
              ist. Indexcheck bewirkt eine öberprÅfung der Arraygrenzen von
              Indizes zur Laufzeit und ist mit einer geringfÅgigen 
              VerlÑngerung des Codes verbunden. Ein falscher Index bewirkt
              eine CHK-Exception.

  -t        : Schaltet den Typcheck aus, der ebenfalls normalerweise
              eingeschaltet ist. Wenn er eingeschaltet ist, wird bei jedem
              Zugriff auf einen Record Åber einen Zeiger geprÅft, ob es
              sich auch um den korrekten Recordtyp handelt. Diese PrÅfung
              benîtigt relativ viel Code, so daû ich persînlich diesen
              Check lieber ausschalte, denn er bringt nur etwas, wenn man
              mit Typerweiterung arbeitet. Die meisten Records werden aber
              nicht erweitert. Ein falscher Typ bewirkt die Ausgabe einer
              Fehlermeldung und anschlieûenden Programmabbruch.

  -a        : Schaltet den Arithmetikcheck aus, der defaultmÑûig ein-
              geschaltet ist. Dieser Check soll öber- und Unterlauf von
              Realzahlen ÅberprÅfen, ist aber noch nicht implementiert.

  -p<name>  : Gibt den Namen einer Environmentvariablen an, deren Inhalt
              als Suchpfade gelesen werden sollen. Normalerweise ist dies
              die Variable COMPATH, aber vielleicht muû man zwischendurch
              mal mit anderen Pfaden Åbersetzen.

  -s<pos>   : Ist zum Debuggen gedacht, wird aber zur Zeit nicht genutzt.
              Diese Option bewirkt, daû der Compiler bei Erreichen der
              Position pos im erzeugten Code den Programmlauf mit einer
              Meldung abbricht. Wenn es nun einen Debugger gÑbe, der eine
              Absturzadresse in eine Position in einem Modul umrechnen 
              kann, kînnte man mit dieser Funktion die Stelle im Quelltext
              finden.

  -o        : Wenn die Option -s benutzt wird und der Compiler bricht ab,
              so gibt er einige Zeilen vor und nach dem Abbruchpunkt aus,
              falls diese Option gesetzt wird.


 Desweiteren gibt es noch einige Environmentvariablen. Sie mÅssen immer
 groûgeschrieben sein und von einem "=" gefolgt sein. Gesetzt werden sie
 in der Shell und werden jedem Programm Åbergeben, daû von dieser Shell
 aufgerufen wird.
 Es werden folgende Variablen ausgewertet:

  COMPATH : Gibt die Suchpfade an, in denen nach importierten Modulen
            gesucht werden. Zum Import werden nur die Symboldateien (.SYM)
            benîtigt. Die Pfade mÅssen jeweils mit einem Backslash beendet
            werden. Mehrere Pfade werden mit einem Komma oder Semikolon
            getrennt.

  INXCHK  : Der Inhalt der Variablen darf die Werte ON und OFF haben. Damit
            wird der Indexcheck ein- oder ausgeschaltet, der normalerweise
            eingeschaltet ist.

  TYPCHK  : Wie INXCHK, jedoch fÅr den Typcheck.

  ARICHK  : Wie INXCHK, jedoch fÅr den Arithmetikcheck.

  ERRDIST : Der Inhalt der Variablen muû eine Dezimalzahl sein, die den
            Abstand zwischen zwei Fehlermeldungen in Zeichen angibt. Dieser
            Abstand bewirkt, daû weniger Folgefehler eines Fehlers 
            ausgegeben werden. Der Standardwert ist 20, das bedeutet:
            Wenn nach einem erkannten Fehler innerhalb der nÑchsten 20
            Zeichen nochmal ein Fehler auftritt, wird er nicht ausgegeben.

  MAXERR  : Der Inhalt ist wieder eine Dezimalzahl, die angibt, nach 
            wievielen ausgegebenen Fehlern keine weiteren Fehler mehr
            ausgegeben werden sollen. Normalerweise sind dies 100 Fehler.

  ERRFORM : Der Inhalt dieser Variablen ist ein String. Damit ist es 
            mîglich, das Format einer Zeile einer Fehlermeldung 
            einzustellen. Prinzipiell kann man sich den Dateinamen mit \d, 
            die Zeilennummer mit \z, die Spalte mit \s (beide zÑhlend ab 1), 
            die absolute Position mit \p und natÅrlich die Fehlermeldung 
            selbst mit \f ausgeben lassen. Diese Teile werden dort in der 
            Zeile eingefÅgt, wo die KÅrzel mit \ stehen. Der standardmÑûig
            gesetzte String lautet:
              "Error \d \z : \s \f"
            Damit sieht eine Fehlermeldung so aus:
              Error DATEI ZEILE : SPALTE FEHLERMELDUNG

  WARNOUT : Werte ON/OFF sind erlaubt. Schaltet die Ausgabe von Warnungen 
            ein oder aus. Normalerweise werden keine Warnungen ausgegeben.


 FÅr die Angabe von Optionen in Quelltexten ist die Åbliche Konstruktion
 (*$...*) reserviert. Solche Optionen haben die hîchste PrioritÑt.
 Bis jetzt wird nur (*$I?*) interpretiert, womit der Indexcheck geschaltet
 werden kann. FÅr das Fragezeichen kann ein "+" fÅr einschalten, "-" fÅr 
 Ausschalten und "=" fÅr Setzen des vorigen Zustandes eingesetzt werden.


Ausgabe
=======

 Der Compiler erzeugt eine neue Objektdatei (.OBJ), wenn die öbersetzung
 fehlerfrei war. Ist die dabei erzeugte Symboldatei anders als die bisherige
 oder exisierte bisher Keine, so wird die neue Symboldatei (.SYM)
 abgespeichert. War die öbersetzung fehlerhaft, wird die Fehlerdatei (.ERR)
 abgespeichert. Die Symboldateien benîtigt der Compiler, um beim Import die
 dort exportierten Bezeichner zu lesen. Die Objektdateien benîtigt der
 Linker, wenn er ein Programm zusammensetzt.
 Das Format der Objektdateien enspricht fast dem eines normalen Programms.
 Es hat einen 28 Byte langen Programmheader, es folgen der Code, die Daten,
 die Symboltabelle und die Reloziertabelle. Die Symboltabelle entspricht
 dem erweiterten GST-Format. Durch dieses Format der Objektdateien ist es
 mîglich, sowohl komplette Module mit einem beliebigen Assembler (siehe auch
 OBN_ASS.DOC) zu schreiben, als auch vom Compiler erzeugte Objektdateien
 zu disassemblieren und zu Åberarbeiten. Letzteres kann fÅr die Geschwindig-
 keitsoptimierung hilfreich sein, denn es ist einfacher, einen bestehenden
 Assemblertext zu verbessern als etwas direkt in Assembler zu schreiben.
 Das Format des Symboltabellen ist nicht mehr kompatibel zu dem von
 Professor Wirth, da einige zusÑtzliche Informationen benîtigt wurden.


Oberon-Standard
===============

 Der Oberon-Standard kann in diversen BÅchern und Reporten nachgelesen
 werden. Ich hoffe, es verlangt niemand von mir, dies hier alles abzutippen.
 Folgende Beschreibungen sind am Institut fÅr Computersysteme, ETH ZÅrich,
 erhÑltlich :
 
  1. N. Wirth. From Modula to Oberon
  
  2. H. Mîssenbîck, N. Wirth. The Programming Language Oberon-2
  
  3. H. Mîssenbîck. Object-oriented programming in Oberon-2
  
  4. H. Mîssenbîck, N. Wirth. Differences between Oberon and Oberon-2
  
  5. J. Gutknecht. The Oberon Guide
  
 E-Mail : goerlitz@inf.ethz.ch
 FTP :    neptune.inf.ethz.ch   Internet Address: 129.132.101.33
 (Angaben von Thomas Knecht, ohne GewÑhr)


Hinweise
========

 Nicht fÅr alle Fehlermeldungen ist eine Klartextmeldung gespeichert. Dann
 erscheint nur eine Fehlernummer. Einige Fehlermeldungen passen nicht immer
 ganz zu dem bemerkten Fehler. Man mîge mir das verzeihen.

 Es gibt eine Abart von Prozeduren, die fÅr Betriebssystemaufrufe benutzt
 werden. 
 Beispiel :

  PROCEDURE- Fclose(Handle : INTEGER) : INTEGER 62,1;

 Bei Benutzung dieser Prozedur wird das Handle und die Funktionsnummer 62
 auf den Stack geschrieben, TRAP #1 aufgerufen und der Stack korrigiert.
 Da das Betriebssystem genau wie normale Prozeduren den Returnwert in 
 Register D0 zurÅckgeben, funktioniert dies also auch.

 Der Typ SET ist als Langwort implementiert, so daû die Elemente 0 bis 31
 zugelassen sind.

 Der Oberon-2-Standard ist mit folgenden EinschrÑnkungen implementiert:
  Typgebundene Prozeduren mÅssen vorlÑufig an VAR-Parameter oder an Zeiger
  auf Records gebunden werden. Desweiteren darf ein Zeiger nicht NIL sein,
  wenn eine daran gebundene Prozedur aufgerufen wird.

 Bei lokalen Prozeduren gibt es noch ein kleines Problem: Lediglich von
 der Åbergeordneten Prozedur aufgerufene lokale Prozeduren kînnen korrekt
 auf die lokalen Variablen der Åbergeordneten Prozeduren zugreifen.
 Beispiel aus BinTree:
            
  PROCEDURE (VAR t:Tree) Traverse* (mode: SHORTINT; do: PROCEDURE (x:Node));

    PROCEDURE PreOrder(t: Node);
    BEGIN
      do(t);
      IF t.left # NIL THEN PreOrder(t.left); END(*IF*);
      IF t.right# NIL THEN PreOrder(t.right); END(*IF*);
    END PreOrder;

    PROCEDURE PostOrder(t: Node);
    BEGIN
      IF t.left # NIL THEN PostOrder(t.left); END(*IF*);
      IF t.right# NIL THEN PostOrder(t.right); END(*IF*);
      do(t);
    END PostOrder;

    PROCEDURE InOrder(t: Node);
    BEGIN
      IF t.left # NIL THEN InOrder(t.left); END(*IF*);
      do(t);
      IF t.right# NIL THEN InOrder(t.right); END(*IF*);
    END InOrder;

  BEGIN
    IF t.root # NIL THEN
      CASE mode OF
         inorder   : InOrder(t.root);
       | preorder  : PreOrder(t.root);
       | postorder : PostOrder(t.root);
      ELSE
        RETURN (* wrong mode *);
      END(*CASE*);
    END(*IF*);
  END Traverse;

 Die lokalen Prozeduren greifen auf do zu. Da sie sich aber selbst aufrufen,
 funktioniert das nicht mehr. Dieser Fehler ist schwer zu beheben und man
 sollte sich damit abfinden. Obiges Problem wird behoben, indem man jeder
 lokalen Prozedur einen Parameter do spendiert.


Erweiterungen
=============

 Bei Wirth mÅssen Prozeduren, die einer Prozedurvariablen zugewiesen werden, 
 eine Funktionsnummer haben. Prozeduren bekommen Funktionsnummern, wenn sie 
 einen Stern hinter dem Namen haben (dann sind sie exportiert), wenn sie 
 einen Stern hinter "PROCEDURE" stehen haben oder wenn sie forward deklariert
 werden (ein "^" hinter "PROCEDURE"). Bei mir ist keine Funktionsnummer
 mehr nîtig fÅr die Zuweisung an eine Prozedurvariable.

 Laut Wirth waren nur Strings nur in GÑnsefÅûchen zulÑssig. Dabei wird ein
 Zeichen als CHAR, mehr oder weniger Zeichen als ARRAY OF CHAR erkannt.
 Um nun auch einzelne Zeichen als Strings zu deklarieren, kann man sie in
 Hochkommata einschlieûen.

 Alle mîglichen machinennahe Befehle, die ich brauchte und von Wirth nicht
 vorgesehen waren, habe ich ins Modul SYSTEM gesteckt. Es sind dies :

Funktionen :

 Name         Argumenttypen     Ergebnistyp  Funktion

 ANL(a,b)     Integertypen      wie a,b      bitweise Und
 ORL(a,b)     Integertypen      wie a,b      bitweise Oder
 XOL(a,b)     Integertypen      wie a,b      bitweise Exklusiv Oder
 NTL(a)       Integertypen      wie a        bitweise invertieren
 LONG(a)      SHORTINT,INTEGER  INT.,LONGINT vorzeichenlos erweitern

Prozeduren :

 Name         Argumenttypen                  Funktion

 INLINE(...)  Wortkonstanten                 fÅgt die Konstanten in den Code ein


Der integrierte Assembler
=========================

 Im Compiler ist ein Makroassembler integriert. Dieser ist ursprÅnglich als
 eigenstÑndiges Programm zur Assemblerprogrammierung gedacht gewesen und
 daher sehr viel leistungsfÑhiger als nîtig. Daher ist er auch nur gering mit
 dem Oberon-Teil des Compilers verbunden. Er hat einen eigenen Parser und
 arbeitet im Gegensatz zum Compiler mit 2 Passes.
 Bei der Programmierung habe ich mich an AS orientiert, ein PD-Assembler 
 fÅr PC's, so daû hier einige éhnlichkeiten bestehen.
 Mit dem Befehl
   ASSEMBLER
     ...
   END;
 wird der Assembler aktiviert. Alles zwischen ASSEMBLER und END wird dann
 nicht mehr vom Compiler, sondern vom Assembler bearbeitet. Dabei kînnen
 die meisten Symbole des Oberon-Teils verwendet werden, jedoch kann der
 Oberon-Teil nicht auf im Assembler definierte Symbole zugreifen.
 Der Assembler kann soweit mit Oberon-Strukturen arbeiten, solange kein
 Code dabei erzeugt wird.
 
 FÅr A7 kann alternativ auch SP verwendet werden. Alle Befehle sind auch
 ohne LÑngenangabe definiert. Wenn der Befehl in Wortgrîûe existiert, wird
 dies als Grîûe angenommen.
 
 Der Assembler ist genau wie der Compiler streng Case-sensitiv. Alle
 Maschinenbefehle und Pseudobefehle mÅssen groû geschrieben werden. Bei
 Labeln wird zwischen Groû- und Kleinschreibung unterschieden.
 
 Achtung : es sind lÑngst nicht alle Maschinenbefehle getestet und bei
 Problemen sollte ein Disassembler prÅfen, ob der Assembler nicht 
 vielleicht Unsinn kodiert hat.


 Symbolkonventionen
 ------------------

 Symbole werden mit einer LÑnge von 22 Byte gespeichert, alle weiteren
 Zeichen werden ignoriert. Wenn ein Label definiert werden soll, muû es
 in der ersten Spalte beginnen, darf kein vordefinierter Bezeichner
 sein und muû mit einem Buchstaben beginnen. Alle weiteren Zeichen kînnen
 Buchstaben, Ziffern und Unterstrich sein. Ein Doppelpunkt hinter einem 
 Label ist erlaubt, aber nicht erforderlich. Alle vordefinierten Bezeichner 
 dÅrfen auch in der ersten Spalte anfangen. Die Parameterliste eines Makros 
 muû mit einem Zeilenende oder Kommentar beendet werden. Auûer diesen beiden
 Forderungen ist in einem Quelltext alles erlaubt, auch mehrere Befehle
 in einer Zeile. Sicherheitshalber sollten sie mit ";;" getrennt werden,
 auch wenn es nicht immer nîtig ist. Ein Semikolon leitet Kommentar ein, 
 zwei hingegen trennen Befehle. Die Spalte hinter dem zweiten Semikolon
 wird wieder als erste Spalte einer neuen Zeile interpretiert, so daû
 dort auch ein Label definiert werden kann.
 Neben dem Åblichen Kommentar mit einem Semikolon bis zum Zeilenende kann
 man auch mehrere Zeilen mit der in Pascal/Modula/Oberon Åblichen
 Konstruktion (* ... *) Kommentar definieren.
 Bei Labels und Befehlen wird immer zwischen Groû- und Kleinschreibung 
 unterschieden. Alle Maschinenbefehle, Register und Pseudooperationen
 mÅssen groû geschrieben werden.
 
 Folgende Symbole definiert der Assembler vor:
 
 Name            Bedeutung
 
 *               mom. ProgrammzÑhler
 CPU		der gewÑhlte Prozessor
 
 sowie die Pseudobefehle, deren Parameter und natÅrlich alle 68000
 Befehle. Befehle der andere 680X0 Prozessoren werden implementiert
 sobald ich eine Kodierungsliste habe.
 
 
  FormelausdrÅcke
  ---------------
 
 An den meisten Stellen, an denen der Assembler Zahlenangaben erwartet,
 kînnen nicht nur einfache Symbole oder Konstanten angegeben werden,
 sondern ganze FormelausdrÅcke.  Bei den Komponenten der Formelaus-
 drÅcke kann es sich sowohl um ein einzelnes Symbol als auch um eine
 Konstante handeln.  Die Schreibweise von Integerkonstanten kann in
 verschiedenen Zahlensystemen erfolgen:
 
 dezimal		     direkt
 
 hexadezimal	nachgestelltes H, vorangestelltes $
 
 binÑr		nachgestelltes B, vorangestelltes %
 
 oktal		nachgestelltes O, vorangestelltes @
 
 Damit hexadezimale Kostanten im Intel-Modus nicht als Symbolnamen
 fehlinterpretiert werden kînnen, mÅssen sie immer mit einer Ziffer
 beginnen; anstelle z.B. F0H mu· also 0F0H geschrieben werden.
 Die Werte A-F mÅssen groûgeschrieben werden, ebenso die nachgestellten
 Buchstaben. Beim Motorola-Modus entfÑllt dies.
 Integerkonstanten kînnen auch als ASCII-Werte geschrieben werden,
 so entsprechen
 
  'A'    == $00000041
  'AB'   == $00004142
  'ABC'  == $00414243
  'ABCD' == $41414244
 
 Dabei mÅssen die Zeichen in Hochkommata eingeschlossen sein, um sie von
 Strings zu unterscheiden. Ihre LÑnge darf maximal 4 Zeichen betragen.
 Um nun aber auch GÑnsefÅ·chen und Sonderzeichen ohne Verrenkungen in
 Strings (und als Ascii-Werte geschriebene Integerkonstanten) schreiben zu
 kînnen, wurde ein "Escape-Mechanismus" eingebaut, der C-Programmierer(inne)n
 bekannt vorkommen dÅrfte:
 Schreibt man einen Backslash (\) mit einer maximal dreiziffrigen
 Zahl im String, so versteht der Assembler dies als Zeichen mit dem
 entsprechenden dezimalen ASCII-Wert.  So kann man mit
 
 \0
 
 ein NUL-Zeichen definieren.
 
 Einige besonders hÑufig gebrauchte Steuerzeichen kann man auch mit
 folgenden AbkÅrzungen erreichen:
 
 \b : Backspace           \a : Klingel         \e : Escape
 \t : Tabulator           \n : Zeilenvorschub  \r : WagenrÅcklauf
 \\ : Backslash           \' : Hochkomma       \" : GÑnsefÅ·chen
 
 Die Kennbuchstaben dÅrfen sowohl gro· als auch klein geschrieben
 werden.
 
 öber dieses Escape-Zeichen kînnen sogar FormelausdrÅcke in den
 String eingebaut werden, wenn sie in geschweifte Klammern einge-
 fa·t werden: z.B. bewirkt
 Wert1	equ 1
 Wert2   equ 2
 message "Wert = \{Wert1+Wert2}"
 die Ausgabe von "Wert = 3".
 
 Der Assembler stellt zur VerknÅpfung folgende Operanden zur VerfÅgung:
 
 Operand   Funktion           #Operanden Rang
 
   ~~      log. NOT                1     hoch
   ~       binÑres NOT             1      ^
                                          |
   *       Produkt                 2      |
   /       Quotient                2      |
   #       Modulodivision          2      |
   ^       Potenz                  2      |
   !,!!    binÑres XOR             2      |
   &,&&    binÑres AND             2      |
                                          |
   -       Differenz               2      |
   +       Summe                   2      |
   |,||    binÑres OR              2      |
                                          |
   <>      Ungleichheit            2      |
   >=      grî·er oder gleich      2      |
   <=      kleiner oder gleich     2      |
   <       echt kleiner            2      |
   >       echt grî·er             2      v
   =       Gleichheit              2     niedrig
 
 Die angedeuteten Gruppen haben jeweils gleichen Rang. Die Reihenfolge
 der Evaluierung lÑ·t sich durch Klammerung neu festlegen.
 Achtung : die Reihenfolge bei AS ist anders. Meine Reihenfolge entspricht
 der bei Åblichen Hochsprachen.
 
 Die Vergleichsoperatoren liefern TRUE, falls die Bedingung zutrifft,
 und FALSE falls nicht.  FÅr die logischen Operatoren ist ein Ausdruck
 TRUE, falls er ungleich 0 ist, ansonsten FALSE. Deshalb ist auch ein
 separater logisch Nicht Operator nîtig, denn eine Zahl ungleich 0
 kann binÑr invertiert immer noch ungleich 0 sein. Beim logisch nicht
 wird eine 0 zur 1, eine Zahl ungleich 0 zur 0. Alle anderen logischen
 Operationen sind mit den BinÑren identisch, die logischen Operatoren
 !!,&& und || existieren nur aus kompatibilitÑtsgrÅnden zu AS.
 
 FÅr Strings sind alle Vergleichsoperatoren sowie die Summe definiert.
 Die Summe zweier Strings ergibt einen String, der die beiden aneinander-
 gehÑngt erhÑlt. Vergleiche von Strings liefern 0 (FALSE) oder 1 (TRUE).
 öberall, wo Zahlen erwartet werden, dÅrfen also auch Stringvergleiche
 benutzt werden.
 
 Als einzige Funktion, die ein Stringargument zulÑ·t, ist die Funktion
 UPSTRING definiert.  Sie wandelt alle Zeichen in Gro·buchstaben um.
 Dabei werden auch Umlaute in Groûbuchstaben gewandelt, aber énderungen
 des Zeichensatzes mit CHARSET werden nicht korrekt berÅcksichtigt.
 Wer nur ein einzelnes Zeichen (als Integer gespeichert) umwandeln will,
 kann dies mit der Funktion TOUPPER tun.
 
 

	Pseudobefehle
	=============

  Definitionen
  ------------
 
  SET und EQU
  - - - - - -
  
 SET und EQU erlauben die Definition typenloser Konstanten, d.h. sie
 werden keinem Segment zugeordnet und ihre Verwendung erzeugt in kei-
 nem Fall eine Warnung wegen Segmentverquickung.  WÑhrend EQU Konstan-
 ten definiert, die nicht wieder (mit EQU) geÑndert werden kînnen,
 erlaubt SET die Definition von Variablen, die sich wÑhrend des As-
 semblerlaufes verÑndern lassen.
 Intern werden Konstanten und Variablen identisch gespeichert, der
 einzige Unterschied ist, da· sie mit SET umdefiniert werden kînnen
 und mit EQU nicht.  Es ist daher mîglich, ein Symbol mit EQU zu de-
 finieren und es mit SET zu Ñndern ( auch wenn das nicht der Sinn
 der Sache ist ).
 
 
  CHARSET
  - - - -
 
 Einplatinensysteme, zumal wenn sie LCDs ansteuern, benutzen hÑufig
 einen anderen Zeichensatz als ASCII, und da· die Umlautkodierung mit
 der im Befehl Åbereinstimmt, dÅrfte wohl reiner Zufall sein.  Um nun
 aber keine fehlertrÑchtigen Handumkodierungen vornehmen zu mÅssen,
 enthÑlt der Assembler eine Umsetzungstabelle fÅr Zeichen, die jedem
 Quellcode ein Zielzeichen zuordnet.  Zur Modifikation dieser Tabelle
 ( die initial 1:1 Åbersetzt ), dient der Befehl CHARSET.  Der Befehl
 erwartet eine Bereichsangabe fÅr die zu Åbersetzenden Zeichen als
 ersten bzw. ersten/zweiten Parameter und als letzten Parameter den
 Bereich, in den die Zeichen umgemappt werden sollen.  Zur Klarstel-
 lung zwei Beispiele:
 
 	CHARSET	'Ñ',128
 
 bedeutet, da· das Zielsystem das Ñ mit der Zahl 128 kodiert.
 Falls das Zielsystem keine Kleinbuchstaben unterstÅtzt, kînnen mit
 
 
         CHARSET 'a','z','A'
 
 alle Kleinbuchstaben auf die passenden Gro·buchtaben automatisch um-
 gemappt werden.
 
 ACHTUNG! CHARSET beeinflu·t nicht nur im Speicher abgelegte String-
 konstanten, sondern auch als "ASCII" formulierte Integerkonstanten.
 Dies bedeutet, da· eine evtl. bereits modifizierte Umsetzungstabelle
 in den obigen Beispielen zu anderen Ergebnissen fÅhrt!
 
 
  Codebeeinflussung
  -----------------
 
 
  CPU
  - -
 
 Speichert die nachfolgende Zahl als Bezeichnung fÅr eine CPU. Kann wie
 jeder andere Bezeichner in AusdrÅcken verwendet werden und ist bei der 
 bedingten Assemblierung verwendbar. Der Assembler prÅft, ob ein 
 Maschinenbefehl auf der gewÑhlten Cpu verfÅgbar ist und verweigert sie
 wenn nicht. Defaultwert ist 68000.
 
 
 
  SUPMODE
  - - - -
  
 Diese Variable kann nur ein- oder ausgeschaltet werden. Sie teilt dem
 Assembler mit, ob der Supervisormode gerade eingeschaltet ist oder nicht.
 Am Anfang ist die Variable ausgeschaltet.
 Beispiel :
 
 	SUPMODE ON
 	MOVE	#0,SR	; nur im Supervisormode zulÑssig
 	SUPMODE OFF
 	MOVE	#0,SR	; fÅhrt zu einer Warnung des Assemblers
 	
 	
  SEGMENT
  - - - -
 
 Der Atari unterscheidet verschiedene Adre·bereiche, die nicht miteinander 
 mischbar sind und jeweils auch verschiedene Befehle zur Ansprache benîtigen.  
 Um auch diese verwalten zu kînnen, stellt der Assembler mehrere 
 ProgrammzÑhler zur VerfÅgung, zwischen denen mit dem SEGMENT-Befehl 
 hin- und hergeschaltet werden kann.  Dies erlaubt es, sowohl in mit 
 INCLUDE eingebundenen Unterprogrammen als auch im Hauptprogramm benîtigte 
 Daten an der Stelle zu definieren, an denen sie benutzt werden.  Im 
 einzelnen werden folgende Segmente mit folgenden Namen verwaltet:
 
 CODE    : Programcode
 DATA    : Datenbereich
 BSS	: Block storage segment, zu 0 initialisierte Daten, die nicht
           im Programmcode auftauchen, sondern vom TOS angehÑngt werden.
 
 
 Labels, die in einem Segment eines bestimmten Typs definiert werden,
 erhalten diesen Typ als Attribut.  Damit hat der Assembler eine be-
 grenzte PrÅfmîglichkeit, ob mit den falschen Befehlen auf Symbole
 in einem Segment zugegriffen wird.  In solchen FÑllen sollte der As-
 sembler eine Warnung ausgeben.
 
 Achtung : Die Segmente werden natÅrlich auseinandergezogen und vom
 Linker richtig zusammengesetzt, daher darf man natÅrlich keine PC-relative
 Adressierung Åber Segmentgrenzen anwenden.
 
 
 
  Datendefinitionen
  -----------------
 
  DC,DS
  - - - - - -
 
 Damit werden Konstanten im Code oder im Datensegment abgelegt oder 
 Speicher reserviert. Als LÑngen sind .B, .W und .L mîglich, keine
 Angabe nimmt WortlÑnge.
 
 Bei allen dreien sind Strings erlaubt, evtl. wird ein String mit Nullen
 verlÑngert, um auf ein Vielfaches der Bytezahl zu kommen.
 Eine Reservierung von Speicher wird durch DS gemacht:
 
 	DS.B	10	; reserviert 10 Bytes
 	DS.W	1	; reserviert ein Wort
 	DS.L	2,$FF	; reserviert 2 Langworte mit Inhalt $FF
 
 Speicherreservierung ohne Inhaltsangabe ist in allen Segmenten erlaubt.
 Der Inhalt ist dann jeweils 0. Eine Inhaltsangabe ist natÅrlich nur im
 Code und im Datensegment erlaubt.
 
 
  ALIGN
  - - -
 
 ALIGN mit einem dahinterstehenden Integerausdruck erlaubt es, den
 ProgrammzÑhler auf eine bestimmte Adresse auszurichten.  Die Aus-
 richtung erfolgt dergestalt, da· der ProgrammzÑhler so weit er-
 hîht wird, da· er ein ganzzahliges mehrfaches des Argumentes
 wird :
 
  	align 2
 
 macht den ProgrammzÑhler gerade. Der Freiraum wird mit 0 gefÅllt.
 
 Stattdessen kann man auch EVEN ohne Wert benutzen.
 
 
  Makrobefehle
  ------------
 
 Kommen wir nun zu dem, was einen Makroassembler vom normalen As-
 sembler unterscheidet: der Mîglichkeit, Makros zu definieren.
 Makros sind eine Folge von Befehlen, die bei jeder Benutzung des
 Makros anstelle des Makros assembliert werden. Es gibt drei Arten
 Makros :
 
 
  MACRO
  - - -
 
 ist der wohl wichtigste Befehl zur Makroprogrammierung.  Mit der
 Befehlsfolge
 
 <Name>	MACRO	[Parameterliste]
 	<Befehle>
         ENDM
 
 wird das Makro <Name> als die eingeschlossene Befehlsfolge defi-
 niert.  Diese Definition alleine erzeugt noch keinen Code!  DafÅr
 kann fortan die Befehlsfolge einfach durch den Namen abgerufen
 werden, das ganze stellt also eine Schreiberleichterung dar.  Um
 die ganze Sache etwas nÅtzlicher zu machen, kann man bei der Ma-
 krodefinition eine Parameterliste mitgeben.  Die Parameternamen
 werden wie Åblich durch Kommas getrennt und mÅssen - wie der Makro-
 name selber - den Konventionen fÅr Symbolnamen genÅgen.
 
 Beim Aufruf eines Makros werden die beim Aufruf angegebenen Para-
 meternamen Åberall textuell im Befehlsblock eingesetzt und der
 sich so ergebene Assemblercode wird normal assembliert. Sollten
 beim Aufruf zu wenige Parameter angegeben werden, werden sie als leere
 String Åbergeben. Soll mittendrin ein Parameter weggelassen werden, kann
 man zwei aufeinanderfolgende Kommas schreiben.
 FÅr die Åbergebenen Parameter gelten besondere Regeln :
 Eine zusammenhÑngende Kette von Zeichen ohne Komma gilt als ein
 Parameter, egal um welche Zeichen es sich handelt. Es kînnen also
 auch spezielle Adressierungsarten wie @A+DPTR Åbergeben werden.
 Wenn bewuût Strings Åbergeben werden sollen, mÅssen sie in Hochkommata
 eingeschlossen werden, der Parameter besteht dann aus dem String
 mit Hochkommata. Wird ein String in GÑnsefÅûchen eingeschlossen,
 besteht der Parameter nur aus dem String ohne GÑnsefÅûchen. So ist
 es auch mîglich, Kommas und Leerzeichen in einem Parameter unter-
 zubringen.
 
 Beispiele :
 mac1	MACRO	par1
 	MOVE	D0,par1
 	ENDM
 
 	mac1	A0		; entspricht "MOVE D0,A0"
 
 mac2	MACRO	par2,par3
 	par2	par3
 	ENDM
 
 	mac2	MOVE,"D0,A0"	; entspricht wiederum "MOVE D0,A0"
 
 Es kann also praktisch alles durch Makroparameter ersetzt werden,
 auch Befehle !
 
 In MakrorÅmpfen definierte Labels werden immer als lokal betrachtet,
 ein expliziter LOCAL-Befehl ist also nicht erforderlich. Sollen Label
 global bekannt sein, mÅssen sie mit einem Stern gekennzeichnet sein.
 Da auf diese Weise das Label mit jedem Makroaufruf neu definiert wird,
 darf es sich nur um Definitionen mit "SET" handeln, damit keine Fehler-
 meldungen wie "Label schon definiert" kommen. Aus technischen GrÅnden
 ist es momentan nîtig, ein Makro vor der ersten Benutzung zu deklarieren.
 Wenn ein Makroparameter in GÑnsefÅûchen eingeschlossen wird, wird er
 ebenfalls ersetzt, so daû das Aussehen des Parameters ÅberprÅft werden
 kann.
 Beispiel :
 
 Test	MACRO Par
 
 	IF "Par" = "A"
 	...
 
 Wenn als Parameter "a" oder "A" Åbergeben wurde, ergibt der Vergleich
 true. Es wird aber nicht generell in Strings ersetzt, sondern nur, wenn
 der gesamte String gleich einem Makroparameter ist. Der Parameter wird
 IMMER in Groûbuchstaben umgewandelt.
 
 
  IRP
  - -
 
 ist die eine vereinfachte Form von Makrodefinitionen fÅr den Fall,
 da· eine Befehlsfolge einmal auf mehrere Operanden angwendet werden
 soll und danach nicht mehr gebraucht wird.  IRP benîtigt als ersten
 Parameter ein Symbol fÅr den Operanden, und danach eine (fast) be-
 liebige Menge von Parametern, die nacheinander in den Befehlsblock
 eingesetzt werden.  Um eine Menge von Registern auf den Stack zu
 schieben, kann man z.B. schreiben
 
 	IRP	op, D0,D1,D3
         MOVE	op,-(SP)
         ENDM
 
 was in folgendem resultiert:
 
 	MOVE	D0,-(SP)
 	MOVE	D1,-(SP)
 	MOVE	D3,-(SP)
 
 Benutzte Labels sind wieder fÅr jeden Durchgang automatisch lokal.
 
 Soll ein Label global sichtbar sein, muû es einen Stern hinter dem
 Namen haben. Dies geht nur bei Labels, die mit SET definiert werden,
 denn andere wÅrden eine Fehlermeldung erzeugen, daû das Label schon
 definiert ist.
 
 
  REPT
  - - -
 
 ist die einfachste Form der Makrobenutzung.  Der im Rumpf angegebene
 Code wird einfach sooft assembliert, wie der Integerparameter von
 REPT angibt.  Dieser Befehl wird hÑufig in kleinen Schleifen anstelle
 einer programmierten Schleife verwendet, um den Schleifenoverhead zu
 sparen.
 
 Der VollstÑndigkeit halber ein Beispiel:
 
 	REPT	3
         ROR	#1,(A0)
         ENDM
 
 rotiert den Wert um 3 Stellen nach rechts.
 
 Symbole sind wiederum fÅr jede einzelne Repetition lokal.
 
 
 
  bedingte Assemblierung
  ----------------------
 
 Der Assembler unterstÅtzt die bedingte Assemblierung mit Hilfe der
 Befehle IF.. / ELSEIF / ENDIF.  Diese Befehle wirken zur Assemblier-
 zeit, indem entsprechend der Bedingung Teile Åbersetzt oder Åber-
 sprungen werden.  Diese Befehle sind also nicht mit den IF-State-
 ments hîherer Programmiersprachen zu vergleichen.
 
 Die allgemeine Form eines IF-Befehles ist folgenderma·en:
 
 	IFC <Ausdruck> THEN
         .
         .
         <Block 1>
         .
         .
         ELSIFC
         .
         .
         <Block 2>
         .
         .
         ELSEC
         .
         .
         <Block 3>
         .
         .
 	ENDC
 
 Falls der hinter IF angegebene Ausdruck wahr (d.h. ungleich 0) ist,
 wird Block 1 assembliert. Es kînnen dann beliebig viele ELSIFC folgen,
 mit denen genauso verfahren wird. Falls keine Bedingung zutrifft, wird
 der ELSEC-Zweig assembliert, falls er vorhanden ist.
 
 IF-Anweisungen dÅrfen beliebig verschachtelt werden, ein ELSEC bezieht
 sich immer auf das letzte vorangegangene, noch nicht abgeschlossene IFC.
 
 Wenn in der Bedingung Symbole auftauchen, mÅssen diese unbedingt vorher
 definiert worden sein, damit im Pass1 der richtige Block Åbersetzt wird.
 
 FÅr den Test, ob ein Symbol definiert ist, wurde die Funktion DEF einge-
 fÅhrt. Sie gibt TRUE (=1), wenn daû angegebene Symbol definiert ist,
 sonst FALSE (=0).
 Dies ist nÅtzlich fÅr Include Dateien :
 
 	IFC NOT DEF(thisfile) THEN	; wenn nicht definiert
 
 thisfile	EQU 1			; dann definieren
 
 	...				; und Åbersetzen
 
 	ENDC
 
 
 
  Locale Label
  ------------
 
 Die bedeutendste Erweiterung zu AS sind lokale Label. Damit kînnen
 innerhalb eines Bereichs alle Label eingekapselt werden, so daû sie
 in der Umgebung nicht mehr sichtbar sind.
 
 Beispiel :
 	LOCAL
 Proc1*:	...
 Loop:   ...
 	END
 
 	LOCAL
 Proc2*:	...
 Loop:	...
 	LOCAL
 
 kînnen so in derselben Datei stehen. Loop ist jeweils nur innerhalb
 von local und end sichtbar. Ein * hinter einem Label (vor dem Doppel-
 punkt falls einer gesetzt wird) bedeutet, daû das Label global sein
 soll. Egal auf welcher Verschachtelungsebene von local man sich
 befindet, ein solches Label ist Åberall sichtbar. Includedateien
 sollten alle Label lokal machen und nur diese Label global definieren,
 die auch von anderen benutzt werden sollen. Damit vermeidet man die
 Doppelbenutzung von Labels, die unwissentlich in einer Includedatei
 definiert sind.
 
 Alle Label ohne Stern sind auûerhalb der ASSEMBLER ... END Struktur
 nicht bekannt, d.h. sie sind automatisch lokal.
 
 Durch die Lokalisierung innerhalb von ASSEMBLER bis END ist dieser
 Befehl nicht nîtig, aber fÅr reine Assemblerprojekte ist er wichtig.
 
 
 
  Hochspracheelemente
  -------------------
 
 Der Assembler beherrscht auch einige der Oberon-Strukturen, wenn auch
 wesentlich primitiver. Trotzdem kann man mit ihnen ein wenig Struktur
 in ein Assemblerprogramm bringen und auch Labeldefinitionen wie Loop
 o.Ñ. sparen.
 
 
  IF cond THEN ... ELSIF cond THEN ... ELSE ... END
  - - - - - - - - - - - - - - - - - - - - - - - -
 
 Die Åbliche If-Abfrage darf natÅrlich nicht fehlen. Als Bedingungen
 sind aber lediglich die Åblichen condition codes HI,LS,CC,HS,CS,LO,
 NE,EQ,VC,VS,PL,MI,GE,LT,GT und LE zugelassen.
 
 Beispiel :
 
 	CMP D0,D1
 	IF EQ THEN	; wenn D0 = D1
 	  ...		; tu dies
 	ELSIF LO THEN	; wenn D1 < D0
 	  ...		; tu dies
 	ELSE
 	  ...		; sonst dies
 	END
 
 
  REPEAT ... UNTIL cond
  - - - - - - - - - - -
 
 Entspricht einer Repeat-Schleife in Oberon. Bedingungen wie bei IF.
 
 Beispiel :
 
 	REPEAT
 	  SUBQ #1,D0
 	UNTIL EQ	; zÑhlt D0 bis auf 0 runter
 
 
  LOOP ... END
  - - - - - - -
  
 Entspricht LOOP in Oberon.
 
 
  EXIT [(Zahl)]
  - - - - - - -
  
 Mit Hilfe deer Exit-Anweisung kann man REPEAT-Schleifen und LOOP-
 Schleifen mittendrin verlassen. Es wird ein Branch an das Ende der
 Struktur eingefÅgt. Wenn man eine Zahl in Klammern angibt, kann man
 gleich mehrere Strukturen verlassen. Dabei einspricht EXIT EXIT(0).
 
 Beispiel :
 
 	LOOP
 	  REPEAT
 	    TST D0
 	    IF EQ THEN EXIT END   ; verlÑût die REPEAT-Schleife
 	    IF MI THEN EXIT(1) END; verlÑût die LOOP-Schleife
 	  UNTIL PL
 	END
 
 
  Diverses
  --------
 
 
  INCLUDE
  - - - -
 
 Dieser Befehl fÅgt die im Parameter angegebene Datei (die optional in
 Hochkommas eingeschlossen sein darf) so im Text ein, als ob sie dort
 stehen wÅrde.  Dieser Befehl ist sinnvoll, um Quelldateien aufzuspal-
 ten, die alleine nicht in den Speicher passen wÅrden oder um sich
 "Toolboxen" zu erzeugen.
 
 Aus KompatibilitÑtsgrÅnden ist es erlaubt, den Dateinamen in GÑnse-
 fÅ·chen zu schreiben,
 
 	include	stddef51.asm
 und
 	include	"stddef51.asm"
 
 sind also Ñquivalent.
 
 
  MESSAGE, WARNING, ERROR und FATAL
  - - - - - - - - - - - - - - - - -
 
 Der Assembler prÅft zwar die Quelltexte so streng wie mîglich und
 liefert diffenzierte Fehlermeldungen, je nach Anwendung kann es
 aber sinnvoll sein, unter bestimmten Bedingungen zusÑtzliche Fehler-
 meldungen auszulîsen, mit denen sich logische Fehler automatisch
 prÅfen lassen.  Der Assembler unterscheidet drei Typen von Fehler-
 meldungen, die Åber die drei Befehle auch dem Programmierer zugÑng-
 lich sind:
 
 - WARNING : Fehler, die auf mîglicherweise falschen oder ineffi-
 	    zienten Code hinweisen.  Die Assemblierung lÑuft weiter,
 	    eine Codedatei wird erzeugt.
 
 - ERROR   : echte Fehler im Programm.  Die Assemblierung lÑuft wei-
 	    ter, um mîgliche weitere Fehler in einem Durchgang ent-
 	    decken und korrigieren zu kînnen.  Eine Codedatei wird
 	    nicht erzeugt.
 
 - FATAL   : schwerwiegende Fehler, die einen sofortigen Abbruch des
 	    Assemblers bedingen.  Eine Codedatei kann mîglicherweise
 	    entstehen, ist aber unvollstÑndig.
 
 Alle Befehle erwarten eine String als Argument.
 
 Diese Anweisungen ergeben nur in Zusammenhang mit bedingter Assem-
 blierung Sinn. So kan man fehlerhafte Bedingungen abtesten und mit 
 einer Fehlermeldung abbrechen.
 Der String einer Fehlermeldung wird anstatt einer Assemblermeldung 
 in die Fehlerdatei geschrieben und mit Zeile und Spalte versehen, 
 in der der Befehl steht.
 
 Der Befehl MESSAGE gibt den angegebenen String lediglich aus und
 erzeugt einen Zeilenvorschub.
 
 
  Zugriff auf Oberon-Bezeichner
  - - - - - - - - - - - - - - -
 
 Der Assembler hat eine begrenzte Zugriffsmîglichkeit auf Bezeichner,
 die in Oberon definiert wurden. Dabei gilt allgemein, daû nur solche
 Zugriffe unterstÅtzt werden, die keinen zusÑtzlichen Code erfordern.
 
 Beispiel :
 
 CONST con = 10;
 
 TYPE rec = RECORD 
              var1 : INTEGER;
              var2 : ARRAY 10 OF CHAR;
            END;
      arr = ARRAY 10 OF LONGINT;
 
 VAR a : rec;
     b : POINTER TO rec;
     c : arr;
 
 PROCEDURE proc1;
  ...
 
 PROCEDURE proc2*;
  ...
 
 Dann sind folgende Zugriffe mîglich :
 
 	MOVE	#con,D0		; lÑdt D0 mit 10
 	MOVE.L	a,A0		; lÑdt Adresse von a in A0
 				; (geht auch mit Prozeduren und Stringkonstanten)
 	MOVE	a.var1,D0	; geht weil a globale Variable ist
 	MOVE.B	a.var2[5],D1	; dito
 	MOVE.L	c[8],D2		; dito
 	BSR	proc		; innerhalb eines Moduls
 	JSR	proc2		; bei importierten und exportierten Prozeduren
 
 Dagegen geht dies nicht :
 
 	MOVE	b.var1,D0	; b ist ein Zeiger und muû erst geladen werden
 
 Dies kann so gelîst werden :
 
 	MOVE.L	b,A0		; Inhalt von b = Zeiger auf rec
 	MOVE	rec.var1(A0),D0	; typ.var ergibt Offset von var
 	MOVE.B	rec.var2[5](A0),D0; genauso
 	MOVE.L	arr[2](A1),D0	; geht genauso mit Arrays
 
 Man kann also mit dem Typbezeichner die Offsets der Variablen innerhalb
 des Records bekommen. Dies sollte immer der direkten Angabe von Zahlen
 vorgezogen werden, damit bei einer énderung der Datenstruktur nicht alle
 Zahlen geÑndert werden mÅssen.
