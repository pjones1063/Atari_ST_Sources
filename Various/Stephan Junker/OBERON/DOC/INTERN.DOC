Internes von Oberon - nur fÅr Neugierige !


Code einer globalen Adresse
---------------------------
Alle globalen Adressen (im Daten- oder BSS-Segment oder globale Prozeduren)
werden Åber absolute Adressierung angesprochen. Dabei ist der Operand
folgendermaûen definiert :
 Bits 0-21 : Offset zum Anfang des Datensegmentes (konstante Strings) oder
             des BSS-Segmentes (Variable) oder Funktionsnummer der globalen
             Prozedur. Die Funktionsnummer 0 ist fÅr den Modulrumpf
             reserviert, ab 1 aufwÑrts werden die globalen Prozeduren
             gezÑhlt.
 Bits 22-23: Art des Operanden :
             00 : Der Operand ist eine Adresse relativ zum Textanfang
                  (so wie es jeder Assembler erzeugt)
             01 : Der Operand ist eine Adresse relativ zum BSS-Segment
             10 : Der Operand ist eine Adresse relativ zum Datensegment
             11 : Der Operand enthÑlt eine Funktionsnummer
 Bits 24-31: EnthÑlt die Nummer des Moduls, in dem der Bezeichner definiert
             ist, oder 0 falls Art des Operanden = 00.


Funktionsnummern des System-Moduls
----------------------------------
Die Prozeduren, die der Compiler benutzt (Bearbeitung von Flieûkommazahlen,
NEW etc.), sind im Modul System definiert und werden wie andere Prozeduren
auch Åber codierte globale Adressen angesprochen.
Die Funktionsnummern sind :
1 : SIntToReal
2 : IntToReal
3 : LIntToReal
4 : SIntToLReal
5 : IntToLReal
6 : LIntToLReal
7 : RealToLReal
8 : NegateReal
9 : NegateLReal
10: MulReal
11: MulLReal
12: DivReal
13: DivLReal
14: AddReal
15: AddLReal
16: SubReal
17: SubLReal
18: CompareReal
19: CompareLReal
20: AbsReal
21: AbsLReal
22: EntierReal
23: EntierLReal
24: LRealToReal
25: MulLInt
26: DivLInt
27: ModLInt
28: New (* SYSTEM.NEW *)
29: Copy (* SYSTEM.MOVE *)
30: TypErr1 (* types did not match *)
31: TypErr2 (* dito *)
32: NoReturn (* function without return *)
33: HALT (* calls the procedure linked in System.Halt *)
34: NewP (* NEW(pointer) *)
35: CaseErr (* no else branch *)
36: TruncReal
37: TruncLReal

Dasselbe in einer Form, die ein Assembler brauchen kann :
System		EQU -1	; o.Ñ.
Sys		EQU System<<24+$c00000+Base
SIntToReal	EQU Sys+1
IntToReal	EQU Sys+2
LIntToReal	EQU Sys+3
SIntToLReal	EQU Sys+4
IntToLReal	EQU Sys+5
LIntToLReal	EQU Sys+6
RealToLReal	EQU Sys+7
NegateReal	EQU Sys+8
NegateLReal	EQU Sys+9
MulReal		EQU Sys+10
MulLReal	EQU Sys+11
DivReal		EQU Sys+12
DivLReal	EQU Sys+13
AddReal		EQU Sys+14
AddLReal	EQU Sys+15
SubReal		EQU Sys+16
SubLReal	EQU Sys+17
CompareReal	EQU Sys+18
CompareLReal	EQU Sys+19
AbsReal		EQU Sys+20
AbsLReal	EQU Sys+21
EntierReal	EQU Sys+22
EntierLReal	EQU Sys+23
LRealToReal	EQU Sys+24
MulLInt		EQU Sys+25
DivLInt		EQU Sys+26
ModLInt		EQU Sys+27
New		EQU Sys+28
Copy		EQU Sys+29
TypErr1		EQU Sys+30
TypErr2		EQU Sys+31
NoReturn	EQU Sys+32
HALT		EQU Sys+33
NewP		EQU Sys+34
CaseErr		EQU Sys+35
TruncReal	EQU Sys+36
TruncLReal	EQU Sys+37
Dabei muû Base ein Textlabel am Anfang des Moduls sein, damit alle Zugriffe
auf die Nummern auch reloziert werden !

Nummern des Halt-Befehls
------------------------
Bei Benutzung des HALT-Befehls wird eine Nummer Åbergeben. Die Nummern 0 bis 19
sind reserviert. Sie haben folgende Bedeutung :
0 = TYPERR1
1 = TYPERR2
2 = NORET
3 = CASERR
4 = REALERR
5 = OUTOFMEM
9 = DEBUG
10 = BUSERR
11 = ADDRERR
12 = ILLEGAL
13 = DIVZERO
14 = INDEXERR
15 = OVERFLOW
16 = PRIVILEG
Das Modul System linked in System.Halt lediglich eine Prozedur, die die
momentane Task abbricht. Loader linkt eine Prozedur, die auch die Art des
Fehlers ausgibt. Dies ist unter ObnShell verfÅgbar.