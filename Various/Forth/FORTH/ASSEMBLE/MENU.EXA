( Menus.example
  Given a menu created with the RCS, here's how you can include it
  in your application. The techniques are identical to those used
  by the kernel. The I/O task automatically keeps the front window's menu
  up and hands out the appropriate messages after a selection. This
  example merely installs routines that will handle those messages
  automatically)

only forth also assembler also gem
decimal
132 USER MenuSelectionVector	( huh! my name's bigger than yours)
176 USER W3	( where menu selection data will be)
200 USER TaskMenuBar

NEW.WINDOW MenuW		( define a new window)
" Menu Example " MenuW TITLE	( give window a title )
1200 1200 TERMINAL MenuT	( define a new terminal task)



: InstallMenu		( this must be executed by the new task
			so that the menu goes in the correct user table.
			It loads in the menu. Everything else will now
			be handled by the I/O task and the menuhandler.)
   " MenuExmp.RSC" 1+ call RsrcLoad	( result positive if all ok)
   IF
	0 0 call RsrcGAddr	( result positive if all ok.
				This will return the address of the
				object tree just loaded by RsrcLoad)
	IF TaskMenuBar !	( store the address)
	TaskMenuBar @		( when doing a turnkey, the menu must)
	1			( be displayed initially. That's what)
	call MenuBar drop	( these three lines do)
	THEN
   THEN ;
 
 ( MenuHandlers. Whenever a menu item is selected, the appropriate
 handler (or none if the MenuSelVec is zeroed) will be called with
 the object title index in the W3 user variable and the object item
 index in the W4 user variable. In practice, you can fetch a long
 value from W3- it will contain both indexes- and determine what to
 do. Use the default menu handler- given to new tasks- to find out
 what the values will be given your menu. The default handler
 is just:
 : DefMenuHandler
 	W3 ? ;
it's best to be in hex to see the numbers correctly. This is the
exact procedure used to write this example and, in fact, to make
the system menus work.)

( after a menu is selected, the title must be de highlited. This is done
with the 'MenuTNormal' call. Then the menubar must be re-displayed with
the 'MenuBar' call. This particular routine is called with the title index
(3, 4, or 5 in this case) on the stack)

: TidyMenuBar	{ title.index -- }
	TaskMenuBar @	( address of tree)
	title.index	( which one to display normally)
	1		( 1 means display normally)
	call MenuTNormal	( do it)
	drop		( drop the result as usual)

	TaskMenuBar @
	1		( 1 means 'show' as opposed to 'erase')
	call MenuBar	( do it)
	drop		( drop the result)

	1 call vswrmode drop	( menus always mess up the writing mode
			so reset it now to replace mode)
	;

create AboutBox
	dc.b	'[1]'
	dc.b	'[This is an|'
	dc.b	'example.....]'
	dc.b	'[okay]'
	dc.b	0,0	( ?)

: DoAbout
	AboutBox 0 call FormAlert
	1 call vswrmode 2drop ;		( try it at home)
: DoEntry1 ." Entry number 1" CR ;
: DoEntry2 ." Entry number 2" CR ;
: DoOption1 ." Option number 1" CR ;
: DoOption2 ." Option number 2" CR ;

 hex
 : MyMenuHandler
 	W3 @
	CASE
	 00030008 OF DoAbout	3 TidyMenuBar ENDOF
	 00040011 OF DoEntry1	4 TidyMenuBar ENDOF
	 00040012 OF DoEntry2	4 TidyMenuBar ENDOF
	 00050014 OF DoOption1	5 TidyMenuBar ENDOF
	 00050015 OF DoOption2	5 TidyMenuBar ENDOF
	ENDCASE
	;

: InstallHandler
	['] MyMenuHandler MenuSelectionVector !
	;

: MainCode 			( this is what the application does)
	InstallMenu		( first it must load it's menu in)
	InstallHandler		( and then insert it's menuhandler)
				( and then go into some code loop)
	BEGIN 			( it just prints out 'hi' like an)
		." Hi!" 	( idiot until someone hits a key.)
		CR 		( Then it will exit ('BYE') to the)
	?TERMINAL 		( desktop)
	UNTIL 
	BYE ;


: TopWord			( Since TopWord will be the top word,)
				( it's responsible for initializing)
				( the system and then starting up:)
				( INITIALIZE)
	MenuW ADD		( pop window up)
	MenuW MenuT BUILD	( join the window and task together)
				( START-UP)
				( 'ACTIVATE' is used in a definition (only!) )
				( to assign the word-to-run to a task.)
	MenuT ACTIVATE MainCode ;			


( make it into an example application w/ 'Turnkey TopWord MExample'
( for testing, just type in 'TopWord')
CR .( Hope you read all this)
CR