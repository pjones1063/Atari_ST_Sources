( Screen.Save)
( The vroCpyfm routines didn't look too friendly, so here are some screen-
  saving words. This code is equivalent to an opaque copy except it
  can't be used for copying one area to another- just saving and restoring.
  Uses logical screen address. Since this is a demo NO RANGE CHECKING)

( Syntax:
	SAVE  ( bufaddr x1 y1 x2 y2 - )
	RESTORE ( bufaddr - )
	where x1,y1,x2,y2 are the left,top,right,bottom coordinates of
	an area you want to save and bufaddr os the address of the buffer
	which can hold all the information
  Structure of buffer:
  	+0 x1
	+2 y1
	+4 x2
	+6 y2
	+8 - +n  data. But you only have to pass an address and not build
			the buffer structure. Program uses word boundaries
			for a bit of speed)


CODE MOVE ( a1 a0 n3 n2 n1 flag - )
			( n1 is the number of words/row being moved
			  n2 is the number of bytes/row to skip
			  n3 is the number of rows to do
			  a1 is the starting addr in screen memory of move
			  a0 is where to save to/restore from
			  flag is 1 if saving, 0 if restoring)
			( Does NOT check for '0' rows or '0' words/row.
			  It assumes you're moving stuff around)
	TST.L	(A6)+		( test flag)
	BEQ.S	@Restore
@Save
	MOVEM.L	(A6)+,A0-A1/D1-D3	( slick)
@SNextR	MOVE.L	D1,D0		( use this value in D0)
@SNextW	MOVE.W	(A1)+,(A0)+
	SUBQ.L	#1,D0
	BGT.S	@SNextW
	ADDA.L	D2,A1		( get to next row)
	SUBQ.L	#1,D3
	BGT.S	@SNextR
	RTS

@Restore
	MOVEM.L	(A6)+,A0-A1/D1-D3	( slick)
@RNextR	MOVE.L	D1,D0		( use this value in D0)
@RNextW	MOVE.W	(A0)+,(A1)+
	SUBQ.L	#1,D0
	BGT.S	@RNextW
	ADDA.L	D2,A1		( get to next row)
	SUBQ.L	#1,D3
	BGT.S	@RNextR
	RTS
END-CODE


decimal
( CONV converts to parameters that are ready-made for MOVE)
: CONV	{ bufaddr | x1 y1 x2 y2
		    pix/word pix/byte bytes/row words/row logbase
		    a0 a1 n1 n2 n3 - a1 a0 n3 n2 n1 }
	call logbase	-> logbase
	bufaddr w@	-> x1
	bufaddr 2+ w@	-> y1
	bufaddr 4 + w@	-> x2
	bufaddr 6 + w@	-> y2
	call getrez
	CASE 0 OF		( low rez. Must be done in multiples
				of four words to preserve 'planes')
		4 -> pix/word
		2 -> pix/byte
		160 -> bytes/row
		80 -> words/row
	       ENDOF
	     1 OF		( med rez. Must be done in multiples
	     			of two words to preserve 'planes')
		8 -> pix/word
		4 -> pix/byte
		160 -> bytes/row
		80 -> words/row
	       ENDOF
	     2 OF		( hi rez)
		16 -> pix/word
		8 -> pix/byte
		80 -> bytes/row
		40 -> words/row
	       ENDOF
	ENDCASE
	x1 16 / 16 * -> x1	( round x1 so word boundaries result)
	x2 8 + 16 / 16 * -> x2	( round x2 also)

	bufaddr 8 + -> a0

	logbase
	y1 bytes/row *
	x1 pix/byte / + + -> a1

	x2 x1 - pix/word / -> n1
	words/row n1 - 2* -> n2
	y2 y1 - -> n3
	
	a1 a0 n3 n2 n1
	;

: RESTORE ( bufaddr - ) ( just makes the logical screen)
	CONV 0 MOVE
	;

: SAVE { bufaddr x1 y1 x2 y2 - }
	x1 bufAddr w!
	y1 bufAddr 2+ w!
	x2 bufAddr 4 + w!
	y2 bufAddr 6 + w!
	bufaddr CONV 1 MOVE
	;

	