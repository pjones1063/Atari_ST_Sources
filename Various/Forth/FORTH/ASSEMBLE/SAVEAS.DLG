( SaveAs.dlg)
( How to do a 'Save As:' dialog by hand.)
( first I created a dialog box with the RCS and RSRCLoad'ed it. Then I
  dumped the resource and copied it into this file)


decimal
also assembler
: .ALIGN	( since 'header' doesn't compile code, 'DC.B's could
		leave HERE on an odd address)
	0 w, -2 allot
	;

HEADER GSTRING
	DC.B	'Save file as:'
	DC.B	0
.ALIGN
HEADER pText
	DC.B	'___________'	( original text displayed)
	DC.B	0
.ALIGN
HEADER pTemplate
	DC.B	'________.___'	( user can only type if an '_')
	DC.B	0
.ALIGN
HEADER pValid
	DC.B	'pppppppppppp'	( means only a TOS filename will go here)
	DC.B	0
.ALIGN
HEADER TEDINFO	( see p.326 GEM Abacus)
	DC.L	0	( pText pointer)
	DC.L	0	( pTemplate pointer)
	DC.L	0	( pValid pointer)
	DC.W	3,6,0,$1180,0,-1,12,13
.ALIGN
HEADER SAVEstring
	DC.B	'Save'
	DC.B	0
.ALIGN
HEADER CANCELstring
	DC.B	'Cancel'
	DC.B	0

( the last four words of each object are their x,y,w,h's. These are
normally spec'ed in character units. They were, however, all converted
for use with the 8x16 mono font for simplicity)

CREATE DialogTree
( Root object, the rectangle)
	DC.W	$FFFF,$0001,$0004,$0014,$0000,$0010
	DC.W	$0002,$1100,$0000,$0000,$00E0,$00A0
( the text string object)
	DC.W	$0002,$FFFF,$FFFF,$001C,$0000,$0000
	Header GSTRptr
	DC.L	0		( this must get filled in at run-time)
	DC.W	$0028,$0020,$0068,$0010
( the editable text stuff)
	 DC.W	$0003,$FFFF,$FFFF,$001D,$0008,$0000
	Header TEDIptr
	DC.L	0		( this must get filled in at run-time)
	DC.W	$0028,$0040,$0060,$0010
( the save button stuff)
	DC.W	$0004,$FFFF,$FFFF,$001A,$0007,$0000
	Header SAVEptr
	DC.L	0		( this, too, must get filled in at run-time)
	DC.W	$0028,$0070,$0040,$0010
( the cancel button stuff)
	DC.W	$0000,$FFFF,$FFFF,$001A,$0025,$0000
	Header CANCptr
	DC.L	0		( this must get filled in at run-time)
	DC.W	$0078,$0070,$0040,$0010	( all these x,y,w,h's were given
					in terms of characters. Were
					converted to pixels before used for
					use with the 8x16 mono font.)


CODE InitDialogTree	( must install the correct pointers)
	LEA	GSTRING,A0
	LEA	GSTRptr,A1
	MOVE.L	A0,(A1)

	LEA	TEDINFO,A0
	LEA	TEDIptr,A1
	MOVE.L	A0,(A1)

	LEA	SAVEstring,A0
	LEA	SAVEptr,A1
	MOVE.L	A0,(A1)

	LEA	CANCELstring,A0
	LEA	CANCptr,A1
	MOVE.L	A0,(A1)

	LEA	TEDINFO,A1
	LEA	pText,A0
	MOVE.L	A0,(A1)
	LEA	pTemplate,A0
	MOVE.L	A0,4(A1)
	LEA	pValid,A0
	MOVE.L	A0,8(A1)
	RTS
END-CODE

CODE UnSelect		( if either of the buttons is selected, it's state
			word becomes 1. If dialog was put up again, that
			button would still be hilited. So, with brute force,
			make sure the buttons aren't selected.)
	LEA	SAVEptr,A0
	CLR.W	-(A0)
	LEA	CANCptr,A0
	CLR.W	-(A0)
	RTS
END-CODE

: doDial { | dirtyX dirtyY dirtyW dirtyH -- return }
	InitDialogTree
	dialogTree call formCenter
	 drop -> dirtyX -> dirtyY -> dirtyW -> dirtyH
	dialogTree 0 1 0 0 600 400 call objcDraw drop
	dialogTree 0 call formDo ( check) ( 'return' 4 if cancel, else 3)
	dialogTree 3 0 0 0 0 dirtyX dirtyY dirtyW dirtyH call formDial drop
	UnSelect	( make sure buttons unselected)
	;

doDial

