GEMVDI.use

Never have to pass the VDIHandle to these functions. It's always w-fetched
from VDIHandle. If you've opened other devices as workstations, such as a 
printer, you'll have to insert (with w!) its VDI handle into MACH2's 
VDIHandle system variable if you want the printer functions to work.

================ Open Workstation =================

1 vOpnwk (WorkIn(11) - WorkOut(45-56), WorkOut(0-44))
	Used to open up a workstation.

=============== Close Workstation =================

2 vClswk ( - )  Closes a workstation using VDIHandle

=============== Clear Workstation =================

3 vClrwk ( - )  Clears the workstation. Erases entire screen.

=============== Update Workstation ================

4 vUpdwk ( - )  Has no effect on the screen.

SCREEN FUNCTIONS FOR ALPHA MODE

============== Get screen dimensions ==============

5-1 vqchCells ( - #cols, #rows)  Returns 80,25 on monochrome.

============== Exit Alpha mode ====================

5-2 vExitCur ( - )  Exit the cursor-addressing mode and resume normal
		graphic operation.

============== Enter Alpha mode ==================

5-3 vEnterCur ( - ) Screen becomes just a character output device. No
		graphics or windows.

============= Cursor up ================

5-4 vCurUp ( - )

============= Cursor down ============

5-5 vCurDown ( - )

============= Cursor Right ===========

5-6 vCurright ( - )

============= Cursor Left ============

5-7 vCurleft ( - )

============= Cursor to Home =========

5-8 vCurhome ( - )

============= Erase to End of Screen ======

5-9 vEeos ( - )

============= Erase to End of Line ========

5-10 vEeol ( - )

============= Direct Cursor Addressing ====

5-11 vsCuraddress ( row,col - )
	Moves cursor to row,col

============= Text String to Screen =======

5-12 vCurText

============= Reverse Video On ============

5-13 vRVOn ( - )

============= Reverse Video Off ===========

5-14 vRVOff ( - )

============= Inquire Cursor Address ======

5-15 vqCuraddress ( -row,col)
	Returns current position of cursor

============ Inquire Tablet status ========

5-16 vqTabStatus ( - status)
	Returns 1 if a joystick, mouse, or graphics tablet is available.
	Always returns 1.

============= Hard Copy of screen to printer =====

5-17 vHardCopy ( - )  Same as Alt-Help?

============= Place the Graphic Cursor ===========

5-18 vdspCur (x,y - ) Places a graphics cursor for the Locator functions

============= Remove Last Cursor =============

5-19 vrmCur ( - )

============= Send a Form Advance =============

5-20 vFormAdv ( - ) For printers. Does nothing with the screen.

============= Output a window ===============

5-21 vOutputWin (xyarray - ) For printers. Would be used to send a rectangle
		(x1,y1),(x2,y2) as a picture to a printer. xyarray is address
		of 8-byte array. xyarray(0) = x1,...,xyarray(3) = y2

============ Clear printer's display list =====

5-22 vClearDispList ( - )  Printers only. Clears it's display list.

=========== Select color palette =============

5-60 vsPalette (colorsel - palettesel) For IBM medium res color screens.
	Don't ask.

=========== Update Metafile Extents =========

5-98 vMetaExtents (minx,miny,maxx,maxy - ) set values of the minimum
	bounding rectangle for metafiles. (?)

========== Draw a polyLine =============

6 vpLine (count,pxyarray - )  A polyLine is a bunch of connected line
		segments. 'count' is the number of POINTS (not lines).
		'pxyarray' is the address of the x,y's. Each number in the
		array should be 16 bits.

========== Draw markers ================

7 vpMarker (count,pxyarray - )  Markers are drawn at each point. 'count'
		and 'pxyarray' mean the same as above. See functions 18-20.

========== Draw a graphics text string ====

8 vgText (x,y,stringlength,string - )
	Draws a string at coordinates x,y. IMPORTANT, 'string' is the address
	of the characters of the string, where each char is in a 16-bit
	word. The high bytes should be zero. String must be null-terminated.
	Printing is MUCH faster if x is on a byte boundary and font is of
	byte-wide letters.

========== Fill Area ===========

9 vFillArea (count,pxyarray - )
	Fills any area using the current fill color, interior style,
	writing mode, and style index. Draws outline too if perimeter
	visibility is set. 'count' is the number of vertices. 'pxyarray'
	holds the x,y pairs of each vertex. Each PAIR takes 4 bytes.

=========== Define a cell array ==========

10 vCellArray -> won't work with CALL. Will be in 'Exceptions.VDI' file.


GENERAL GRAPHICS PRIMITIVES
 These use any of the current line,color,writing,fill,style,interior, etc.
 
 ========= Draw a bar =============
 
 11-1 vBar (pxyarray - )  Draws and fills a bar (x1,y1),(x2,y2). pxyarray
 		holds these four values, 16 bits each.
		pxyarray(0) = x1,...,pxyarray(3) = y2

========= Draw an arc =============

11-2 vArc (x,y,0,0,0,0,radius,0,startAngle,endAngle - )
	Draws an arc centered at x,y with 'radius'. Angles are measured
	in tenths, 0-3600.

========= Draw an pie wedge =============

11-3 vPie (x,y,0,0,0,0,radius,0,startAngle,endAngle - )
	Draws an pie wedge centered at x,y with 'radius'. Angles are
	measured in tenths, 0-3600.

========= Draw a circle =============

11-4 vCircle (x,y,0,0,radius,0 - )  Draws a circle at x,y.

======== Draw an ellipse ============

11-5 vEllipse (x,y,xradius,yradius - ) Draws an ellipse at x,y.

======== Draw an elliptical arc ======

11-6 vEllArc (x,y,xrad,yrad,begAngle,endAngle - )
	Draw an elliptical arc centered at x,y. Angles measured in tenths,
	0-3600.

======== Draw an elliptical pie wedge ======

11-7 vEllPie (x,y,xrad,yrad,begAngle,endAngle - )
	Draw an elliptical pie wedge centered at x,y. Angles measured
	in tenths, 0-3600.

======= Draw a rounded rectangle ===========

11-8 vrBox (xyarray - )  Draws a rounded rectangle (x1,y1),(x2,y2).
	xyarray(0) = x1,...,xyarray(3) = y2. Each entry is 16 bits.

======= Fill a rounded rectangle ===========

11-9 vrfBox (xyarray - )  Fills a rounded rectangle (x1,y1),(x2,y2).
	xyarray(0) = x1,...,xyarray(3) = y2. Each entry is 16 bits.

======= Draw a justified graphics text string ========

11-10 vJustified (x,y,length,0,count,string - )
	Draw string at x,y. 'length' is in pixels. 'count' is number of
	characters in string + 2. 'string' is an integer (16-bit) array.
	string(0) = If non-zero,VDI may modify inter-word spacing.
	string(1) = If non-zero, VDI may modify inter-character spacing.
	string(2),...,string(n) characters in string

======= Set character height =============

12 vstHeight (0,height - cellheight,cellwidth,charwidth,charheight)
	Absolute mode. Returns current info, too.

======= Set baseline rotation for text =====

13 vstRotation (angle - baseline)  Angle is in tenths, 0-3600. Returns
	what the rotation was set to. Try '1800 call vstrotation'.

======= Set color representation ===========

14 vsColor (index,red,green,blue - )  Index is a palette number. red,green,
	and blue are the intensities of those color components in that
	palette slot. Intensities are 0-1000.

======= Set polyline type ==================

15 vslType (style - styleSelected)  Set the type of line to draw.
	style:	1 = solid, 2 = long dash, 3 = dot, 4 = dash,dot, 5 = dash,
		6 = dash,dot,dot, 7 = user-defined (with function 113)
		8..n device-dependent

======= Set polyline width =================

16 vslWidth (width,0 - setWidth,0)  Width is in pixels

======= set polyline color =================

17 vslcolor (colorindex - selectedindex)  Sets palette number 'colorindex'
	as the color to use to draw lines.

======= Set marker type =========

18 vsmType (symbol - selectedMarker)
	symbol:	1 = dot, 2 = plus, 3 = asterisk, 4 = square,
		5 = diagonal cross, 6 = diamond, 7..n device-dependent

======= set marker height =======

19 vsmHeight (0,height - 0,setHeight)

====== set marker color =====

20 vsmColor (colorIndex - IndexSelected)  Sets palette number 'colorindex'
	as the color to use to draw markers.

====== set text face =========

21 vstFont (face - faceSelected)  Only 1 (system font) is supported

====== Set graphic text color index =====

22 vstColor (colorIndex - selectedIndex)  Sets palette number 'colorindex'
	as the color to use to draw text.

======= set FILL's interior style ========

23 vsfInterior (style - selectedStyle)
	style:  0 = hollow, 1 = solid, 2 = pattern (also use function 24)
		3 = hatched (also use function 24), 4 = user-defined (use
		function 112)

======= set fill style index ========

24 vsfStyle (styleIndex - selected)  If fill style is 'pattern' can
	uses patterns 1-24, if fill style is 'hatched' can use 1-12

======= set fill color index ========

25 vsfColor (colorIndex - selectedIndex)  Sets palette number 'colorindex'
	as the color to use to fill with.

======== Inquire color representation ====

26 vqColor (colorIndex, setting - RGB)  Get actual (setting = 1)
	or requested (setting = 0 ) color values for index selected.
	RGB(0) = index, RGB(1) = red intensity (0-1000), RGB(2) = green,
	RGB(3) = blue

======== Inquire cell array =======

27 vqCellArray  -> won't work correctly with CALL.

======= set writing mode ===========

32 vswrMode (mode - setMode)
	mode:	1 = replace, 2 = transparent, 3 = XOR, 4 = reverse trans

======= set Input mode ============

33 vsInMode (device,mode - )
	device:	1 = locator, 2 = valuator, 3 = choice, 4 = string
	mode:	1 = request, 2 = sample

======= Inquire polyLine attributes =====

35 vqlAttributes ( - 0,lineWidth,Attrs)
	Attrs(0) = current polyLine type
	Attrs(1) = color index
	Attrs(2) = writing mode
	Attrs(3) = end style for beginning point of polyLine
	Attrs(4) = end style for ending point of polyLine

======== Inquire marker attributes =======

36 vqmAttributes ( - height,width,Attrs)
	Attrs(0) = current marker type
	Attrs(1) = color index
	Attrs(2) = writing mode

======= Inquire fill attributes ==========

37 vsfAttributes ( - Attrs)
	Attrs(0) = fill interior style
	Attrs(1) = color index
	Attrs(2) = style index
	Attrs(3) = writing mode
	Attrs(4) = perimeter visibilty flag

======= Inquire text graphics attributes ======

38 vqtAttributes ( - attrs(6-9),attrs(0-5))
	Attrs(0) = text face
	Attrs(1) = text color index
	Attrs(2) = baseline rotation angle (0-3600)
	Attrs(3) = horizontal alignment
	Attrs(4) = vertical alignment
	Attrs(5) = writing mode
	Attrs(6) = character width
	Attrs(7) = character height
	Attrs(8) = character cell width
	Attrs(9) = character cell height

======== Set graphic text alignment ===========

39 vstAlignment (hAlign,vAlign - vSelected,hSelected)
	hAlign:	0 = left justified, 1 = center justified , 2 = right just.
	vAlign:	0 = baseline, 1 = half line, 2 = ascent line, 3 = bottom,
		4 = descent, 5 = top

======= Open Virtual Workstation ==========

100 vOpnvwk (WorkIn(11) - WorkOut(45-56),WorkOut(0-44))

======= Close virtual workstation =========

101 vClsvwk ( - )

======= Extended Inquire =========

102 vqExtnd (infoType - WorkOut(45-56),WorkOut(0-44))

======= Contour fill =========

103 vContourFIll (x,y,colorindex - ) fill region to which x,y is interior
	with color

======= Set fill's perimeter visibility =======

104 vsfPerimeter (visFlag - visibility)  Perimeter is invisible during
	area fills if visFlag is zero.

======== Get pixel ========

105 vGetPixel (x,y - pixelValue,colorIndex)
	pixelValue = 0/1:off/on

======== Set text special effects ========

106 vstEffects (effects - selEffects)  Bits 0-5 of 'effects' mean
	thicken, lighten, skew, underline, outline, shadow

======= set character height - points mode ======

107 vstPoint (cellHeight - cellH, cellW, charH, charW, selectedHeight)

======== set polyLine endstyle ===========

108 vslEnds (begStyle,endStyle - )
	0,1,2 = squared, arrowed, rounded

======= Copy raster, opaque ==========

109 vroCpyfm  -> won't work with CALL

======= Transform form ==========

110 vrTrnfm  -> won't work with CALL

======= set Mouse form =========

111 vscForm (cursorForm - )
	Form(0) = x-coord of hot spot
	Form(1) = y-coord of hot spot
	Form(2) = 1
	Form(3) = Mask color index usu. 0
	Form(4) = Data color index usu. 1
	Form(5-20) = 16 words of mask
	Form(21-36) = 16 words of data

========= Set user-defined fill pattern =========

112 vsfUDPat (planes,fillPat - )
	fillPat(0-15) = first plane of fill pattern
	fillPat(16-29) = 2nd plane of fill pattern, etc.

========= Set user-defined line style ===========

113 vslUDStyle (pattern - ) pattern is a 16-bit pattern (integer not pointer)

======== fill rectangle ===========

114 vrRecfl (rect - )
	rect(0) = x1,...,rect(3) = y2

========= inquire input mode =======

115 vqinMode (device - mode)
	device:	1 = locator, 2 = valuator, 3 = choice, 4 = string
	mode:	1 = request, 2 = sample

========== Inquire text extent ==========

116 vqtExtent (count,string - extentArray)
	ext(0-8) contains the delta-x,delta-y pairs for the four
	corners of the string

======== Inquire char cell width =========

117 vqtWidth (character - 0,rightDel,0,leftDel,0,width,ADEvalue)

======= Exchange Timer vector ===========

118 vexTimv  -> won't work with CALL

======= Load fonts ===============

119 vstLoadFonts (0 - number of fonts)

======= Unload fonts =============

120 vstUnloadFonts ( 0 - )

======== Copy raster, transparent ======

121 vstCpyfm -> won't work with CALL

========= show cursor ============

122 vShowC (flag - ) if 0 then show cursor regardless of number of Hide
	calls. Else cancel out one Hide call

======== hide mouse cursor ========

123 vHideC ( - )

========= sample mouse button ======

124 vqMouse ( - y,x,buttonState)
	State: bit 0 set if left button down, bit 1 set if right button dn

========== exchange button vector ======

125 vexButv -> won't work with CALL

========= exchange mouse vector ========

126 vexMotv -> won't work with CALL

========= exchange cursor vector ========

127 vexCurv -> won't work with CALL

======== sample keyboard state ==========

128 vqKeys ( - kbdState)
	State: bits 0-3 set if Right Shift, Left Shift, Control, Alt key down

========= set clipping rectangle ========

129 vsClip (pxyarray,clipFlag - )  Flag = 0/1:clipOff/clipOff
	pxyarray(0) = x1,..,pxyarray(3) = y2

========= inquire face name and index =====

130 vqtName (elemNumber - string)
	elemNumber = 1 for system font
	string = 32 characters (64 bytes) of info about the font. The
	  first 16 are the name, the next 16 describe the style and weight.

======== Inquire current face =========

131 vqtFontInfo ( - addr, maxADE, minADE)
	addr(0) = max cellW not counting any effects
	addr(1) = bottom line distance from baseline
	addr(2) = delta x in character width caused by special effects
	addr(3) = descent line distance from baseline
	maxADE = number of the last character in this font
	minADE = number of the first character in this font
