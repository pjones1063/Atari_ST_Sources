GEMDOS.use

These are NOT Forth words, these are GEMDOS functions and can only be used
with CALL.
List of GEMDOS errors at bottom of file

format:
function#, correct spelling for use with CALL, stack notation, description

============== Terminate process ===============

0 PTerm0 ( - ) terminate the current process with a result of 0

============= Wait for a character =============

1 cConin ( - return) returns the next available character from the keyboard
		and returns the character in the low word of 'return'.
		Waits until a key is pressed. The scan code is returned
		in the high word of 'return'. Echoes to screen.

============ Send a character to the console (device #2) =====

2 cConout (char - ) send a character to the screen (as a CRT). Control
		characters and escape sequences are interpreted normally.

============ Wait for a character from the serial port ========

3 cAuxin ( - char) waits until a character is ready at the serial port
		and then returns with it.

============ Send a character to the serial port ==========

4 cAuxout (char - ) sends a character out the serial port

============ Send a character to the printer ==============

5 cPrnout (char - ) sends a character out the Centronics port

============ character i/o to/from console ================

6 cRawio (char - return) if 'char' is $FF return the character waiting
		at the keyboard or 0 if none present. If 'char' is not
		$FF it's interpreted as a character to be sent to the
		screen console at the current cursor position.

============ Wait for a key without echoing ===============

7 cRawcin ( - return) same as cConin except no echo to screen

============ Wait for a key without echoning ==============

8 cNecin ( - return) same as cRawcin

============ Print a line to the screen ===================

9 cConws (string - ) given the address of a null-terminated string, writes
		it out to the screen (not the window). A null-terminated
		string is not the same as a Forth string. Forth strings
		are indeed null-terminated if made with " or .", but the
		address is of the length of the string. Ex:
		" A string" 1+    ( skip past length byte)
		call cConws	  ( write the string out)

============ Read a line from the keyboard ================

10 cConrs (Buffer - ) reads an entire line from the keyboard into a buffer
		whose address is passed to it. The first byte of the
		buffer contains the maximum number of keys to wait for.
		'Buffer' will be returned with the number read in the
		second byte. The string starts at the third byte. THIS IS
		DANGEROUS because a ^C will cause an exit to the desktop.

=========== Keyboard input status ==================

11 cConis ( -status) -1 if a character available at keyboard. Else 0

=========== Set the current disk drive =============

15 dSetdrv (drv-map) Sets the current disk drive. 0=A, 1=B, etc. Returns
		the drive map. Bit 0=A, bit 1=B, etc.

=========== Console output status ==================

16 cConos ( - status) Returns a -1 if screen is ready to accept a character.
		Else returns a zero if no output possible.

=========== Printer output status ==================

17 cPrnos ( - status) Returns a zero if the printer is off-line or can't
		receive a character. Returns -1 if ready to receive.

=========== Serial port input status ===============

18 cAuxis ( - status) Returns -1 if a character ready from the receiver
		of the serial port. Returns 0 if no character ready.

=========== Serial port output status ===============

19 cAuxos ( - status) Returns -1 if a character may be sent out the serial
		port. Returns 0 if no character may be sent.

=========== Get the current disk drive ==============

25 dGetdrv ( - drv) Returns the current disk drive. 0=A, 1=B, etc.

=========== Set disk transfer address ================

26 fSetDTA (DTA - ) Set the address of the 44-byte disk transfer buffer.
		A DTA's structure when filled:
		+0 thru +20  reserved for GEMDOS
		+21 file attribute
		+22 file creation time
		+24 file creation date
		+26 file size in bytes
		+30 thru +43 file name including extension

=========== Switch to supervisor mode ================

32 Super (stack - ) For switching into supervisor mode. If 'stack' is 0,
		use the USP as the SSP. Else use 'stack' as the address
		of the supervisor stack pointer. Mach2 runs in supervisor
		mode.

=========== Get the date =============

42 tGetdate ( - date) Returns the ST's idea of the current date. Bits 0-4
		of 'date' are the day, bits 5-8 are the month, and bits
		9-15 are the years passed since 1980.

=========== Set the date =============

43 tSetdate (date-result ) Sets the date using same format as tGetdate.
		Returns 0 if done successfully.

=========== Get the time =============

44 tGettime ( - time) Returns the ST's idea of the current time. Bits 0-4
		are the seconds/2. Bits 5-10 are the minutes. bits 11-15
		are the hours.

========== Set the time ==============

45 tSettime (time - result) Sets the time using the format in tGettime.
		Returns 0 if ok.

========= Get the Disk Transfer Buffer Address =========

47 fGetDTA ( - DTA) Returns the address of the disk transfer buffer.

======== Get current GEMDOS version number =============

48 sVersion ( - number) Returns a 16-bit number which represents in some
		way the current version of GEMDOS.

======== Terminate and stay resident ===================

49 pTermres (nBytes,result - ) Terminate current process but protect 'nBytes'
			of the current program. Return a result code, too.
			This is used in the RamDisk demo.

======== Get amount of free disk space ==================

54 dFree (returnBuffer, drive - ) Returns the free space on 'drive' into
			the address passed as the 16-byte return buffer.
			'drive' is 0=current, 1=A, 2=B, etc. Info is returned
			in the following format:
			4 Bytes: The number of free allocation units
			4 Bytes: How allocation units on the disk
			4 Bytes: Size of a disk sector in bytes
			4 Bytes: Number of sectors/allocation unit

=========== Create a new directory (folder) ============

57 dCreate (pathname - result) Creates a new sub-directory with the name
		passed. 'Pathname' is the address of a null-terminated
		string. 'result' is 0 if successful. Errors are neg numbers.
		Like files, directories can only be named xxxxxxxx.xxx

================ Delete a directory (folder) ==========

58 dDelete (pathname - result) Delete the EMPTY directory whose name is
		at the address 'Pathname'. Result is -36 if the directory
		contains files. Only empty folders can be thrown away.

============== Set the current directory or path ======

59 dSetpath (pathname - result) Sets the current directory using the
		null-terminated string. Result is 0 if okay. Example:
	If you have a folder named 'Junk.dat' to make the current dir, just
	" \Junk.dat" 1+ call dSetpath	( 1+ to skip the count laid in) or
	" \Junk.dat\" 1+ call dSetpath

============== Create and open a new file ==============

60 fCreate (name, attrs - result) Create and open a file named 'name'.
	'Attrs':  0 = read/write
		  1 = read-only after it's closed and then re-opened
		  2 = hidden
		  4 = hidden system file
		  8 = makes a file with a volume label
	'Result', if >0, is the file handle. 40 files may be open at once.

============= Open an existing file ===================

61 fOpen (name, mode - result) Open an existing file.
	'mode':	0 = read-only
		1 = write-only
		2 = read-write
	'result' is file handle or negative error

============= Close a file ==============

62 fClose (handle - result) Close an open file given it's file handle.
		'result' is 0 if all okay.

============ Read from a file ===========

63 fRead (handle, count, readBuffer - result) Read 'count' bytes from the
		current mark into 'readBuffer'. Result is number read or
		negative error.

============ Write to a file ===========

64 fWrite (handle, count, writeBuffer - result) Write 'count' bytes to the
		current mark from 'writeBuffer'. Result is number written or
		negative error.

============ Delete a file ==============

65 fDelete (name - result)  Delete the file 'name'. Result is 0 if okay.

=========== Set the file's mark =========

66 fSeek (offset, handle, mode - result) Sets the mark in a file for
		subsequent read/write operations.
		'mode'	0: moves mark to 'offset' from beginning of file
			1: moves mark to 'offset' from current mark
			2: moves mark to 'offset' from end of file
		'result' is returned as the absolute position of the mark

========== Set or change a file's attribute ===========

67 fAttrib (name, attr, mode - return) 'name' is the name of the file.
		'mode'	0: set file attribute to 'attr'. 'return' is result
			1: return file attribute in 'return'. 'attr' is a dummy

=========== Duplicate file handle for redirecting I/O ====

69 fDup (handle - newhandle) Can be used to assign a file handle to a device
		(which have handles 0-5) for re-directing I/O. Given a handle,
		returns another number to use as a handle.

=========== Force a handle to refer to another ============

70 fForce (stdhandle, nonstdhandle - result) Again, this could be used for
		redirecting I/O by forcing 'stdhandle' to point to the
		same file or device as 'nonstdhandle'. This is not how
		MACH 2 handles I/O redirection.

=========== Get the current directory ============

71 dGetPath (pathBuffer, drive - result) Returns the current directory for
		'drive' in 'pathBuffer'. 'drive' is 0=current, 1=A, 2=B, etc.
		'pathBuffer' must to an area at least 64 bytes in length.

=========== Allocate a block of memory ===========

72 mAlloc (nBytes - result)  Allocate a block of memory which is 'nBytes'
		long and return the address of that block. If 'nBytes' was
		-1 then return the number of bytes available in memory.

=========== Free a block of allocated memory ======

73 mFree (address - result) Free up the block of reserved memory pointed to
		by 'address'. 'result' is 0 if ok.

========== Shrink an allocated block of memory ====

74 mShrink (0, address, newSize - result) Given an 'address' within a block
		of allocated memory, reserve 'newSize' bytes of it and
		release the rest. 'result' is 0 if okay.

========== Launch another program =================

75 pExec (load,filename,cmdline,envrmntStr - result) Used to chain another
		program given its filename. 'cmdline' will be passed to it
		(for 'TOS- takes parameters' programs). The environment, if
		set, is passed in the environment string. If 'load' is 0,
		then the new program is loaded and launched. If 'load' is 3,
		then it is loaded but not launched. In this case 'return'
		will hold its base page address or a negative error.

========== Terminate process and return a result code ====

76 pTerm (resultCode - ) Terminate the current process and return to the
		parent process with a result code.

========= Search for the first matching file ==============

78 fSFirst (fileSpec, attr - result) Returns info about the first file
		found whose name and attribute match 'fileSpec' and 'attr'.
		Info returned into the current DTA. For 'filespec', a '?'
		is a wild-card letter, and '*' is a whole wild card. The
		Forth word 'DIR' uses fSFirst with a fileSpec of '*.*'.
		'attr' is described above in 'fAttrib'. Result is 0 if okay.

============ Search for next occurence. ===========

79 fSNext ( - result) Continues with search started by fSFirst. Result is
		non-zero when no more matching files may be found. 'DIR'
		uses fSNext in a loop, printing out info about each file
		using the DTA, and stopping when the result is not zero.

============ Rename a file =======================

86 fRename (0, oldname, newname - result) Renames a file using the
		two null-terminated strings. Result is 0 if okay. '0' is
		a dummy. Example:
		0 " myFile.fth" 1+ "newFile.new" 1+ call fRename

============ Set/Get file's creation date and time =========

87 fDatime (buffer, handle, set/get - ) Only used on open files. If set/get
		is 0, set file's time info using 4-byte buffer which
		holds the desired time in the first two bytes and the date
		in the second two bytes. If set/get is 1 then return the
		date/time into the buffer.


GEMDOS ERROR CODES

-32	Invalid function number
-33	File not found
-34	Pathname not found
-35	Too many files open
-36	Can't access
-37	Invalid file handle
-39	Not enough memory
-40	Invalid memory block address
-46	Invalid drive number
-49	No more files