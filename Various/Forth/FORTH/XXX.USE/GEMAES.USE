AES.use

************* Application Library Routines ******************
======== Initialize an AES application ==============

10 ApplInit ( --apID) initializes a number of internal arrays and
returns the ID number (or -1 if error) of the new application. Ex:

'call ApplInit' would leave a 2 on the stack

========== Read a number of bytes from a message pipe ===============

11 ApplRead (buffer,ID,length--return)  reads 'length' number of
bytes into 'buffer' from the message pipe belonging to 'ID'. Return is
0 if everything ok.

========== Write a number of bytes from a message pipe ===============

12 ApplWrite (buffer,ID,length--return)  writes 'length' number of
bytes from 'buffer' to the message pipe belonging to 'ID'. Return is
0 if everything ok.

=============== Find the application ID of another application ========

13 ApplFind  (applName--ID)  Given the address of a null-terminated string
(which must be eight chars long!) AES will attempt to return the application
ID of it. -1 if not found. Ex:

create MachString
	dc.b	'Mach1   '     ( note the three filling spaces)
	dc.b	0		( must be null-terminated)

MachString call ApplFind        ( should leave a 1 on the stack)

========= Play a recording of user's actions ===============

14 ApplTPlay ( Mem,Number,SpeedScale--1) Plays back a record of the user's
actions from the recording at 'Mem'. Plays back 'Number' of these actions
at 'SpeedScale' speed, which can be 1-10000 where 100 is full-speed and
200 is twice-speed. Aloways returns a 1.

========== Record a set of user actions ==================

15 ApplTRecord (Mem,Count--numberDone) Record 'Count' number of user
actions into an area starting at 'Mem'. Returns the number of events
recorded. Each event is stored as six bytes:

Event: (2 bytes)	0 = timer event
			1 = button event
			2 = mouse event
			3 = keyboard event

Data: (4 bytes)		Milliseconds elapsed (if timer event)

			Lo is button state (0 = up, 1= pressed)
			Hi is number of clicks. (if button event)
			
			Lo, Hi words are the x,y coordinates (if mouse)
			
			Lo is the character, Hi is the keyboard state (if key)

======== Exit the AES application ======================

19 ApplExit (  --return) returns 0 if an error. Else cleans up.


************* Event Library **********************************

======  Wait for a keyboard event ====================

20 EvntKeybd ( --kReturn) waits for and returns the key pressed. Kind of
like the Forth word 'Key'.

======= Wait for button state to occur =======================

21 EvntButton (clicks,mask,state--kstate,button,my,mx,return)

clicks-- the number of times you're waiting for a particular mouse state
	to occur
mask-- (bit0 is the left button, bit1 is 2nd form left,etc.) which buttons
	you'er waiting for
state-- 0 = up, and 1 = down for each of the buttons

return-- the number of times the button entered th e state. 0<return<=clicks
mx--	the x-coordinate where it occurred
my--	the y-ccordinate where it occurred
button--the button state when the event occurred
kstate--the state of the keyboard in bit form:
	0000 Alt,Ctrl,left-shift,right-shift. A 1 in the bit means 'down'

====== Wait for mouse to enter or leave a certain rectangle =====

22 EvntMouse (flags,x,y,width,height--kstate,button,my,mx,resvd)

flags-- 0 means return on entry, 1 means return on exit
x,y,width,height-- the coords of the rectangle

resvd is always a 1
the other parameters are the same as in EvntButton

======= Wait for a standard 16-byte message ============

23 EvntMesag (Buffer--return) Wait for a message which will be placed
in 'Buffer'. Return is always zero. It's not necessary to 'read' a standard
message.

=========== Wait for some time to pass ===================

24 EvntTimer (locount,hicount--resvd) Wait for some milliseconds to
pass. locount is low word of the 32-bit wait value and hicount is the high
word. A count of 0 will cause return after AES has tended to the others
who have calls waiting (just like 'PAUSE')

=========== Wait for one of many events to occur ==========

25 EvntMulti (Buffer,flags,clicks,mask,m1flags,m1x,m1y,m1width,m1height,
	m2flags,m2x,m2y,m2width,m2height,locount,hicount--breturn,kreturn,
	kstate,button,y,x,which)

most of the parameters are described above.

flags uses bit settings to tell AES which events are being waited for:
bit 0 -- keyboard
bit 1 -- button
bit 2 -- m1	( you may ask it to keep track of two rectangles)
bit 3 -- m2
bit 4 -- message
bit 5 -- timer

which uses the same pattern to say which ONE event occurred.

======= Get or set the double-click speed =====================

26 EvntDClick (new,get/set--speed)

new-- 0 to 4 equals slow to fast
get/set = 1 if set, 0 if get

speed - returns either the current or the just-set speed (0 to 4)

Ex: To set the double-click speed to be fairly fast-

'3 1 call EvntDClick drop' will do it

************ Menu Library **********************

======= Erase or show a menu bar ============

30 MenuBar (tree,show--return)

tree-- address of the menu's object tree (from RsrcGAddr)
show-- 0 for erase, 1 for show

return-- 0 if an error, else positive

======= Display or erase a check mark nest to an item ===========

31 MenuICheck (tree,item,check--return)

item-- a unique number for that item (? Thanks, guys)
check--0 means erase, 1 means display

return-- 0 if an error

======= Enable or disable a menu item ==============

32 MenuIEnable (tree,item,enable--return)

enable-- 0 means disable (grayed chars), 1 means enable

return-- 0 if an error

======= Control the display of a menu title ===========

33 MenuTNormal (tree,title,normal--return)

title-- a number that identifies this title (I'm just not sure how to
	be sure of these numbers)
normal-- 0 means display in reverse video, 1 means normal video

return-- o if an error

======== Change the text of a menu item ==============

34 MenuText (tree,text,item--return)

text-- addr of the new text string. Can't be longer than one it replaces
item-- the unique number of the menu item

return-- 0 if an error, else positive

============ Deal with desk accessory menues ===========

35 MenuRegister (string,apID--menuID) puts a desk acc's menu item string
on the Desk menu and returns the menu ID for the desk accessory.

string-- address of the text string
apID-- the appl ID as returned by the DA's ApplInit call.

menuID-- a number from 0-5 (-1 if no more room). 

This obviously is only used when installing a DA. Most humans won't use
this call.

**************** Object Library *************************

========= Add an object to an obkect tree ==============

40 ObjcAdd (tree,parent,child-- return)

tree-- address of the object tree
parent-- object which will get a new child
child-- object to add

return-- 0 if an error, else positive

=========== Delete an object from an object tree ========

41 ObjcDelete (tree,object--return)

object-- object to be unlinked from the tree

return-- 0 if an error

============== Draw an object(s) within a clipping rectangle ========

42 ObjcDraw (tree,startob,depth,xclip,yclip,wclip,hclip--return)

tree--	address of tree containing object(s) to be drawn
startob-- first object to be drawn
depth--	how far down in the tree from the starting object to draw
..clip-- the clipping rectangle for the drawing (x,y,width,height)
return-- 0 if an error

=========== Find the object under the mouse ======================

43 ObjcFind (tree,startob,depth,mx,my--obnum) Return the number of the
object (or -1 if none) under the supplied coordinates. Specify where
in tree to search from and how far down tree to search.

======= Compute an object's coordinates (relative to the screen) =========

44 ObjcOffset (tree,object--yoff,xoff,return)

object-- object whose coords you want

yoff,xoff-- coordinates relative to the screen
return-- 0 if an error

======== Put object in new position on same level (parent stays the same) ==

45 ObjcOrder (tree,object,newpos--return)

newpos-- -1 if top, 0 if bottom, 1 if one from bottom, etc.

return-- 0 if an error

====== Edit text in an object ====================

46 ObjcEdit (tree,object,char,index,kind--newindex,return)

object-- object containing the text to be edited
char-- the character to be inserted
index-- the index of the next character in the raw text string
kind--	the edit operation to perform:
	0 Start (reserved)
	1 Init- combine values in text and template to a formatted string.
		Turn the text cursor on
	2 Char- validate chars against tePValid,update,text,display string
	3 End- turn off text cursor

newindex-- index of next char position after editing is done
return-- 0 if an error

======= Change an object's state value ===============

47 ObjcChange (tree,object,resvd,xclip,yclip,wclip,hclip,newstate,redraw--ret)

object-- obj to be changed
resvd--	must be 0
..clip-- the x,y,width, and height of the clipping rectangle
newstate-- the new state of the object
redraw-- 0 means don't redraw, 1 means redraw the object

return-- 0 if an error, else positive

************* Form Library *************************

========== Monitor user's interactions with a form ============

50 FormDo (tree,startob--return)

startob-- number of an object (must be editable text field) which should
	be active. -1 if no editable text fields

return-- the number fo the object that caused the exit from the form

======= Prepare for dialog boxes ==================

51 FormDial (flag,litx,lity,litw,lith,bigx,bigy,bigw,bigh--return)

flag:	0- reserve screen space for a dialog box
	1- draw an expanding box from little to big x,y,width,height
	2- draw a shrinking box from big to little x,y,width,height
	3- free screen space reserved for dialog box

return-- 0 if an error

======= Display an alert box ========== see 'Alarm.demo' example

52 FormAlert (string,defbutton--exitbutton)

string-- address of the string which 'is' the alert box
defButton-- for the default button
	0 no default exit button
	1 first exit button is default
	2 2nd is default exit
	3 3rd is the default exit button

exbutton-- identifies which button in the string was selected (1,2,or 3)

How to invoke:

create AlarmBox
	dc.b	'[1][This|is|a warning'	( <40 chars/line, 5 or less lines)
	dc.b	'...............]'
	dc.b	'[Key 1|text for key 2|Key #3]' ( total key text <20 chars)
	dc.b	0,0

AlarmBox 0 call FormAlert .		( try it at home)

======== Display an error box ========== see 'Alarm.demo'

53 FormError (errornum--exitbutton)

errornum-- a DOS error code

exitbutton-- which button (1,2, or 3) was selected to exit

GEM supplies the info to display these boxes, instead of the application
as in FormAlert. Ex:

'10 call FormError' will display the 'not enough memory' message

============ Calculate to center a dialog on the screen =============

54 FormCenter (tree--h,w,y,x,resvd)

tree--	address of the dialog box's object tree

x,y,w,h-- the x,y,width, and height for a centered box
resvd--	always 1

********* Graphics Library **********************

====== Follow the mouse with a pinned rubber box ==========

70 GrafRubberBox (x,y,minwidth,minheight--lastheight,lastwidth,return)

x,y--	upper left coordinates of the rubber box.
minw,minh-- smallest alowable width and heigth for the runnber box

lasth,lastw-- the height and width of the box when the button was released
return-- 0 if an error, else positive

======== Drag a box within bounds ==================

71 GrafDragBox (width,height,startx,starty,boundx,boundy,boundw,boundh--
		finishy,finishx,return)

width,height-- the constant width and height of the drag box
startx,y-- the starting coordinates of the drag box
bound..-- the x,y,width, and height of the boundary rectangle for dragging

finishx,y-- box's coords when the mouse button was released
return-- 0 if an error, else positive

========== Draw a moving box ==================

72 GrafMoveBox (width,heigth,sourcex,sourcey,destx,desty--return)
draw a box of width and height moving from sourcex,y to destinationx,y.
return a 0 if an error

============ Draw the outline of a growing box ================

73 GrafGrowBox (stx,sty,stw,sth,finx,finy,finw,finh--return)

st..-- the initial x,y,width, and height of the box
fin..-- the final x,y,width, and height of the box

return-- 0 if an error, else positive

========== Draw the outline of a shrinking box ==============

74 GrafShrinkBox (finx,finy,finw,finy,stx,sty,stw,sth-- return)

fin.. -- the final x,y,width, and height of the shrinking box
st.. -- the inital x,y,width, and height of the shrinking box

return-- 0 if an error

========= Change the state of a box according to mouse movement in and out==

75 GrafWatchBox (tree,0,object,state,instate,outstate--return)

Only called when the button is down. Returns when button is released

tree-- address of the object tree for this object
object-- the index of the object in the tree
instate-- a bit pattern: 0,shadwd,outlnd,disbld,chckd,crossed,selctd,norml
	for the box's state when the mouse is being held is inside it
outstate-- the same bit pattern for the state for the box when the mouse
	outside the box with the button down

return-- 0:outside,1:inside when the button was released

===== Track a sliding box inside of a parent box ==============

76 GrafSlideBox (tree,parent,object,vh--return)

Only called when the button is down. Returns when button is released

tree-- address of the object tree for the objects
parent-- index for the parent of the slider box
object-- the index of the sliding box object in the tree
vh--	0 then return will be 0-1000 meaning left-right
	1 then return will be 0-1000 meaning top-bottom

====== Get the VDI handle for the open workstation ======

77 GrafHandle ( -- hbox,wbox,hchar,wchar,handle)

hbox-- pixel height of a system font character
wbox-- pixel width of a system font character
hchar-- pixel height of a char cell in system font in menus and dialogs
wchar-- pixel width of a char cell in system font in menus and dialogs
handle-- the VDI handle. Should match contents of VDIHandle variable

===== Change the mouse form =================

78 GrafMouse (formaddr,number--return)

formaddr-- addr of 35-word mouse form block (put something on even if
	you're not rolling your own mouse)
number-- for selecting pre-defined mice forms
	0 arrow
	1 text cursor
	2 hourglass
	3 pointing hand
	4 flat hand
	5 thin cross hair
	6 thick cross hair
	7 outline cross hair
	255 mouse form will be given in formaddr
	256 hide mouse form
	257 show mouse form

return-- 0 if an error

==== Return the current mouse, button, and keyboard states ========

79 GrafMKState ( --kstate,mstate,my,mx,1)



kstate--the state of the keyboard in bit form:
	0000 Alt,Ctrl,left-shift,right-shift. A 1 in the bit means 'down'
mstate-- (bit0 is the left button, bit1 is 2nd form left,etc.) which buttons
	are down
my-- y-coordinate of mouse
mx-- x-coordinate of mouse

********* Scrap Library *****************

Scrap is stored on disk as the file 'Scrap' with the identifier corresponding
to the type of scrap. .TXT for ascii, .DIF for spreadsheets, .GEM for
metafile images, and .IMG for bit-images. These calls are used to implement
clipboard manipulation

======= Read in from the clipboard =======

80 ScrpRead (scrapaddr-- return)

addr-- where scrap whould be copied to
return-- 0 if an error, else positive (length probably)

========= Write scrap to the clipboard =============

81 ScrpWrite (scrpaddr--return)

addr-- where the scrap is located to be written to the clipboard
return-- 0 if an error

******** File Selector Library *****************

See the View.fth or OpenFile.fth demos to see how to use this one

======= Let the user select a file ==============

90 FSelInput (Path,Select--exbutton,return)

Path-- addr of the initial pathname (e.g. 'A:\*.*'). Contains the
	pathname on exit too.
Select-- addr of the initial selection (e.g. 'X.X'). Holds the final
	selection on exit.

exbutton-- 0 if Cancel was pressed, else 1
return-- 0 if an error

******** Window Library **********************

Note that if you use the Open and Create calls in Mach1, it won't know
about the windows so you'll have to do everything else yourself

====== Create a window. Establish maximum allowed size. =========

100 WindCreate (kind,x,y,w,h--return)

kind-- the following bits when set, will allow the following items:
bit 0 - title bar with name
bit 1 - close box
bit 2 - full or zoom box
bit 3 - move box
bit 4 - information line
bit 5 - size box
bit 6 - up-arrow
bit 7 - down-arrow
bit 8 - vertical slider
bit 9 - left-arrow
bit 10- right-arrow
bit 11- horizontal slider

x,y,w,h-- the x,y,width, and height of the full-sized window

return-- the window handle or negative if no more windows can be allocated

======== Open a window in its initial size and location =============

101 WindOpen (handle,x,y,w,h--return)

handle-- the window handle from WindCreate
x,y,w,h-- the initial display x,y,width, and height for the new window

return-- 0 if an error

======== Close a window. May be reOPENed. =======================

102 WindClose (handle--return)

======== Delete a window for good ==================

103 WindDelete (handle--return)

======== Get info about a window ===================

104 WindGet (handle,field--w4,w3,w2,w1,return)

always returns four pieces of data and return. Meaning depends on 'field'

if 'field' is x then w1 etc. is x etc.

4 Return the coords of the window's working area
 w1- x coord
 w2- y coord
 w3- width
 w4- height

5 Return the coords of the ENTIRE window
 w1- x coord
 w2- y coord
 w3- width
 w4- height

6 Return the coords of ENTIRE previous window
 w1- x coord
 w2- y coord
 w3- width
 w4- height

7 Return the coords of the ENTIRE at its fullest possible size
 w1- x coord
 w2- y coord
 w3- width
 w4- height

8 Fetch the position of the horizontal slider (1-1000 is left-right)
 w1- 1-1000
 w2- junk
 w3- junk
 w4- junk

9 Fetch the position of the vertical slider (1-1000 is top-bottom)
 w1- 1-1000
 w2- junk
 w3- junk
 w4- junk

10 Return the handle of the window that is currently on top
 w1- window handle
 w2- junk
 w3- junk
 w4- junk

11 Return the coords of the first rectangle in the window's rectangle list
 w1- x coord
 w2- y coord
 w3- width
 w4- height

12 Return the coords of the next rectangle in the window's rectangle list
 w1- x coord
 w2- y coord
 w3- width
 w4- height

13 RESERVED (Ooh!)

15 Return the size of the Hslider box compared to the size of the slide
-1 is the default minimum square box,1-1000 is relative to horiz scroll bar.
 w1- -1 or 1-1000
 w2- junk
 w3- junk
 w4- junk

16 Return the size of the Vslider box compared to the size of the slide
-1 is the default minimum square box,1-1000 is relative to vert scroll bar.
 w1- -1 or 1-1000
 w2- junk
 w3- junk
 w4- junk

========= Set Attributes of a window ==========================
Mach1 will not be aware of any of these changes

105 WindSet (handle,field,w1,w2,w3,w4--return)

w1-w4 are the same for the fields described above, but there's more
meanings for field

1 Change the components of the window (as in WindCreate)
 w1- as used in WindCreate to set the attributes
 w2- junk
 w3- junk
 w4- junk ( use zeroes if you want for junk)

2 Set the title of the window
 w1- high word of the address of the string
 w2- low word of the address of the string
 w3- junk
 w4- junk

3 Set the info line of the window
 w1- high word of the address of the string
 w2- low word of the address of the string
 w3- junk
 w4- junk

5 Set the current x,y,w,h as described in WindGet
8 Set the Hslider position as described in WindGet
9 Set the VSlider position as described in WindGet
10 Set the current window-on-top as described in WindGet

14 Set a new default GEM desktop for GEM to draw
 w1- low word of object tree address
 w2- high word of object tree address
 w3- index of starting object to draw
 w4- junk

15 Set the size of the HSlider box as described in WindGet
16 Set the size of the VSlider box as described in WindGet

return-- 0 if an error

======= Find which window is under the mouse =========

106 WindFind (x,y--handle)

Ex: '100 60 call WindFind' will return a window handle if there was a window
at 100 60.

====== Notify GEM of updating ==================

107 WindUpdate (begend--return)

begend	0 tell GEM you're finished updating a window
	1 you're updating. GEM won't allow any changes in that window
	2 GEM has control of the mouse again
	3 tell GEM you're taking control of the mouse. Menus and control
	  points won't be active

return-- 0 if an error, else positive

===== Do window calculations ========

Given the work area or total area and items in a window, return the total
area or work area.

108 WindCalc (type,kind,inx,iny,inw,inh--outh,outw,outy,outx,return)

type	0 means given work area return border (total) dimensions
	1 means given total dimensions return work area dimensions

kind-- the following bits when set, mean the following items are present:
bit 0 - title bar with name
bit 1 - close box
bit 2 - full or zoom box
bit 3 - move box
bit 4 - information line
bit 5 - size box
bit 6 - up-arrow
bit 7 - down-arrow
bit 8 - vertical slider
bit 9 - left-arrow
bit 10- right-arrow
bit 11- horizontal slider

in..	the input x,y,width, and height of a window
out..	the output x,y,width, and height of a window
return	0 if an error

*************** Resource Library *********************

======= Load a resource into memory ==================

110 RsrcLoad (rsrcname--return)

rsrcname  ascii pathname of the resource file
return 0 if an error, else positive

ex: Mach1 loads in it's menu bar resource with

" Mach1.Rsc" 1+ call RsrcLoad

======= Free memory allocated in a RsrcLoad ============

111 RsrcFree ( --return)

0 if an error

======== Return the address of a resource in memory ========

112 RrscGAddr ( type,index--addr,return)

type	the type of data structure to get
0	tree
1	object
2	TEDInfo
3	IconBlock
4	BitBlk
5	string
6	imagedata
7	obspec
8	teText
9	teTemplate
10	teValid
11	iMask
12	iData
13	iText
14	bData
15	address of a pointer to a free string
16	address of a pointer to a free image

index	the index of the data structure

addr	the addr of the data structure
return	0 if an error

======== Set the address of a data structure in memory =========

113 RscrSAddr (addr,type,index--return)

addr	address of the data structure to be stored
type	as described above, the type of data structure
index	the location in the data structure where addr will be stored

return	0 if an error

===== Converts an object's coords from character to pixel coordinates ====

114 RsrcObFix (tree,object--1)

tree	address of the object's tree
object	index of the object

************* Shell Library *******************************

Used for running another application. The GEM desktop uses this to run
other applications.

===== Identify the command which invoked current application ========

120 ShelRead (command,tail--return)

command: buffer address where command string will be stored
tail:	will hold the command tail invoked with the command

return:	0 if an error, else positive

===== Tell GEM to run another application =========================

121 ShelWrite (cmd,tail,doex,isgr,iscr--return)

cmd:	addr of new command file to execute
tail:	addr of command tail for next program
doex	0- exit AES and return to OS prompt, 1- run another application
isgr:	0- next is not a graphic application, 1- is a graphic application
iscr:	0- next is not an AES application, 1- next appl is an AES application

return:	0 if an error

===== return full DOS specs on a file ===============

124 ShelFind (buffer--return)

buffer:	on input holds the filename for which application is searching
	on output holds the full ODS file spec of the filenames's location
	in search path. Buffer must at least 80 characters long to hold
	this.

return:	0 if an error

========== Search for an occurrence of a DOS environment parameter ======

125 ShelEnvrn (pvalue,parm--1)

pvalue:	addr of a variable which will hold the address of the byte immediately
	following the parameter

parm:	the parameter string for which you're searching. Includes '=' sign.