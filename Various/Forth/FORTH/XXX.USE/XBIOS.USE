XBIOS.use

A repeat of what other books offer on the extended BIOS

====== Change the interrupt handler for the mouse =========

0 InitMous (type,param,vector-- ) for initializing the mouse interrupt handler
	type:
	0 disable mouse
	1 enable mouse, relative mode
	2 enable mouse, absolute mode
	3 unused
	4 enable mouse, keyboard mode

Param points to a parameter block of 4 bytes (plus 4 words if type=2):
	topmode: 0 for using page coordinates, 1 for Cartesian
	buttons: used for 'set mouse buttons' command to keyboard processor
	xparam: scaling factor for mouse movement
	yparam: scaling factor for mouse movement
	(if type was 2, the parameter block also contains the following 4 words:)
	xmax: maximum x-position
	ymax: max y-position
	xstart: starting position
	ystart: starting position
	
vector is the address of a mouse interrupt routine. Example:

create Param
	dc.b	0,0,1,1
	dc.w	640,200,0,0

code vector
	...

2 param ' vector call initmous

======== Get the current physical screen base address =============

2 physBase ( --baseaddr) returns the physical address used by the video
			shifter to display the screen
			
	'call physBase'   will return 78000 if in hex on a 520/ST

========== Get the current logical screen base address =============

3 logBase ( --baseaddr) returns the address of where all output functions
			will draw on a screen. May differ from the physical
			base if you're drawing off-screen and will switch
			screen locations for animation or whatever
	'call logBase'    will return 78000 if in hex on a 520/ST

=========== Get the screen resolution =================

4 getRez ( --resolution)
	'call getRez' leaves 0,1,or 2 on the stack if the resolution
		    is low, medium, or high

========== Change screen parameters ================

5 setScreen (logaddr,physaddr,res-- ) sets those parameters. any value
			of -1 will be ignored so its posibble to change
			the resolution w/o affecting the others, etc.
hex
70000 -1 -1 call setScreen   will change the logical base address to 70000
			w/o changing resolution or phys address

========= Change the entire color palette ==========

6 setPalette (palettePtr-- ) a new palette will be loaded at the next
			vertical retrace

create Palette
	dc.w	$777,$700,$070,$007,$111,$222,$333,$444,$555
	dc.w	$000,$001,$010,$100,$200,$020,$002,$123,$456

Palette call setPalette   will load the new color palette in place

======= Change one color ======================

7 setColor (colorNum,color--oldColor ) sets one color. if color is -1, no changes
		occur, the current color is returned.
hex
1 700 call setColor drop	will (in med rez) changes the writing color
				to red

======== Read sectors from a disk ===================
8 flopRd (buffer,filler,dev,sector,track,side,count-result)

count: how many sectors to read. Possible values are from 1-9
side: selects side of disk to read. 0 for SS and 0 or 1 for DS drives
track: can be 0-79 for 80-track drives or 0-39 for 40-track drives
sector: sector to read (0-9)
dev: 0 for drive A, 1 for drive B
filler: unused
buffer: where to put read data. Must be big enough. A sector is 512 bytes
result: 0 if OK, negative for various errors

variable Buffer
512 vallot

Buffer 0 0 3 32 0 1 call flopRd drop
	reads one sector from drive A, sector 3, track 32, side 0 into Buffer

============== Write sectors to a disk ================

9 flopWr (buffer,filler,dev,sector,track,side,count--result)
	same meanings

======== Format sectors on a disk ===================

10 flopFmt (buffer,filler,dev,spt,track,side,interleave,magic,virgin--result)

virgin: what sectors are formatted with. $E5E5 is standard, $Fxxx is illegal.
magic: $87654321 or no formatting will occur
interleave: usu. one. Determines order in which sectors will be written
buffer: must be at least 8k large to hold data for the entire track. used
	for verifying.

11 unused

======== Send a string out the MIDI port ===============

12 midiWS (count,ptr-- ) to send a string thru the MIDI port. Count is string
		length-1, ptr points to byte chars

create MIDIString
	dc.b	'MIDI data'

8 MIDIString call midiWS   will send the string

======== Change MFP interrupt handling routines =========

13 mfpInt ( number,vector-- ) changes an interrupt handling routine in the
		MFP

code vector
	...
end-code

0 ' vector call MFPint	changes interrupt handler number 0

======= Return input records for input devices ============
14 ioRec (dev--address) returns addr of buffer data record of input device

dev: 0 RS-232
     1 Keyboard
     2 MIDI

address: points to record of ( (2) means 2 bytes):

(4)  iBuf	pointer to an input buffer
(2)  ibufsize	size of that input buffer
(2)  headindex  head position of circular queue
(2) tail index	tail position in circular queue
(2) ibuflo	after an XOFF, trans resumes when buffer goes below this level
(2) ibufhi	XOFF if buffer fills up this full

a simialr table for RS232 output is located right after the input table

====== Configure the serial port ===========
15 rsconf (speed,ctrl,ucr,rsr,tsr,scr-- ) for configuring the RS232 port

speed: 0-15 means 19200,9600,4800,2400,2000,1800,1200,600,300,200,150,
		134,110,75, and 50 baud
ctrl:	0 no handshake (default)
	1 XON/XOFF
	2 RTS/CTS
	3 XON/XOFF and RTS/CTS (not too useful)

scr: Synchronous Character Register in the MFP
tsr: Transmitter Status Register in MFP
rsr: Reciever Status Register in MFP
ucr: USART Control Register in MFP

not changed if -1

to set XON/XOFF and 1200 baud:

7 1 -1 -1 -1 -1 call RSconf

========= Reconfigure the keyboard ================
16 keyTbl(unshift,shift,capslock--tblptr) used to reconfigure keyboard

pass addresses of 128-byte tables giving ASCII values for each key. -1
if that table shouldn't be changed. Entries are in order of key scan code
and will return appropriate ASCII codes. returns the address of a vector
table which holds the three current addresses.

========== Return a random number ====================
17 random ( --random)
'call Random' returns a 24-bit pseudo-random number

========= Create Boot sectors ==============
18 protobt (buffer,serialno,disktype,exectype-- ) used to create boot sectors.

pg. 178-179 in Atari Internals by Abacus is the place to turn for info

========= Verify sectors on a disk ===============

19 flopVer (buffer,filler,dev,sector,track,side,count--result)
used to verify one or more sectors on a disk. result 0 if compared OK. Use
flopWr first and then this to compare.

======= Set Cursor Configuration ==========

21 cursconf (function,rate-- )

function:	0 disable cursor
		1 enable cursor
		2 flash cursor
		3 steady cursor
		4 set cursor flash rate
		5 get cursor flash rate
 rate:	how fast to flash cursor in 70ths for mono and 50ths for color
 
 to flash the cursor every 30/50th of a second on a color monitor:
 4 30 call cursConf
 
 ========= Set the time and date  ===============
 
 22 settime (time-- )
 time:	bits 0-4	seconds in 2-second increments
 	bits 5-10	minutes
	bits 11-15	hours
	bits 16-20	days 1-31
	bits 21-24	months 1-12
	bits 25-31	years since 1980

'binary
000110010010101100110111100 call setTime'
 sets the date and time to April 20, 1986 12:51:24 AM
 
 =========== Get the date and time ===============
 
 23 getTime ( --time) returns the time in the same format
 
 =========== Restore original keyboard layout ===========
 
 24 BIOSKeys ( -- )
 
 'call BIOSKeys' restores the power-up keyboard settings
 
 ======= Send a command to the intelligent keyboard ========
 
 25 ikbdws (count,pointer-- ) sends a byte string to of length count+1 to
 the intelligent keyboard
 
 create KBDString
 	DC.B	$80,1

'1 KBDString call ikbdws' sends a command to the keyboard

========== disable an interrupt (0-15) on MFP ==============

26 jdisint (number-- )

'0 call jdisint' disables MFP interrupt number 0

========= enable an interrupt (0-15) on MFP ==============

27 jenabint (number-- )

'0 call jenabint' re-enables MFP interrupt number 0

======= access the GI sound chip ==================

28 GIacess (data,register--data) bit7 of reg number(0-15) is 0-1 for read-write

'0 12 call giaccess' returns the data from sound register 12. Note that
	all paramters must always be passed. '0' was a junk word.
'10 83 call giaccess' writes a $10 to sound register 3. Junk is returned.

=========== Set pin on port A on the GI sound chip =============

29 offgibit (bitnumber-- )

the port bits do the following:
bitnumber:	0 select disk side 0 or 1
		1 select drive A
		2 select drive B
		3 RS-232 RTS (request to send)
		4 RS-232 CTS (clear to send)
		5 Centronics strobe
		6 Gen'l purpose output
		7 unused

'0 call offgibit  1 call offgibit' should select side 1 of drive A

======== Clear pin on port A of the GI sound chip =============

30 ongibit (bitnumber-- ) bitnumber has the same meaning

'0 call ongibit  1 call ongibit  2 call offgibit'
should select side 0 of drive B

============== start a timer on the MFP ======================

31 xbtimer (timer,control,data,vector-- )

timer is the number (0-3) of a timer on the MFP
timerA: reserved for users
timerB: horizontal blank counter
timerC: 200 hz system timer
timerD: RS-232 baud generator

vector is the address of routine to execute when timer runs out. Control and
daata refer to the corresponding registers for these timers.

========== set sound parameters ===============

32 dosound (pointer-- ) pointer to string of sound chip commands

Create Commands
	dc.b	0,10,1,50,$82,0		( see pg. 196 Abacus Internals)

'Commands call dosound' loads registers 0 and 1 with 10 and 50.

========== Read or change the printer configuration ============

33 setprt (config--config)

config is a number such that (or -1 to return the following):
bit		0		1
0	matrix printer	daisy-wheel
1	color printer	monchrome
2	Atari printer	Epson printer
3	Test mode	Quality mode
4	Centronics port	RS-232 port
5	Continuous feed	Single-sheet
6-14	reserved
15	always 0

'binary
0010110 call setprt drop' will set the printer to Continuous,RS-232,
draft mode,Epson,monochrome,matrix printer

============ return the keyboard vector table =================

34 kbdvbase ( --addr) addr is of a structure which holds the addresses
of the following routines that process data from the keyboard processor:

(4) midiVec	MIDI input vector (char recieved in D0)
(4) vkbderr	keyboard errors
(4) vmiderr	MIDI errors
(4) statvec	IKBD status
(4) mousevec	mouse routines
(4) clockvec	clock time routine
(4) joyVec	joystick packet handler

packet addresses recieved in A0. Routines end in RTS's.
'call kbdvbase' leaves the address of the structure on the stack.

============== set the keyboard's repeat rate =============

35 kbrate (delay,repeat--oldvalues)

values based on the 50 Hz clock for how long to delay before repeating
a key and then how often to keep repeating. oldvalues contains repeat
in the low byte, and delay in the hi byte.

'25 10 call kbrate drop' will set the first delay to 25/50ths of a second
and the subsequent repeat rate to 10/50ths of a second

============= send a block to the printer =======

36 prtblk (ParamPtr-- ) primitive used by screendump

ParamPtr points to the following structure:

(4)	address of screen RAM
(2)	an offset
(2)	screen width
(2)	screen height
(2)	left postion
(2)	right position
(2)	resolution 0-2 equals low,med,high
(2)	printer resolution (0-1)
(4)	address of the color palette
(2)	printer type (0-3)
(2)	printer port 0 is Centronics, 1 is RS232
(4)	pointer to half-tone masks

========= wait for next vertical retrace =========

37 vsync ( -- )  waits next retrace to enable smooth graphic output

'call vsync' does it



