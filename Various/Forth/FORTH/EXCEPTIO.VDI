( Exceptions.VDI)
( Here's untested, undocumented code extensions to cover those VDI calls
  that won't work with the 'CALL' mechanism. Eventually, of course, these
  exceptions will be put into 'CALL' and this file will disappear. Covers:
  10  vCellArray
  27  vqCellArray
  109 vroCpyfm
  110 vrTrnfm
  112 vsfUDpat
  118 vexTimv
  121 vrtCpyfm
  125 vexButv
  126 vexMotv
  127 vexCurv)

( VDIPB is a system variable which points to its VDI Parameter Block. The
  structure holds the addresses for the following arrays:
  +0  contrl
  +4  vIntin
  +8  vPtsin
  +12 vIntout
  +16 vPtsOut)

CODE vCellArray ( pxyArray,rowLength,elUsed,numRows,wrtMode,colArray -- )
	MOVE.L	(A6)+,VDIPB+4		( colArray is an IntIn array)

	MOVE.L	VDIPB+0,A0		( will now fill in contrl array)
	MOVE.W	#10,(A0)		( opcode = 10)
	MOVE.W	#2,2(A0)		( 2 input vertices)
	CLR.W	4(A0)			( no output vertices)
	CLR.W	8(A0)			( length of intout array = 0)
	MOVE.L	(A6)+,D0
	MOVE.W	D0,20(A0)		( move writing mode in place)
	MOVE.L	(A6)+,D0
	MOVE.L	(A6)+,D1
	MOVE.L	D1,D2
	MULU.W	D0,D2		( numRows*elUsed is length of colArray)
	MOVE.W	D2,6(A0)	( length of colArray = intin array)
	MOVE.W	D0,18(A0)	( numRows is contrl[9])
	MOVE.W	D1,16(A0)	( elUsed is contrl[8])
	MOVE.L	(A6)+,D0
	MOVE.W	D0,14(A0)	( rowLength used in colArray)
	MOVE.W	VDIHandle,12(A0)	( make sure this is in place)
	MOVE.L	(A6)+,VDIPB+8	( pxyArray is also ptsIn array)

	LEA	VDIPB,A0	( this is the VDI calling procedure)
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	RTS
END-CODE

CODE vqCellArray
	( pxyArray,rowLength,numRows,&colArray - elUsed,rowsUsed,status)
	MOVE.L	VDIPB+0,A0	( fill in contrl array)
	MOVE.W	#27,(A0)	( opcode 27)
	MOVE.W	#2,2(A0)	( 2 input vertices)
	CLR.W	4(A0)		( no output verts)
	CLR.W	6(A0)		( length of intin array)
	MOVE.W	VDIHandle,12(A0)
	MOVE.L	(A6)+,VDIPB+12
	MOVE.L	(A6)+,D0
	MOVE.W	D0,16(A0)	( numRows is contrl[8])
	MOVE.L	(A6)+,D0
	MOVE.W	D0,14(A0)	( rowLength)
	MOVE.L	(A6)+,VDIPB+8	( insert pxyarray as ptsin array)

	LEA	VDIPB,A0	( this is the VDI calling procedure)
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	MOVE.L	VDIPB+0,A0
	MOVE.W	18(A0),-(A6)	( elUsed)
	CLR.W	-(A6)
	MOVE.W	20(A0),-(A6)	( rowsUsed)
	CLR.W	-(A6)
	MOVE.W	22(A0),-(A6)	( status)
	CLR.W	-(A6)
	RTS
END-CODE

CODE (exVec)	( newAddress,opcode - oldAddress) ( core for 125-7)
	MOVE.L	VDIPB+0,A0	( fill in cntrl)
	MOVE.L	(A6)+,D0
	MOVE.W	D0,(A0)
	CLR.L	2(A0)
	CLR.L	6(A0)
	MOVE.W	VDIHandle,12(A0)
	MOVE.L	(A6)+,14(A0)

	LEA	VDIPB,A0	( this is the VDI calling procedure)
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	MOVE.L	VDIPB+0,A0
	MOVE.L	18(A0),-(A6)
	RTS
END-CODE

: vexButv ( newAddress - oldAddress)
	125 (exVec)
	;

: vexMotv ( newAddress - oldAddress)
	126 (exVec)
	;

: vexCurv ( newAddress - oldAddress)
	127 (exVec)
	;

CODE vexTimv	( newAddress - oldAddress,mil/tick)
	MOVE.L	VDIPB+0,A0	( fill in cntrl)
	MOVE.L	(A6)+,D0
	MOVE.W	D0,(A0)
	CLR.L	2(A0)
	CLR.W	6(A0)
	MOVE.W	#1,8(A0)
	MOVE.W	VDIHandle,12(A0)
	MOVE.L	(A6)+,14(A0)

	LEA	VDIPB,A0	( this is the VDI calling procedure)
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	MOVE.L	VDIPB+0,A0
	MOVE.L	18(A0),-(A6)	( address of old timer routine)
	MOVE.L	VDIPB+12,A0
	MOVE.W	(A0),-(A6)	( return milliseconds/timer tick)
	CLR.W	-(A6)
	RTS
END-CODE

CODE vroCpyfm ( wrMode,pxyarray,psrcMFDB,pdesMFDB - )
	MOVE.L	VDIPB+0,A0
	MOVE.L	(A6)+,18(A0)
	MOVE.L	(A6)+,14(A0)
	MOVE.L	(A6)+,VDIPB+8
	MOVE.L	VDIPB+4,A1
	MOVE.L	(A6)+,D0
	MOVE.W	D0,(A1)
	MOVE.W	#109,(A0)
	MOVE.W	#4,2(A0)
	CLR.W	4(A0)
	MOVE.W	#1,6(A0)
	CLR.W	8(A0)
	MOVE.W	VDIHandle,12(A0)

	LEA	VDIPB,A0
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	RTS
END-CODE

CODE vrtCpyfm
	( wrMode,pxyarray,psrcMFDB,pdesMFDB,colorIndex1's,colorIndex2's - )
	MOVE.L	VDIPB+4,A1
	MOVE.L	(A6)+,D0
	MOVE.W	D0,4(A1)
	MOVE.L	(A6)+,D0
	MOVE.W	D0,2(A1)
	MOVE.L	VDIPB+0,A0
	MOVE.L	(A6)+,18(A0)
	MOVE.L	(A6)+,14(A0)
	MOVE.L	(A6)+,VDIPB+8
	MOVE.L	(A6)+,D0
	MOVE.W	D0,(A1)
	MOVE.W	#121,(A0)
	MOVE.W	#4,2(A0)
	CLR.W	4(A0)
	MOVE.W	#3,6(A0)
	CLR.W	8(A0)
	MOVE.W	VDIHandle,12(A0)

	LEA	VDIPB,A0
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	RTS
END-CODE

CODE vrTrnfm ( psrcMFDB,pdesMFDB - )
	MOVE.L	VDIPB+0,A0
	MOVE.L	(A6)+,18(A0)
	MOVE.L	(A6)+,14(A0)
	MOVE.W	#110,(A0)
	CLR.L	2(A0)
	CLR.L	6(A0)
	MOVE.W	VDIHandle,12(A0)

	LEA	VDIPB,A0
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	RTS
END-CODE

CODE vsfUDpat ( pFillPat,planes - )
	MOVE.L	VDIPB+0,A0
	MOVE.L	(A6)+,D0
	MOVEQ.L	#16,D1
	MULU.W	D1,D0
	MOVE.W	D0,6(A0)
	MOVE.W	112,(A0)
	CLR.L	2(A0)
	CLR.W	8(A0)
	MOVE.W	VDIHandle,12(A0)
	MOVE.L	(A6)+,VDIPB+4

	LEA	VDIPB,A0
	MOVE.L	A0,D1
	MOVEQ.L	#$73,D0
	TRAP	#2

	RTS
END-CODE
