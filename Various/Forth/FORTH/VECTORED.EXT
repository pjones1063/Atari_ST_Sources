Vectored.ext

When speed becomes important in vectored I/O, new routines must be
supplied which deal with strings instead of characters. Some examples
are here. The addresses of these routines are normally put into the
DeviceType, DeviceExpect, and Device?Term vectors and then calling
'device output device input' but they could just as well be put
into the regular Type, Expect, and ?Terminal user vectors AFTER
calling console output and AUX: input (AUX:? Yes. When some device
other than console is used for input, Mach1 inserts the address
of a Query which is more useful).

INSTALLING YOUR OWN DEVICE DRIVERS

WARNING!  This is just example code. Know your situation and make
use of semaphores, pausing, and port status-checking as necessary.

Here's some ?Terminal examples


================= ?TERMINAL ==============================

Assembler examples

CODE AUX?Term	( -- flag)
	MOVE.W	#1,-(A7)	( for AUX:)
	MOVE.W	#1,-(A7)	( bconstat)
	TRAP	#13		( call BIOS)
	ADDQ.L	#4,A7		( clean up stack)
	EXT.L	D0
	MOVE.L	D0,-(A6)
	RTS
END-CODE

CODE CON?Term	( -- flag)
	MOVE.W	#2,-(A7)	( for CON:)
	MOVE.W	#1,-(A7)	( bconstat)
	TRAP	#13		( call BIOS)
	ADDQ.L	#4,A7		( clean up stack)
	EXT.L	D0
	MOVE.L	D0,-(A6)
	RTS
END-CODE

CODE MIDI?Term	( -- flag)
	MOVE.W	#3,-(A7)	( for MIDI)
	MOVE.W	#1,-(A7)	( bconstat)
	TRAP	#13		( call BIOS)
	ADDQ.L	#4,A7		( clean up stack)
	EXT.L	D0
	MOVE.L	D0,-(A6)
	RTS
END-CODE

Forth Equivalents

: (?TERM) ( dev--flag)
	call bconstat
	;
: AUX?TERM ( --flag)
	1 (?TERM)
	;
	
: CON?TERM ( --flag)
	2 (?TERM)
	;
	
: MIDI?TERM ( --flag)
	3 (?TERM)
	;


To install your own ?Terminal routine which will use the serial port
as input:

192 user Device?TermVec

' AUX?TERM Device?TermVec !	( and then later call 'Device Input')


=================== TYPE ==================================

( miditype ( addr,count-- ) p.170 Abacus Internals)
CODE MIDITYPE
	MOVE.L	(A6)+,D0
	SUBQ.L	#1,D0		( needs count-1 for some reason)
	MOVE.L	(A6)+,-(A7)	( put string address on)
	MOVE.W	D0,-(A7)	( put length on)
	MOVE.W	#12,-(A7)	( midiws)
	TRAP	#14		( call XBIOS)
	ADDQ.L	#8,A7		( clean up stack)
	RTS
END-CODE

( ikbdtype ( addr,count-- ) p.188 Abacus Internals)
CODE IKBDTYPE
	MOVE.L	(A6)+,D0
	SUBQ.L	#1,D0		( needs count-1 for some reason)
	MOVE.L	(A6)+,-(A7)	( put string address on)
	MOVE.W	D0,-(A7)	( put length on)
	MOVE.W	#25,-(A7)	( ikbdws)
	TRAP	#14		( call XBIOS)
	ADDQ.L	#8,A7		( clean up stack)
	RTS
END-CODE

( CON:type ( addr,count -- ) p.123 Abacus Internals)
CODE CONTYPE
	MOVE.L	(A6)+,D0	( save count)
	MOVE.L	(A6)+,-(A7)	( put address of buffer on)
	MOVE.L	D0,-(A7)	( now put count on)
	MOVE.W	#1,-(A7)	( file handle of 1 means CON:)
	MOVE.W	#$40,-(A7)	( fWrite)
	TRAP	#1		( call GEMDOS)
	LEA	12(A7),A7	( clean up stack)
	RTS
END-CODE

( AUX:type ( addr,count -- ) p.123 Abacus Internals)
CODE AUXTYPE
	MOVE.L	(A6)+,D0	; save count
	MOVE.L	(A6)+,-(A7)	; put address of buffer on
	MOVE.L	D0,-(A7)	; now put count on
	MOVE.W	#2,-(A7)	; file handle of 2 means AUX:
	MOVE.W	#$40,-(A7)	; fWrite
	TRAP	#1		; call GEMDOS
	LEA	12(A7),A7	; clean up stack
	RTS
END-CODE
	
( PRN:type ( addr,count -- ) p.123 Abacus Internals)
CODE PRNTYPE
	MOVE.L	(A6)+,D0	( save count)
	MOVE.L	(A6)+,-(A7)	( put address of buffer on)
	MOVE.L	D0,-(A7)	( now put count on)
	MOVE.W	#3,-(A7)	( file handle of 3 means PRN:)
	MOVE.W	#$40,-(A7)	( fWrite)
	TRAP	#1		( call GEMDOS)
	LEA	12(A7),A7	( clean up stack)
	RTS
END-CODE

Forth equivalents

: MIDITYPE ( addr,count-- )
	1-	( count should be one less than actual)
	swap	( needs a different order)
	call midiws
	;

: IKBDTYPE ( addr,count-- )
	1-	( count should be one less than actual)
	swap	( needs a different order)
	call ikbdws
	;

: CONTYPE { addr count -- }
	1 count addr
	call fWrite drop
	;

: AUXTYPE { addr count -- }
	2 count addr
	call fWrite drop
	;

: PRNTYPE { addr count -- }
	3 count addr
	call fWrite drop
	;

To install a type routine that will send all TYPE'd output to both
the MIDI port and to the serial port:

196 user DeviceTypeVec

: MultiType ( addr,count-- )
	2dup
	MIDITYPE
	AUXTYPE
	;

' MultiType DeviceTypeVec !
Device output

================= EXPECT ==============================

( CON:EXPECT ( addr,count -- ) p.123 Abacus Internals)
CODE CONEXPECT
	MOVE.L	(A6)+,D0	( save count)
	MOVE.L	D0,SPAN		( update span now)
	MOVE.L	(A6)+,-(A7)	( put address of buffer on)
	MOVE.L	D0,-(A7)	( now put count on)
	MOVE.W	#1,-(A7)	( file handle of 1 means CON:)
	MOVE.W	#$3F,-(A7)	( fRead)
	TRAP	#1		( call GEMDOS)
	LEA	12(A7),A7	( clean up stack)
	RTS
END-CODE
	
( AUX:EXPECT ( addr,count -- ) p.123 Abacus Internals)
CODE AUXEXPECT
	MOVE.L	(A6)+,D0	( save count)
	MOVE.L	D0,SPAN		( update span now)
	MOVE.L	(A6)+,-(A7)	( put address of buffer on)
	MOVE.L	D0,-(A7)	( now put count on)
	MOVE.W	#2,-(A7)	( file handle of 2 means AUX:)
	MOVE.W	#$3F,-(A7)	( fRead)
	TRAP	#1		( call GEMDOS)
	LEA	12(A7),A7	( clean up stack)
	RTS
END-CODE

( PRN:EXPECT ( addr,count -- ) p.123 Abacus Internals)
CODE PRNEXPECT
	MOVE.L	(A6)+,D0	( save count)
	MOVE.L	D0,SPAN		( update span now)
	MOVE.L	(A6)+,-(A7)	( put address of buffer on)
	MOVE.L	D0,-(A7)	( now put count on)
	MOVE.W	#3,-(A7)	( file handle of 3 means PRN:)
	MOVE.W	#$3F,-(A7)	( fRead)
	TRAP	#1		( call GEMDOS)
	LEA	12(A7),A7	( clean up stack)
	RTS
END-CODE

Forth Equivalents

: CONEXPECT { addr count -- }
	1			( for the keyboard)
	count addr		( to match fRead's syntax)
	call fRead drop		( result code)
	;
	
: AUXEXPECT { addr count -- }
	2			( for the serial port)
	count addr		( to match fRead's syntax)
	call fRead drop		( result code)
	;
	
: PRNEXPECT { addr count -- }
	3			( for the printer port)
	count addr		( to match fRead's syntax)
	call fRead drop		( result code)
	;

To install a driver that will use the serial port for input:

188 user DeviceExpectVec
192 user Device?TermVec

' AUXEXPECT DeviceExpectVec !
' AUX?TERM  Device?TermVec !

Device Input

In summary, an example. To install your own routines such that input
will come from the MIDI port and all output will go thru both the
MIDI and serial ports in addition to the task's window:

188 user DeviceExpectVec
192 user Device?TermVec
196 user DeviceTypeVec

' MIDIExpect DeviceExpectVec !
' MIDI?Term  Device?TermVec !

: MultiType
	2dup
	AUXType
	MIDIType
	;

' MultiType DeviceTypeVec !

Device console + output
Device input