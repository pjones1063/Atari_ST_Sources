
                            Shuffling Demonstration

                                By David Preston

                                   For ICTARI

     Here's a little poser for newcomers to programming...

     Suppose you have decided to write a  card game, how would you go about
     coding the shuffle of the cards?

     And it doesn't  just  apply  to  a  deck  of  playing  cards, the same
     principle could apply to letters of  the  alphabet  for a word game or
     whatever.

     We'll assume that we *are* talking  about  a deck of playing cards for
     the purposes of this exercise, held as  the values 0-51 in a numerical
     array of the appropriate number of elements. In other words deck(0)=0,
     to deck(51)=51 (dck() being the equivalent in the STOS example, as dec
     is a reserved word). As if we were  playing Bridge, we are to deal all
     52 cards at once, but the methods  apply to any number of cards dealt.
     And surprisingly, there have been  some  very  well done card games in
     the PD and Shareware arena which  have  been  let down by poor shuffle
     algorithms, which can spoil an otherwise excellent game.

     The apparently obvious way to do  it  is  to use a for...next loop for
     each card being dealt,  and  nest  a  repeat...until  loop within this
     containing a random number 0-51,  repeating  until  the card chosen is
     still available, to pick that card. Once a card has been dealt, we set
     the appropriate element to (say)  -1  to  indicate  that card has been
     dealt, so the code would look something like this...

     for card=0 to 51
             repeat
                     this_card=rand(51)
             until deck(this_card)<>-1
             deck(this_card)=-1
             deal this_card
     next card

     Now this works, but you may notice  that  it will slow down toward the
     end, as the random factor will  inevitably hit card numbers which have
     already been dealt. This will be more  noticeable if you were to use a
     larger 'deck', say several alphabets-worth of  letters in a word game.
     (It used to  be  much  worse  on  the  slower  8-bit  machines running
     interpreted programs!) And of course the time taken is variable...

     But there is a better  way,  which  is  much  quicker and always takes
     exactly the same time to do. This is  how it works - we go through the
     pack with a for...next loop  and  for  each element (card) we randomly
     select another one, and swap them.  Like  all the best methods, it's a
     remarkably simple and elegant solution and I wish I'd thought of it...

     The code looks a bit like this -

     for card=0 to 51
             other_card=rand(51)
             swap deck(card),deck(other_card)
     next card

     You might not think that  this  would  have  the desired effect but it
     does. Of course there  might  be  instances  of  a  card swapping with
     itself, but this doesn't degrade  the  overall quality of the shuffle.
     And you could loop through the pack twice if you felt you had to.

     Examples -

     I've provided examples in the three  most popular Basics - GFA, Hisoft
     and STOS.

     All three work in exactly the same way and are as similar as possible.
     I've included a compiled  version  of  the Hisoft/Power Basic version.
     When you run any of the three,  it  will do the shuffle and deal first
     by the first method discussed above,  and then by the swapping method,
     discussed second.

     Basic files are included in  all  three  dialects. The two interpreted
     languages (GFA & STOS)  also  include  ascii (*.LST/*.ASC) versions as
     the *.BAS files are tokenised.

     An apology to GFA coders if the code looks a bit odd, but I rarely use
     GFA as I don't  have  the  GFA  compiler,  and  I  created the example
     listing by loading in  the  Hisoft  example  and  editing it. This was
     surprisingly easy, and indeed all three versions (ignoring STOS's line
     numbers) are remarkably alike. All three  have a swap command, which I
     found surprising, but perhaps that's just  because I'm getting old and
     can remember some very old and  basic Basics! Swapping the contents of
     two variables without a swap command  is a fascinating area, but sadly
     redundant...

     I hope you find this little example interesting.

     David Preston
     2/2/96

