








                 ENhanCed Hisoft ApplicatioN toolkiT (ENCHANT)
                    Developed by Matthew Bacon & Paul Jones

           ENCHANT is Copyright 1997-1999 Matthew Bacon & Paul Jones
                          Revision 12th September 1999














תתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתת

ת How to access the OLGA routines from within your own program

  For your program to use the following routine, the file OLGA.BAS must 
  first be included. This is achieved by including the following line of
  code at the start of your source code (but after GEMAES.BH).

  REM $include OLGA.BAS

ת Important

  Please also consult the supporting documentation provided with the 
  OLGA-Protocol by Thomas Much.

תתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתת

ת FUNCTION ole_manager_id
  - Include the file: OLGA.BAS

  - Syntax:
    ole_manager_id

  - Effect:
    Returns the application id of the OLE Manager (if installed).

  - Comments:
    For your program to support the OLE-Protocol (which makes object 
    embedding using the OEP (Object Exchange Protocol) and object linking 
    with OLGA possible), this function must be called and a non-zero 
    result returned.

    You should have no reason to call this function!

  - See Also:
    ole_protocol_init

  - Example:
    result=ole_manager_id

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLE Manager is available                               |
    |     0     | The OLE Manager is not available                           |
     ------------------------------------------------------------------------


ת FUNCTION olga_manager_id
  - Include the file: OLGA.BAS

  - Syntax:
    olga_manager_id

  - Effect:
    Returns the application id of the OLGA Manager (if installed).

  - Comments:
    For your program to support the OLGA-Protocol (which allows object 
    linking), this function must be called and a non-zero result 
    returned.

    You should have no reason to call this function!

  - See Also:

  - Example:
    result=olga_manager_id

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA Manager is available                              |
    |     0     | The OLGA Manager is not available                          |
     ------------------------------------------------------------------------


ת FUNCTION ole_protocol_init ()
  - Include the file: OLGA.BAS

  - Syntax:
    ole_protocol_init (Server_or_Client,XACC_type$,ole_mode)

  - Effect:
    Registers your program with the OLE/OLGA Manager. The Manager will 
    then return an OLGA_INIT message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function should obviously be called before your program requests
    any other features of the OLE/OLGA-Protocols.

    - 'Server_or_Client' should contain one of the following values:
      &h0001= your program is an OLE/OLGA Server
      &h0002= your program is an OLE/OLGA Client
      &h0003= your program is an OLE/OLGA Server and Client
    - 'XACC_type$' should contain a two letters (upper case) which 
      describe your programs XACC type$ (see OLGA docs!)
    - 'ole_mode' should contain one of the following values:
      &h0000= your program does not support OEP (just OLGA linking)
      &h0001= your program support OEP

  - See Also:
    OLGA_INIT message

  - Example:
    ' These CONST values are provided in OLGA.BAS
    CONST ol_Server=&h0001,ol_Client=&h0002,ol_peer=&h0003,ol_pipes=&h1000
    CONST ol_oep=&h0001

    result=ole_protocol_init (ol_peer,"ED",0) 
    
    i.e. your program is both a Server and Client, is a text editor 
         and does not support the OLE-Protocol (only the OLGA-Protocol).

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLE/OLGA Manager is available                          |
    |     0     | The OLE/OLGA Manager is not available                      |
     ------------------------------------------------------------------------


ת FUNCTION ole_protocol_exit
  - Include the file: OLGA.BAS

  - Syntax:
    ole_protocol_exit

  - Effect:
    Sends the OLE_EXIT message to the Manager which will then remove 
    any links between your program and the Manager and/or Clients.

  - Comments:
    The OLE_EXIT message can also be received by your program from the 
    Manager (which will be sent to the GEM Toolkit routine, 
    HandleUserMessage). See OLGA documentation for details of this 
    message.

  - See Also:

  - Example:
    result=ole_protocol_exit

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLE_EXIT message has been sent                         |
    |     0     | The OLE_EXIT message has not been sent                     |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_update ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_update (filename$,index)

  - Effect:
    >>Can only be used if your program is an OLGA Server<<

    Sends an OLGA_UPATE message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function should be called when your program either updates or 
    saves a file.

    - 'filename$' should contain an absolute path.
    - 'index' should be the unique number assigned by your program to 
      'filename$'.

  - See Also:
    olga_protocol_getinfo, olga_protocol_info, olga_protocol_rename

  - Example:
    result=olga_protocol_update ("A:\DUMMY.TXT",1)

    i.e. Your program has updated the file 'A:\DUMMY.TXT' which you
         gave the index of '1'.

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_UPDATE message has been sent                      |
    |     0     | The OLGA_UPDATE message has not been sent                  |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_getinfo ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_getinfo (index)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Requests the Server to create and send an info file for the file 
    assigned to 'index'. See OLGA docs for further details.

  - Comments:
    This function should only be called after a Server has sent an 
    OLGA_UPDATE message to the Manager AND an index is available.

  - See Also:
    olga_protocol_update, olga_protocol_info

  - Example:
    result=olga_protocol_getinfo (1)

    i.e. Your program has requested the info file with index '1'.

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_GETINFO message has been sent                     |
    |     0     | The OLGA_GETINFO message has not been sent                 |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_info ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_info (filename$,index)

  - Effect:
    >>Can only be used if your program is an OLGA Server<<

    Sends a OLGA_INFO message to Client. The Client will respond with 
    an OLGA_ACK message (which will be sent to the GEM Toolkit 
    routine, HandleUserMessage). See OLGA documentation for details.

  - Comments:
    This function should only be called after a Client has sent an 
    OLGA_GETINFO message to the Server.

    'filename$' should contain the filename of the info file requested 
    by 'index'.

  - See Also:
    olga_protocol_update, olga_protocol_getinfo

  - Example:
    Your program must first create an info file for the file which it 
    has assigned to index '1'.

    result=olga_protocol_info ("A:\INFO.TXT",1)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_INFO message has been sent                        |
    |     0     | The OLGA_INFO message has not been sent                    |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_rename ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_rename (old_filename$,new_filename$)

  - Effect:
    >>Can only be used if your program is an OLGA Server<<

    Sends an OLGA_RENAME message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    The function should ba called if your program moves or renames a 
    file.

    - 'old_filename$' should contain the old an absolute path.
    - 'new_filename$' should contain the new an absolute path.

  - See Also:
    olga_protocol_update

  - Example:
    result=olga_protocol_rename ("A:\DUMMY.TXT","C:\DUMMY.TXT")

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_RENAME message has been sent                      |
    |     0     | The OLGA_RENAME message has not been sent                  |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_breaklink ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_breaklink (filename$)

  - Effect:
    >>Can only be used if your program is an OLGA Server<<

    Sends an OLGA_BREAKLINK message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    The function should ba called if your program has deleted a file.

    - 'filename$' should contain an absolute path.

  - See Also:

  - Example:
    result=olga_protocol_breaklink ("A:\DUMMY.TXT")

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_BREAKLINK message has been sent                   |
    |     0     | The OLGA_BREAKLINK message has not been sent               |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_opendoc ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_opendoc (group_id)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_OPENDOC message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function should be called if your program opens a file. Your 
    program should also assign a 'group_id' number to this file. 
    (i.e. you program should associate file 'A:\DUMMY.TXT' with the 
    group_id of '15'. Other files associated with 'A:\DUMMY.TXT' 
    subsequently have the 'index' of '15'.)

  - See Also:
    olga_protocol_update, olga_protocol_getinfo, olga_protocol_info
    olga_protocol_closedoc, olga_protocol_link

  - Example:
    result=olga_protocol_opendoc (15)
    OPEN "A:\DUMMY.TXT" FOR INPUT AS #1

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_OPENDOC message has been sent                     |
    |     0     | The OLGA_OPENDOC message has not been sent                 |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_closedoc ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_closedoc (group_id)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_CLOSEDOC message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function should be called if your program closes a file. The 
    Manager will then close all links with files associated with the 
    group_id.
    
    - 'group_id' should contain the same value when the file was 
      opened.

  - See Also:

  - Example:
    junk=olga_protocol_opendoc (15)
    OPEN "A:\DUMMY.TXT" FOR INPUT AS #1
    CLOSE #1
    result=olga_protocol_closedoc (15)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_CLOSEDOC message has been sent                    |
    |     0     | The OLGA_CLOSEDOC message has not been sent                |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_link ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_link (filename$,group_id)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_LINK message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function links 'filename$' with the file with 'group_id'. 
    When the file with 'group_id' is updated/reloaded etc. 'filename$' 
    will also be updated/reloaded!

    - 'filename$' should contain an absolute path.

  - See Also:

  - Example:
    junk=olga_protocol_opendoc (15)	' A:\DUMMY.TXT is assigned to
    OPEN "A:\DUMMY.TXT" FOR INPUT AS #1	' group_id '15'

    result=olga_protocol_link ("A:\DUMMY.GIF",15)  ' A:\DUMMY.GIF is 
    						   ' linked with
    						   ' A:\DUMMY.TXT

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_LINK message has been sent                        |
    |     0     | The OLGA_LINK message has not been sent                    |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_unlink ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_unlink (filename$,group_id)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_UNLINK message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function removes any link between 'filename$' and the file 
    with 'group_id'.

    - 'filename$' should contain an absolute path.

  - See Also:

  - Example:
    junk=olga_protocol_opendoc (15)	' A:\DUMMY.TXT is assigned to
    OPEN "A:\DUMMY.TXT" FOR INPUT AS #1	' group_id '15'

    junk=olga_protocol_link ("A:\DUMMY.GIF",15)	' A:\DUMMY.GIF is 
    						' linked with A:\DUMMY.TXT

    result=olga_protocol_unlink ("A:\DUMMY.GIF",15) ' A:\DUMMY.GIF is no
    						    ' longer linked with
    						    ' A:\DUMMY.TXT

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_UNLINK message has been sent                      |
    |     0     | The OLGA_UNLINK message has not been sent                  |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_linkrenamed ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_linkrenamed (old_filename$,new_filename$,group_id)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_LINKRENAMED message to the Manager.

  - Comments:
    This function should be called after receiving an OLGA_RENAMELINK 
    message (they contain the values for old_filename$, new_filename$, 
    group_id) from the Manager.

    - 'old_filename$' should contain an absolute path.
    - 'new_filename$' should contain an absolute path.

  - See Also:

  - Example:
    junk=olga_protocol_link ("A:\DUMMY.GIF",6)
    result=olga_protocol_linkrenamed ("A:\DUMMY.GIF","A:\DUMMY.JPG",6)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_LINKRENAMED message has been sent                 |
    |     0     | The OLGA_LINKRENAMED message has not been sent             |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_start ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_start (type,filename$,commandline$)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_START message to the Manager. The Manager will 
    respond with an OLGA_ACK message (which will be sent to the GEM 
    Toolkit routine, HandleUserMessage). See OLGA documentation for 
    details of this message.

  - Comments:
    This function should be called to start a suitable Server.

    - 'type' should contain one of the following values:
       &h0001, means that 'filename$' should contain a XACC program 
               type.
       &h0002, means that 'filename$' should contain a file extender 
              (e.g. '.GEM').
       &h0003, means that 'filename$' should contain an absolute path 
               to an application to be started.
    - 'filename$' see above.
    - 'commandline$' should contain either "", or the commandline to 
      be sent to 'filename$'

  - See Also:

  - Example:
    result=olga_protocol_start (ols_name,"D:\CAB\CAB.APP","D:\CAB\HOME.HTML")

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | The OLGA_START message has been sent                       |
    |     0     | The OLGA_START message has not been sent                   |
     ------------------------------------------------------------------------


ת FUNCTION olga_protocol_ackinfo ()
  - Include the file: OLGA.BAS

  - Syntax:
    olga_protocol_ackinfo (filename$,index)

  - Effect:
    >>Can only be used if your program is an OLGA Client<<

    Sends an OLGA_ACK message to the Manager.

  - Comments:
    This function acknowledges that the info file message has been 
    processed by your program.

    - 'filename$' should contain an absolute path.

  - See Also:

  - Example:

תתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתת

ת Please note

The routine, 'HandleUserMessage' is called if an AES message is not 
understood by the GEM Toolkit routine 'HandleMessage'. Here is how 
your 'HandleUserMessage' should look like... 

SUB HandleUserMessage
STATIC message,old_filename$,new_filename$

message=mess(0)
SELECT CASE message
CASE OLGA_INIT  ' Sent by Manager in reply to OLE_INIT
     mess(1)=id of Manager
     mess(3)=contains a bitmap of...
             &h0800, Manager supports idle test
             &h1000, Manager uses MultiTOS pipes
             &h2000, Manager can execute OLGA_START
             &h4000, Manager is OLGA Manager
     mess(7)=if 0, then no error has occured; =1 error

     IF mess(7)=0 THEN olga_enabled=-1
CASE OLGA_ACK  ' Sent by Manager in reply to a message you sent
     mess(7)=Message you sent (i.e. &H1238 = OLGA_UPDATE)

     message=mess(7)
     SELECT CASE message
     CASE OLGA_UPDATE  ' Sent by Manager
          mess(3)=Pointer to the string containing the filename of the 
                  file that has been updated. Take no action.
     CASE OLGA_INFO  ' Sent by Client in responce to OLGA_INFO
          mess(3)=Pointer to the string containing the filename of the 
                  info file, which may now be deleted.
          mess(5)=Index number.
     CASE OLGA_RENAME  ' Sent by Manager
          mess(3)=Pointer to the string containing the 'old filename'
          mess(5)=Pointer to the string containing the 'new filename'
                  The manager has confirmed that strings that match 
                  the 'old filename' have been updated to the 'new 
                  filename'.
     CASE OLGA_BREAKLINK  ' Sent by Manager
          mess(3)=Pointer to the string containing the filename of a 
                  file which has been deleted and no longer exists.
     CASE OLGA_OPENDOC  ' Sent by Manager
          mess(5)=group_id assigned to file opened.
     CASE OLGA_CLOSEDOC  ' Sent by Manager
          mess(5)=group_id assigned to file closed.
     CASE OLGA_LINK  ' Sent by Manager confirming link
          mess(3)=Pointer to the string containing the filename linked
          mess(5)=group_id assigned to file linked with.
          mess(6)=if 0, then no error has occured; =1 error
     CASE OLGA_UNLINK  ' Sent by Manager confirming unlink
          mess(3)=Pointer to the string containing the filename linked
          mess(5)=group_id assigned to file unlinked with.
          mess(6)=if 0, then no error has occured; =1 error
     END SELECT
CASE OLGA_GETINFO  ' Sent by Client
     mess(5)=Index number of the file, information is requested.
     
     Your program should now send an OLGA_INFO message to the Client.
CASE OLGA_INFO  ' Sent by Server in responce to OLGA_GETINFO
     mess(3)=Pointer to the string containing the filename of the 
             info file, which may now be opened.
     mess(5)=Index number.

     Your program should now send an OLGA_ACK message to the Server.
     This can be done using the function call 'olga_protocol_ackinfo'

     junk=olga_protocol_ackinfo (getaddr_text$(SPEEKL(VARPTR(mess(3)))),mess(5))
CASE OLGA_CLIENTTERMINATED  ' Sent by Manager
     mess(1)=id of Manager
     mess(3)=id of Client that was terminated
     mess(4)=The number of remaining Clients in use by the Server.
CASE OLGA_UPDATED  ' Sent by Manager
     mess(1)=id of Manager
     mess(3)=Pointer to the string containing the filename which has 
             been updated/changed.
     mess(5)=0 or index value
     mess(6)=0 or non-zero if OLGA_GETINFO can be sent to this index
     mess(7)=group_id of file
CASE OLGA_RENAMELINK  ' Sent by Manager
     mess(3)=Pointer to the string containing the filename that 
             should be renamed to:
     mess(5)=Pointer to the string containing the new filename 
     mess(7)=group_id of file

     Your program should update its internal strings to the new 
     filename and send a OLGA_LINKRENAMED message as confirmation.

     old_filename$=getaddr_text$(SPEEKL(VARPTR(mess(3))))
     new_filename$=getaddr_text$(SPEEKL(VARPTR(mess(5))))
     junk=olga_protocol_linkrenamed (old_filename$,new_filename$,mess(7))
CASE OLGA_LINKBROKEN  'Sent by Manager
     mess(3)=Pointer to the string containing the filename whose link 
             has broken. 
     mess(7)=group_id of file

     Your program should now remove the link the file using 
     OLGA_UNLINK.
CASE OLGA_START  ' Sent by Manager
     mess(3)=OLS value ('type') from OLGA_START
     mess(4)=Pointer to the string containing the program to be 
             started.
     mess(6)=if 0, then no error has occured; =1 error
CASE OLGA_SERVERTERMINATED  ' Sent by Manager
     mess(1)=id of Manager
     mess(3)=id of Server that was terminated

     If Server was started with OLS_EXTENSION then:
     mess(4)=Pointer to the string containing extension

     If Server was started with OLS_TYPE then:
     mess(4)=0
     mess(5)=Pointer to the string containing XACC type
CASE OLE_NEW  ' Sent by Manager if started after or in parallel
     mess(1)=id of Manager
     mess(3)=contains a bitmap of...
             &h0800, Manager supports idle test
             &h1000, Manager uses MultiTOS pipes
             &h2000, Manager can execute OLGA_START
             &h4000, Manager is OLGA Manager
     mess(4)=max. level of OLGA understood
     mess(5)=if 0, then OEP not understood; =1 if OEP supported
     mess(7)=contains version of Manager (&h0120 = v1.20)
CASE OLE_EXIT  ' Sent by Manager to let you know is no longer exists!
     mess(1)=id of your program

     olga_enabled=0
END SELECT
END SUB

ת Important

To read a string from a memory pointer, use the function 
getaddr_text$(), as shown below.

string_result$=getobj_text$( >>memory pointer goes here!<< )

For example,

dummy&=SPEEKL(VARPTR(mess(3)))
dummy$=getobj_text$(dummy&)
PRINT dummy$

'[*END OF FILE*]
