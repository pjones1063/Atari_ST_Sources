
                      Paul Jones and PJCO present...
 __      __                            ____    ___
/\ \  __/\ \                          /\  _`\ /\_ \
\ \ \/\ \ \ \     __     __  __     __\ \ \L\ \//\ \      __     __  __
 \ \ \ \ \ \ \  /'__`\  /\ \/\ \  /'__`\ \ ,__/ \ \ \   /'__`\  /\ \/\ \
  \ \ \_/ \_\ \/\ \L\.\_\ \ \_/ |/\  __/\ \ \/   \_\ \_/\ \L\.\_\ \ \_\ \
   \ `\___x___/\ \__/.\_\\ \___/ \ \____\\ \_\   /\____\ \__/.\_\\/`____ \
    '\/__//__/  \/__/\/_/ \/__/   \/____/ \/_/   \/____/\/__/\/_/ `/___/> \
                                                                     /\___/
                                                                     \/__/

            Use System Audio Manager (SAM) with HiSoft BASIC...

Disclaimer
---------------------------------------------------------------------------

PJCO and Paul Jones cannot be responsible for any damage caused to you
or your computer when using WavePlay lib.

What is it?
---------------------------------------------------------------------------

WavePlay is library for HiSoft BASIC which will let you use SAM. With
SAM and KP SACK you can create SAM Aware Applications (SAA) files
which let your program have sounds to certain events.

Installation
--------------------------------------------------------------------------

1) First you need to update your libraries. To do this find your LIB
   folder (which contains your library .BIN files), copy WAVEPLAY.BIN
   there and double click on BUILDLIB.TTP. For parameters, enter
   "WAVEPLAY -q" and press [return]. The program will now make a file
   called HBASIC.LIB.

2) Copy the new HBASIC.LIB file to the same directory as your HBASIC
   editor.

3) Copy WAVEPLAY.BH to your include folder.

Implementation of WavePlay.
---------------------------------------------------------------------------

KP Sack is needed for this first part. This program is responsible for
the creation of .SAA (SAM Aware Application) files which SAM needs for
each program wishing to use WavePlayMacro.

To start off, run KP Sack. A blank form should appear on the screen.
The various aspects needing explaining are:

App. name: The name of your application. This will be placed in the
           SAM allocation of sounds, so choose something approaprate.

Cookie   : A four letter word of how your program is identified.
           Choose something unique (ie not "CODE"), this is the string
           needed to identify the WavePlayMacro call.

0...15   : The places where to store your events. Simply write the
           names of each into the place where you would like them to
           be stored.

Our example form for ENCHANT:

[W1.GIF]

Click on "header" next. This will display another form showing how
each event has to be refered in your program, you may change these if
necessary.

The example:

[W2.GIF]

The nexy thing to do is to register your program as a SAA program.
Save your work with the "save" button and locate a sensible place to
save.

Go to the SAM Setup and configure. You should have displayed something
like:

[W3.GIF]

Click on "Install .SAA". The fileselector will appear, find your SAA
file you created and click on OK... your app. name should now to
displayed in the window.

[W4.GIF]

Clicking on OK will bring the previous main menu back. Drag the
selector to the end and your app. name should be displayed in French
quotation marks ("<< App. name >>"), with each event listed below. This
is where the user can select his/her sounds for each event.

Now comes the fun part, programming! <grin> ;-)


KP Sack will automatically create a file called "AP_MACRO.H" in the
same directory you saved your .SAA file. This file is the definations
needed in your program, but are in C.

Go to your HBASIC folder, and within you should have a program called
CTOSBAS.TTP. Drag and drop this AP_MACRO.H file onto the program and
after the program has executed the file AP_MACRO.BH has been
generated.

You will need to do some manual editing to this file however. Load it
up into a file editor for editing. Delete the header (up to the point
SAA cookie).

For example:

' SAA cookie.
CONST EHCT%=0x45484354

EHCT has to be a long, and the value after this is in hexdecimal. The
line should be converted to:

' SAA cookie.
CONST EHCT&=&H45484354

NB: WavePlay library doesn't require the long value, just the string
version ("EHCT") (used in "cookie").

Save this work (a different name is suggested as a .BH file).

Commands
---------------------------------------------------------------------------

ú The WAVEPLAY library

ú FUNCTION WavePlay%
  - Syntax:
    WavePlay (flags%,rate&,sound&,length&)

  - Effect:
    This plays a sample at the given rates, with given properties using the
    extension provided by The System Audio Manager (SAM).

  - Comments:
    FLAGS:
      WP_STEREO  =01 - stereo
      WP_MONO    =00 - mono

      WP_8BIT    =00 - 8bit
      WP_16BIT   =02 - 16bit

      WP_NOUSEDSP=00 - don't use the DSP (with AFM)
      WP_USEDSP  =04 - use the DSP (with AFM)

    RATE& is the speed of playback:
      ACT_CLK50K&=49170              TT_CLK50K&=50066
      ACT_CLK33K&=33880              TT_CLK25K&=25033
      ACT_CLK25K&=24585              TT_CLK12K&=12517
      ACT_CLK20K&=20770              TT_CLK6K& =6258
      ACT_CLK16K&=16490
      ACT_CLK12K&=12292
      ACT_CLK10K&=9834
      ACT_CLK8K& =8195

    NB: TT_CLK6K& is not Falcon compatable.

    SOUND& is the pointer to the start of the sample.

    LENGTH& is the length in bytes.

  - See Also:

  - Example:
    myfile=FREEFILE
    OPEN "A:\SAMPLE.AVR" FOR INPUT AS #myfile
        length&=LOF(myfile)
        sound&=malloc&(length&)
        BLOAD "A:\SAMPLE.AVR",sound&
    CLOSE #myfile

    result=WavePlay (WP_STEREO+WP_16BIT+WP_USEDSP,AT_CLK16K&,sound&,length&)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |    -1     | Error occurred, bad parameter                              |
    |     0     | No error, sample played                                    |
    |     1     | No error occurred, but was not played (SAM doesn't exist?) |
     ------------------------------------------------------------------------


ú FUNCTION WavePlayMacro%
  - Syntax:
    WavePlayMacro ("cookie",global&)

  - Effect:
    Plays a certain program macro in order to alert the user of an event
    using the extension provided by The System Audio Manager (SAM).

  - Comment:
    "COOKIE" is a four letter word of how your program is identified.  See
    WavePlay documentation for further details (in PD directory).  GLOBAL&
    is the global sample number (starting at 0) to play, see WavePlayGlobal.

  - See Also:
    WavePlayGlobal

  - Example:
    result=WavePlayMacro ("EHCT",0)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |     0     | No error, sample played                                    |
    |     1     | Error occurred, SAA file not installed                     |
     ------------------------------------------------------------------------


ú FUNCTION WavePlayGlobal%
  - Syntax:
    WavePlayGlobal% (global&)

  - Effect:
    Plays a global sound using the extension provided by The System Audio
    Manager (SAM).

  - Comments:
    The global sounds are:

    START_APP	   0     - Start an application
    WIND_CYCLE	   1     - Cycle the windows
    WIND_ARRANGE   2     - Arranging windows
    CON_HELP	   3     - Concise help
    ICONISE		   4     - Iconify a window
    ICONISE_ALL	   5     - Iconify all windows
    UNICONISE	   6     - Uniconify a window
    INFO		   7     - Bring up some info
    SELECT_ALL	   8     - Selecting all items
    DESELECT_ALL   9     - Deselecting all items
    TOGGLE		   10    - Toggling of settings
    CALL_FONTSEL   11    - Calling of the font selector
    CALL_ASCII	   12    - Calling of the ASCII table
    CALL_COLOUR	   13    - Calling of the colour selector

    NB: This command should be used if you wish to call a global sound,
    that is, a sound that is applied to every program. In order for your
    own program to use individual sounds, you need to use WavePlayMacro
    above.

  - See Also:
    WavePlayMacro

  - Example:
    result=WavePlayGlobal (0)

     ------------------------------------------------------------------------
    |   result  | Meaning                                                    |
     ------------------------------------------------------------------------
    |     0     | No error, sample played                                    |
    |     1     | Error occurred, sample not played                          |
     ------------------------------------------------------------------------

Legal
---------------------------------------------------------------------------

WavePlay is freeware, which means that no money should be payed for
using this software. Any programs which use the extension should have
the library named in the docs/program.

Please feel free to give me ANY comments about the library as I would
like to know what improvements/adjustments could be made.

Contact
---------------------------------------------------------------------------

I (Paul Jones) can be contacted via email at: paul.jones31@virgin.net
