








                 ENhanCed Hisoft ApplicatioN toolkiT (ENCHANT)
                    Developed by Matthew Bacon & Paul Jones

           ENCHANT is Copyright 1997-1999 Matthew Bacon & Paul Jones
                          Revision 12th September 1999














תתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתת

ת How to access the cypher routine from within your own program

  For your program to use the following routine, the file CYPHER2.BAS must 
  first be included. This is achieved by including the following line of
  code at the start of your source code.

  REM $include CYPHER2.BAS

תתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתתת

ת SUB cypher_text()
  - Include the file: CYPHER2.BAS

  - Syntax:
    cypher_text(sourcefile$,destfile$,security_level,password$)

  - Effect:
    Encrypts any file into an unreadable rubbish (and back again!) 
    which would be extremely difficult to decode! I mean extremely 
    difficult to decode!!

  - Comments:
    This routine uses a binary key (8 to 256-bits) to encrypt the file 
    sourcefile$. The binary key is generated from the password 
    provided as password$. The longer the password$, the better! :-)

    - 'sourcefile$' contains the full path and filename of the 
       original text you would like to encrypt. eg: A:\SOURCE.TXT
    - 'destfile$' contains the full path and filename the routine is 
       to generate. eg: A:\DEST.TXT
    - 'security_level' is a numeric value (multiple of eight) which 
       signifies the number of bits the original file is encrypted in. 
       The higher the value the better!
       eg: (min.) 8, 16, 24, 32, 64, 128, 256 (max.)
    - 'password$' should contain a unique password whose length can be 
      anything from 1 to 32 characters. This password, in conjunction 
      with the value found in 'security_level', is used by the routine 
      to generate the binary key.
      
      Consequently, changing either the value used for security_level 
      or a single character in password$, will result in different 
      encryption. This routine will both encypher and decypher a file.
    
  - See Also:

  - Example:
    sourcefile$="A:\SOURCE.TXT"
    destfile$="A:\DEST.TXT"
    security_level=128
    password$="ENCHANT is great"
    CALL cypher_text(sourcefile$,destfile$,security_level,password$)

'[*END OF FILE*]
