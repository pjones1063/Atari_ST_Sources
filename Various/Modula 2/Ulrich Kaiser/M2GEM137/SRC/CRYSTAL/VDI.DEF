DEFINITION MODULE VDI;

(*
Global VDI Definitions.

UK __DATE__ __TIME__
*)

(*DEF_SWITCHES*)

FROM PORTAB IMPORT ANYBYTE,ANYWORD,UNSIGNEDWORD,SIGNEDWORD,WORDSET,
                   ANYPOINTER,UNSIGNEDLONG;

(* (memory) form definition block *)

TYPE MFDB = RECORD
              FDAddr   : ANYPOINTER;
              FDW      : UNSIGNEDWORD;
              FDH      : UNSIGNEDWORD;
              FDWdWidth: UNSIGNEDWORD;
#if fill_byte
#if linear
              FillByte: ANYBYTE;
#endif
#endif
              FDStand  : BOOLEAN;
#if fill_byte
#if intel
              FillByte: ANYBYTE;
#endif
#endif
              FDNPlanes: UNSIGNEDWORD;
              FDR1     : ANYWORD;
              fDR2     : ANYWORD;
              FDR3     : ANYWORD;
            END;

(* a MFDB alias, therefor VAR ARRAY OF ANYTYPE instead of VAR MFDB *)

     FDB = RECORD
             MP : ANYPOINTER;
             FWP: UNSIGNEDWORD;
             FH : UNSIGNEDWORD;
             FWW: UNSIGNEDWORD;
#if fill_byte
#if linear
             FillByte: ANYBYTE;
#endif
#endif
             FF : BOOLEAN;
#if fill_byte
#if intel
             FillByte: ANYBYTE;
#endif
#endif
             NP : UNSIGNEDWORD;
             R1 : ANYWORD;
             R2 : ANYWORD;
             R3 : ANYWORD;
           END;

(* end of string *)

CONST EOS = 0C;

(* key (VDI.Key) *)

TYPE Key = SIGNEDWORD;

(* special keys *)

#if revers
TYPE SpecialKeys = (K15,K14,K13,K12,K11,K10,K9,K8,K7,K6,K5,K4,
                    KAlt,
                    KCtrl,
                    KLShift,
                    KRShift);
#else
TYPE SpecialKeys = (KRShift,
                    KLShift,
                    KCtrl,
                    KAlt,
                    K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15);
#endif
     SpecialKey = PACKEDSET OF SpecialKeys;

(* font header *)

TYPE HorizontalOffsetTable = ARRAY[0..255] OF UNSIGNEDWORD;
     CharacterOffsetTable = ARRAY[0..256] OF UNSIGNEDWORD;

#if revers
TYPE FontFlags = (F15,F14,F13,F12,F11,F10,F9,F8,F7,F6,F5,F4,
                  MonoSpaced,
                  ByteSwapped,
                  HorizontalOffset,
                  SystemFont);
#else
TYPE FontFlags = (SystemFont,
                  HorizontalOffset,
                  ByteSwapped,
                  MonoSpaced,
                  F4,F5,F6,F7,F8,F9,F10,F11,F12,F13,F14,F15);
#endif
     FontFlag = SET OF FontFlags;

     FontPtr = POINTER TO FontHdr;
     FontHdr = RECORD
                  FontId      : UNSIGNEDWORD;
                  Point       : UNSIGNEDWORD;
                  Name        : ARRAY[0..31] OF CHAR;
                  FirstADE    : UNSIGNEDWORD;
                  LastADE     : UNSIGNEDWORD;
                  Top         : UNSIGNEDWORD;
                  Ascent      : UNSIGNEDWORD;
                  Half        : UNSIGNEDWORD;
                  Descent     : UNSIGNEDWORD;
                  Bottom      : UNSIGNEDWORD;
                  MaxCharWidth: UNSIGNEDWORD;
                  MaxCellWidth: UNSIGNEDWORD;
                  LeftOffset  : UNSIGNEDWORD;
                  RightOffset : UNSIGNEDWORD;
                  Thicken     : UNSIGNEDWORD;
                  UlSize      : UNSIGNEDWORD;
                  Lighten     : UNSIGNEDWORD;
                  Skew        : UNSIGNEDWORD;
                  Flags       : FontFlag;
                  HorTable    : POINTER TO HorizontalOffsetTable;
                  OffTable    : POINTER TO CharacterOffsetTable;
                  DatTable    : ANYPOINTER;
                  FormWidth   : UNSIGNEDWORD;
                  FormHeight  : UNSIGNEDWORD;
                  NextFont    : FontPtr;
                  FontSeg     : UNSIGNEDWORD;
                END;

(* image file header and scan line *)

TYPE ImgHeader = RECORD
                   ImVersion  : UNSIGNEDWORD;
                   ImHeadLen  : UNSIGNEDWORD;
                   ImNPlanes  : UNSIGNEDWORD;
                   ImPatRun   : UNSIGNEDWORD;
                   ImPixWidth : UNSIGNEDWORD;
                   ImPixHeight: UNSIGNEDWORD;
                   ImScanWidth: UNSIGNEDWORD;
                   ImNLines   : UNSIGNEDWORD;
                 END;

     ScanLine = RECORD
                  Zero: UNSIGNEDWORD;
                  FF  : ANYBYTE;
                  Cnt : ANYBYTE;
                END;

(* extended bit image file header *)

     ColorModels = (RGB,CYM,HLS,Pantone);

     ColorIntensity = [0..1000];

     RGBList = RECORD
                 Red  : ColorIntensity;
                 Green: ColorIntensity;
                 Blue : ColorIntensity;
               END;

     XImgHeader = RECORD
                    ImVersion   : UNSIGNEDWORD;
                    ImHeadLen   : UNSIGNEDWORD;
                    ImNPlanes   : UNSIGNEDWORD;
                    ImPatRun    : UNSIGNEDWORD;
                    ImPixWidth  : UNSIGNEDWORD;
                    ImPixHeight : UNSIGNEDWORD;
                    ImScanWidth : UNSIGNEDWORD;
                    ImNLines    : UNSIGNEDWORD;
                    ImXId       : ARRAY[0..3] OF CHAR;
#if linear
#if fill_byte
                    FillByte: ANYBYTE;
#endif
#endif
                    ImColorModel: ColorModels;
#if intel
#if fill_byte
                    FillByte: ANYBYTE;
#endif
#endif
                    ImColorTable: ARRAY[0..0] OF UNSIGNEDWORD;
                  END;

(* VDI Colors *)

CONST White    = 0;
      Black    = 1;
      Red      = 2;
      Green    = 3;
      Blue     = 4;
      Cyan     = 5;
      Yellow   = 6;
      Magenta  = 7;
      LWhite   = 8;
      LBlack   = 9;
      LRed     = 10;
      LGreen   = 11;
      LBlue    = 12;
      LCyan    = 13;
      LYellow  = 14;
      LMagenta = 15;

      DWhite   = 8;
      DBlack   = 9;
      DRed     = 10;
      DGreen   = 11;
      DBlue    = 12;
      DCyan    = 13;
      DYellow  = 14;
      DMagenta = 15;

(* contrl array *)

TYPE ContrlArray = ARRAY[0..11] OF UNSIGNEDWORD;

     VectorBlock = RECORD
                     a : ARRAY[0..6] OF UNSIGNEDWORD;
                     v1: ANYPOINTER; (* [7..8]  *)
                     v2: ANYPOINTER; (* [9..10] *)
                     p : SIGNEDWORD; (* [11]    *)
                   END;

     ProcBlock = RECORD
                   a : ARRAY[0..6] OF UNSIGNEDWORD;
                   p1: PROC; (* [7..8]  *)
                   p2: PROC; (* [9..10] *)
                 END;

     ControlCase = [1..3];

     ControlBlock = RECORD
                      CASE: ControlCase OF
                        1:
                          c: ContrlArray;
                      | 2:
                          v: VectorBlock;
                      | 3:
                          u: ProcBlock;
                      ELSE
                        b: ANYPOINTER;
                      END;
                    END;

VAR contrl: ControlBlock;

(* intin and intout array *)

CONST MaxInput = 256; (* VGText() ! *)
      MaxOutput = 256; (* VRQString() ! *)

      (*
      Please query VDI for the maximum of integer input by calling
      VQExtnd(VDIHandle,TRUE,WorkOut).
      WorkOut[15] = -1 (or 65535) means that there is NO limit.
      *)

TYPE Integer = SIGNEDWORD;

     IntegerInputRange = [0..(MaxInput - 1)];
     IntegerOutputRange = [0..(MaxOutput - 1)];

     IntegerInput = ARRAY IntegerInputRange OF Integer;
     IntegerOutput = ARRAY IntegerOutputRange OF Integer;

VAR intin : IntegerInput;
    intout: IntegerOutput;

(* ptsin and ptsout array *)

CONST MinPoints = 128;
      MaxPoints = 1024; (* should be enough *)

      (*
      Please query WorkOut[14] for the maximum of point pairs after calling
      VQExtnd(VDIHandle,TRUE,WorkOut).
      *)

TYPE Point = UNSIGNEDWORD;

     PointsInputRange = [0..(MaxPoints * 2  - 1)];
     PointsOutputRange = [0..9]; (*  VQTFontInfo() ! *)

     PointsInput = ARRAY PointsInputRange OF Point;
     PointsOutput = ARRAY PointsOutputRange OF Point;

VAR ptsin : PointsInput;
    ptsout: PointsOutput;

(* TYPE Point = XY; *)

CONST MaxNDC = 32767;

TYPE XY = [0..MaxNDC];

(* fix31 notation for FSMGDOS and SpeedoGDOS *)

TYPE FIX31 = UNSIGNEDLONG;

(* VDI parameter block *)

TYPE PB = RECORD
            pblock: POINTER TO ControlBlock;
            iioff : POINTER TO IntegerInput;
            pioff : POINTER TO PointsInput;
            iooff : POINTER TO IntegerOutput;
            pooff : POINTER TO PointsOutput;
          END;

VAR v: PB;

(* VDI call functions *)

PROCEDURE vdi;

PROCEDURE CallVDI(opcode,nptsin,nintin,handle: UNSIGNEDWORD);

PROCEDURE CallEsc(escno,handle: UNSIGNEDWORD);

PROCEDURE CallVDIEsc(escno,nptsin,nintin,handle: UNSIGNEDWORD);

(* result (VDI.Result) *)

PROCEDURE Result(): SIGNEDWORD;

END VDI.
