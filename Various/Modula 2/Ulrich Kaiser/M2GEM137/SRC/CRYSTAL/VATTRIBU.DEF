DEFINITION MODULE VAttribute;

(*
VDI Attribute Functions.

UK __DATE__ __TIME__
*)

(*DEF_SWITCHES*)

FROM PORTAB IMPORT SIGNEDWORD,UNSIGNEDWORD,ANYWORD,ANYTYPE,UNSIGNEDLONG;

IMPORT VDI;

(* [V]DI: [S]et [Wr]iting [Mode] *******************************************)

TYPE WritingModes = (MdResvd,MdReplace,MdTrans,MdXOR,MdErase);

PROCEDURE VSWrMode(Handle: UNSIGNEDWORD;
                   Mode  : WritingModes);

(* [V]DI: [S]et [Color] Representation *************************************)

CONST White    = VDI.White;
      Black    = VDI.Black;
      Red      = VDI.Red;
      Green    = VDI.Green;
      Blue     = VDI.Blue;
      Cyan     = VDI.Cyan;
      Yellow   = VDI.Yellow;
      Magenta  = VDI.Magenta;
      LWhite   = VDI.LWhite;
      LBlack   = VDI.LBlack;
      LRed     = VDI.LRed;
      LGreen   = VDI.LGreen;
      LBlue    = VDI.LBlue;
      LCyan    = VDI.LCyan;
      LYellow  = VDI.LYellow;
      LMagenta = VDI.LMagenta;

      DWhite   = VDI.DWhite;
      DBlack   = VDI.DBlack;
      DRed     = VDI.DRed;
      DGreen   = VDI.DGreen;
      DBlue    = VDI.DBlue;
      DCyan    = VDI.DCyan;
      DYellow  = VDI.DYellow;
      DMagenta = VDI.DMagenta;

TYPE RGBList = VDI.RGBList;

PROCEDURE VSColor(Handle: UNSIGNEDWORD;
                  Index : UNSIGNEDWORD;
                  RGB   : RGBList);

(* [V]DI: [S]et Poly[L]ine [Type] ******************************************)

TYPE LineTypes = (LTResvd,
                  LTSolid,
                  LTLongDash,
                  LTDotted,
                  LTDashDot,
                  LTDashed,
                  LTDashDotDot,
                  LTUserDef);

CONST Solid    = LTSolid;
      LongDash = LTLongDash;
      Dot      = LTDotted;
      DashDot  = LTDashDot;
      Dash     = LTDashed;
      Dash2Dot = LTDashDotDot;
      UserLine = LTUserDef;

PROCEDURE VSLType(Handle: UNSIGNEDWORD;
                  Style : LineTypes);

(* [V]DI: [S]et [U]ser [D]efined [L]ine [Sty]le Pattern ********************)

PROCEDURE VSLUDSty(Handle : UNSIGNEDWORD;
                   Pattern: ANYWORD);

(* [V]DI: [S]et PolyLine [L]ine [Width] ************************************)

PROCEDURE VSLWidth(Handle: UNSIGNEDWORD;
                   Width : UNSIGNEDWORD);

(* [V]DI: [S]et Poly[L]ine [Color] Index ***********************************)

PROCEDURE VSLColor(Handle: UNSIGNEDWORD;
                   Index : UNSIGNEDWORD);

(* [V]DI: [S]et Poly[L]ine [Ends] ******************************************)

TYPE LineEnds = (LESquared,LEArrowed,LERounded);

CONST Squared = LESquared;
      Arrowed = LEArrowed;
      Rounded = LERounded;

PROCEDURE VSLEnds(Handle    : UNSIGNEDWORD;
                  BeginStyle: LineEnds;
                  EndStyle  : LineEnds);

(* [V]DI: [S]et Poly[M]arker [Type] ****************************************)

TYPE MarkerTypes = (MTResvd,
                    MTDot,
                    MTPlus,
                    MTAsterisk,
                    MTSquare,
                    MTDCross,
                    MTDiamond);

CONST PmDot       = MTDot;
      PmPlus      = MTPlus;
      PmAsterisk  = MTAsterisk;
      PmSquare    = MTSquare;
      PmDiagCross = MTDCross;
      PmDiamond   = MTDiamond;

PROCEDURE VSMType(Handle: UNSIGNEDWORD;
                  Symbol: MarkerTypes);

(* [V]DI: [S]et Poly[M]arker [Height] **************************************)

PROCEDURE VSMHeight(Handle: UNSIGNEDWORD;
                    Height: UNSIGNEDWORD);

(* [V]DI: [S]et Poly[M]arker [Color] Index *********************************)

PROCEDURE VSMColor(Handle: UNSIGNEDWORD;
                   Index : UNSIGNEDWORD);

(* [V]DI: [S]et [T]ext [Height] Absolute Mode ******************************)

PROCEDURE VSTHeight(    Handle    : UNSIGNEDWORD;
                        Height    : UNSIGNEDWORD;
                    VAR CharWidth : UNSIGNEDWORD;
                    VAR CharHeight: UNSIGNEDWORD;
                    VAR CellWidth : UNSIGNEDWORD;
                    VAR CellHeight: UNSIGNEDWORD): UNSIGNEDWORD;

(* [V]DI: [S]et [T]ext Height [Point]s Mode ********************************)

PROCEDURE VSTPoint(    Handle    : UNSIGNEDWORD;
                       Points    : UNSIGNEDWORD;
                   VAR CharWidth : UNSIGNEDWORD;
                   VAR CharHeight: UNSIGNEDWORD;
                   VAR CellWidth : UNSIGNEDWORD;
                   VAR CellHeight: UNSIGNEDWORD): UNSIGNEDWORD;

(* [V]DI: [S]et [T]ext [Rotation] ******************************************)

PROCEDURE VSTRotation(Handle: UNSIGNEDWORD;
                      Angle : UNSIGNEDWORD);

(* [V]DI: [S]et [T]ext [Font] **********************************************)

PROCEDURE VSTFont(Handle: UNSIGNEDWORD;
                  Font  : UNSIGNEDWORD);

(* [V]DI: [S]et [T]ext [Color] Index ***************************************)

PROCEDURE VSTColor(Handle: UNSIGNEDWORD;
                   Index : UNSIGNEDWORD);

(* [V]DI: [S]et Graphic [T]ext Special [Effects] ***************************)

#if revers
TYPE TextEffects = (Effect15,
                    Effect14,
                    Effect13,
                    Effect12,
                    Effect11,
                    Effect10,
                    Effect9,
                    Effect8,
                    Effect7,
                    Effect6,
                    Shadowed,
                    Outlined,
                    Underlined,
                    Slanted,
                    Lightened,
                    Thickened);
#else
TYPE TextEffects = (Thickened,
                    Lightened,
                    Slanted,
                    Underlined,
                    Outlined,
                    Shadowed,
                    Effect6,Effect7,Effect8,Effect9,Effect10,Effect11,
                    Effect12,Effect13,Effect14,Effect15);
#endif
     TextEffect = PACKEDSET OF TextEffects;

CONST Normal = TextEffect{};

CONST TxtNormal     = Normal;
      TxtThickened  = Thickened;
      TxtLight      = Lightened;
      TxtSkewed     = Slanted;
      TxtUnderlined = Underlined;
      TxtOutlined   = Outlined;
      TxtShadowed   = Shadowed;

PROCEDURE VSTEffects(Handle: UNSIGNEDWORD;
                     Effect: TextEffect);

(* [V]DI: [S]et Graphic [T]ext [Alignment] *********************************)

TYPE HorizontalAlignments = (TALeft,
                             TACenter,
                             TARight);

     VerticalAlignments = (TABaseline,
                           TAHalf,
                           TAAscent,
                           TABottom,
                           TADescent,
                           TATop);

TYPE HoriAlis = HorizontalAlignments;
     VertAlis = VerticalAlignments;

CONST AliLeft   = TALeft;
      AliCenter = TACenter;
      AliRight  = TARight;

      AliBase    = TABaseline;
      AliHalf    = TAHalf;
      AliAscent  = TAAscent;
      AliBottom  = TABottom;
      AliDescent = TADescent;
      AliTop     = TATop;

PROCEDURE VSTAlignment(    Handle : UNSIGNEDWORD;
                           HorIn  : HorizontalAlignments;
                           VertIn : VerticalAlignments;
                       VAR HorOut : HorizontalAlignments;
                       VAR VertOut: VerticalAlignments);

(* [V]DI: [S]et [F]ill [Interior] Index ************************************)

TYPE Interiors = (FISHollow,FISSolid,FISPattern,FISHatch,FISUserDef);

PROCEDURE VSFInterior(Handle: UNSIGNEDWORD;
                      Style : Interiors);

(* [V]DI: [S]et [F]ill [Style] Index ***************************************)

PROCEDURE VSFStyle(Handle: UNSIGNEDWORD;
                   Index : UNSIGNEDWORD);

(* [V]DI: [S]et [F]ill [Color] Index ***************************************)

PROCEDURE VSFColor(Handle: UNSIGNEDWORD;
                   Index : UNSIGNEDWORD);

(* [V]DI: [S]et [F]ill [Perimeter] Visibility ******************************)

PROCEDURE VSFPerimeter(Handle: UNSIGNEDWORD;
                       Vis   : BOOLEAN);

(* [V]DI: [S]et [U]ser [D]efined [F]ill [Pat]tern **************************)

PROCEDURE VSFUDPat(    Handle : UNSIGNEDWORD;
                   VAR FillPat: ARRAY OF ANYTYPE;
                       Planes : UNSIGNEDWORD);

(* [V]DI: [S]et [Gray] [Override] ******************************************)

PROCEDURE VSGrayOverride(Handle : UNSIGNEDWORD;
                         GrayVal: UNSIGNEDWORD);

(* [V]DI: [S]et [T]ext Cell Height By [Arb]itrary [P]oin[t]s ***************)

PROCEDURE VSTArbPt(    Handle    : UNSIGNEDWORD;
                       Point     : UNSIGNEDWORD;
                   VAR CharWidth : UNSIGNEDWORD;
                   VAR CharHeight: UNSIGNEDWORD;
                   VAR CellWidth : UNSIGNEDWORD;
                   VAR CellHeight: UNSIGNEDWORD): UNSIGNEDWORD;

PROCEDURE VSTArbPt32(    Handle    : UNSIGNEDWORD;
                         Point     : UNSIGNEDLONG;
                     VAR CharWidth : UNSIGNEDWORD;
                     VAR CharHeight: UNSIGNEDWORD;
                     VAR CellWidth : UNSIGNEDWORD;
                     VAR CellHeight: UNSIGNEDWORD): UNSIGNEDLONG;

(* [V]DI: [Set] [T]ext Cell Width [Size] By Arbitrary Points ***************)

PROCEDURE VSTSetSize(    Handle    : UNSIGNEDWORD;
                         Point     : UNSIGNEDWORD;
                     VAR CharWidth : UNSIGNEDWORD;
                     VAR CharHeight: UNSIGNEDWORD;
                     VAR CellWidth : UNSIGNEDWORD;
                     VAR CellHeight: UNSIGNEDWORD): UNSIGNEDWORD;

PROCEDURE VSTSetSize32(    Handle    : UNSIGNEDWORD;
                           Point     : UNSIGNEDLONG;
                       VAR CharWidth : UNSIGNEDWORD;
                       VAR CharHeight: UNSIGNEDWORD;
                       VAR CellWidth : UNSIGNEDWORD;
                       VAR CellHeight: UNSIGNEDWORD): UNSIGNEDLONG;

(* [V]DI: [S]et [T]ext [Skew] Mask *****************************************)

PROCEDURE VSTSkew(Handle: UNSIGNEDWORD;
                  Skew  : SIGNEDWORD): SIGNEDWORD;

(* [V]DI: [S]et Outline Font [T]ext [Kern]ing Mode *************************)

PROCEDURE VSTKern(    Handle: UNSIGNEDWORD;
                      TMode : UNSIGNEDWORD;
                      PMode : BOOLEAN;
                  VAR Tracks: UNSIGNEDWORD;
                  VAR Pairs : UNSIGNEDWORD);

(* [V]DI: [S]et Outline Font [T]ext [Width] ********************************)

PROCEDURE VSTWidth(    Handle    : UNSIGNEDWORD;
                       Width     : UNSIGNEDWORD;
                   VAR CharWidth : UNSIGNEDWORD;
                   VAR CharHeight: UNSIGNEDWORD;
                   VAR CellWidth : UNSIGNEDWORD;
                   VAR CellHeight: UNSIGNEDWORD);
END VAttribute.
