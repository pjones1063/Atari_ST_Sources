DEFINITION MODULE EvntMgr;

(*
AES Event Manager.

UK __DATE__ __TIME__
*)

(*DEF_SWITCHES*)

FROM PORTAB IMPORT ANYBYTE,ANYWORD,UNSIGNEDWORD,SIGNEDWORD,ANYTYPE,
                   UNSIGNEDLONG,ANYPOINTER;
FROM RcMgr  IMPORT GRect,GPnt;

IMPORT AES;

(* predefined messages *)

TYPE Messages = (ApMsg,      (* [Ap]plication [M]e[s]sa[g]e               *)

                 Msg1,Msg2,Msg3,Msg4,Msg5,Msg6,Msg7,Msg8,Msg9,

                 MnSelected, (* [M]e[n]u [Selected]                       *)

                 Msg11,Msg12,Msg13,Msg14,Msg15,Msg16,Msg17,Msg18,Msg19,

                 WMRedraw,   (* [W]indow [M]essage: [Redraw] Area         *)
                 WMTopped,   (* [W]indow [M]essage: Being [Topped]        *)
                 WMClosed,   (* [W]indow [M]essage: [Closed]              *)
                 WMFulled,   (* [W]indow [M]essage: [Fulled]              *)
                 WMArrowed,
                 WMHSlid,    (* [W]indow [M]essage: [H]orizontal [Slid]ed *)
                 WMVSlid,    (* [W]indow [M]essage: [V]ertical [Slid]ed   *)
                 WMSized,    (* [W]indow [M]essage: [Sized]               *)
                 WMMoved,    (* [W]indow [M]essage: [Moved]               *)
                 WMNewTop,   (* [W]indow [M]essage: [New] [Top]           *)

                 WMUntopped, (* [W]indow [M]essage: Being [Untopped]      *)
                 WMOnTop,    (* [W]indow [M]essage: [On] [Top]            *)
                 WMOffTop,
                 WMBottomed,
                 WMIconfy,
                 WMUniconfy,
                 WMAlliconfy,
                 WMToolbar,

                 Msg38,Msg39,

                 AcOpen,     (* [Ac]cessory message: [Open]               *)
                 AcClose,    (* [Ac]cessory message: [Close]              *)

                 Msg42,

                 WMIsTop,    (* MultiGEM *)

                 Msg44,Msg45,Msg46,Msg47,Msg48,Msg49,

                 CTUpdate,   (* GEM (= [C]rystal) desk[T]op messages      *)
                 CTMove,
                 CTNewTop,
                 CTSwitch,

                 Msg54,Msg55,Msg56,

                 ApResChg,   (* [Ap]plication [Res]olution [Ch]an[g]e     *)

                 Msg58,Msg59,

                 ShutCompleted,   (* [Shut]down [Completed]               *)
                 ResChgCompleted, (* [Res]olution [Ch]an[g]e [Completed]  *)

                 Msg62,

                 ApDragDrop, (* [Ap]plication [Drag] and [Drop] Protocol  *)

                 Msg64,Msg65,Msg66,Msg67,

                 ShExit,
                 ShStart,

                 Msg70,Msg71,

                 ShWDraw,

                 Msg73,Msg74,Msg75,Msg76,Msg77,Msg78,Msg79,

                 ChExit,     (* [Ch]ild [Exit]                            *)

                       Msg81,Msg82,Msg83,Msg84,Msg85,Msg86,Msg87,Msg88,Msg89,
                 Msg90,Msg91,Msg92,Msg93,Msg94,Msg95,Msg96,Msg97,Msg98,Msg99,

                 SpSend,     (* [Sp]ooler [Send]                          *)
                 SpAck,      (* [Sp]ooler [Ack]nowledge                   *)

                               Msg102,Msg103,Msg104,Msg105,Msg106,Msg107,Msg108,Msg109,

                 SVOnTop,
                 SVOffTop);

                            (* Msg112,Msg113,Msg114,Msg115,Msg116,Msg117,Msg118,Msg119,
                 Msg120,Msg121,Msg122,Msg123,Msg124,Msg125,Msg126,Msg127,Msg128,Msg129,
                 Msg130,Msg131,Msg132,Msg133,Msg134,Msg135,Msg136,Msg137,Msg138,Msg139,
                 Msg140,Msg141,Msg142,Msg143,Msg144,Msg145,Msg146,Msg147,Msg148,Msg149,
                 Msg150,Msg151,Msg152,Msg153,Msg154,Msg155,Msg156,Msg157,Msg158,Msg159,
                 Msg160,Msg161,Msg162,Msg163,Msg164,Msg165,Msg166,Msg167,Msg168,Msg169,
                 Msg170,Msg171,Msg172,Msg173,Msg174,Msg175,Msg176,Msg177,Msg178,Msg179,
                 Msg180,Msg181,Msg182,Msg183,Msg184,Msg185,Msg186,Msg187,Msg188,Msg189,
                 Msg190,Msg191,Msg192,Msg193,Msg194,Msg195,Msg196,Msg197,Msg198,Msg199,
                 Msg200,Msg201,Msg202,Msg203,Msg204,Msg205,Msg206,Msg207,Msg218,Msg209,
                 Msg210,Msg211,Msg212,Msg213,Msg214,Msg215,Msg216,Msg217,Msg228,Msg219,
                 Msg220,Msg221,Msg222,Msg223,Msg224,Msg225,Msg226,Msg227,Msg238,Msg229,
                 Msg230,Msg231,Msg232,Msg233,Msg234,Msg235,Msg236,Msg237,Msg248,Msg239,
                 Msg240,Msg241,Msg242,Msg243,Msg244,Msg245,Msg246,Msg247,Msg258,Msg249,
                 Msg250,Msg251,Msg252,Msg253,Msg254,Msg255
                 ); *)

CONST WMUntop = WMUntopped; (* MultiGEM *)

      PrFinish = WMBottomed;

      WMBackdropped = SpSend; (* MagiC *)

      ApTerm  = CTUpdate; (* MultiTOS *)
      ApTFail = CTMove;   (* MultiTOS *)

      CTKey   = CTSwitch;

      WMShaded   = 5758H; (* WINX 2.3 *)
      WMUnshaded = 5759H; (* WINX 2.3 *)

TYPE WindowMessages = [WMRedraw..WMBottomed];

(* window arrow messages following WMArrowed *)

TYPE ArrowMessages = (WAUpPage,
                      WADnPage,
                      WAUpLine,
                      WADnLine,
                      WALfPage,
                      WARtPage,
                      WALfLine,
                      WARtLine);

CONST                 WASubWin  = 1;
                      WAKeepWin = 2;

(* drag drop messages (MultiTOS) *)

TYPE DragDropMessages = (DDOK,        (* [D]rag [D]rop: [OK]                       *)
                         DDNAk,       (* [D]rag [D]rop: [N]egative [A]c[k]nowledge *)
                         DDExt,
                         DDLen,
                         DDTrash,
                         DDPrinter,
                         DDClipboard,
                         DD7,DD8);

(* message structure *)

TYPE ObjectIndex = AES.ObjectIndex;

     Key = AES.Key;

     MessageBlock = RECORD
                      CASE: BOOLEAN OF
                        TRUE:
#if fill_byte
#if linear
                          FillByte1: ANYBYTE;
#endif
#endif
                          Type: Messages;
#if fill_byte
#if intel
                          FillByte1: ANYBYTE;
#endif
#endif
                      | FALSE:
                          Kind: [0..32767];
                      END;
                      Id    : SIGNEDWORD;
                      Length: UNSIGNEDWORD;
                      CASE: Messages OF
                        MnSelected:
                          Title : UNSIGNEDWORD;
                          Item  : UNSIGNEDWORD;
                          Tree  : AES.TreePtr;
                          Parent: AES.ObjectIndex;
                      | WMRedraw..WMOffTop:
                          Handle: SIGNEDWORD;
                          CASE: WindowMessages OF
                            WMRedraw,WMSized,WMMoved:
                              Rect: GRect;
                          | WMArrowed:
#if fill_byte
#if linear
                              FillByte2: ANYBYTE;
#endif
#endif
                              Action: ArrowMessages;
#if fill_byte
#if intel
                              FillByte2: ANYBYTE;
#endif
#endif
                          | WMHSlid,WMVSlid:
                              Pos: UNSIGNEDWORD;
                          END;
                      | AcOpen:
#if ST
                          Resvd1: ANYWORD;
#endif
                          OpenId: UNSIGNEDWORD;
                      | AcClose:
                          CloseId: UNSIGNEDWORD;
(*
                      | CTKey:
                             : Key;
*)
                      | ApTerm:
                          ApId  : ANYWORD;
                          Resvd2: ANYWORD;
                          Reason: SIGNEDWORD;
                      | ApDragDrop:
                          Dest : SIGNEDWORD;
                          MPos : GPnt;
                          Shift: UNSIGNEDWORD;
                          Ext  : ARRAY[17..18] OF CHAR;
                      | ChExit:
                          ChId: SIGNEDWORD;
                          Code: SIGNEDWORD;
                      | Msg1:
                          Parm: ANYPOINTER;
                      ELSE
                        Array: ARRAY[3..7] OF UNSIGNEDWORD;
                      END;
                    END;
     MessagePtr = POINTER TO MessageBlock;

     MessageBuffer = ARRAY[0..7] OF ANYWORD;

(* alias *)

TYPE MesagBlk = MessageBlock;
     MesagPtr = MessagePtr;

     MesagBuf = MessageBuffer;

(* [Ev]e[nt] Manager: Wait For [Keyb]oar[d] Event, AES(20) *****************)

TYPE ScanWord = AES.ScanWord;

PROCEDURE EvntKeybd(): ScanWord;

(* [Ev]e[nt] Manager: Wait For [Button] Event, AES(21) *********************)

#ifdef FTLM2
TYPE MouseButtons = AES.MouseButtons;
#else
CONST MBLeft = AES.MBLeft;
      MBRight = AES.MBRight;
#endif

TYPE MouseButton = AES.MouseButton;

#ifdef FTLM2
TYPE SpecialKeys = AES.SpecialKeys;
#else
CONST KRShift = AES.KRShift;
      KLShift = AES.KLShift;
      KCtrl = AES.KCtrl;
      KAlt = AES.KAlt;
#endif

TYPE SpecialKey = AES.SpecialKey;

PROCEDURE EvntButton(    Clicks : UNSIGNEDWORD;
                         Mask   : MouseButton;
                         State1 : MouseButton;
                     VAR XY     : GPnt;
                     VAR State2 : MouseButton;
                     VAR Special: SpecialKey): UNSIGNEDWORD;

(* [Ev]e[nt] Manager: Wait For [Mouse] Event, AES(22) **********************)

CONST MoEnter = FALSE;
      MoExit  = TRUE;

PROCEDURE EvntMouse(    Flag   : BOOLEAN;
                        Rect   : GRect;
                    VAR XY     : GPnt;
                    VAR Button : MouseButton;
                    VAR Special: SpecialKey);

(* [Ev]e[nt] Manager: Wait For [Mes]s[ag]e Event, AES(23) ******************)

PROCEDURE EvntMesag(VAR PBuffer: ARRAY OF ANYTYPE);

(* [Ev]e[nt] Manager: Wait For [Timer] Event, AES(24) **********************)

PROCEDURE EvntTimer(LoCount: UNSIGNEDWORD;
                    HiCount: UNSIGNEDWORD);

(* [Ev]e[nt] Manager: Wait For [Multi]ple Events, AES(25) ******************)

#if revers
TYPE Events = (Mu15,Mu14,Mu13,
               MuPostEv,
               Mu11,Mu10,Mu9,Mu8,
               MuSysMesag,
               MuM3,
               MuTimer,
               MuMesag,
               MuM2,
               MuM1,
               MuButton,
               MuKeybd);
#else
TYPE Events = (MuKeybd,
               MuButton,
               MuM1,
               MuM2,
               MuMesag,
               MuTimer,
               MuM3,
               MuSysMesag,
               Mu8,Mu9,Mu10,Mu11,
               MuPostEv,
               Mu13,Mu14,Mu15);
#endif
     Event = PACKEDSET OF Events;

(*
PROCEDURE EvntMulti(    Flags   : Event;
                        Clicks  : UNSIGNEDWORD;
                        Mask    : MouseButton;
                        State   : MouseButton;
                        Mo1Flag : BOOLEAN;
                        Mo1Rect : GRect;
                        Mo2Flag : BOOLEAN;
                        Mo2Rect : GRect;
                    VAR Msg     : ARRAY OF ANYTYPE; (* avoiding ADR() *)
                        LoCount : UNSIGNEDWORD;
                        HiCount : UNSIGNEDWORD;
                    VAR XY      : GPnt;
                    VAR Button  : MouseButton;
                    VAR SpecRet : SpecialKey;
                    VAR KeybdRet: Key;
                    VAR ButRet  : UNSIGNEDWORD): Event;
*)

VAR EvntMulti: PROCEDURE(    Event,
                             UNSIGNEDWORD,
                             MouseButton,
                             MouseButton,
                             BOOLEAN,
                             GRect,
                             BOOLEAN,
                             GRect,
                         VAR ARRAY OF ANYTYPE,
                             UNSIGNEDWORD,
                             UNSIGNEDWORD,
                         VAR GPnt,
                         VAR MouseButton,
                         VAR SpecialKey,
                         VAR Key,
                         VAR UNSIGNEDWORD): Event;

(* [Ev]e[nt] Manager: Wait For Any [Event], AES(25) ************************)

TYPE MEvent = RECORD
       (* in *) EFlags  : Event;
       (* in *) EBClk   : UNSIGNEDWORD;
       (* in *) EBMsk   : MouseButton;
       (* in *) EBSt    : MouseButton;
#if fill_byte
#if linear
       (* in *) FillByte1: ANYBYTE;
#endif
#endif
       (* in *) EM1Flags: BOOLEAN;
#if fill_byte
#if intel
       (* in *) FillByte1: ANYBYTE;
#endif
#endif
       (* in *) EM1     : GRect;
#if linear
#if fill_byte
       (* in *) FillByte2: ANYBYTE;
#endif
#endif
       (* in *) EM2Flags: BOOLEAN;
#if intel
#if fill_byte
       (* in *) FillByte2: ANYBYTE;
#endif
#endif
       (* in *) EM2     : GRect;
#if not UNIX
                CASE: BOOLEAN OF
                  TRUE:
       (* in *)     ELoCount: UNSIGNEDWORD;
       (* in *)     EHiCount: UNSIGNEDWORD;
                | FALSE:
       (* in *)     ETime   : UNSIGNEDLONG; (* swap words if necessary *)
                END;
      (* out *) EMePBuf : MessagePtr; (* order has been changed here *)
      (* out *) EEvent  : Event; (* return of EvntEvent() *)
#else
      (* out *) EMePBuf : MessagePtr;
                CASE: BOOLEAN OF
                  TRUE:
       (* in *)     ELoCount: UNSIGNEDWORD;
       (* in *)     EHiCount: UNSIGNEDWORD;
                | FALSE:
       (* in *)     ETime   : UNSIGNEDLONG; (* swap words if necessary *)
                END;
#endif
      (* out *) EMXY    : GPnt;
      (* out *) EMB     : MouseButton;
      (* out *) EKS     : SpecialKey;
      (* out *) EKR     : Key;
      (* out *) EBR     : UNSIGNEDWORD;
#if linear
#if fill_byte
    (* X/GEM *) FillByte3: ANYBYTE;
#endif
#endif
    (* X/GEM *) EM3Flags: BOOLEAN;
#if intel
#if fill_byte
    (* X/GEM *) FillByte3: ANYBYTE;
#endif
#endif
    (* X/GEM *) EM3     : GRect;
    (* X/GEM *) Extra0  : ANYWORD;
    (* X/GEM *) ESMePBuf: MessagePtr;
    (* X/GEM *) Extra1  : UNSIGNEDLONG;
    (* X/GEM *) Extra2  : UNSIGNEDLONG;
              END;

VAR EvntEvent: PROCEDURE(VAR MEvent): Event;

(* [Ev]e[nt] Manager: Set Or Get [D]ouble [CLick] Speed, AES(26) ***********)

PROCEDURE EvntDClick(Rate  : UNSIGNEDWORD;
                     GetSet: BOOLEAN): UNSIGNEDWORD;

(***************************************************************************)

PROCEDURE evntmulti(    Flags   : Event;
                        Clicks  : UNSIGNEDWORD;
                        Mask    : MouseButton;
                        State   : MouseButton;
                        Mo1Flag : BOOLEAN;
                        Mo1Rect : GRect;
                        Mo2Flag : BOOLEAN;
                        Mo2Rect : GRect;
                    VAR Msg     : ARRAY OF ANYTYPE;
                        LoCount : UNSIGNEDWORD;
                        HiCount : UNSIGNEDWORD;
                    VAR XY      : GPnt;
                    VAR Button  : MouseButton;
                    VAR SpecRet : SpecialKey;
                    VAR KeybdRet: Key;
                    VAR ButRet  : UNSIGNEDWORD): Event;

PROCEDURE evntevent(VAR PMEvent: MEvent): Event;

END EvntMgr.