DEFINITION MODULE GEMAES;

(*
GEMAES Definitions.

UK __DATE__ __TIME__
*)

(*DEF_SWITCHES*)

FROM PORTAB IMPORT ANYBYTE,ANYWORD,ANYLONG,SIGNEDWORD,UNSIGNEDWORD,
                   UNSIGNEDLONG,SIGNEDBYTE,UNSIGNEDBYTE,
                   BYTESET,WORDSET,ANYPOINTER;

IMPORT AES,
       ApplMgr,
       EvntMgr,
       MenuMgr,
       ObjcMgr,
       FormMgr,
       GrafMgr,
       ScrpMgr,
       FSelMgr,
       WindMgr,
       RsrcMgr,
       ShelMgr,
       XGrfMgr;

TYPE GRect = AES.GRect;
     GPnt = AES.GPnt;

TYPE ScanWord = AES.ScanWord;

     Key = AES.Key;

TYPE SpecialKeys = AES.SpecialKeys;
#if no_enum_reexport
CONST KRShift = AES.KRShift;
      KLShift = AES.KLShift;
      KCtrl = AES.KCtrl;
      KAlt = AES.KAlt;
#endif
TYPE SpecialKey = AES.SpecialKey;

TYPE MouseButtons = AES.MouseButtons;
#if no_enum_reexport
CONST MBLeft =
      MBRight =
#endif
TYPE MouseButton = AES.MouseButton;

CONST Root = AES.Root;

      MaxObject = AES.MaxObject;

TYPE ObjectIndex = AES.ObjectIndex;

TYPE ObjectTypes = AES.ObjectTypes;
#if no_enum_reexport
CONST GBox = AES.GBox;
      GText = AES.GText;
      GBoxText = AES.GBoxText;
      GImage = AES.GImage;
      GUserDef
      GIBox
      GButton
      GBoxChar
      GString
      GFText
      GFBoxText
      GIcon
      GTitle
      GCIcon
#endif
TYPE ObjectFlags =
#if no_enum_reexport
CONST Selectable,
      Default,
      Exit,
      Editable,
      RButton
      LastOb
      TouchExit,
      HideTree,
      Indirect,
      Flag9,Flag10,Flag11,Flag12,Flag13,Flag14,Flag15);

TYPE ObjectFlag = AES.ObjectFlag;

CONST None = AES.None;

TYPE ObjectStates =
#if no_enum_reexport
CONST Selected,
      Crossed,
      Checked,
      Disabled,
      Outlined,
                     Shadowed,
                     WhiteBak,
                     Draw3D,
                     State8,State9,State10,State11,State12,State13,State14,State15);

     ObjectState = AES.ObjectState;

CONST Normal = AES.Normal;

CONST IBM = AES.IBM;
      Small = AES.Small;

TYPE TextAlignments =
#if
CONST TeLeft
TeRight
TeCntr

TYPE ObjectColors =
#if
CONST White,
                     Black,
                     Red,
                     Green,
                     Blue,
                     Cyan,
                     Yellow,
                     Magenta,
                     LWhite,
                     LBlack,
                     LRed,
                     LGreen,
                     LBlue,
                     LCyan,
                     LYellow,
                     LMagenta);

CONST DWhite   =
      DBlack   =
      DRed     =
      DGreen   =
      DBlue    =
      DCyan    =
      DYellow  =
      DMagenta =

TYPE ObjectField = AES.ObjectField;

CONST PatternShift =
      PatternOffset =

TYPE InsidePatterns =
#if
CONST IPHollow = AES.IPHollow;
      IP1Patt,
      IP2Patt,
      IP3Patt,
      IP4Patt,
      IP5Patt,
      IP6Patt,
      IPSolid
#endif
CONST ModeShift =
      ModeOffset =

TYPE InsideModes =
(IPTrans,
IPErase);

CONST TextShift =
      TextOffset =

CONST FrameShift =
      FrameOffset =

CONST MaxLen = AES.MaxLen;

TYPE StringRange = AES.StringRange;

     String = AES.String;

     StringPtr = AES.StringPtr;

TYPE TEdInfo = AES.TEdInfo;

     TEdInfoPtr = AES.TEdInfoPtr;

TYPE IconColor =

CONST MaskShift =

CONST DataShift =

TYPE IconBlk = AES.IconBlk;

     IconBlkPtr = AES.IconBlkPtr;

TYPE CIconPtr = AES.CIconPtr;

     CIcon = AES.CIcon;

     CIconBlk = AES.CIconBlk;

     CIconBlkPtr = AES.CIconBlkPtr;

TYPE BitBlk = AES.BitBlk;

     BitBlkPtr = AES.BitBlkPtr;

TYPE UserBlkPtr = AES.UserBlkPtr;

     ApplBlkPtr = AES.ApplBlkPtr;

     ExtensionPtr =

     ObjectSpec = AES.ObjectSpec;

     ObjectExtension = AES.ObjectExtension;

CONST Nil = AES.Nil;

TYPE ObjectPtr = AES.ObjectPtr;

TYPE Object = AES.Object;

     TreePtr = AES.TreePtr;

TYPE UserDefParm = AES.UserDefParm;

     ParmBlk = AES.ParmBlk;

     UserDefFunc = AES.UserDefFunc;

     UserDefCode = AES.UserDefCode;

     UserDefBlk = AES.UserDefBlk;

     UserBlk = AES.UserBlk;

     ApplBlk = AES.ApplBlk;

TYPE ControlArray =

VAR Control: ControlArray;

CONST MaxTree = AES.MaxTree;

TYPE TreeIndex = AES.TreeIndex;

     TrPtr = AES.TrPtr;

     RsHdr = AES.RsHdr;

     RsPtr = AES.RsPtr;

     GlobalBlk = AES.GlobalBlk;

VAR Global: GlobalBlk;

TYPE Integer = AES.Integer;

     IntegerInput =
     IntegerOutput =

VAR IntIn: IntegerInput;
    IntOut: IntegerOutput;

TYPE Address = ANYPOINTER;
     AddressArray = ARRAY[0..(MaxAddress - 1)] OF Address;

VAR Addr: AddressArray;

TYPE AESPB = RECORD

VAR c: AESPB;

#if Seimet
PROCEDURE crystal;
#else
PROCEDURE crystal(FuncNo,NIntIn,NIntOut,NAddrIn: UNSIGNEDWORD);
#endif

#if proc_const
CONST Error = AES.Error;
#else
VAR Error: PROCEDURE(): BOOLEAN;
#endif

PROCEDURE Version(): UNSIGNEDWORD;

VAR ApplInit: PROCEDURE(): SIGNEDWORD;

CONST ScrMgr = ApplMgr.ScrMgr;

#if proc_const
CONST ApplRead = ApplMgr.ApplRead;
#else
VAR ApplRead: PROCEDURE(SIGNEDWORD,UNSIGNEDWORD,VAR ARRAY OF ANYTYPE): BOOLEAN;
#endif

#if proc_const
CONST ApplWrite = ApplMgr.ApplWrite;
#else
VAR ApplWrite: PROCEDURE(SIGNEDWORD,UNSIGNEDWORD,VAR ARRAY OF ANYTYPE);
#endif

#if proc_const
CONST ApplFind = ApplMgr.ApplFind;
#else
PROCEDURE ApplFind(ANYPOINTER): SIGNEDWORD;
#endif

TYPE RecordEvents = ApplMgr.RecordEvents;
#if no_enum_reexport
CONST EvTimer,
      EvButton,
      EvMouse,
      EvKeybd =
#endif
TYPE EventRecord = ApplMgr.EventRecord;

CONST MaxEvent = ApplMgr.MaxEvent;

TYPE EventTape = ApplMgr.EventTape;
     TapePtr = ApplMgr.TapePtr;

PROCEDURE ApplTPlay(TapePtr,EventTape,UNSIGNEDWORD);

PROCEDURE ApplTRecord(TapePtr,EventTape): EventTape;

PROCEDURE ApplBVSet(WORDSET,WORDSET);

PROCEDURE ApplYield;

PROCEDURE ApplSearch(    Mode: UNSIGNEDWORD;
                     VAR Name: ARRAY OF CHAR;
                     VAR Type: UNSIGNEDWORD;
                     VAR Id  : UNSIGNEDWORD): BOOLEAN;

VAR ApplExit: PROCEDURE();

PROCEDURE applinit(): SIGNEDWORD;

PROCEDURE applexit;

TYPE Messages = (ApMsg,      (* [Ap]plication [M]e[s]sa[g]e               *)

                 MnSelected, (* [M]e[n]u [Selected]                       *)

                 WMRedraw,   (* [W]indow [M]essage: [Redraw] Area         *)
                 WMTopped,   (* [W]indow [M]essage: [Topped]              *)
                 WMClosed,
                 WMFulled,
                 WMArrowed,
                 WMHSlid,    (* [W]indow [M]essage: [H]orizontal [Slid]ed *)
                 WMVSlid,    (* [W]indow [M]essage: [V]ertical [Slid]ed   *)
                 WMSized,
                 WMMoved,
                 WMNewTop,
                 WMUntopped,
                 WMOnTop,
                 WMOffTop,

                 PrFinish,

                 AcOpen,     (* [Ac]cessory message: [Open]               *)
                 AcClose,    (* [Ac]cessory message: [Close]              *)

                 CTUpdate,   (* GEM (= [C]rystal) desk[T]op messages      *)
                 CTMove,
                 CTNewTop,
                 CTSwitch,

                 ApResChg,   (* [Ap]plication [Res]olution [Ch]an[g]e     *)

                 ShutCompleted,
                 ResChgCompleted,

                 ChExit,     (* [Ch]ild [Exit]                            *)

                 SpSend,     (* [Sp]ooler [Send]                          *)
                 SpAck,      (* [Sp]ooler [Ack]nowledge                   *)

                 SVOnTop,
                 SVOffTop,

CONST ApTerm  =
      ApTFail =
      CTKey   =

TYPE WindowMessages = EvntMgr.WindowMessages;

TYPE ArrowMessages = (WAUpPage,
                      WADnPage,
                      WAUpLine,
                      WADnLine,
                      WALfPage,
                      WARtPage,
                      WALfLine,
                      WARtLine);

CONST WASubWin = EvntMgr.WASubWin;
      WAKeepWin = EvntMgr.WAKeepWin;

TYPE MessageBlock = EvntMgr.MessageBlock;
     MessagePtr = EvntMgr.MessagePtr;

     MessageBuffer =

PROCEDURE EvntKeybd(): ScanWord;

PROCEDURE EvntButton(UNSIGNEDWORD,MouseButton,MouseButton;
                     VAR XY     : GPnt;
                     VAR State2 : MouseButton;
                     VAR Special: SpecialKey): UNSIGNEDWORD;

CONST MoEnter = EvntMgr.MoEnter;
      MoExit = EvntMgr.MoExit;

PROCEDURE EvntMouse(    Flag   : BOOLEAN;
                        Rect   : GRect;
                    VAR XY     : GPnt;
                    VAR Button : MouseButton;
                    VAR Special: SpecialKey);

PROCEDURE EvntMesag(VAR PBuffer: ARRAY OF ANYTYPE);

PROCEDURE EvntTimer(LoCount: UNSIGNEDWORD;
                    HiCount: UNSIGNEDWORD);

TYPE Events = (MuKeybd,
               MuButton,
               MuM1,
               MuM2,
               MuMesag,
               MuTimer,
               MuM3,
               MuSysMesag,
               Mu8,Mu9,Mu10,Mu11,
               MuPostEv,
               Mu13,Mu14,Mu15);

     Event = EvntMgr.Event;

PROCEDURE EvntMulti(    Flags   : Event;
                        Clicks  : UNSIGNEDWORD;
                        Mask    : MouseButton;
                        State   : MouseButton;
                        Mo1Flag : BOOLEAN;
                        Mo1Rect : GRect;
                        Mo2Flag : BOOLEAN;
                        Mo2Rect : GRect;
                    VAR Msg     : ARRAY OF ANYTYPE; (* avoiding ADR() *)
                        LoCount : UNSIGNEDWORD;
                        HiCount : UNSIGNEDWORD;
                    VAR XY      : GPnt;
                    VAR Button  : MouseButton;
                    VAR Special : SpecialKey;
                    VAR KeyBdRet: Key;
                    VAR ButRet  : UNSIGNEDWORD): Event;

TYPE MEvent = EvntMgr.MEvent;

PROCEDURE EvntEvent(VAR PMEvent: MEvent): Event;

PROCEDURE EvntDClick(Rate  : UNSIGNEDWORD;
                     GetSet: BOOLEAN): UNSIGNEDWORD;
<to be continued>
END GEMAES.
