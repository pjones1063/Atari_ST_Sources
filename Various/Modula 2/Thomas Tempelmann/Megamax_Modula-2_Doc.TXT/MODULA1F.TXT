1.1  öber Megamax Modula                                                  1 - 1
________________________________________________________


1.   EinfÅhrung

Das erste Kapitel dieses Handbuchs soll Ihnen einen öberblick Åber Megamax
Modula-2 und den Inhalt dieser Dokumentation geben. Wenn Sie Ihre System~
disketten gerade ausgepackt haben und den ersten Versuchen entgegenfiebern,
lesen Sie bitte auf jeden Fall Abschnitt 1.2. Mîchten Sie sich erst Åber Modula-2
und die Megamax-Implementation informieren, dann finden Sie hoffentlich das
ganze Kapitel 1 interessant.


1.1    öber Megamax Modula

Modula-2 ist eine moderne Programmiersprache, in der Prof. Niklaus Wirth
das  bewÑhrte  Konzept  von  Pascal  durch  leistungsfÑhige  Erweiterungen
ergÑnzte. Das Modulkonzept erlaubt die Realisierung und Pflege auch groûer
SoftwareProjekte; die UnterstÅtzung von Prozessen und die Mîglichkeiten der
maschinennahen  Programmierung  erschlieûen  Modula-2  neue  Anwendungs~
gebiete; eine systematische Syntax erleichtert das Erlernen der Sprache.

Megamax  Modula  ist  eine  moderne  Implementation  dieser  Sprache:  Der
schnelle Ein-Pass-Compiler ist zusammen mit Editor und Debugger Åber eine
komfortable GEM-Shell zu bedienen. Er hilft dem AnfÑnger beim problemlosen
Einstieg in Modula-2 und bietet dem Kînner ein leistungsfÑhiges Entwicklungs~
werkzeug. Der Compiler erfÅllt nicht nur den vollen Standard nach Wirth (PIM,
3.  Auflage)  sondern  verfÅgt  auch  schon  Åber  viele  Erweiterungen  des
kommenden ISO-Standards fÅr Modula-2 (mehr dazu in Kap. 3.1!). Er nutzt
den Mathe-Koprozessor (FPU) sowohl im Atari ST als auch im Atari TT.

Auf Åberholte Konzepte, wie z.B. separate Assembler- und LinkerlÑufe, wurde
verzichtet.   Statt   dessen   unterstÅtzt   Megamax   Modula   durch   echtes
Loadtime  Linking  der  Module  (wie  auf  der  Modula-Maschine  "Lilith"  von
N.  Wirth,  bzw.,  viel  besser!)  die  Benutzung  groûer  Modulbibliotheken.  Die
mitgelieferte  umfangreiche  Systembibliothek  (mehr  als  110  Module)  gewÑhrt
bereits  umfassenden,  komfortablen  Zugriff  auf  alle  Systemfunktionen  Ihres
Atari ST/TT (Dateisystem, BIOS, GEM) und viele zusÑtzliche Mîglichkeiten.
SelbstverstÑndlich kînnen Sie auch effiziente Accessory-Programme mit dem
optimierenden Linker erstellen.

Als Teil des Megamax Modula-Systems erhalten Sie weiterhin zwei Editoren
(einen GEM-Editor und einen sehr kompakten, schnellen Editor, der allerdings
etwas mehr Eingewîhnung braucht), einen interaktiven Modula-Debugger und
ein Resource Construction Program zur Definition von Resource-Dateien fÅr
Ihre GEM-Anwendungen. Alle Komponenten arbeiten unter der  Kontrolle  der
GEM-BenutzeroberflÑche zusammen.

Eine ausfÅhrlichere Diskussion der - vielleicht fÅr Sie neuen - Konzepte der
ModularitÑt und des Loadtime Linking finden Sie im Kapitel 1.4.
1.2 öber dieses Handbuch                                                   1 - 2
________________________________________________________


1.2   öber dieses Handbuch

Dieses  Handbuch  erklÑrt  Ihnen  den  Umgang  mit  dem  Megamax  Modula-2
Entwicklungssystem. Das 1. Kapitel, in dem Sie gerade lesen, soll Ihnen einen
ersten öberblick Åber die Sprache Modula-2 und das Megamax-System geben.
Im 2. Kapitel finden Sie dann alle ErlÑuterungen zur Bedienung des Systems,
die Sie zum Programmieren in Modula brauchen. Gleich zu Beginn von Kapitel 2
erfahren Sie auch, wie Sie auf dem kÅrzesten Weg zu Ihren ersten Experimen~
ten mit Megamax Modula kommen.

Als Modula-Programmierer  wird  Sie  auûerdem  das  Kapitel  5  interessieren.
Dort wird die leistungsfÑhige Modulbibliothek beschrieben, die Sie mit Ihrem
Megamax Modula-2 erhalten haben. Schlieûlich sollten Sie sich einmal Kapitel
3.1 ansehen; dort wird verraten, welche Besonderheiten die Megamax-Implemen~
tation aufweist.

Die weiteren Kapitel dieses Buchs wenden sich vor allem an den fortgeschritten~
en Anwender. Wenn Sie sich der Systemprogrammierung mit Megamax Modula
zuwenden und dazu auch den integrierten Assembler verwenden wollen, finden
Sie in Kapitel 4 Informationen Åber das 'Innenleben' Ihres Modula-Systems und
den Umgang mit dem 68000 Assembler.

Im Anhang finden Sie vor allem Informationen zum Nachschlagen  -  interne
Datenformate,  Fehlermeldungen,  Compileroptionen...  Auûerdem  enthÑlt  der
Anhang A.6 eine ErlÑuterung der Backus-Naur-Notation. Falls Sie diese Notation
zur Beschreibung der Modula-Syntax noch nicht kennen, sollten Sie sich diese
Seite bald ansehen.

Eines  allerdings  will  dieses  Handbuch  nicht  sein:  Eine  EinfÅhrung  in  die
Programmiersprache Modula-2. Vielleicht haben Sie schon einiges Åber Modula
gelesen?  Dann  kînnen  wir  nur  noch  viel  Spaû  beim  Ausprobieren  Ihrer
Kenntnisse mit dem Megamax Modula-System wÅnschen. Wenn Sie dagegen
noch nichts Åber Modula-2 wissen, sollten Sie zusÑtzlich zu diesem Buch ein
Modula-Lehrbuch  zur  Hand  haben.  Im  folgenden  Abschnitt  stellen  wir  eine
kleine Auswahl empfehlenswerter BÅcher vor.
1.3 Kurze Modula-Biliographie                                               1 - 3
________________________________________________________


1.3   Kurze Modula-Bibliographie

Wenn Sie Modula-2 erst lernen oder als Modula-Kenner noch ein Nachschlage~
werk suchen, sollten Sie sich das  eine  oder  andere  der  folgenden  BÅcher
einmal  ansehen.  WÑhrend  Modula-2  zunehmend  Verbreitung  findet,  wÑchst
auch die Auswahl an Modula-Literatur stÑndig - unsere Vorschlagsliste kann
daher nicht vollstÑndig sein.


Niklaus Wirth: Programmieren in Modula-2

Springer Verlag, 3. Auflage

Das 'offizielle' Modula-Buch vom Vater der Sprache selbst. Es besteht aus
zwei Teilen: Der erste Abschnitt ist ein Programmierkurs, der alle Modula~
Konzepte vorstellt. Der Kurs ist auf Leser mit geringen Vorkenntnissen zuge~
schnitten;  erfahrene  Pascal-Programmierer  werden  sich  in  vielen  Kapiteln
langweilen.

Daran schlieût sich als zweiter Teil der 'Modula-Report' an.  Dort  soll  eine
vollstÑndige Definition der Sprache gegeben werden; die Darstellung ist allerdings
recht knapp und  gibt  Gelegenheit  zu  MiûverstÑndnissen.  Zum  Nachschlagen
eignet sich die deutsche öbersetzung des  Buchs  dank  ihres  umfangreichen
Stichwortverzeichnisses recht gut.

Es existiert auch noch eine vierte Auflage des Buchs, die jedoch von uns nicht
empfohlen werden kann. Sie enthÑlt veraltete Passagen aus der ersten Auflage
und widersprÅchliche Beschreibungen zwischen den beiden Teilen. Wirth  hat
hier   auûerdem   einige   einschneidende   VerÑnderungen   an   der   Sprache
vorgenommen, die von den meisten Modula-Anbietern und -Anwendern nicht
mehr unterstÅtzt werden. Mehr dazu im Kapitel 3.


Dal Cin/Lutz/Risse: Programmierung in Modula-2

Teubner Verlag, 2. Auflage 1986

Ein Lehrbuch, das in drei Teilen zunÑchst die Grundlage der Sprache vorstellt
und dann ausfÅhrlich auf die neuen Modula-Konzepte eingeht: modulare Program~
mierung und parallele Bearbeitung von Prozessen. Der eilige und Pascal-kundige
Leser findet zu Beginn der Grundlagen-Kapitel jeweils eine Zusammenfassung,
die die Unterschiede zu Pascal herausstellt.

Beispiele und Aufgaben helfen beim Lernen; in den spÑteren Kapiteln wird auch
anspruchsvolleres Wissen verstÑndlich dargestellt. Ein ausfÅhrliches Stichwort~
verzeichnis macht das Buch  auch  zu  einem  guten  Nachschlagewerk.  Einige
Minuspunkte sollen aber nicht verschwiegen werden:
1.3 Kurze Modula-Biliographie                                               1 - 4
________________________________________________________


Die BerÅcksichtigung der neuen Modula-Definition in der zweiten Auflage wurde
leider nicht konsequent durchgehalten - gelegentliche 'RÅckfÑlle' in den alten
Standard, speziell in den Beispielen, sorgen fÅr Verwirrung. Auûerdem  sind
eine Reihe von Beispielen speziell auf das von den Autoren benutzte UNIX-System
zugeschnitten, ohne daû das immer klar gesagt wird.


Richard Gleaves: Modula fÅr Pascal-Programmierer

Springer Verlag 1985

Der Titel verrÑt bereits, an wen sich das Buch wendet: Programmierer mit
Pascal-Erfahrung, die auf Modula-2 umsteigen wollen und sich fÅr énderungen
und zusÑtzliche Mîglichkeiten dieser Sprache interessieren.

Wenn Sie zu diesem Kreis gehîren, ist  'Modula  fÅr  Pascal-Programmierer'
unbedingt empfehlenswert: Gleaves stellt die neuen Konzepte von Modula klar
heraus, ohne die Grundlagen zu wiederholen, die Ihnen von Pascal her gelÑufig
sind.

Einen kleinen Nachteil hat auch dieses Buch: Als einziges verschweigt es die
énderungen des Modula-Standards vîllig. Wenn Sie also von R. Gleaves Modula
lernen, sehen Sie sich bitte auch das Kapitel 3.1 des Megamax-Handbuchs an.


Stefan DÅrholt, Jochem Schnur: Atari ST Modula-2 Programmierhandbuch

Markt & Technik Verlag 1990

Dies ist ein Modula-Buch speziell fÅr Atari ST-Anwender. Es umfaût ca. 500
Seiten,  enthÑlt  zwei  Disketten  mit  Quelltexten  und  Programmen,  und  alle
Beispielprogramme  wurden  mit  dem  Megamax-Modula-System  erstellt.  Die
Beispiele sind praxisnah, es enthÑlt Vergleiche der wichtigsten Modula-Systeme
auf  dem  Atari  ST  und  Informationen  zum  ISO-Standard,  ein  Kapitel  zur
Assembler-Programmierung ist auch enthalten. Somit stellt dieses Werk eine
gute ErgÑnzung zu Megamax-Modula dar.

Es existiert noch ein weiteres Buch zu Modula-2 auf dem Atari ST. Es heiût
"MODULA 2" (Heim Verlag 1990, Autor: R. Morgenstern). Wir kînnen es Ihnen
nicht  so  sehr  empfehlen.  Es  bietet  trotz  seiner  Dicke  lÑngst  nicht  den
Informationsgehalt des vorher genannten Werkes. Lediglich die EinfÅhrung in
die  Grundidee  des  Programmierens  ist  hier  ausfÅhrlicher.  Am  besten,  sie
gehen in eine Buchhandlung und vergleichen beide BÅcher kurz. Der Unter~
schied wird Ihnen ins Auge springen!
1.3 Kurze Modula-Biliographie                                               1 - 5
________________________________________________________


Dieter u. JÅrgen Geiû: Softwareentwicklung auf dem Atari ST

HÅthig Verlag 1986

öberraschung: Dies ist gar kein Modula-Buch! Wo wir aber gerade bei den Li~
teraturtips sind, wollen wir nicht versÑumen, auf dieses Buch hinzuweisen.

Wer in die Programmierung des GEM einen tieferen Einblick gewinnen will, fin~
det hier die vollstÑndige Beschreibung aller Datenstrukturen und Routinen. Bei~
spiele erleichtern das VerstÑndnis dieser komplexen BenutzeroberflÑche.

Eine EinfÅhrung in die GEM-Programmierung, speziell mit den Module der Me~
gamax Bibliothek, finden Sie aber auch im Kapitel 5 dieses Handbuchs.


Dieter u. JÅrgen Geiû: Vom AnfÑnger zum GEM-Profi

HÅthig Verlag 1990

Dies  ist  ein  weiteres  Buch  der  Autoren,  das  noch  mehr  Einblicke  in  die
GEM-Programmierung   vermittelt.   So   wird   beispielsweise   gezeigt,   wie
"saubere", portable GEM-Programmierung aussieht, damit die Programme auch
noch auf dem GEM des IBM-PC laufen, und wie MenÅleisten auch in einzelnen
Fenstern  (sehr  praktisch  fÅr  Accessories)  dargestellt  werden  kînnen.  Auf
einer Diskette werden die gezeigten Routinen als Quelltext mitgeliefert (bisher
leider nur in der Sprache C).


Jankowski, Rabich, Reschke: Das Atari-ST Profibuch

Sybex Verlag

Dies  ist  ebenfalls  kein  Modula-Buch.  Aber  was  das  vorige  Buch  fÅr  die
GEM-Programmierung ist, stellt dieses  fÅr  die  systemnahe  Programmierung
dar. Im deutschsprachigen Raum gilt es schlechthin als Referenz zu allem, das
Atari  USA  selbst  festzulegen  versÑumte.  FÅr  Programmierer,  die  den
Durchblick  brauchen,  ist  dieses  Buch  unverzichtbar.  Es  dokumentiert  alle
Systemvariablen und Betriebssystemaufrufe ausfÅhrlich, bietet tiefe Einblicke in
die  Hardware  aller  Atari  ST-Modelle  und  ist  immer  up-to-date  durch
regelmÑûige, korrigierte und erweiterte Neuauflagen. Zur Zeit umfaût das Buch
ca. 1000 Seiten.
1.4 Megamax Modula: das Konzept                                          1 - 6
________________________________________________________


1.4  Megamax  Modula:  das  Konzept


Definitions- und Implementationsmodule

Wenn Sie schon mal das Listing eines Modula-Programms gesehen haben, ist
Ihnen (als Pascal-Kenner?) vielleicht aufgefallen, daû das Programm im Kopf
nicht als 'PROGRAM', sondern als 'MODULE' bezeichnet wird. Das ist offenbar
noch nicht besonders revolutionÑr und bestimmt nicht der Grund, warum die
ganze Sprache 'Modula' heiût...

Interessanter sind da schon die folgenden Zeilen des Programms: Jede Menge
'IMPORT'-Anweisungen, mit denen Objekte aus anderen Modulen dem Compiler
bekanntgemacht  werden.  Diese  anderen  Module,  die  Objekte  (Prozeduren,
Variablen, Typen, Konstanten) nach auûen zur VerfÅgung  stellen,  gehorchen
besonderen Regeln - und die sind in Modula so  konsequent  und  funktionell
ausgefallen wie bisher in keiner anderen Programmiersprache.

Zu jedem Modul, das Objekte nach auûen bereitstellt (sie 'exportiert'), gehîrt
ein spezielles Definitionsmodul. Darin werden exportierte Typen, Konstanten und
Variablen deklariert; bei exportierten Prozeduren wird aber nur der Prozedurkopf
mit den Parametern angegeben. Wenn der Compiler ein Programm Åbersetzt,
das diese Objekte benutzt ('importiert'), kann er mit Hilfe der Informationen
aus  dem  Definitionsmodul  ÅberprÅfen,  ob  die  importierten  Objekte  richtig
benutzt werden. Der Aufruf einer importierten Prozedur mit falschen Para~
metern, der in anderen Programmiersprachen mit 'behelfsmÑûigen' Bibliotheks~
systemen zu  unerklÑrlichen  Fehlfunktionen  oder  AbstÅrzen  fÅhrt,  kann  also
schon beim Compilieren erkannt werden!

Das  eigentliche  Implementationsmodul,  in  dem  die  exportierten  Prozeduren
ausprogrammiert sind, braucht der Compiler dagegen nicht zu kennen, um den
korrekten Aufruf zu ÅberprÅfen. Erst zur AusfÅhrung des Programms wird es
benîtigt. Insbesondere ist es erlaubt, die Implementation zu Ñndern (Korrekturen
oder Optimierungen) - solange die Definition die gleiche bleibt, braucht das
Programm,  das  so  eine  Prozedur  benutzt,  nicht  einmal  neu  Åbersetzt  zu
werden.
1.4 Megamax Modula: das Konzept                                          1 - 7
________________________________________________________


Loadtime Linking

Wenn Sie Ihr Programm erfolgreich Åbersetzt haben, erwarten die Åblichen
Compiler-Systeme noch, daû Sie einen sogenannten Linker starten. Dieser hat
die  Aufgabe,  die  Åbersetzte  Version  Ihres  Programmes  mit  den  benutzten
Teilen der Bibliothek zu kombinieren. Der Linker erzeugt dann eine grîûere
Codedatei, die alle benîtigten Komponenten zusammen enthÑlt; das Programm
kann dann endlich ausgefÅhrt werden.

Dieses gÑngige Verfahren hat Nachteile: Der Zyklus 'öbersetzen - Linken -
Ausprobieren - Korrigieren - öbersetzen ...' ist in der Entwicklungsphase recht
langwierig. Auûerdem enthÑlt jedes lauffÑhige Programm groûe Teile der Biblio~
thek als Kopie. Das belegt nicht nur unnîtig Speicherplatz auf der Diskette,
sondern fÅhrt vor allem dann zu Problemen, wenn  Sie  Teile  der  Bibliothek
selbst entwickelt haben und weiterhin pflegen wollen: öbersetzte Programme
enthalten dann weiterhin alte (fehlerhafte?) Versionen der Bibliotheksmodule.

Megamax Modula bietet Ihnen daher ein anderes Verfahren: Erst direkt beim
Starten eines Moduls werden die zusÑtzlich benîtigten (importierten) Module
angebunden. Der Loader, der Bestandteil der Megamax-Shell ist, erledigt das
praktisch unmerklich und ohne von Ihnen weitere Angaben zu erfragen. FÅr die
meisten Anwenderprogramme sind (auûer dem Laden des Moduls selbst) keine
zusÑtzlichen  Diskettenzugriffe  erforderlich,  um  die  importierten  Module  zu
laden: Alle wichtigen Ein-/Ausgabefunktionen und viele weitere Prozeduren sind
bereits als Teil der Shell im Hauptspeicher prÑsent und  kînnen  von  Ihrem
Modul mitbenutzt werden.

Der Entwicklungszyklus besteht in der Megamax Shell also nur aus 'öbersetzen
- Testen - Korrigieren'. Falls Sie Bibliotheksmodule nutzen, die nicht schon in
der Shell integriert sind, genÅgt dem Modula-System die IMPORT-Anweisung in
Ihrem Text, um auch diese Module beim Start des Hauptprogramms automatisch
nachzuladen und anzubinden. Und sogar wenn Sie ein Bibliotheksmodul Ñndern
und neu Åbersetzen, kînnen alle Programme, die dieses  Modul  importieren,
weiterhin direkt gestartet werden - ohne neue öbersetzung, ohne Linkerlauf.
1.4 Megamax Modula: das Konzept                                          1 - 8
________________________________________________________


Benutzung des Linkers

Nachdem wir eben ausfÅhrlich Åber Linker gelÑstert haben, mÅssen wir jetzt
gestehen, daû wir fÅr Megamax Modula auch einen haben. öber seine Handha~
bung informiert Sie der Abschnitt 2.6 (dort werden Sie sehen, daû unser Lin~
ker wenigstens viel freundlicher zu bedienen ist als die meisten seiner Kolle~
gen). Wozu er da ist, wollen wir aber jetzt schon erwÑhnen.

Der 'heimliche' Bindevorgang beim Laden ist eine Funktion der Megamax-Shell.
Wenn ein Programm direkt vom TOS oder GEM aus gestartet werden soll,
muû es wohl oder Åbel alle benîtigten Prozeduren komplett enthalten. DafÅr
sorgt der Linker, den Sie aus der Shell aufrufen kînnen.

Zur Entwicklung solcher Programme, die spÑter ohne UnterstÅtzung durch die
Megamax-Umgebung laufen sollen, ist es aber trotzdem sinnvoll, die Vorteile
des 'Load Time Linking' zu nutzen. Erst das ausgetestete Programm sollten Sie
dann dem Linker vorsetzen. öbrigens: Auch die Megamax Modula-Shell selbst
ist auf diese Weise Åbersetzt und gelinkt worden.
1.5  Unser Service: MeMoX                                                 1 - 9
________________________________________________________


1.5    Unser  Service

MeMoX - Megamax Modula Exchange

Was auf dem GEPARD anfing und von Application Systems Heidelberg fÅr ihr
Megamax C (Laser C) aufgegriffen wurde, bieten wir nun auch fÅr Megamax
Modula-2: Einen preiswerten und organisierten Austausch von Modula-2 Pro~
grammen und Module unserer Megamax-Anwender. Der Gedanke dabei ist, zu
verhindern, daû jedes Hilfsmodul von jedem zweiten Anwender neu erfunden
werden muû.  Statt  dessen  hat  jeder  Programmierer  die  Mîglichkeit,  seine
Entwicklungen, die meist nebenbei angefallen sind, anderen zur VerfÅgung zu
stellen.  Auf  diese  Weise  wÑchst  ganz  automatisch  eine  umfangreiche  und
gÅnstig zu erwerbende Bibliothek mit vielen nÅtzlichen Funktionen heran.

Und so funktioniert's: Sie schicken uns (Application Systems) Ihre - mîglichst -
fehlerfreien und ausreichend dokumentierten Module im Quelltext. Sie erlauben
uns, diese  Quellen  auf  einer  unserer  MeMoX-Disks  an  alle  bei  Application
Systems registrierten  Modula-Anwender  weiterzugeben  (vermerken  Sie  dies
bitte auch am Anfang jedes Ihrer Quelltexte) - sie sind damit nicht Public
Domain; Sie haben als Urheber immer noch die Mîglichkeit, Ihre Entwicklungen
spÑter kommerziell zu verbreiten. Sie Åbernehmen dabei keinerlei Verpflichtun~
gen. Als  Dankeschîn  dÅrfen  Sie  sich  dann  eine  der  vorhandenen  MeMoX-
Disketten aussuchen (den aktuellen Bestand kînnen Sie bei ASH erfragen).

Daû wir auf den Quelltexten bestehen, hat zwei GrÅnde. Erstens sollen die
anderen Anwender die Mîglichkeit haben, eventuelle Fehler zu beheben und ggf.
andere  Modifikationen  vorzunehmen.  Zweitens  kann  es  bei  einem  Update
unseres Systems dazu kommen, daû sich einige Definitionen in den  Moduln
(z.B. Runtime, InOut) verÑndern, was dann eine Neucompilierung vieler Module,
die Sie verwenden, erfordert. Die von uns gelieferten Module des Megamax-
Systems  sind  natÅrlich  schon  auf  dem  neuesten  Stand,  die  MeMoX-Disks
kînnen  wir  jedoch  nicht  alle  neu  zusammenstellen,  schon  weil  dann  zwei
verschiedene  Versionen  fÅr  Anwender  mit  dem  alten  bzw.  neuen  System
existieren mÅûten. Haben Sie als Anwender aber die Quellen der MeMoX-Disks,
kînnen Sie selbst alle erforderlichen Compilationen vornehmen.

Wenn Sie an einer oder mehreren MeMoX-Disks Interesse haben, aber erstmal
nichts bieten kînnen, erhalten Sie sie fÅr DM 30.- das StÅck. Teilen Sie uns
bei der Bestellung unbedingt Ihre Seriennummer mit!

Beispielsweise enthÑlt die zweite MeMoX Disk unter anderem:
    AVLTrees        einfache Verwaltung selbstausgleichender BinÑrbÑume,
    Multitasking      Modula-Prozeduren laufen im Hintergrund (Åber Timer),
    Formel-Parser   Auswertung von arithmetischen AusdrÅcken,
    TextEdit         automatische Verwaltung fÅr Texteingaben in Fenstern,
    Timer5ms        Zeitbestimmung, Stoppuhr (Auflîsung: 5ms).
1.5  Unser Service: Mailbox                                                1 - 10
________________________________________________________


Mailbox

Einen  weiteren  Service  kînnen  wir  Ihnen  bieten,  wenn  Sie  Åber  einen
Akustik-Koppler oder ein Modem verfÅgen: Sie kînnen prompte Hilfe direkt von
den Modula-Entwicklern erhalten. Auûerdem kînnen Sie Åber die Mailbox nicht
nur Megamax-spezifische Neuigkeiten erfahren, sondern auch an Diskussionen
Åber  zukÅnftige  Entwicklungen  an  Megamax-Modula  und  Modula  allgemein
teilnehmen.

Dieses Forum fÅr Modula-Programmierer, das wir selbst ins Leben gerufen
haben, fÅhren wir schon - mit wechselnden Standorten - seit dem FrÅhjahr
1988. Wir haben in dieser Zeit sehr oft Probleme von unseren Anwendern aus
der Welt schaffen kînnen, oft wurden aufgetretene Fehler, die auch in unserer
Software  nicht  auszuschlieûen  sind,  innerhalb  eines  Tages  behoben  und
rÅckvermittelt. Mittlerweile ist es eine solide und sehr aktive Diskussions- und
Informationsrunde geworden, an der auch andere Modula-Hersteller verschie~
dener Computer beteiligt sind. Aufgrund der Datenflut haben sich sogar einige
Modula-Interessenten wieder daraus zurÅckgezogen, weil sie sie nicht mehr
verfolgen oder die dabei entstehenden Telefonkosten tragen konnten.

Aus diesem Grund haben wir nun eine Alternative geschaffen. Sind Sie lediglich
an  den  besonderen  Informationen  zu  Megamax  Modula-2  interessiert  oder
wollen Sie nur die Option auf gelegentliche Hilfestellungen in Anspruch nehmen,
bieten wir Ihnen diesen Service in einer bestimmten Mailbox. Zwar mÅssen Sie
dann unter UmstÑnden hîhere Kosten wegen der FerngesprÑche tragen, da Sie
aber  die  Informationen  gezielt  abrufen  kînnen,  minimiert  sich  damit  der
Kostenaufwand.

Wollen Sie sich dagegen auch an allgemeinen Modula-Themen beteiligen, kînnen
Sie dazu verschiedene Mailboxen in ganz Europa anrufen.

So erreichen Sie nun die Mailbox mit den speziellen Megamax-Informationen
und der unverzÅglichen Hilfe bei Problemen: Rufen Sie die der MAUS-Mailboxen
an, deren Nummern Sie weiter unten finden. Ihr Terminal-Programm sollte auf
300, 1200 oder 2400 Baud, 1 Stop-Bit, keine ParitÑt, 8 Datenbits eingestellt
sein.

Wenn die Verbindung aufgebaut ist, meldet sich die Mailbox und fragt, ob Sie
eingetragener Benutzer sind. Antworten Sie mit N und tragen Sie sich dann,
wie die Box es Ihnen anbietet, als Benutzer ein. Diese Mailbox fragt Sie nach
allem, was Sie nicht selber wissen kînnen, Sie sollten also auch als AnfÑnger
keine Probleme damit haben.

Wenn Sie sich eingetragen haben und sich im HauptmenÅ befinden, kînnen Sie
uns schon erreichen: DrÅcken Sie 'E', dann 'P', dann geben Sie als Adressaten
Thomas Tempelmann >Klammeraffe< M ein (der "Klammeraffe" ist das Zeichen,
das  Sie  mit  Altenate-Å  erhalten).  Daraufhin  kînnen  Sie  eine  Nachricht
1.5  Unser Service: Mailbox und Soforthilfe bei Fehlern                    1 - 11
________________________________________________________


eingeben. Teilen Sie uns mit, daû Sie Megamax-Anwender sind und ob Sie nur
eine Frage haben, ob Sie an den Megamax-spezifischen oder auch an allen
Modula-bezogenen Informationen Interesse haben. Beenden Sie die Texteingabe,
indem Sie eine Zeile mit einem Punkt am Anfang eingeben. Rufen Sie dann am
ÅbernÑchsten Tag wieder an - dann sollten Sie schon eine Antwort erhalten
haben.  Wir  geben  Ihnen  dort  auch  gerne  Hilfestellung,  wenn  Sie  noch
allgemeine Probleme mit der DatenfernÅbertragung und der Mailbox-Bedienung
haben.  Sollte  es  aus  unvorhersehbaren  GrÅnden  nicht  klappen,  uns  in  der
Mailbox zu erreichen, wenden Sie sich bitte an Application Systems.

Nummern einiger MAUS-Boxen
    MÅnchen 1       (089) 654708    (ist evtl. nicht zugÑnglich)
    MÅnchen 2       (089) 8143547
    MÅnchen 3       (089) 659769
    Starnberg        (08157) 7626
    Bonn             (0228) 254020
    Aachen          (0241) 154949
    Kîln-Porz        (02203) 12400
    MÅnster         (0251) 77261
    Hamburg         (040) 5381657        ... und das sind lÑngst nicht alle!

Wenn Sie erfahrener in der Mailbox-Szene sind, weisen wir Sie darauf hin,
daû die allgemeinen Modula-Mitteilungen im FIDO- und im MAUS-Netz, sowie
im MAUS-Brett der Zerberus-Boxen vertreten sind. Wenn Ihnen das nichts
sagt, sie aber trotzdem brennend daran interessiert sind, was damit gemeint
ist, rufen Sie doch ebenfalls einmal in der MAUS MÅnchen an und fragen Sie
uns danach, wie Sie diesem Forum von Ihrer Heimatstadt aus am gÅnstigsten
folgen kînnen.


Soforthilfe bei Fehlern im Megamax-System

Haben  Sie  Fragen  oder  VorschlÑge  zur  Bedienung  oder  den  Bibliotheken,
wenden  Sie  sich  bitte  schriftlich  an  den  Vertrieb  (Application  Systems
Heidelberg).  In  besonders  dringeden  FÑllen,  beispielsweise,  wenn  Sie  einen
Fehler im Compiler oder einer Bibliotheksfunktion vermuten  und  auf  dessen
einwandfreies Funktionieren angewiesen sind, kînnen Sie sich auch telefonisch
dort melden. ErklÑren Sie kurz die Dringlichkeit, dann werden Sie gegebenen~
falls die direkte Telefondurchwahl des zustÑndigen Programmierers erfahren.
Wir,  die  Programmierer  werden  uns  bemÅhen,  solche  Probleme  dann
schleunigst aus dem Weg zu schaffen. Da wir das gesamte Megamax-System
selbst erstellt haben, ist uns die Hilfe in jedem Fall mîglich.

Auch in weniger dringenden FÑllen bitten wir Sie, uns Åber jede Macke am
System schriftlich Nachricht zu geben, denn es kam bereits vor, daû auch
noch nach vier Jahren Fehler in bis dahin nicht verÑnderten Programmteilen
entdeckt wurden. Rechnen Sie also nicht damit, daû der von Ihnen vermutete
1.5  Unser Service: Quelltexte und 68020-Assembler                     1 - 12
________________________________________________________


Fehler uns lÑngst bekannt sei - sonst wundern Sie sich beim nÑchsten Update
bitte nicht, daû er immer noch vorhanden ist.

Es ist auch gut mîglich, daû der Fehler bereits behoben wurde. In solch einem
Fall erhalten Sie gleich Nachricht und kînnen ein Update erhalten:

Zu jeder Zeit kînnen Sie alle Ihre Originaldisketten plus DM 20.- (Scheck oder
bar) an den Vertrieb einsenden, um das derzeit aktuelle System zu erhalten.
Nur, wenn sich grîûere énderungen ergeben, ggf. sich auch das Handbuch
Ñndert, informieren wir Sie automatisch Åber ein "groûes" Update/Upgrade.


Quelltexte der Bibliotheken

Wenn Sie auf ein einwandfrei funktionierendes System angewiesen sind, wissen
Sie bereits, daû wir Sie da nicht im Stich lassen. Wenn Sie dennoch darauf
Wert legen, zur Not selbst alles in der Hand zu haben, kînnen Sie von uns die
Quellen  aller  Module,  abgesehen  vom  Compiler,  gegen  eine  SchutzgebÅhr
erhalten. Wenden Sie sich dazu bitte schriftlich an unseren Vertrieb.


Assembler fÅr 68020/30 und 68881/2 (FPU)

Der Inline-Assembler des Megamax-Compilers ist fÅr den Befehlsumfang eines
normalen  Atari  ST  /  Mega  ST  ausgelegt.  Steckt  in  Ihrem  Rechner  eine
Erweiterungskarte mit einem 68020-Prozessor (auch 68030, 68040,...) oder
sind Sie gar stolzer Besitzer eines Atari TT, kînnen Sie von uns den Compiler
mit erweitertem Inline-Assembler fÅr diesen Prozessor und seinen optionalen
Mathe-Koprozessor  erhalten.  Wenden  Sie  sich  dazu  bitte  an  den  Vertrieb
(Application Systems Heidelberg).

Wenn  Sie  lediglich  einen  Mathe-Koprozessor  (FPU)  fÅr  den  normalen  ST
besitzen, kînnen wir Ihnen leider nicht mit einem speziellen Assembler dienen:
Die  FPU  kann  nur  in  Verbindung  mit  einer  68020  (oder  hîher)  direkt
programmiert  werden,  beim  ST  mÅssen  die  Maschinen-Instruktionen  Åber
komplizierte Befehlsfolgen durch die 68000-CPU Åbermittelt werden.

GlÅcklicherweise haben wir im Modula-Compiler die Verwendung der FPU im
ST sehr effektiv implementiert, sodaû sowieso nur  selten  Optimierungen  in
Assembler dienlich sind.

Wollen Sie die FPU im Atari ST trotzdem selber programmieren, empfehlen wir
Ihnen den FPU-Preprozessor, der Ihnen dazu viel Arbeit abnimmt. Wenden Sie
sich an:
         Jens Decker
         FrÅhlingstr. 11
         8721 Rîthlein
1.5  Deren Service: Portable GEM-Bibliothek                              1 - 13
________________________________________________________


Portable Bibliotheken fÅr den Atari ST/ TT

Wenn Sie sich mal unter den diversen Anbietern fÅr Modula auf dem Atari
umsehen, werden Sie sicher schnell feststellen, daû alles, was Åber die sog.
Standard-Module  bei  Modula  hinausgeht,  die  Idee  der  portablen  Sprache
vollkommen  aufgibt.  Zwar  wird  der  ISO-Standard  viel  mehr  und  bessere
Module festschreiben, rechnerspezifische Bibliotheken, wie die Atari-Funktionen
fÅr GEMDOS und BIOS sowie das  GEM,  kînnen  dabei  nicht  berÅcksichtigt
werden.

Ein langjÑhriger Modula-Programmierer auf dem Atari ST hat nun unbeirrt der
Interessen  der  einzelnen  Modula-Anbieter  eine  Bibliothek  erstellt,  die  alle
Funktionen des GEMDOS, BIOS, XBIOS und vor Allem des GEM umfaût. Die
Namen  der  Bezeichner  und  die  Parameter  der  Prozeduren  wurden  nach
Modula-Richtlinien sehr nah an der C-Definition von DRI und Atari angelehnt.
Die Funktionen rufen direkt die jeweiligen Betriebssystemfunktionen auf. Es gibt
also keine Sicherheitskontrollen, wie bei der Megamax-Bibliothek, dafÅr sind
die Funktionen aber kompakter. Weitere Module bauen darauf auf, sie nennen
sich  MagicDials.  Darin  sind  beispielsweise  enthalten:  Dialoge,  in  denen  die
Knîpfe mit Tastenkombinationen anwÑhlbar sind, MenÅzeilen in Fenstern (z.B.
fÅr Accessories) sowie die bekannten "fliegenden" Dialoge. Praktisch alles, was
die C-Bibliothek zum Buch "Vom AnfÑnger zum GEM-Profi" enthÑlt und noch
einiges Praktische mehr!

Die Module sind fÅr viele Modula-Systeme auf dem Atari und evtl. bald auch
fÅr IBM PC-Kompatible verfÅgbar. Wollen Sie portabel in GEM programmieren,
beispielsweise fÅr Verîffentlichungen in Zeitschriften, kînnen wir Ihnen diese
Bibliothek wÑrmstens empfehlen.

Die MAGIC-Library ist Shareware und Sie erhalten sie gegen Einsendung einer
doppelseitig  formatierten  Disk  und  dem  RÅckporto  oder  in  unserer  vorher
erwÑhnten Mailbox. Sie kînnen die Software kostenlos ausprobieren und bei
Gefallen  die  fÅr  die  Nutzung  erforderliche  LizenzgebÅhr  von  DM  15.-
nachzahlen. FÅr DM 40.- erhalten Sie sogar noch die zusÑtzlichen Module, wie
die erwÑhnten MagicDials. (Alle Module werden natÅrlich im Quelltext geliefert!)
Vertrauensvolle Interessenten kînnen das Geld natÅrlich auch gleich beilegen.

Bei Interesse wenden Sie sich bitte direkt an den Autor:

               Peter Hellinger
               Brunnengasse 51
               8500 NÅrnberg 1
               Tel. (0911) 22 36 65
               Kto-Nr: 3009612026 bei KKB-DÅsseldorf, BLZ 300 209 00
1.5  Deren Service: ADT & C-Linker                                      1 - 14
________________________________________________________


ADT - Abstrakte Datentypen

INTEGER, CHAR, Records und Arrays sind fÅr  eine  Sprache  wie  Modula-2
nicht genug. Auch Listen und BÑume sind wichtige Datenstrukturen.  Modula
bietet  allerdings  nur  das  Nîtigste,  um  damit  umzugehen.  Die  Megamax-
Bibliothek enthÑlt beispielsweise das Modul Lists, um beliebige Datenstrukturen
zu einer Liste zu verketten. Aber auch hier fehlen Funktionen, um die gesamte
Liste zu kopieren, abzuspeichern usw.

Die ADT-Modulbibliothek geht hier bis zum letzten. Sie enthÑlt praktisch alle
Funktionen,  um  mit  Listen,  BinÑrbÑumen  (auch  AVL,  also  automatisch
ausgeglichenen), Hash-Tabellen, Stacks (LIFO) und Queues (FIFO) komfortabel
umzugehen. Die Daten werden nicht wie beim Lists-Modul lediglich Åber Pointer
verwaltet,  sondern  kînnen  komplett  zugewiesen  werden.  Damit  ist  dann
beispielsweise das Kopieren (Zuweisen) kompletter Listen problemlos mîglich.
FÅr  Geschwindigkeitsfanatiker  gibt  es  aber  auch  immer  die  Option,  beim
EinfÅgen nur eine Referenz (also Adresse und LÑnge) der Daten zu Åbergeben,
sodaû das Kopieren des gesamten Datums dabei entfallen kann. Und Åberhaupt:
Alle Routinen sind sehr auf Effizienz und Geschwindigkeit bedacht.

Was noch? Beispielsweise gibt es eine automatische Markenverwaltung bei den
Listen - wenn Sie wissen, worum es geht. NatÅrlich kînnen alle Strukturen
miteinander  verknÅpft  werden  und  Datei-Ein-/Ausgabe  ist  auch  mit  drin.
Megamax-Verwîhnte  werden  auch  die  automatische  Fehlerbehandlung  zu
schÑtzen wissen. Drumherum gibt es noch einige Beispiel- und Hilfsmodule fÅr
die Praxis. Und die Quelltexte aller Module gibt es auch - praktisch umsonst!

Also los! Bestellen Sie noch heute die ultimative ADT-Bibliothek bei
               Wolfgang Keller
               Karl-Hoffmann-Str. 8
               7500 Karlsruhe 1
                 (0721) 386456


Einbindung von Funktionen der Sprache C

Sind Sie Multilinguist? Werden Sie mit der Sprache C - freiwillig oder eher
unfreiwillig -  konfrontiert?  Haben  Sie  Funktionen  in  C,  die  Sie  nicht  nach
Modula-2  umschreiben  wollen/kînnen?  Dann  lesen  Sie,  was  Ihnen  Michael
Seyfried  (Autor  des  PD-Programms  FuncCalc  und  einiger  MeMoX-  und
MM2-BeitrÑge) Ihnen empfiehlt:

FÅr C-Programmierer, die auf Modula-2 umsteigen wollen  und  fÅr  Modula-
Programmierer, die C-Programme einbinden wollen, gibt es als Zusatzprodukt
zu Megamax Modula-2 (MM2) und Turbo-C (TC) das Programm MM2CLink
(Megamax  Modula-2  C-Linker).  MM2CLink  konvertiert  Objektdateien  vom
1.6 Anmerkungen zu den Lizenzvereinbarungen                            1 - 15
________________________________________________________


Borland- ins MM2-Format. Es kann aus einem oder mehreren C-Objektdateien
ein MM2-Modul erzeugen, das alle gewÅnschten Variablen und Prozeduren der
C-Module exportiert um sie dann in MM2-Modulen importieren und benutzen
zu kînnen. So kann die ganze TC-Laufzeitumgebung unter MM2 eingebunden
werden.  Dabei  ist  im  Gegensatz  zu  TC  schon  auf  Objektcodeebene  eine
Modularisierung  mîglich:  Aus  TCSTDLIB.LIB  und  TCFLTLIB.LIB  wird  das
MM2-Modul TCSTDLIB und aus TC...LIB.LIB werden die MM2-Module TC...LIB.
Man braucht auch fÅr die konvertierten C-Module keinen separaten Linkerlauf
sondern  kann  weiterhin  das  bequeme  Loadtime-Linking  nutzen.  MM2CLink
bietet  eine  komfortable  UnterstÅtzung  bei  den  einzelnen  Schritten  der
C-Einbindung. Es lÑuft in der MM2-Shell und benutzt deren Parameter mit:
Compiler, Editor und TC lassen sich direkt aus MM2CLink aufrufen.

Sie kînnen das MM2CLink-Paket fÅr wenig Geld direkt beim Autor bestellen.
Ihre Kontaktadresse fÅr Fragen und Bestellungen:
               Michael Seyfried
               Unterer Mauergarten 17
               6520 Worms
                  (0631) 63158  oder  (06241) 54671
               Mailbox: MAUS Starnberg (STA), (08157) 7626



1.6  Anmerkungen   zu   den   Lizenzverein~
         barungen

Software

Die  Disketten,  auf  denen  Sie  Megamax  Modula  erhalten  haben,  sind  nicht
kopiergeschÅtzt.  Auf  diese  Weise  mîchten  wir  unseren  Kunden  unnîtigen
érger und Unbequemlichkeiten bei der Handhabung des Systems ersparen. Sie
dÅrfen (und sollten) Backup-Kopien fÅr Ihren persînlichen Gebrauch anlegen,
wie auch im Abschnitt 2.1 beschrieben wird.

Trotzdem unterliegt natÅrlich auch Megamax Modula dem Urheberrecht: Sie
dÅrfen nicht das komplette Programmpaket an Ihre fÅnf besten Freunde weiter~
geben. Hier mîchten wir nicht nur darum bitten, unsere  Entwicklungsarbeit
(und den Verzicht auf einen lÑstigen Kopierschutz) zu honorieren, sondern auch
noch kurz auf die Seriennummern hinweisen, die in der Software enthalten
sind. Jedes erworbene Modula-System darf zu jedem Zeitpunkt nur auf einem
einzelnen Rechner verwendet werden.

Wenn Sie mit dem Megamax-System Software  entwickelt  haben  und  diese
verkaufen (oder verschenken) wollen, mîchten  wir  Ihnen  natÅrlich  nicht  im
Wege stehen (und wir mîchten auch keine LizenzgebÅhren von Ihnen haben).
Daher gilt folgende Regelung:
1.6 Anmerkungen zu den Lizenzvereinbarungen                            1 - 16
________________________________________________________


* Von Ihnen unter Megamax Modula entwickelte Programme dÅrfen uneinge~
schrÑnkt weitergegeben werden. Das gilt ebenso fÅr die Code-Moduln unserer
Library, nicht jedoch fÅr deren zugehîrige Quelltexte.

* Die Textversionen der Definitionsmodule unserer  Library  dÅrfen  Sie  auch
gerne verbreiten - wir hoffen,  daû  jeder  Leser  dann  auch  sofort  so  eine
Programmierumgebung haben will...

* NICHT weitergeben dÅrfen Sie alle Åbrigen Bestandteile des Modula-Systems.

* In ZweifelsfÑllen erkundigen Sie sich bitte bei Application Systems Heidelberg.


Handbuch

Das  vorliegende  Handbuch  darf,  auch  auszugsweise,  nicht  kopiert  werden;
weder durch mechanische, optische, magnetische, elektronische noch chemische
Reproduktionsverfahren.  (FÑllt  Ihnen  noch  ein  anderes  Verfahren  ein?  Bitte
auch  nicht  verwenden!)  Ausnahmen  bedÅrfen  der  schriftlichen  Genehmigung
durch Application Systems Heidelberg.


Haftungsausschluû

Bitte  nehmen  Sie  zur  Kenntnis,  daû  wir,  die  Autoren,  dieses  Produkt  mit
groûer  Sorgfalt  entwickelt  und  getestet  haben.  Dennoch  kînnen  uns  dabei
Fehler unterlaufen sein. Jedoch kînnen weder wir noch  unser  Vertrieb  fÅr
Fehler im Handbuch und in der Software eine Haftung Åbernehmen, insbeson~
dere fÅr FolgeschÑden bei Dritten, die von der mit diesem Produkt erstellten
Software ausgehen.

Das  bedeutet,  daû  Sie  Ihre  selbst  entwickelte  Software  inklusive  der
eingebundenen Megamax-Bibliothek angemessen testen mÅssen, wenn Sie sie
Dritten gegenÅber zugÑnglich machen, weil wir dort zu keinerlei GewÑhrleistung
mehr verpflichtet sind.
