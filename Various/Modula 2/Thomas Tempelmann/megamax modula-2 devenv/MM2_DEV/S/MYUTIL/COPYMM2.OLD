 MODULE CopyMM2;  IMPORT GEMDOSIO; (*$E MOS *)  FROM InOut IMPORT Write, WriteLn, WriteString, WriteInt, Read, ReadString;  FROM Paths IMPORT SearchFile, ListPos; FROM PathEnv IMPORT HomePath;  FROM ShellMsg IMPORT ShellPath, StdPaths;  FROM Files IMPORT File, Access, Open, Close, Create, State,(replaceOld, GetDateTime, SetDateTime;  FROM MOSGlobals IMPORT Date, Time;  FROM Clock IMPORT PackDate, PackTime;  FROM Binary IMPORT FileSize, WriteBytes, ReadBytes;  FROM Directory IMPORT MakeFullPath, DirQuery, DirEntry,(QueryFiles, QueryAll, subdirAttr, FileAttrSet;  FROM FileNames IMPORT ValidatePath, FilePrefix;  FROM Strings IMPORT String, StrEqual, Append, Assign, Length, Space, Upper,(Concat;  FROM SYSTEM IMPORT ADDRESS, ADR, TSIZE, BYTE, WORD, LONGWORD, ASSEMBLER;  VAR subdirs, ok: BOOLEAN;$res: INTEGER;$fOld, fNew: File;$buf: ARRAY [1..$8000] OF CARDINAL;$line: CARDINAL;  PROCEDURE error (s, m: ARRAY OF CHAR);"VAR ch: CHAR;"BEGIN$WriteLn;$WriteString (s);$Write (' ');$WriteString (m);$Read (ch);"END error;  PROCEDURE checkFile (REF path: ARRAY OF CHAR; entry: DirEntry): BOOLEAN; "VAR old, new: String;&n: LONGCARD;&dat1, dat2: Date;&tim1, tim2: Time; "BEGIN$Concat (path, entry.name, old, ok);$IF subdirAttr IN entry.attr THEN&IF entry.name[0] # '.' THEN(IF StrEqual ('ST_FPU', FilePrefix (entry.name))(OR StrEqual ('TT_FPU', FilePrefix (entry.name))(OR StrEqual ('MAXIDISK', FilePrefix (entry.name))(OR StrEqual ('TEMPLMON', FilePrefix (entry.name)) THEN*(* diese Dateien nicht kopieren *)*WriteLn;*WriteString ('*** Ignoring ');*WriteString (old);*WriteString ('\ ***');*RETURN TRUE(END;(Append ('\*.*', old, ok);(DirQuery (old, QueryAll, checkFile, res);(Close (fOld);(Close (fNew);(IF res < 0 THEN*error (old, "Can't access subdir");(END&END$ELSE&IF StrEqual ('MM2SHELL.M2B', entry.name)&OR StrEqual ('MM2SHELL.M2P', entry.name) THEN((* diese Dateien nicht kopieren *)(WriteLn;(WriteString ('*** Ignoring ');(WriteString (old);(WriteString (' ***');(RETURN TRUE&END;&SearchFile (entry.name, StdPaths, fromStart, ok, new);&IF ok THEN(Open (fOld, old, readOnly);(IF State (fOld) < 0 THEN*error (old, 'Open error');*RETURN TRUE(END;(Open (fNew, new, readOnly);(IF State (fNew) < 0 THEN*error (new, 'Open error');*Close (fOld);*RETURN TRUE(END;(GetDateTime (fOld, dat1, tim1);(GetDateTime (fNew, dat2, tim2);(IF (PackDate (dat1) # PackDate (dat2))(OR (PackTime (tim1) # PackTime (tim2)) THEN*(*+* Datei kopieren+*)*WriteLn;*WriteString ('Update ');*WriteString (old);*WriteString (Space (30-INTEGER(Length(old))));*WriteString (' from ');*WriteString (new);*Close (fOld);*Create (fOld, old, writeOnly, replaceOld);*LOOP,ReadBytes (fNew, ADR (buf), SIZE (buf), n);,IF n=0L THEN EXIT END;,WriteBytes (fOld, ADR (buf), n)*END;*Close (fOld);*Open (fOld, old, writeOnly);*SetDateTime (fOld, dat2, tim2);(END;(Close (fOld);(Close (fNew);&ELSE(error (new, 'Not found!');&END;$END;$RETURN TRUE"END checkFile;  PROCEDURE checkRes (): BOOLEAN;"VAR ch: CHAR;"BEGIN$IF res < 0 THEN&WriteLn;&WriteString ('Error #');&WriteInt (res,0);&WriteLn;&Read (ch);&RETURN TRUE$END;$RETURN FALSE"END checkRes;  VAR     n1: String;(ch: CHAR;  BEGIN"HomePath:= ShellPath;"WriteString ('Copy MM2'); WriteLn;"WriteLn;"WriteString ('Updates all files on Disk in A: from same on StdPaths()');"LOOP$WriteLn;$WriteLn;$WriteString ('Insert next Disk and press <Return> (<Esc> to stop)...');$REPEAT&Read (ch);&IF ch = 33C THEN EXIT END;$UNTIL ch = 15C;$WriteLn;$line:= 1;$DirQuery ('A:\*.*', QueryAll, checkFile, res);$Close (fOld);$Close (fNew);$IF checkRes () THEN RETURN END;"END END CopyMM2. 
(* $FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFECB48C$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54$FFEEBB54€$0000056CT.......T.......T.......T.......T.......T.......T.......T.......T.......T.......$FFECB48C$00000233$00000299$0000027D$00000D87$FFF7C6E6$FFF7C6E6$FFF7C6E6$000005D0$000005E6$000005AF$0000059E$000005AD$000007D7$0000056C$0000021D¼€‚*)
