>I've gotta say - I'm really pleased with the progress it's made so far,
>but I really do wish I knew why Lines.prg (the atari corp one) hangs...

Since LINES.APP is obviously an enormously popular and important
application (;-)), I've given the problem a closer look; it took some
detective work, but I think I finally found the problem...

First hint:
----------
Using SysMon (Karsten Isakovic's "System Monitor" - a very powerful
and useful tool, even if it doesn't run too reliably with MiNT)
I found that the first three AES calls made by LINES.APP are:

	appl_init();
	appl_exit();
	appl_init();

While this sequence may not look immediately useful, it certainly
isn't "illegal", and an AES clone *should* be able to handle it!

My first thought was: "race condition" - possibly the second appl_init()
gets executed *before* the kernel comes around to executing the
XA_CLIENT_EXIT code, which then nullifies the effects of the 
second appl_init(); I tried putting a sleep(1) call (actually,
Fselect(1000L,NULL,NULL,NULL)) after the appl_exit() in handler.c,
but this didn't help...

Second hint:
-----------
Running XaAES, open a directory window on U:\pipe. Start and terminate
a few GEM APPs. Watch U:\pipe. You now should notice a strange thing:
the client pipes *do not* go away!

I'm not quite sure what's happening here - apparently MiNT has
problems handling a pipe created with `Fopen(name,O_CREAT|O_RDONLY)' -
the pipe is neither removed when there are no more users, nor seems
re-opening the pipe work correctly (Fopen() doesn't return an error
though); and there doesn't seem to be *any* way of getting rid of the
dead pipe either...

The MiNT 1.12 documentation states that FIFOs should be created
with Fcreate() on the server side and Fopen() on the client side;
setting bit 0 on the Fcreate() call creates a unidirectional
pipe with is write-only on the server side, read-only on the client
side - exactly the opposite of what XaAES needs!

Possibly Fopen(name,O_CREAT|O_RDONLY) is simply an unimplemented
or "illegal" mode?!?

I'll report this to the MiNT mailing list and ask for opinions - 
perhaps somebody there can fix it... :-)

In the meantime, the easiest solution is opening the pipes in O_RDWR
mode (on *both* ends) - after this change, they correctly disappear
after client termination!
(It's a waste of memory, though: for a bi-directional FIFO, *two*
buffers are allocated...)

And the Big Surprise: LINES.APP now runs!! :-)

I've appended the corresponding patch to this message.

Martin