--- u:\n\XaAES\prev-src/appl_ini.c	Sat Mar 23 22:07:50 1996
+++ appl_ini.c	Wed Mar 27 21:48:14 1996
@@ -78,7 +78,17 @@
 
 /* Create a new client reply pipe */
 	sprintf(r_pipe_name,r_fmt,Cpid);
+#if 1
+	/* For some reason, a pipe created with mode O_RDONLY does *not* go
+		away when all users have closed it (or were terminated) - apparently
+		a MiNT bug?!?! */
+	/* BTW: if *this* end of the pipe was created with O_RDWR, the *other*
+		end cannot be O_WRONLY, or strange things will happen when the
+		pipe is closed... */
+	client->clnt_pipe_rd=Fopen(r_pipe_name,O_CREAT|O_RDWR);	/* Client's end of pipe */
+#else
 	client->clnt_pipe_rd=Fopen(r_pipe_name,O_CREAT|O_RDONLY);	/* Client's end of pipe */
+#endif
 
 	pb->globl[12]=client->clnt_pipe_rd;	/* XaAES extension */
 
--- u:\n\XaAES\prev-src/new_clnt.c	Sat Mar 23 17:50:52 1996
+++ new_clnt.c	Wed Mar 27 21:48:14 1996
@@ -39,11 +39,18 @@
 	if (!client->clnt_pipe_rd)	/* If this occurs, then we've got a problem - fix it with */
 	{
 		DIAGS(("New Client - Error: client pipe does not exist yet?\n"));
-		client->clnt_pipe_rd=(int)Fopen(pipe_name,O_RDONLY|O_GLOBAL);
+/*		client->clnt_pipe_rd=(int)Fopen(pipe_name,O_RDONLY|O_GLOBAL); */
+		/* PANIC - opening a global handle won't help because global
+			handles can't be used in an Fselect mask... */
+		return FALSE ;
 	}
 
 	sprintf(pipe_name,fmt,clnt_pid);							/* Open the clients reply pipe for writing to */
+#if 1
+	client->clnt_pipe_wr=(int)Fopen(pipe_name,O_RDWR);	/* Kernals end of pipe*/
+#else
 	client->clnt_pipe_wr=(int)Fopen(pipe_name,O_WRONLY);	/* Kernals end of pipe*/
+#endif
 	client->std_menu=ResourceTree(system_resources,SYSTEM_MENU);
 
 	sprintf(client->name,"Foreign client ?");
