Hi!

Here's another patch for XaAES beta2:

xa_types.h, bootup.c:
   Added fields pix_w and pix_h (containing the VDI's idea of the
   "real" pixel width and height) to XA_SCREEN structure (to be used
   by graf_handle()).
   Added fields standard_font_id and standard_font_point to
   XA_SCREEN structure (so below).
*.c (lots):
   Replaced uses of STANDARD_AES_FONTID and STANDARD_FONT_POINT by
   display.standard_font_id and standard_font_point.
bootup.c:
   display.max_c_w/h initialized directly by vst_point() call -
   vqt_attributes() (or vqt_extent()) is no longer needed.
bootup.c:
   BUGFIX: added special case handling for "TV resolutions":
   select a 9 pt (not 10 pt) font size in these screen modes -
   pointsize 10 caused selection of a 8x16 font on my ST even
   in ST low and med...
frm_alert.c:
   Hack: set background color of alert box to WHITE on monochrome
   (<16 colors) systems - otherwise alerts become unreadable; the
   button text is still unreadable - this needs more work.
getinfo.c:
   BUGFIX: corrected appl_getinfo() return value (intin[0]):
   1 means "OK", 0 means "error"; added range check.
   Note: some programs appear to *ignore* the return value - this
   clearly is a bug, since it's possibe that an AES version (or an
   AES extension like WINX) only implements a subset of the possible
   subopcodes...
graf_mou.c:
   BUGFIX: the returned font parameters were quite wrong;
   intout[1] and intout[2] now return the character cell dimensions
   (8x16 for ST mono, 8x8 for ST med and ST low), intout[3] and
   intout[4] return width and height of "a square box large enough
   to hold a system font character" (19x19 for ST mono, 24x11 for
   ST med, 12x11 for ST low).
   The algorithm used to calculate the box dimensions is partly
   guesswork - but it yields the same values as standard AES for
   the ST resolutions!
keyboard.c:
   Added keyboard shortcut Alt-Ctrl-X: "exit XaAES"; doesn't work
   reliably yet, since Cleanup() is still incomplete...
obj_draw.c:
   BUGFIX: fixed one-off error (clipping rect was too wide and
   too high).
   (A lot more of these still need to be fixed...)
objects.c:
   BUGFIX: ignore the high byte of ob_type (used by many GEM libraries
   as "extended type"!)

-- 
 Martin Koehling // NEW email address: mk@anuurn.ruhr.de


