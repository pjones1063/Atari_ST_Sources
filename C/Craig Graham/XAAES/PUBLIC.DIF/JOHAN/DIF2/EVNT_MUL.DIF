--- l:\xaaes_d.src\xaaes\evnt_mul.c	Mon Mar 25 23:28:06 1996
+++ evnt_mul.c	Tue Apr 30 00:03:56 1996
@@ -28,6 +28,8 @@
 	XA_WIDGET *widg;
 	XA_WINDOW *wind;
 
+	DIAGS(("evnt_multi()\n"));
+
 	clients[clnt_pid].waiting_pb=pb;	/* Store a pointer to the AESPB to fill when the event(s) */
 										/*  finally arrive. */
 	
@@ -43,6 +45,7 @@
 		ret=XAC_BLOCK;
 	}
 	
+#if 0
 	if (events&MU_TIMER)
 	{
 		short dl;
@@ -58,6 +61,7 @@
 
 		ret=dl|XAC_M_TIMEOUT;
 	}
+#endif
 	
 	if (events&MU_MESAG)
 	{
@@ -75,8 +79,10 @@
 
 				if (rtn)	/* If the widget click/drag function returned TRUE we reset the state of the widget */
 				{
-					XA_RECT_LIST *rl=generate_rect_list(wind);
-					XA_RECT_LIST *drl;
+					XA_RECT_LIST *rl, *drl;
+					
+					if (!(rl = wind->rl_full))
+						rl = wind->rl_full = generate_rect_list(wind);
 
 					widg->stat=XAW_PLAIN;					/* Flag the widget as de-selected */
 					disp=widg->behaviour[XACB_DISPLAY];		/* get the redraw function for this widget */
@@ -88,12 +94,6 @@
 						(*disp)(wind, widg);
 					}
 					v_show_c(V_handle, 1);
-					while(rl)	/* Dispose of rectangle list */
-					{
-						drl=rl;
-						rl=rl->next;
-						free(drl);
-					}
 				}
 			}
 		}
@@ -117,6 +117,30 @@
 			ret=XAC_BLOCK;
 	}
 	
+#if 1
+	if (events&MU_TIMER)
+	{
+		short dl;
+		if (pb->intin[15])
+			dl=0xfff0;
+		else
+			dl=(pb->intin[14])&0xfff0;
+
+		if (!dl) {		/* Direct return? */
+			pb->intout[0]=MU_TIMER;
+
+			return XAC_DONE;		/* Return XAC_DONE to unblock the client */
+		}
+		
+		if (dl<0x10)					/* Minimum timer is 0x10 */
+			dl=0x10;
+		
+		new_waiting_for|=XAWAIT_TIMER;	/* Flag the app as waiting for a timer */
+
+		ret=dl|XAC_M_TIMEOUT;
+	}
+#endif
+
 	if (new_waiting_for)		/* If we actually recognised any of the codes, then set the multi flag */
 		new_waiting_for|=XAWAIT_MULTI;
 	
