--- l:\xaaes_d.src\xaaes\wind_fns.c	Mon Mar 25 23:57:58 1996
+++ wind_fns.c	Sat May  4 00:04:50 1996
@@ -72,12 +72,17 @@
 	
 	pull_wind_to_top(w);			/* Newly opened windows begin on top */
 
+#if 0
 	wl=w->next;
+
 	if (wl)		/* Refresh the previous top window as being 'non-topped' */
 	{
 		display_non_topped_window(wl,NULL);
+#if 0
 		send_app_message(wl->owner, WM_REDRAW, 0, wl->handle, wl->x, wl->y, wl->w, wl->h);
+#endif
 	}
+#endif
 	
 	w->x=pb->intin[1];				/* Change the window coords */
 	w->y=pb->intin[2];
@@ -94,6 +99,16 @@
 	send_app_message(clnt_pid, WM_REDRAW, 0, w->handle, w->x, w->y, w->w, w->h);
 	v_show_c(V_handle,1);
 
+	wl = w->next;
+	if (wl)		/* Refresh the previous top window as being 'non-topped' */
+	{
+		invalidate_rect_lists(wl);
+		display_non_topped_window(wl,NULL);
+#if 0
+		send_app_message(wl->owner, WM_REDRAW, 0, wl->handle, wl->x, wl->y, wl->w, wl->h);
+#endif
+	}
+
 	return TRUE;
 }
 
@@ -117,16 +132,21 @@
 		return TRUE;
 	}
 
+	invalidate_rect_lists(w);
+
 	v_hide_c(V_handle);
 
 	display_windows_below(w);			/* Redisplay any windows below the one we are closing */
 
-	v_show_c(V_handle,1);
-
 	Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
 
 	if (w==window_list)
+	{
 		window_list=w->next;
+		display_non_topped_window(window_list, NULL);
+	}
+
+	v_show_c(V_handle,1);
 
 	if (w->prev)						/* Remove the window from the window list */
 		w->prev->next=w->next;
@@ -172,11 +192,14 @@
 
 void update_vslide(XA_WINDOW *wind)
 {
-	XA_RECT_LIST *rl=generate_rect_list(wind),*drl;
+	XA_RECT_LIST *rl, *drl;
 	short x,y,pnt[4];
 	XA_WIDGET *widg=wind->widgets;
 	widg+=XAW_VSLIDE;
-	
+
+	if (!(rl = wind->rl_full))
+		rl = wind->rl_full = generate_rect_list(wind);
+
 	rp_2_ap(wind, widg, &x, &y);	/* Convert relative coords and window location to absolute screen location */
 	pnt[0]=x; pnt[1]=y;
 	pnt[2]=x+widg->w; pnt[3]=y+widg->h;
@@ -195,11 +218,14 @@
 
 void update_hslide(XA_WINDOW *wind)
 {
-	XA_RECT_LIST *rl=generate_rect_list(wind),*drl;
+	XA_RECT_LIST *rl, *drl;
 	short x,y,pnt[4];
 	XA_WIDGET *widg=wind->widgets;
 	widg+=XAW_HSLIDE;
 	
+	if (!(rl = wind->rl_full))
+		rl = wind->rl_full = generate_rect_list(wind);
+
 	rp_2_ap(wind, widg, &x, &y);	/* Convert relative coords and window location to absolute screen location */
 	pnt[0]=x; pnt[1]=y;
 	pnt[2]=x+widg->w; pnt[3]=y+widg->h;
@@ -226,6 +252,10 @@
 	short wind=pb->intin[0],cmd=pb->intin[1];
 	unsigned short *l;
 	char *t;
+
+#ifdef RL_DIAGS
+	DIAGS(("Command = %d\n", (int)cmd));
+#endif
 	
 	w=get_wind_by_handle(wind);
 
@@ -356,7 +386,13 @@
 			
 			Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
 
+			invalidate_rect_lists(w);
+
+#if 0
 			for(wl=w; wl; wl=wl->next)
+#else
+			for(wl=w->next; wl; wl=wl->next)
+#endif
 			{
 				clip.g_x=wl->x; clip.g_y=wl->y;
 				clip.g_w=wl->w; clip.g_h=wl->h;
@@ -379,6 +415,9 @@
 			break;
 		case WF_BOTTOM:				/* Extension, send window to the bottom */
 			v_hide_c(V_handle);
+
+			invalidate_rect_lists(w);	/* Must be done while we have the original */
+
 			send_wind_to_bottom(w);			/* Send it to the back */
 			
 			Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
@@ -386,7 +425,14 @@
 			our_win.g_x=w->x; our_win.g_y=w->y;
 			our_win.g_w=w->w; our_win.g_h=w->h;
 			
+#if 0
 			for(wl=w->prev; wl; wl=wl->prev)
+#else
+		if (w->prev) {
+			display_non_topped_window(w, NULL);
+
+			for(wl=w->prev; wl->prev; wl=wl->prev)
+#endif
 			{
 				clip.g_x=wl->x; clip.g_y=wl->y;
 				clip.g_w=wl->w; clip.g_h=wl->h;
@@ -397,6 +443,15 @@
 					send_app_message(wl->owner, WM_REDRAW, 0, wl->handle, clip.g_x, clip.g_y, clip.g_w, clip.g_h);
 				}
 			}
+#if 1
+
+			display_non_topped_window(wl, NULL);	/* Re-display new top window */
+			clip.g_x=wl->x; clip.g_y=wl->y;
+			clip.g_w=wl->w; clip.g_h=wl->h;
+			if (rc_intersect(&our_win,&clip))
+				send_app_message(wl->owner, WM_REDRAW, 0, wl->handle, clip.g_x, clip.g_y, clip.g_w, clip.g_h);
+		}
+#endif
 			
 			Psemaphore(3,WIN_LIST_SEMAPHORE,0);
 
@@ -413,6 +468,8 @@
 				v_hide_c(V_handle);
 				Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
 
+				invalidate_rect_lists(w);
+
 				if ((window_list->next)&&(window_list->next->is_open))
 					display_non_topped_window(window_list->next,NULL);
 			
@@ -480,6 +537,8 @@
 			
 			Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
 
+			invalidate_rect_lists(w);
+
 			for(wl=w; wl; wl=wl->next)
 			{
 				clip.g_x=wl->x; clip.g_y=wl->y;
@@ -516,6 +575,8 @@
 			
 			Psemaphore(2,WIN_LIST_SEMAPHORE,-1L);
 
+			invalidate_rect_lists(w);
+
 			for(wl=w; wl; wl=wl->next)
 			{
 				clip.g_x=wl->x; clip.g_y=wl->y;
@@ -553,7 +614,7 @@
 	XA_SLIDER_WIDGET *slw;
 	short wind=pb->intin[0],cmd=pb->intin[1];
 	GRECT s,d;
-	
+
 	w=get_wind_by_handle(wind);
 
 	if (w==NULL)
@@ -568,67 +629,32 @@
 	switch(cmd)
 	{
 		case WF_FIRSTXYWH:			/* Generate a rectangle list and return the first entry */
-			for(rl=w->rect_list; rl; )	/* Dispose of any existing rectangle list */
-			{
-				drl=rl;
-				rl=rl->next;
-				free(rl);
-			}
-			w->rect_list=NULL;
-			
-			rl=generate_rect_list(w);	/* Call the internal rectangle list generator. */
-			
-			for(drl=rl; rl; drl=rl)		/* Fix the rectangle list to clip to the work area only */
-			{
-				s.g_x=rl->x;
-				s.g_y=rl->y;
-				s.g_w=rl->w;
-				s.g_h=rl->h;
-				d.g_x=w->wx;
-				d.g_y=w->wy;
-				d.g_w=w->ww;
-				d.g_h=w->wh;
-				rl=rl->next;
-				if (rc_intersect(&s, &d))	/* Optimise the rectangle list to only do bit's  */
-				{							/* that intersect the work area */
-					drl->x=d.g_x;
-					drl->y=d.g_y;
-					drl->w=d.g_w+1;
-					drl->h=d.g_h+1;
-					drl->next=w->rect_list;
-					w->rect_list=drl;
-				}else{
-					free(drl);
-				}
-			}
+			if (!w->rl_full)
+				w->rl_full = generate_rect_list(w);	/* Call the internal rectangle list generator. */
 
-			if (w->rect_list)			/* Did we get any rectangles? */
-			{
-				rl=w->rect_list;
-				w->rect_list=rl->next;
+			if (!w->rl_work)
+				w->rl_work = create_work_list(w);	/* Call the internal full->work clip routine. */
+
+			if (rl = w->rl_work) {			/* Did we get any rectangles? */
+				w->rl_work_cur = rl->next;
 				pb->intout[1]=rl->x;	/* Return the first rectangle coords */
 				pb->intout[2]=rl->y;
 				pb->intout[3]=rl->w;
 				pb->intout[4]=rl->h;
-				free(rl);				/* Dispose the first entry in the rectangle list */
 			}else{
 				pb->intout[1]=w->wx;	/* Totally obscured window, return w & h as 0 */
 				pb->intout[2]=w->wy;
 				pb->intout[3]=0;
 				pb->intout[4]=0;
-				w->rect_list=NULL;		/* Window has no rectangle list */
 			}
 			break;
 		case WF_NEXTXYWH:			/* Get next entry from a rectangle list */
-			if (w->rect_list!=NULL)		/* Are there any rectangles left in the list ? */
-			{
-				rl=w->rect_list;
-				w->rect_list=rl->next;
+			if (rl = w->rl_work_cur) {	/* Are there any rectangles left in the list? */
+				w->rl_work_cur = rl->next;
 				pb->intout[1]=rl->x;	/* Return the next rectangle coords */
 				pb->intout[2]=rl->y;
 				pb->intout[3]=rl->w;
 				pb->intout[4]=rl->h;
-				free(rl);				/* Dispose the entry in the rectangle list */
 			}else{
 				pb->intout[1]=0;		/* No rectangles left - return all zero */
 				pb->intout[2]=0;
