

LIBSORT(1)                User Commands                LIBSORT(1)



NAME
     libsort - sort an object library into optimal linking order

SYNOPSIS
     libsort [ -nM ] [ -u sym ] [ -l list-file ] [ -i nm-listing ]
          input-file

DESCRIPTION
     libsort sorts an object library into an optimal link  order;
     that  is,  it attempts to re-order the library such that the
     module in which a given symbol is defined appears after  all
     the  modules  in the library that reference it.  This allows
     programs like ld to process the library in  a  single  pass.
     If  the  library  contains a referential loop (for instance,
     fred.o defines a symbol needed by  joe.o  and  vice  versa),
     then  such  an  ordering  is  impossible  without additional
     information (see the -u option below).

     libsort requires a single argument:  the name of the library
     to  be  sorted.   By  default,  libsort sorts the library in
     place; this behavior can be modified with the options below.

OPTIONS
     -i    Use the file nm-listing as a description of the object
          library.   nm-listing  should  contain the ouput of the
          command `nm ar-file' or the equivalent.  If this option
          is  not  given,  libsort attempts to run nm internally,
          either through a pipe (if  MiNT  is  active)  or  as  a
          Pexec()'ed subprocess writing to a temporary file.

     -u    Assume that the symbol sym will  always  be  undefined
          when the library is linked.  The object module defining
          sym, along with any modules needed to  resolve  symbols
          referenced  by  that  module, are moved to the front of
          the library.  This option can be used to break referen-
          tial  loops, allowing libsort to sort otherwise unsort-
          able libraries; for instance, when applying libsort  to
          the  MiNTlibs,  the  option  `-u __crtinit' is required
          (this symbol is  referenced  by  the  MiNTlibs  startup
          module).   Note  that  if sym is not undefined when the
          library  is  linked,  multiple  passes  may  still   be
          required.

     -l    If this  option  is  specified,  the  library  is  not
          sorted; instead, a list of object modules, one per line
          in the order in which they would have been  sorted,  is
          written to the file list-file.

     -n    If this  option  is  specified,  the  library  is  not
          sorted;  instead,  the commands libsort would have exe-
          cuted to sort the library are written to  the  standard



SunOS 5.4           Last change: 30 May 1993                    1






LIBSORT(1)                User Commands                LIBSORT(1)



          output.

     -M    This option specifies an alternate method of  reorder-
          ing  the  library.   It  assumes that all of the object
          modules in the library are also present in the  current
          working  directory.   This would be true, for instance,
          just after the library had been  constructed  by  make.
          Normally,  libsort executes the ar command with the `m'
          option to reorder the  library  in  place;  if  the  -M
          option  is  given,  libsort  will  instead  delete  the
          library and reconstruct it in its new  order  with  the
          `r'  option  of  ar, which can be significantly faster,
          especially for large libraries.

PORTING
     libsort assumes the existence of certain programs to examine
     and  manipulate  object  libraries,  and  that the generated
     listing of the library will be in a certain format.  In par-
     ticular,  it  uses  ar and nm to manipulate the library, and
     assumes that the output of nm is compatible  with  the  Unix
     and  SozobonX  versions  of nm.  Depending on the particular
     compiler suite you use,  these  assumptions  may  not  hold.
     However, libsort has been designed to be easily modified for
     use  with  other  compilation  systems.   Consult  the  file
     config.c,  which  contains the constants and functions which
     must be modified to suit the intended environment.

SEE ALSO
     ar(1), ld(1), make(1), nm(1)

DIAGNOSTICS
     If libsort detects a referential  loop,  it  will  list  the
     modules and symbols involved in the loop.

BUGS
     None that I'm aware of [any more :-}],  but  there's  almost
     always  One  More  Bug(TM).   If you should find one, please
     report it to me, Scott Bigham, at dsb@cs.duke.edu.


SunOS 5.4           Last change: 30 May 1993                    2



