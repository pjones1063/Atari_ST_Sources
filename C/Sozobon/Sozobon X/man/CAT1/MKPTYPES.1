MKPTYPES(1)             USER COMMANDS                       MKPTYPES(1)

NAME

        mkptypes - make prototypes for functions

SYNOPSIS

        mkptypes [option] <file> ...

        mkptypes [-ensxzAKMhvV] [ -p <symbol>] [ -o <outfile>] [ <file> ... ]

DESCRIPTION

        Mkptypes takes as input one or more "C" source code files, and
        produces as output (on the standard output stream) a list of function
        prototypes (ANSI) for the external functions defined in the given
        source files.  This output, redirected to a file, is suitable for
        #include'ing in a C source file.  The function definitions in the
        original source may be either "old-style" (in which case appropriate
        prototypes are generated for the functions) or "new-style" (in which
        case the definition includes a prototype already).

        If files are specified on the command line, then a comment
        specifying the file of origin is emitted before the prototypes
        constructed from that file.  If no files are given, then no comments
        are emitted and the C source code is taken from the standard input
        stream. 

        Of course you can specify `-' as a name for stdin between other
        filnames.
        -v
        This option displays some brief version information.

        -V 
        This options writes some version information to stdout.

        -h 
        This option causes mkptypes to print a help page and exit.

        -e
        This option causes the "extern" keyword to be explicitly printed for
        external functions.  Some non-ANSI compilers may need this. 

        -n
        This option causes the line number where each function was defined
        to be prepended to the prototype declaration as a comment. 

        -s
        This option causes prototypes to be generated for functions declared
        "static" as well as extern functions.

        -x
        This option causes parameter names to be omitted from the output
        prototypes.  This may be necessary for some brain-damaged pseudo-ANSI
        compilers.  You may also prefer this style of output.  This option
        has not been thoroughly tested and won't be accepted by Sozobon's
        hcc . 

        -s
        This option suppresses the definition of the prototype macro given
        by '-p'.
        Header files generated by mkptypes with this option will not work
        unless the prototype macro has been defined elsewhere in the program
        by the user.  Used with the -p option, the -z option allows use of
        predefined prototype hiding macros that may exist on some systems. 

        -A
        The option causes the prototypes emitted to be only readable by ANSI
        compilers. This is the default now (1.x3)!

        -K 
        The option causes prototypes to be K&R in mode, so that parameters
        are comments and not readable for compilers.

        -M
        The option causes prototypes to be "macro-ized", so that compilers
        with __STDC__ not defined don't see them.

        Options that take parameters:
        You do not need to type spaces between the option and the argument.

        -p <symbol>
        This option controls the name of the macro used to guard prototype
        definitions.  Normally this is "_P", but you can change it to any
        string you like.  To eliminate the guard macro entirely, use the -A
        option. 

        -o <file>
        This option forces mkptypes not to write to stdout but to the file
        named as the argument of this option.


BUGS

        Mkptypes is easily confused by complicated declarations, such as:

                   int ((*signal)())() f ...
        or
                   struct foo f int x, y; g foofunc() f ...

        This is because the program does not actually understand type
        definitions.  Some programs may need to be run through the
        preprocessor before being run through mkptypes.  The -n option will
        not work correctly on preprocessor output if function defintions (as
        opposed to declarations) appear in header files. 

        Typedef'd types aren't correctly promoted!      Example:

                typedef schar char; int foo(x) schar x;...

                mkptypes incorrectly generates the prototype int foo(schar x)
                rather than the (correct) int foo(int x).

        Functions named "inline" with no explicit type qualifiers are not
        recognized.

SEE ALSO

        cc (1), lint (1).

AUTHOR

        Eric R. Smith <ersmith@uwovax.uwo.ca>
        modified by jerry g. geiger <jerry@zelator.in-berlin.de>
        SEE:  CHANGES

NOTE

        There is no warranty for this program (as noted above, it is
        guaranteed to break sometimes anyways!). Mkptypes is in the public
        domain.
