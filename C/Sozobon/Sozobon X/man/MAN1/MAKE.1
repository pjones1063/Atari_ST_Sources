.\" -*- nroff -*-
.\" @(#)make.man, v2.00 1995/01/12, SozobonX make, Jerry Geiger
.\" $Header: make.man,v 2.00 Jan 12 1995 jerry Geiger$
.\" $Log:	make.man,v2.04 $
.\" manual
.\" some macros for missing .TP
.de Tt
.\" two tags and one description
.\" version, with indent as $3. 2 tags MUST be quoted to include blanks
.\" tags are bold;
.br
.if \nD>0 \{\
.	sp \nD
\}
.in 0.8i
.in +\nI
.if \n(.$>0 .if !"$1"" \&\fB $1 \fR
.br
.if \n(.$>1 .if !"$2"" \&\fB $2 \fR
.br
.if \n(.$=3 .in +$3
..
.de Tp
.\" IP extension  one , two (tag , indent), three (tag, hint, indent)
.\"   four(tag, brace, argument, brace) five (tag, brace, argument, brace,
.\"     hint)
.\"    or six arguments: (tag, brace, argument, brace, hint, indent)
.\" Tp one  [y three z]  [(five)]  6
.br
.if \nD>0 \{\
.	sp \nD
\}
.in 0.8i
.in +\nI
.if \n(.$>0 .if !"$1"" \&\fB $1 \fR
.if \n(.$>3 \&\fR$2\fI$3\fR$4
.if \n(.$>4 .if !"$5"" \&\fR   $5 \fR
.if \n(.$=3 .if !"$2"" \&\fR   $2 \fR
.br
.if \n(.$=6 .in +$6
.if \n(.$=3 .in +$3
.if \n(.$=2 .in +$2
.if \n(.$=4 .in +0.8i
.if \n(.$=5 .in +0.8i
.if \n(.$<2 .in +0.8i
..
.\" manual
.\"
.TH MAKE 1 "Sozobon Programmer's Manual" "v 2.00" "Jan 12 1995" ONLINE
.\" remove ONLINE from above line for a printable manual
.\"
.SH NAME
make  - The SozobonX make
.SH SYNOPSIS
.B make
.RI [ options ] 
.RI [< macro ">=<" val ">] ..."
.RI [< target "> ...]"
.br
.sp
.B ld
.RB [ -Vvheiknpqrst] 
.RI "[-]|[-f <" makefile ">]"
.RI "[-c|C <" dir ">]"
.RI "[-L <" size ">]"
.br
.in +5
.RI [< macro ">=<" val ">] ..."
.RI [< target "> ...]"
.PP
You have to keep this order in comandline: first the switches, then macro
assignements and at last the targets!
.SH DESCRIPTION 
.B make
is a tool to build one or more files from other files using rules describing
the commands how to make a file from another. Therefore dependencies are
listed in a 
.I makefile
and in builtin
.I rules
so that
.B make
knows which time-stamps of wich files it has to compare.
.br
This manual describes all features and options from Sozobon make. It is not
a description of how to use make and writing makefiles.
If you are not familiar with make read a general make documentation
like the 
.RI "'" make.doc "'"
from this distribution or the 
.I GNU
make manual.
.PP
.SS The 'makefile'
.I make
looks at first for a makefile named 
.RI "'" MAKEFILE "',"
.RI "or '" Makefile "',"
.RI "or '" makefile "',"
if there is none specified in the commandline. This file has to be in cwd.
.I make
will attempt to use its internal rules if no makefile exists, but a target
was given on the command line.  This means that simple programs in a single
file can be made without a makefile by typing:
.nf
	make file.ttp
.fi
.Tp include 5
With the include directive the reading of current 
.I makefile 
is stopped, all specified files are processed like the default 
.I makefile
, and after that the curent 
.I makefile 
processing is continued. Default targets are never taken from an include
file!
.br
.sp
.B include 
.RI < file "> [<" file "> ...]"
.br
.IR < file > 
may be a macro, known at this state, and have wildcards.
Include files are searched like the ones in 
.IR $MAKEFILES "."
.Tp "line continuation" 5
The line continuation character is '\fB\\\fR'.
Back slashes may appear in pathname,
but NOT at the end of a line, as it will be taken as a continuation
backslash, and not as a part of the pathname.  This should not create any
big problem as far as i can see - just add a space at and of line.
.SS Rules
If for a target with an extension (!!) no commands are specified, make tries
to find an implicit rule that matches this target by testing possible
dependencies.  The assumed dependency is added to the target's dependency
list, if it exists.  If not, the extension of the assumed dependancy is
compared with the first depandancy of the target, if it's the same the
matching implicit rule will be used for this target.  To pervent a problem
with linking all dependencies (default rule) and implicit adding an assumed
target, this not added for the default target (if there are any
dependencies). So:  
.nf
           foo.ttp:  bar.o x.o y.o 
will run the linker with the commandline:  
           cc -o foo.ttp bar.o x.o y.o 
.fi
And not add any dependency 'foo.o'. The imlicit rule used is:
.nf
           .o.ttp:  $(CC) $(LDFLAGS) -o $@ $^ $(LOADLIBES)
.fi
The implicit rule used for a default target is searched by looking at the
first dependency's suffix too!  Think of this if you specify dependencies
with different suffixes!  For the default target you will have to write your
own command(s) in this case. 
.br
The implicit rules are always suffix rules.  So your targets and
dependencies must have a suffix form 
.RI "'" .SUFFFIXES "'"
if they should be made with an implicit rule.  You can of course define new
implicit rules, or overwrite built-in ones.  Don't forget to add the new
suffixes to 
.RI "'" .SUFFIXES "'!"
.br
.PP
The most important builtin rules are: (you can see all with option
.BR -p ".)"
.nf
	.c.o:
		$(CC) -c $(CFLAGS) $<

	.s.o:
		$(CC) -c $(CFLAGS) $<

	.c.ttp:
		$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< $(LOADLIBES)

	.o.ttp:
		$(CC) $(LDFLAGS) -o $@ $^ $(LOADLIBES)

	.s.ttp:
		$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $< $(LOADLIBES)

	.l.c:
		$(LEX) $(LFLAGS) $<

	.y.c:
		$(YACC) $(YFLAGS) $<
.fi
.SS Macros
Macros are normally set in the following order:
.nf
   	internal defaults
   	environment variables		EXPORTED
   	makefile assignments
	commandline assignements	EXPORTED
.fi
If the 
.B "-e" option is given on the command line, the environment overrides
assignments in the makefile and the order becomes:
.nf
   	internal defaults
   	makefile assignments
   	environment variables		EXPORTED
	commandline assignements	EXPORTED
.fi
.sp
Internal (predefined) macros are:
.nf
	PATH = \\usr\\bin,\\bin
	SHPREFIX = -c
	CC = cc
	AR = ar
	TEX = tex
	LEX = lex
	YACC = yacc
	CFLAGS =
	LDFLAGS =
	LOADLIBES =
	TFLAGS =
	ARFLAGS =
	MAKE = make
	MAKEFLAGS = 
.fi
The macros
.RB "$(" MAKE ")"
and 
.RB "$(" MAKEFLAGS ")"
are set to the values, 
.B make
was invoked with. The
.B "-c"
and the
.B "-f"
switch with their arguments are of course not inherited into macro
.RB "$(" MAKEFLAGS ")."
Both are not exported by default, but maybe used to run nested makefiles
and, if you want so, keeping the options the first 
.B make
was started with.
.sp
The syntax for recognizing a macro/variable is:
.BI "$(" VAR ")"
or
.BI ${ VAR "},"
where
.RI "'" VAR "'"
is the variable/macro name. To define a variable/macro in a makefile write:
.RI "'<" macro "> " = 
.RI "<" value ">'"
where the rest of the line gets the value, skipping leading and trailing
whitespaces. 
.br
A macro/variable is evaluted immediately when found while reading the
makefile, if it is part of another variable's value, a target, a dependency
or any statement's argument.
.br
It is evaluated when used, if it is in a commandline in a rule, or
in a commandline for an explicit target.
.br
Special variables with the syntax
.BI "%(" VAR ")"
or
.BI %{ VAR }
are only allowed in dependency lists. These variables make it easier
e.g. to add a dependency build from the name of the target but without
the path part there:
.nf
	$(OBJECTS): %(*F).c $(HEADERS)
		cc -o $(*).o $(*F).c
.fi
This is expanded for every target in $(OBJECTS) to:
.nf
	<pathtarget.suffix>: <target>.c 1.h 2.h ..
		cc -o pathtarget.o target.c
.fi
.Tp builtins 5
.Tp export 5
Global export:  Export all macros from makefiles via environment to
subsequent processes (nested makes, or other child processes). this
directive works only if no unexport follows
.Tp export < macro > "..." 5
Export all specified macros as environment variables, they must not exist
until this directive is read, a global unexport does not affect this
directive. 
.Tp export < macro > " = <value>" 5
Defines a macro and makes it exportable at same time.
.br
Exported macros are expanded before putting them into environment!  In a
subsequent make you can use them as macros again. 
.Tp unexport 5
Don't export any macros from any makefile;  this is default, and resets only
a earlier global export directive (from another included makefile perhaps);
the last export or unexport directive is valid
.Tp unexport < macro > "..." 5
Do not export the specified macros, even environment variables or
commandline assignements are affected;  a global export directive does not
change the macros' status. 
.Tp unexport < macro > " = <value>" 5
Define a macro and make it private (usefull if it was an environment
variable). 
.Tp override < macro > " = value" 5
Define a macro and prevent it from being overwritten;  subsequent
assignements to this macro (e.g.  from commandline) will not replace the
current value, but be appended to the end. 
.SS Phony (special) Targets
.Tp .SUFFIXES
The list of dependecies, recognized by make.
.Tp .PRECIOUS
Dependencies of .PRECIOUS are not deleted if a command fails, by default
it has no dependencies.
.Tp .IGNORE
Sets a global switch like 
.B -i 
(ignore).
.Tp .SILENT
Sets a global switch like 
.B -s 
(silent).
.Tp .STRIPPATH
The path part of every target's name is stripped when making
the implicit dependency. This makes it easier to compile objects from a
sourcecode for different program versions into diffferent directories.
This is some sort of a global
.B %(*F)
for all inplicit dependencies.
.Tp .SHELL
Sets a global switch: all commandlines are passed to the shell 
.IR $SHELL "."
.SS Commandline Prefixes
You can prefix each commandline in the makefile with one or more of the
following prefix chars. The
.RB "'" @ "'"
and
.RB "'" - "'"
prefixes must be first ones, the excluding
.RB "'" % "'"
and
.RB "'" ! "'"
may follow. These prefixes modify the commandline handling. 
.Tp @
Sets the silent switch to this single comandline.
.Tp -
Sets the ignore switch to this single comandline.
.Tp !
By default this make executes all commandlines by self. This prefix makes
.I make 
to pass this single commandline to a shell. This is an important feature, 
cause 
.I make 
performs no expansions than wildcard expansion on the commandlines.
.Tp %
Forces make to treat the command in this line as an builtin one.
.SS Automatic variables
.Tp $@
Is the current target of an implicit rule, or an explicit one with multiple
targets.
.B $(@F) 
is the filename part of 
.B $@
, and 
.B $(@D) 
the path in 
.BR $@ "."
.Tp $*
This the basename of the curent target. This works only if the target
has a recognized suffix.
.B $(*F) 
is the filename part of 
.B $*
, and 
.B $(*D)
the path in 
.B $*
.Tp $<
This is the name of the first dependency.  If the target got it's commands
from an implicit rule, this will be the first dependency added by this rule. 
.B $(<F)
is the filename part of 
.B $<
, and 
.B $(<D) 
the path in 
.B $<
.Tp $^
This macro contains the names of all dependencies, with spaces between them. 
This is useful for linking a file. (See default rules).
.Tp $?
The names of all dependencies that are newer than the target, with spaces
between them.  This maybe useful in explicit rules when you want to work
only with the changed files.  For example to update an archive: 
.SS Wildcards
This make tries to expand every token containing a wildcard character like: 
.RB "'" * "'"
or 
.RB "'" ? "'"
or 
.RB "'" [ "'"
as a filename. The token is replaced by the matching filenames found. 
It uses usual FNRexpressions
as wildcards: '*' '?' '[...]' '[?-?]' '[^...]'
.SH OPTIONS 
.Tt --version -V 5 
Print detailed Version information to stdout and
exit 
.Tt --help -h 5 
Print the help page and exit 
.Tp -v (verbose) 5 
Generally show more information about what 
.I make
is doing and print short version information (to stderr). 
.Tp -  5 
Read the 
.I makefile
from stdin.
.Tp -c < dir > (cd) 5
Change the current working directory to 
.RI < dir >
before running (and looking for a makefile).
.Tp -f < file > (file) 5
Use and read file
.RI < file >
as makefile.
.Tp -L < size > (line) 5
Set the internal buffer size for reading and expand lines from a makefile to
.B <size>
KBytes. Default size is 4K, you can set it up to 64 K if you get an error
message like 
.B "line too long"
or a similiar one.
.Tp -e (env) 3 
The environment variables overwrite the makefile's variables.
.Tp -s (silent) 3 
Don't print anything except error messages.
.Tp -i (ignore) 3 
Ignore the exit status of the commands excuted by make: just execute all
comands. 
.Tp -k (keep) 3 
Keep going on processing the makefile after an error. This is much better
than 
.B "-i"
cause the next target will be made after an error until make can't do
anything more.
.Tp -n  2 
Do nothing, just tell what make would do (e.g. for testing makefiles).
.Tp -q (question) 3 
Do nothing but test the target. If it is not up to date make will return a
status of 1.
.Tp -t (touch) 3 
Don't really make any targets, but touch the files which need an update.
.SH ENVIRONMENT
The environment is read and macros corresponding to the variables found are
initialized within make.  This means that setting the variable
.B $PATH
causes make to set the macro 
.B PATH 
to the value found and use that for
command searches as described above.  With a macro assignement in
commandline you can overwrite any macro, from makefile and environment, too. 
.PP
If a environment variable 
.RI "'" $MAKEFILES "'" 
exists, it's value is used as a list of makefiles to include.  The default
target is never taken from one of these files, but they are read at first. 
If there are no absolut paths specified in the filenames, they are searched
in the paths of '$INCLUDEDIR' and a directory 'make' in that path.  If there
is no environment variable '$INCLUDEDIR' or '$INCLUDE' (a list of inlude
paths) '\\usr\\include,\\usr\\local\\include' is assumed. 
.PP
.I $INCLUDEDIR
This path replaces the builtin search pathes for include makefiles
not to find in cwd. 
.PP
.I $INCLDUE
A list of pathes where makefiles to incldue are searched.
If 
.I $STDERR 
is present, stderr handle (2) is used for diagnostic output.
.SH DIAGNOSTICS
.B make
will claim about a missing target, if there is none in commandline or the 
makefile.
If it finds a syntax error in the makefile it will report this and
exit.
.SH "SEE ALSO"
cc(1)
.SH BUGS
Without doubt, there are some bugs in this program.  If you
discover one, please report it to maintainer.
.SH AUTHOR
PD make Adapted from mod.sources Vol 7 Issue 71, 1986-12-03.
.br
port to ATARI TOS by Jwahar Bammi & Ton van Overbeek
.br
adapted for SOZOBON by Tony Andrews 1988 
.sp
eXtended Version by Jerry G Geiger (1992-1995)
.SH VERSION
make V2.04  Mar 30 1995
