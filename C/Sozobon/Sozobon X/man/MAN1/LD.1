.\" -*- nroff -*-
.\" $Header: ld.man,v 2.00x10 Apr 8 1995 Jerry Geiger$
.\" $Log:	ld.man,v $
.\" manual
.\" some macros for missing .TP
.de Tt
.\" two tags and one description
.\" version, with indent as $3. 2 tags MUST be quoted to include blanks
.\" tags are bold;
.br
.if \nD>0 \{\
.	sp \nD
\}
.in 0.8i
.in +\nI
.if \n(.$>0 .if !"$1"" \&\fB $1 \fR
.br
.if \n(.$>1 .if !"$2"" \&\fB $2 \fR
.br
.if \n(.$=3 .in +$3
..
.de Tp
.\" IP extension  one , two (tag , indent), three (tag, hint, indent)
.\"   four(tag, brace, argument, brace) five (tag, brace, argument, brace,
.\"     hint)
.\"    or six arguments: (tag, brace, argument, brace, hint, indent)
.\" Tp one  [y three z]  [(five)]  6
.br
.if \nD>0 \{\
.	sp \nD
\}
.in 0.8i
.in +\nI
.if \n(.$>0 .if !"$1"" \&\fB $1 \fR
.if \n(.$>3 \&\fR$2\fI$3\fR$4
.if \n(.$>4 .if !"$5"" \&\fR   $5 \fR
.if \n(.$=3 .if !"$2"" \&\fR   $2 \fR
.br
.if \n(.$=6 .in +$6
.if \n(.$=3 .in +$3
.if \n(.$=2 .in +$2
.if \n(.$=4 .in +0.8i
.if \n(.$=5 .in +0.8i
.if \n(.$<2 .in +0.8i
..
.\" manual
.\"
.TH LD 1 "Sozobon Programmer's Manual" "v 2.00x9" "Jul 21 1994"
.\" remove ONLINE from above line for a printable manual
.\"
.SH NAME
ld  - The SozobonX Linker  (loader)
.SH SYNOPSIS
.B ld
.RI [ options "] [<" file "> ...]"
.br
.sp 2
.B ld
.RB [ -Vvhtpmb ][ -v2 ]
.RB [ --nofload ][ --nofram ]
.RB [ --nofmem ]
.br
.sp
.in +5
.RB "[" "-B"
.RI "<" n ">]"
.RB "[" "-o"
.RI "<" "file" ">]"
.RB "[" "-u"
.RI "<" "symbol" ">]"
.RB "[" "-L" 
.RI "<" "path" ">] 
.br
.sp
.in +5
.RB "[" "-f" 
.RI "<" "link file" ">] |"
.RI [< file "> ...]"
.SH DESCRIPTION 
The 
.I ld 
command links object modules and libraries to form
an executable program.  Both object modules and libraries may be passed to
ld for linking.  It can handle DRI, SozobonX objects and DRI archives only. 
.PP
By default the output is written to file 
.RB "'" a.out "',"
and the 
.IR Fastload ,
.RI "'" "load to FastRAM" "'"
and the 
.RI "'" "malloc from FastRAM" "'"
program header flags are set.
.PP
Several options may be specified to alter the operation of the linker:  
.SH OPTIONS 
.Tt --version -V 5 
Print detailed Version information to stdout and
exit 
.Tt --help -h 5 
Print the synospsis information (usage) and exit 
.Tp -v (verbose) 5 
Generally show more information about what 
.I ld 
is doing and print short version information (to stderr). 
.Tp -v2 5 
If you put two 
.RB "'" v "'s"
or a 
.RB "'" -v2 "'"
into commandline 
.I ld 
will be more verbose, printing
the symbols looked for in the libraries, and the extern symbols of the newly
added modules from the libraries.  
.Tp -B<n> 5
Increase the limits for internal buffers by factor
.RI "<" n ">."
This option will be replaced by some automatic allocation routines some
time.
.Tp -t (table) 5 
Put a symbol table in the output file.  
.Tp -p (passes) 5 
Make multiple passes over each library until no more references can be
satisfied.  If libraries are ordered appropriately, this option is not
needed and linking will be faster. 
.Tp -f < file > "" 5
This option is useful when many files are to be linked.  The loader reads
the file
.RI < file > 
specified for a list of object modules and libraries to be
linked.  Names in the file should be separated by white space or newlines. 
.I cc 
will always use this option.
.Tp -o < file > "" 5
By default, the name of the executable file is 
.RI "'" a.out "'."
This option allows a different name to be specified. 
.Tp -u < symbol > "" 5
Forces ld to link the symbol 
.RI < symbol > 
at once if it is found in any library module. 
.br
The given symbol is marked as undefined.  This can be useful when linking
from libraries.  And a symbol (e.g.  
.IR __printf ) 
can be marked as undefined to
force loading it from a library, before another module (e.g.  from another
library) asks for it. 
.Tp -b 5
This option can be used when linking large programs to reduce the amount of
memory used by the loader.  The loader makes more disk accesses when this
option is used. 
.Tt -M -m 5
Print a load map.  (I've read anywhere -M is standard?) A table of all
linked objects with their sizes is printed to stdout. 
.Tp "" "-L<" path > "" 5
Add path to the search list to find following (in commandline)
libraries and object modules. The pathes specified with
.I -L 
option are searched first, after cwd and before builtin or 
.I $LIB
pathes, in the order specified in the commandline.
.Tp --nofload 5
Do not set Fastload flag in program header of generated executable.
.Tp --nofram 5
Do not set 'load to FastRAM' flag in program header of generated executable.
.Tp --nofmem 5
Do not set 'malloc from FastRAM' flag in program header of generated 
executable.
.SH ENVIRONMENT
.I $LIBDIR
This path replaces the builtin search pathes for libraries and object
modules not to find in cwd.
.PP
.I $LIB
A list of pathes where libraries and object modules are to search. If this
variable is specified the builtin pathes and the 
.I $LIBDIR
path are ignored for searches.
.PP
If 
.I $STDERR 
is present, stderr handle (2) is used for diagnostic output.

.SH DIAGNOSTICS
.I Warnings:
.nf
message:
Double def of <sym>: in <module (archive)> type <char>,
                in <module (archive)> type <char>

Tells you that symbol <sym> is defined in the two named modules,
the second module name is the first definition. The type char
[Text|Data|Bss|Common|?] tells you the symbols' type in the module.

If a symbol is already defined, the first definition is used.

message:
Common sizes differ: <sym> in <module (archive)> <size>,
                        in <module (archive)> <size>

Tells you, that Common symbol <sym> is defined with different sizes
in different modules.
The larger size will be used for that symbol.
.fi
.I Error Messages:
.nf
message:
Undef <sym> from <module (archive)>

The symbol <sym>, used in <module> (maybe in others, too) isn't
defined in any specified module. (No output!)

message:
Undef Common <sym> from <module (archive)>

The Common symbol <sym> is never defined with a length value.
(No output is generated!);
.fi
.SH LIMITS
.nf
The number of handled files, objects and symbols is still limited:
60 different files
1000 global symbols in resulting object (executable)
400 symbols in every object module
600 objects in a library (only used for rescanning - multiple passes)
300 objects currently used
.fi
.SH "SEE ALSO"
cc(1), nm(1), ar(1), libsort(1)
.SH BUGS
Without doubt, there are some bugs in this program.  If you
discover one, please report it to maintainer.
.SH AUTHOR
Written by Johann Ruegg,
Copyright (c) 1988,89,90,91 by Sozobon, Ltd.
.sp
eXtended Version by Holger Weets, Jerry G Geiger (1992-1995)
.SH VERSION
ld V2.00x10  Apr 8 1995
