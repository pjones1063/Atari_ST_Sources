This file is intended for those that don't have the time to RTFM
before they test the program. It is an excerpt from the
documentation.
To take full benefit from MEMDEBUG, you should read the manual!

rEnE
--------------------------------------------------------------------

Using Memdebug in a Program

To produce the MEMDEBUG object code file, you have to compile
memdebug.c, memfree.c and memalpha.c. BEWARE: don’t define the
MEMDEBUG symbol, else the utility will end up in an infinite loop!

Three operations are necessary to add Memdebug’s facilities to
a program. First, the <Memdebug.h> library header needs to be
included into every source file of the program. If the program
owns a common header file that is included everywhere, it’s 
simplest to include <Memdebug.h> there.

Then, the MEMDEBUG pre-processor symbol has to be defined to
enable Memdebug’s functions. If possible, you should do this
on the compiler call line (using -d or -define or similar). 
Of course, you may also define (or #undefine) the symbol 
before every inclusion of <Memdebug.h>.

Finally, you will need to include the Memdebug object file
to your link list.

This is all that is needed to get the basic, default information
of Memdebug. All errors will be detected by Memdebug, and final
statistics will be generated. All output will be send to stderr
and stdout. The internal memory limit is set to infinite, and no
call sequence trace is generated (to save some memory). Memory 
contents are destroyed when a free() of a pointer is made.

The first call to a memory management function will start Memdebug.
Thus, if no memory function is used, no final statistics will be 
printed.
