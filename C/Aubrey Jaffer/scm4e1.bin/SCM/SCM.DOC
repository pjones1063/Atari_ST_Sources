


SCM(19 Dec 1993)                                 SCM(19 Dec 1993)


NNAAMMEE
       scm - a Scheme Language Interpreter

SSYYNNOOPPSSIISS
       ssccmm  [-ibvqmu]  [-a _k_b_y_t_e_s ] [-p _n_u_m_b_e_r ] [-c _e_x_p_r_e_s_s_i_o_n ]
       [-e _e_x_p_r_e_s_s_i_o_n ] [-f _f_i_l_e_n_a_m_e ] [-l _f_i_l_e_n_a_m_e ] [-r _f_e_a_t_u_r_e
       ] [-- | - | -s] [filename] [arguments ...]

DDEESSCCRRIIPPTTIIOONN
       _S_c_m is a Scheme interpreter.

       Upon  startup _s_c_m loads the file specified by by the envi-
       ronment  variable  SCM_INIT_PATH  or  by   the   parameter
       IMPLINIT in the makefile (or scmfig.h) if SCM_INIT_PATH is
       not defined.  The makefiles attempt  to  set  IMPLINIT  to
       "Init.scm" in the source directory.

       Unless  the  option  _-_n_o_-_i_n_i_t_-_f_i_l_e  occurs  in the command
       line,  "Init.scm"  checks  to  see  if   there   is   file
       "ScmInit.scm"  in  the  path  specified by the environment
       variable HOME (or in the  current  directory  if  HOME  is
       undefined).  If it finds such a file it is loaded.

       "Init.scm"  then looks for command input from one of three
       sources: From an option on the command line, from  a  file
       named on the command line, or from standard input.


OOPPTTIIOONNSS
       The  options  are  processed in the order specified on the
       command line.

       --aa_k_b_y_t_e_s
            specifies that _s_c_m should allocate an  initial  heap-
            size of _k_b_y_t_e_s_.  This option, if present, must be the
            first on the command line.  This option  is  not  yet
            operational.

       --nnoo--iinniitt--ffiillee
            Inhibits  the  loading  of "ScmInit.scm" as described
            above.

       --ee_e_x_p_r_e_s_s_i_o_n

       --cc_e_x_p_r_e_s_s_i_o_n
            specifies that the scheme expression _e_x_p_r_e_s_s_i_o_n is to
            be evaluated.  These options are inspired by _p_e_r_l and
            _s_h respectively.  On Amiga systems the entire  option
            and  argument  need  to  be  enclosed in qoutes.  For
            instance "-e(newline)".

       --rr_f_e_a_t_u_r_e
            requires _f_e_a_t_u_r_e_.  This will load a file from SLIB if
            that _f_e_a_t_u_r_e is not already supported.  If _f_e_a_t_u_r_e is



                                                                1





SCM(19 Dec 1993)                                 SCM(19 Dec 1993)


            2, 3, 4, or 5 _s_c_m will require the  features  necces-
            sary  to  support R2RS, R3RS, R4RS, or proposed R5RS,
            respectively.

       --ll_f_i_l_e_n_a_m_e

       --ff_f_i_l_e_n_a_m_e
            loads _f_i_l_e_n_a_m_e_.  _S_c_m will load the first (unoptioned)
            file  named on the command line if no -c, -e, -f, -l,
            or -s option preceeds it.

       --pp_l_e_v_e_l
            sets the prolixity (verboseness) to _l_e_v_e_l_.   This  is
            the same as the _s_c_m command (verobse _l_e_v_e_l ).

       --vv   (verbose mode) specifies that _s_c_m will print prompts,
            evaluation  times,  notice  of  loading  files,   and
            garbage  collection  statistics.  This is the same as
            _-_p_3_.

       --qq   (quiet mode) specifies that _s_c_m will print  no  extra
            information.  This is the same as _-_p_0_.

       --mm   specifies  that  subsequent  loads,  evaluations, and
            user interactions will be with R4RS macro capability.
            To use a specific R4RS macro implementation from SLIB
            (instead  of  SLIB's  default)  put  _-_r  _m_a_c_r_o_p_a_c_k_a_g_e
            before _-_m on the command line.

       --uu   specifies  that  subsequent  loads,  evaluations, and
            user interactions will be without R4RS macro capabil-
            ity.  R4RS macro capability can be restored by a sub-
            sequent _-_m on the command line or from Scheme code.

       --ii   specifies that _s_c_m should  run  interactively.   That
            means that _s_c_m will not terminate until the _(_q_u_i_t_) or
            _(_e_x_i_t_) command is given, even if  there  are  errors.
            It  also  sets the prolixity level to 2 if it is less
            than 2.  This will print prompts,  evaluation  times,
            and notice of loading files.  The prolixity level can
            be set by subsequent options.  If _s_c_m is started from
            a  tty,  it will assume that it should be interactive
            unless given a subsequent _-_b option.

       --bb   specifies  that  _s_c_m  should  run  non-interactively.
            That  means  that _s_c_m will terminate after processing
            the command line or if there are errors.

       --ss   specifies, by analogy with _s_h_, that  further  options
            are to be treated as program aguments.

       --    ----  specifies  that  there are no more options on the
            command line.




                                                                2





SCM(19 Dec 1993)                                 SCM(19 Dec 1993)


EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       SSCCMM__IINNIITT__PPAATTHH
            is the pathname where _s_c_m will look for its  initial-
            ization  code.  The default is the file "Init.scm" in
            the source directory.

       SSCCHHEEMMEE__LLIIBBRRAARRYY__PPAATTHH
            is the SLIB Scheme library directory.

       HHOOMMEE is the directory where "Init.scm" will look  for  the
            user initialization file "ScmInit.scm".

SSCCHHEEMMEE VVAARRIIAABBLLEESS
       **aarrggvv**
            contains  the  list  of  arguments  to  the  program.
            _*_a_r_g_v_* can change during argument  processing.   This
            list  is  suitable  for  use  as  an argument to SLIB
            _g_e_t_o_p_t_.

       **RR44RRSS--mmaaccrroo**
            controls whether loading and interaction support R4RS
            macros.  Define this in "ScmInit.scm" or files speci-
            fied on the command line.  This can be overridden  by
            subsequent -m and -u options.

       **iinntteerraaccttiivvee**
            controls interactivity as explained for the -i and -b
            options.  Define this in "ScmInit.scm" or files spec-
            ified on the command line.  This can be overridden by
            subsequent -i and -b options.

EEXXAAMMPPLLEESS
       % scm foo.scm arg1 arg2 arg3
            Load and execute the contents of foo.scm.  Parameters
            arg1  arg2  and  arg3  are  stored in the global list
            *argv*.

       % scm -f foo.scm arg1 arg2 arg3
            The same.

       % scm -s foo.scm arg1 arg2
            Set *argv* to ("foo.scm"  "arg1"  "arg2")  and  enter
            interactive session.

       %  scm  -e  '(display "foo")(display (list-ref *argv*
            *optind*))' bar
            Print ``foobar''

FFEEAATTUURREESS
       Runs  under  Amiga, Atari-ST, MacOS, MS-DOS, OS/2, NOS/VE,
       Unicos, VMS, Unix and similar systems.  Support for  ASCII
       and EBCDIC character sets.

       Conforms  to  Revised^4 Report on the Algorithmic Language



                                                                3





SCM(19 Dec 1993)                                 SCM(19 Dec 1993)


       Scheme and the IEEE P1178 specification.

       Support for SICP, R2RS, R3RS, and (proposed)  R5RS  scheme
       code.

       Many Common Lisp functions: logand, logor, logxor, lognot,
       ash,  logcount,  integer-length,  bit-extract,   defmacro,
       macroexpand,  macroexpand1, gentemp, defvar, force-output,
       software-type,  get-decoded-time,   get-internal-run-time,
       get-internal-real-time,  delete-file,  rename-file,  copy-
       tree, acons, and eval.

       Char-code-limit,   most-positive-fixnum,    most-negative-
       fixnum,   and   internal-time-units-per-second  constants.
       *Features* and *load-pathname* variables.

       Arrays and bit-vectors.  String ports and software  emula-
       tion  ports.   I/O extensions providing most of ANSI C and
       POSIX.1 facilities.

       User definable responses to interrupts  and  errors,  Pro-
       cess-syncronization  primitives, String regular expression
       matching, and the CURSES screen management package.

       Available add-on packages including an interactive  debug-
       ger, database, X-window graphics, BGI graphics, Motif, and
       Open-Windows packages.

       A compiler  (HOBBIT,  available  separately)  and  dynamic
       linking of compiled modules.

       Setable   levels  of  monitoring  and  timing  information
       printed interactively (the `verbose' function).   Restart,
       quit, and exec.

FFIILLEESS
       code.doc
              Documentation  on  the  internal representation and
              how to extend or include scm in other programs.

       MANUAL
              Documentation  of  SCM  extensions  (beyond  Scheme
              standards).

AAUUTTHHOORR
       Aubrey Jaffer
       (jaffer@ai.mit.edu)

BBUUGGSS
       The -a option is not yet functional.

SSEEEE AALLSSOO
       The  Scheme  specifications for details on specific proce-
       dures (altorf.ai.mit.edu:archive/scheme-reports/) or



                                                                4





SCM(19 Dec 1993)                                 SCM(19 Dec 1993)


       IEEE Std 1178-1990,
       IEEE Standard for the Scheme Programming Language,
       Institute of Electrical and Electronic Engineers, Inc.,
       New York, NY, 1991

       Brian Harvey and Matthew Wright
       Simply Scheme: Introducing Computer Science_
       MIT Press, 1994 ISBN 0-262-08226-8

       R. Kent Dybvig, The Scheme Programming Language,
       Prentice-Hall Inc, Englewood Cliffs, New Jersey 07632, USA

       H. Abelson, G. J. Sussman, and J. Sussman,
       Structure and Interpretation of Computer Programs,
       The MIT Press, Cambridge, Massachusetts, USA

       Enhancements  in  _s_c_m not in the standards are detailed in
       MANUAL in the source directory.







































                                                                5


