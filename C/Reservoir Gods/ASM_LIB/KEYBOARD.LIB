***********************************
*=================================*
* RESERVOIR GODS LIBRARY ROUTINES *
*=================================*
*       |                |        *
*       |KEYBOARD LIBRARY|        *
*       |                |        *
***********************************
* CODE: MR. PINK | (C): 19/02/96  *
***********************************
* UPDATE: 22/2/96  *
********************

**************************************************************************
	SECTION TEXT
**************************************************************************


***************************************************************************
* KEYBOARD LIBRARY : FUNCTIONS
***************************************************************************
* rlkb_keyboard_constructor      : init ikbd
* rlkb_get_key                   : get (any) character from keyboard
* rlkb_wait_key                  : wait for (specified) key press
* rlkb_set_mouse_limits          : set x,y bounds for mouse clip (d0-3)
* rlkb_mouse_on                  : switch relative mouse on
* rlkb_mouse_off                 : no mouse reporting
* rlkb_joystick_event_mode       : switch joystick to event mode reporting
* rlkb_joystick_interrogate_mode : joystick interrogate mode on
* rlkb_read_joypads              : interrogate joypads A+B
* rlkb_interrogate_joysticks     : generate interrogate packet
* rlkb_return_mouse              : returns mouse x,y,key in d0,d1,d2
* rlkb_return_joystick_0         : returns j0 packet in d0
* rlkb_return_joystick_1         : returns j1 packet in d0
* rlkb_return_powerpad_a         : returns packets in d0+d1
* rlkb_return_powerpad_b         : returns packets in d0+d1
* rlkb_keyboard_deconstructor    : restore ikbd
***************************************************************************


rlkb_keyboard_constructor:
	movem.l	a0-1/d0,-(a7)	
	lea	rlkb_keyboard_space,a0
	bsr	rlkb_clear_ikbd
	bsr	rlkb_get_keyboard_tables

	lea	rlkb_key_table(a0),a1
	moveq	#127,d0
.clr	clr.b	(a1)+
	dbra	d0,.clr

	clr.b	rlkb_key_pressed(a0)

	lea	rlkb_key_buffer(a0),a1
	move.l	a1,rlkb_key_ptr(a0)
	move.w	sr,-(a7)
	ori.w	#$0700,sr
	move.l	$118.w,rlkb_old_118(a0)
	move.l	#rlkb_my_ikbd,$118.w
	move.w	(a7)+,sr
	movem.l	(a7)+,a0-1/d0
	rts

rlkb_get_keyboard_tables:
	movem.l	a0-2/d0-2,-(a7)
	move.l	#-1,-(a7)
	move.l	#-1,-(a7)
	move.l	#-1,-(a7)
	move.w	#$10,-(a7)
	trap	#14
	lea	14(a7),a7
	lea	rlkb_keyboard_space,a1
	move.l	d0,a0
	move.l	(a0)+,rlkb_normal_table(a1)
	move.l	(a0)+,rlkb_shift_table(a1)
	move.l	(a0)+,rlkb_caps_table(a1)
	movem.l	(a7)+,a0-2/d0-2
	rts

rlkb_get_key:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	clr.b	rlkb_key_pressed(a0)
.wait	tst.b	rlkb_key_pressed(a0)
	beq.s	.wait
	move.b	rlkb_current_key(a0),d0
	clr.b	rlkb_key_pressed(a0)
	move.l	(a7)+,a0
	rts	

rlkb_convert_key_ascii:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	tst.b	rlkb_key_table+$2a(a0)
	bne	.shift	
	tst.b	rlkb_key_table+$36(a0)
	beq	.norm
.shift	move.l	rlkb_shift_table(a0),a0
	bra.s	.conv
.norm	move.l	rlkb_normal_table(a0),a0
.conv	move.b	(a0,d0.w),d0	
	move.l	(a7)+,a0
	rts

rlkb_convert_key_upper_ascii:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	move.l	rlkb_caps_table(a0),a0
	move.b	(a0,d0.w),d0	
	move.l	(a7)+,a0
	rts

rlkb_return_key_response:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#-1,d0
	tst.b	rlkb_key_pressed(a0)
	beq.s	.nokey
	clr.b	rlkb_key_pressed(a0)
	moveq	#0,d0
	move.b	rlkb_current_key(a0),d0		
.nokey	tst.l	d0
	move.l	(a7)+,a0
	rts

rlkb_clear_key_status:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	clr.b	rlkb_key_pressed(a0)
	move.l	(a7)+,a0
	rts

rlkb_check_key_status:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	tst.b	rlkb_key_pressed(a0)
	move.l	(a7)+,a0
	rts

rlkb_wait_key:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	and.w	#127,d0
.wt	tst.b	rlkb_key_table(a0,d0.w)
	beq.s	.wt
	move.l	(a7)+,a0
	rts

rlkb_test_key
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	and.w	#127,d0
	tst.b	rlkb_key_table(a0,d0.w)
	move.l	(a7)+,a0
	rts


rlkb_control_status
	move.l	a0,-(a7)	
	lea	rlkb_keyboard_space,a0
	lea	rlkb_key_table(a0),a0
	move.b	$1d(a0),d0
	move.l	(a7)+,a0
	rts

rlkb_alt_status
	move.l	a0,-(a7)	
	lea	rlkb_keyboard_space,a0
	lea	rlkb_key_table(a0),a0
	move.b	$38(a0),d0
	move.l	(a7)+,a0
	rts

rlkb_shift_status
	move.l	a0,-(a7)	
	lea	rlkb_keyboard_space,a0
	lea	rlkb_key_table(a0),a0
	move.b	$2a(a0),d0
	or.b	$36(a0),d0
	move.l	(a7)+,a0
	rts

rlkb_set_mouse_limits:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	move.w	d0,rlkb_mousex_min(a0)
	move.w	d1,rlkb_mousey_min(a0)
	move.w	d2,rlkb_mousex_max(a0)
	move.w	d3,rlkb_mousey_max(a0)
	move.l	(a7)+,a0
	rts

rlkb_set_mouse_position:
	move.l	a0,-(a7)
	move.w	sr,-(a7)
	ori.w	#$0700,sr
	lea	rlkb_keyboard_space,a0
	move.w	d0,rlkb_mousex(a0)
	move.w	d1,rlkb_mousey(a0)
	move.w	(a7)+,sr
	move.l	(a7)+,a0
	rts

rlkb_mouse_on:
	bsr	rlkb_clear_ikbd
	moveq	#8,d0			;relative mouse reporting
	bsr	rlkb_send_ikbd
	rts

rlkb_mouse_off:
	bsr	rlkb_clear_ikbd
	moveq	#$12,d0			;mouse reporting off
	bsr	rlkb_send_ikbd
	rts

rlkb_joystick_event_mode
	bsr	rlkb_clear_ikbd
	moveq	#$14,d0			;joystick event report mode
	bsr	rlkb_send_ikbd
	rts

rlkb_joystick_interrogate_mode
	bsr	rlkb_clear_ikbd
	moveq	#$15,d0			;joystick interrogate mode
	bsr	rlkb_send_ikbd
	rts

rlkb_interrogate_joysticks
	bsr	rlkb_clear_ikbd
	moveq	#$16,d0			;interrogate joysticks
	bsr	rlkb_send_ikbd
	rts

rlkb_read_powerpads:
	bsr	rlkb_read_powerpad_a		;get powerpad a data
	bsr	rlkb_read_powerpad_b		;get powerpad b data
	rts                             ;return

rlkb_return_mouse:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	moveq	#0,d1
	moveq	#0,d2
	move.w	rlkb_mousex(a0),d0
	move.w	rlkb_mousey(a0),d1
	move.b	rlkb_mousek(a0),d2
	move.l	(a7)+,a0
	rts
	

rlkb_return_joystick_0:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	move.b	rlkb_j1_packet,d0
	move.l	(a7)+,a0
	rts

rlkb_return_joystick_1:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	move.b	rlkb_j2_packet,d0
	move.l	(a7)+,a0
	rts

rlkb_return_powerpad_a:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	moveq	#0,d1
	move.b	rlkb_ppa_dir(a0),d0
	move.w	rlkb_ppa_key(a0),d1
	move.l	(a7)+,a0
	rts	

rlkb_return_powerpad_b:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	moveq	#0,d0
	moveq	#0,d1
	move.b	rlkb_ppb_dir(a0),d0
	move.w	rlkb_ppb_key(a0),d1
	move.l	(a7)+,a0
	rts	

rlkb_keyboard_deconstructor:
	move.l	a0,-(a7)
	lea	rlkb_keyboard_space,a0
	bsr	rlkb_clear_ikbd
	move.w	sr,-(a7)
	ori.w	#$0700,sr
	move.l	rlkb_old_118(a0),$118.w
	move.w	(a7)+,sr
	bsr	rlkb_clear_ikbd
	
	bra.s	.clrk
.loop	bsr	rlgd_conin
.clrk	bsr	rlgd_conis
	bne.s	.loop

	move.l	(a7)+,a0
	rts

rlkb_clear_ikbd:
        btst    #0,$fffffc00.w		;is ikbd data reg full?
        beq.s   .ok			;its empty so end
        move.b  $fffffc02.w,d0		;get ikbd data
        bra.s   rlkb_clear_ikbd		;loop
.ok:    rts                             ;return

rlkb_send_ikbd:  
	btst    #1,$fffffc00.w		;is data reg empty?
        beq.s   rlkb_send_ikbd		;no, wait for empty
        move.b  d0,$fffffc02.w		;write to ikbd data reg
        rts                             ;return


rlkb_my_ikbd:
	move.w	#$2500,sr		;set ipl level

	movem.l	d0/a0-a2,-(a7)		;save registers
	movea.w	#$fffffc00,a0		;ikbd control registers
	lea	rlkb_keyboard_space,a2

	move.b	(a0),d0			;read control reg
	btst	#7,d0			;int request?
	beq	rlkb_endmykey		;no

rlkb_keyloop
	moveq	#0,d0			;clear d0
	move.b	2(a0),d0		;read ikbd data
	tst.b	rlkb_key_cntr(a2)	;is this first byte
	beq	rlkb_chk_head		;yes, so check for header
		
	move.l	rlkb_key_ptr(a2),a1	;ptr into key storage area
	move.b	d0,(a1)+		;store keyboard data
	move.l	a1,rlkb_key_ptr(a2)	;update ptr
	subq.b	#1,rlkb_key_cntr(a2)	;decrement data to get
	bne	rlkb_last_key_check	;more data to get

rlkb_process_packet:
	lea	rlkb_key_buffer(a2),a1	;start of key storage data
	moveq	#0,d0			;clear d0
	move.b	(a1),d0			;get first byte
	sub.l	#$f6,d0			;minus default packet header value
	and.w	#$f,d0			;mask off unwanted bits
	cmp.w	#10,d0			;is it a valid packet
	bge.s	.noj			;no
	jsr	([rlkb_key_handlers,d0.w*4])	;jump to packet handler routine
.noj	bra	rlkb_last_key_check	;check for more key data

rlkb_chk_head
	cmp.w	#$f6,d0			;is it packer header
	blt.s	rlkb_store_key		;no, store as a key

	move.b	d0,rlkb_key_buffer(a2)		;store packet header
	lea	rlkb_key_buffer+1(a2),a1
	move.l	a1,rlkb_key_ptr(a2)		;init key pointer
	lea	rlkb_packet_table,a1		;packet table
	sub.b	#$f6,d0				;d0 is offset
	move.b	(a1,d0.w),rlkb_key_cntr(a2)	;bytes of data to be read
	bra	rlkb_last_key_check		;get data

rlkb_store_key
	movem.l	d0-a6,-(a7)
	lea	$f96.w,a0
	jsr	([$1132.w])
	movem.l	(a7)+,d0-a6
	bclr	#7,d0			;check 'release' bit
	beq.s	rlkb_setkey		;0, so set key press
	clr.b	rlkb_key_table(a2,d0.w)	;key released
	bra.s	rlkb_last_key_check	;get key data
rlkb_setkey
	st.b	rlkb_key_table(a2,d0.w)	;set key pressed
	st.b	rlkb_key_pressed(a2)
	move.b	d0,rlkb_current_key(a2)

rlkb_last_key_check:	
	move.b	(a0),d0		;read ikbd control
	btst	#0,d0		;more data to read?
	bne	rlkb_keyloop	;yes, so process it
rlkb_endmykey
	movem.l	(a7)+,d0/a0-2	;restore registers
	bclr	#6,$fffffa11.w	;signal end of ikbd interrupt
	rte


rlkb_keyboard_packet_handler:
	moveq	#0,d0			;clear d0
	move.b	1(a0),d0		;get key
	bclr	#7,d0			;key pressed?
	beq.s	.setkey			;yes, set it
	clr.b	rlkb_key_table(a2,d0.w)	;indicate key release
	rts                             ;return
.setkey	st.b	rlkb_key_table(a2,d0.w)	;clear key
	st.b	rlkb_key_pressed(a2)
	move.b	d0,rlkb_current_key(a2)
	rts                             ;return

rlkb_absolute_mouse_handler:			;no absolute mouse handler!
	move.b	(a1),d0			;get mouse key info
	and.w	#%11,d0			;isolate l+r buttons
	move.b	d0,rlkb_mousek(a2)		;save mouse key info
	rts

rlkb_time_of_day_handler:			;no time of day handler!
rlkb_joystick_report_handler:
	move.b	1(a1),rlkb_j1_packet(a2)		;get joystick 1 packet
	move.b	2(a1),rlkb_j2_packet(a2)		;get joystick 2 packet
	rts                             ;return

rlkb_joystick0_handler:
	move.b	1(a1),rlkb_j1_packet(a2)		;save joystick 1 packet
	rts                             ;return
 
rlkb_joystick1_handler:
	move.b	1(a1),rlkb_j2_packet(a2)		;save joystick 2 packet
	rts                             ;return

rlkb_relative_mouse_handler:
	st.b	rlkb_mouse_moved(a2)		;indicate mouse moved

	move.b	(a1),d0			;get mouse key info
	and.w	#%11,d0			;isolate l+r buttons
	move.b	d0,rlkb_mousek(a2)	;save mouse key info
.nolimits
	move.b	1(a1),d0		;mouse x movement
	ext.w	d0			;extend to signed word
	add.w	d0,rlkb_mousex(a2)	;update mouse x position
	move.b	2(a1),d0		;mouse y movement
	ext.w	d0			;extedn to signed word
	add.w	d0,rlkb_mousey(a2)	;update mouse y position
;	rts                             ;return

	move.w	rlkb_mousex(a2),d0
	cmp.w	rlkb_mousex_min(a2),d0
	bgt.s	.xok1
	move.w	rlkb_mousex_min(a2),rlkb_mousex(a2)
	bra.s	.xok2
.xok1	cmp.w	rlkb_mousex_max(a2),d0
	blt.s	.xok2
	move.w	rlkb_mousex_max(a2),rlkb_mousex(a2)
.xok2	move.w	rlkb_mousey(a2),d0
	cmp.w	rlkb_mousey_min(a2),d0
	bgt.s	.yok1
	move.w	rlkb_mousey_min(a2),rlkb_mousey(a2)
	bra.s	.yok2
.yok1	cmp.w	rlkb_mousey_max(a2),d0
	blt.s	.yok2
	move.w	rlkb_mousey_max(a2),rlkb_mousey(a2)
.yok2	rts

; DIRECTIONAL BYTE FORMAT
; -------------------
; Bit | Powerpad key
; ------------------
;  0  | Up
;  1  | Down
;  2  | Left
;  3  | Right
;  4  | (not used)
;  5  | Fire C
;  6  | Fire B
;  7  | Fire A

; KEY WORD FORMAT
; --------------
; Bit | Powerpad Key
; --------------
;  0  | *
;  1  | 7
;  2  | 4
;  3  | 1
;  4  | 0
;  5  | 8
;  6  | 5
;  7  | 2
;  8  | #
;  9  | 9
; 10  | 6
; 11  | 3
; 12  | Option
; 13  | Pause

rlkb_read_powerpad_a:
	lea	$ffff9200.w,a0	;extended port address (read only)
	lea	2(a0),a1	;extended port address (read/write)
	moveq	#0,d2		;clear d2 - it will contain key information
	move.w	#$fffe,(a1)	;write mask
	move.w	(a1),d0		;read directional data
	move.w	(a0),d3		;read fire_a/pause data
	not.w	d0		;invert bits (0->1)
	move.w	d0,d1		;save directional data
	lsr.w	#8,d1		;shift into low bits (0-3)
	and.w	#%1111,d1	;mask off unwanted data
	lsr.w	d3		;check bit 0 (pause data)
	bcs.s	rlkb_no_pause_a	;if set, pause is not pressed
	bset	#13,d2		;pause is pressed so set pause bit
rlkb_no_pause_a:
	lsr.w	d3		;check bit 1 (fire a data)
	bcs.s	rlkb_no_firea_a	;if set, fire is not pressed
	bset	#7,d1		;fire_a is pressed, so set fire_a bit
rlkb_no_firea_a:
	move.w	#$fffd,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#1,d3		;check fire_b
	bne.s	rlkb_no_fireb_a	;if set, fire_b is not pressed
	bset	#6,d1		;fire_b is pressed, set relevant bit
rlkb_no_fireb_a:
	lsr.w	#8,d0		;shift key data into bits 0-3
	and.w	#%1111,d0	;mask off unwanted data
	or.w	d0,d2		;store in key word

	move.w	#$fffb,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#1,d3		;check for fire_c
	bne.s	rlkb_no_firec_a	;if set, fire_c is not pressed
	bset	#5,d1		;fire_c is pressed, set relevant bit
rlkb_no_firec_a:
	lsr.w	#4,d0		;shift key data into bits 4-7
	and.w	#%11110000,d0	;mask off unwanted data
	or.w	d0,d2		;store in key word

	move.w	#$fff7,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#1,d3		;check for option
	bne.s	rlkb_no_option_a ;if set, option is not pressed
	bset	#12,d2		;set option bit
rlkb_no_option_a:
	and.w	#%111100000000,d0	;mask off unwanted bits
	or.w	d0,d2		;store key data
	lea	rlkb_keyboard_space,a0
	move.b	d1,rlkb_ppa_dir(a0)	;save directional+fire data in variable
	move.w	d2,rlkb_ppa_key(a0)	;save key data in variable
	rts

rlkb_read_powerpad_b:
	lea	$ffff9200.w,a0	;extended port address (read only)
	lea	2(a0),a1	;extended port address (read/write)
	moveq	#0,d2		;clear d2 - it will contain key information
	move.w	#$ffef,(a1)	;write mask
	move.w	(a1),d0		;read directional data
	move.w	(a0),d3		;read fire_a/pause data
	not.w	d0		;invert bits (0->1)
	move.w	d0,d1		;save directional data
	lsr.w	#8,d1		;shift directional data down
	lsr.w	#4,d1		;shift into low bits (0-3)
	and.w	#%1111,d1	;mask off unwanted data
	btst	#2,d3		;check bit 2 (pause data)
	bne.s	rlkb_no_pause_b	;if set, pause is not pressed
	bset	#13,d2		;pause is pressed so set pause bit
rlkb_no_pause_b:
	btst	#3,d3		;check bit 3 (fire a data)
	bne.s	rlkb_no_firea_b	;if set, fire is not pressed
	bset	#7,d1		;fire_a is pressed, so set fire_a bit
rlkb_no_firea_b:
	move.w	#$ffdf,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#3,d3		;check fire_b
	bne.s	rlkb_no_fireb_b	;if set, fire_b is not pressed
	bset	#6,d1		;fire_b is pressed, set relevant bit
rlkb_no_fireb_b:	
	lsr.w	#8,d0
	lsr.w	#4,d0		;shift key data into bits 0-3
	and.w	#%1111,d0	;mask off unwanted data
	or.w	d0,d2		;store in key word

	move.w	#$ffbf,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#3,d3		;check for fire_c
	bne.s	rlkb_no_firec_b	;if set, fire_c is not pressed
	bset	#5,d1		;fire_c is pressed, set relevant bit
rlkb_no_firec_b:		
	lsr.w	#8,d0		;shift key data into bits 4-7
	and.w	#%11110000,d0	;mask off unwanted data
	or.w	d0,d2		;store in key word

	move.w	#$ff7f,(a1)	;write mask
	move.w	(a1),d0		;read key data
	move.w	(a0),d3		;read fire data
	not.w	d0		;invert bits (0->1)
	btst	#3,d3		;check for option
	bne.s	rlkb_no_option_b ;if set, option is not pressed
	bset	#12,d2		;set option bit
rlkb_no_option_b:
	lsr.w	#4,d0		;shift key data into bits 8-11
	and.w	#%111100000000,d0	;mask off unwanted bits
	or.w	d0,d2		;store key data
	lea	rlkb_keyboard_space,a0
	move.b	d1,rlkb_ppb_dir(a0)	;save directional+fire data in variable
	move.w	d2,rlkb_ppb_key(a0)	;save key data in variable
	rts


rlkb_packet_table:
	dc.b	1	;$f6 - keyboard packet
	dc.b	5	;$f7 - absolute mouse packet
	dc.b	2	;$f8 - relative mouse position / no buttons
	dc.b	2	;$f9 - relative mouse / left button
	dc.b	2	;$fa - relative mouse / right button
	dc.b	2	;$fb - relative mouse / both buttons
	dc.b	6	;$fc - time of day
	dc.b	2	;$fd - joystick report
	dc.b	1	;$fe - joystick 0 event
	dc.b	1	;$ff - joystick 1 event
	even

rlkb_key_handlers:
	dc.l	rlkb_keyboard_packet_handler	;$f6
	dc.l	rlkb_absolute_mouse_handler	;$f7
	dc.l	rlkb_relative_mouse_handler	;$f8
	dc.l	rlkb_relative_mouse_handler	;$f9
	dc.l	rlkb_relative_mouse_handler	;$fa
	dc.l	rlkb_relative_mouse_handler	;$fb
	dc.l	rlkb_time_of_day_handler	;$fc
	dc.l	rlkb_joystick_report_handler	;$fd
	dc.l	rlkb_joystick0_handler	;$fe
	dc.l	rlkb_joystick1_handler	;$ff


	even
	RSRESET
rlkb_old_118		rs.l	1
rlkb_key_ptr		rs.l	1
rlkb_caps_table		rs.l	1
rlkb_shift_table	rs.l	1
rlkb_normal_table	rs.l	1
rlkb_mousex_min		rs.w	1
rlkb_mousey_min		rs.w	1
rlkb_mousex_max		rs.w	1
rlkb_mousey_max		rs.w	1
rlkb_ppa_key		rs.w	1
rlkb_ppb_key		rs.w	1
rlkb_mousex		rs.w	1
rlkb_mousey		rs.w	1
rlkb_key_table		rs.b	128
rlkb_key_buffer		rs.b	256
rlkb_ppa_dir		rs.b	1
rlkb_ppb_dir		rs.b	1
rlkb_key_cntr		rs.b	1
rlkb_key_pressed	rs.b	1
rlkb_current_key	rs.b	1
rlkb_mousek		rs.b	1
rlkb_j1_packet		rs.b	1
rlkb_j2_packet		rs.b	1
rlkb_mouse_moved	rs.b	1
rlkb_keyboard_buffer1	rs.b	1
rlkb_jp1_packet		rs.b	1
rlkb_jp2_packet		rs.b	1
rlkb_no_joy_pause	rs.b	1
rlkb_do_pause		rs.b	1
rlkb_do_option		rs.b	1
	even

rlkb_keyboard_space:
	ds.b	rlkb_keyboard_buffer1

	even