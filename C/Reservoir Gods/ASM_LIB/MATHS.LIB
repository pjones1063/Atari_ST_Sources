***********************************
*=================================*
* RESERVOIR GODS LIBRARY ROUTINES *
*=================================*
*        |              |         *
*        | MATHS LIBRARY|         *
*        |              |         *
***********************************
* CODE: MR. PINK | (C): 19/02/96  *
***********************************
* UPDATE: 19/2/96  *
********************

***************************************************************************
	SECTION TEXT
***************************************************************************	

rlmt_maths_constructor:
	movem.l	d0-1/a0,-(a7)
	lea	rlmt_maths_space,a0
	move.w	d0,rlmt_screen_x(a0)
	move.w	d1,rlmt_screen_y(a0)
	subq.w	#1,d0
	subq.w	#1,d1
	move.w	d0,rlmt_screen_x_1(a0)
	move.w	d1,rlmt_screen_y_1(a0)
	movem.l	(a7)+,d0-1/a0
	rts
	
;a0->poly, a1-> space, d0=angle, d1=xpos, d2=ypos

rlmt_rotate_2d_poly:
	movem.l	d0-7/a0-3,-(a7)

	and.w	#1023,d0			; clip angle

	move.w	d2,d6				;translate y
	swap	d6
	move.w	d1,d6				;translate x

	move.w	(rlmt_cos_table,d0.w*2),d1	;cos0
	move.w	(rlmt_sin_table,d0.w*2),d0	;sin0

	move.w	(a0)+,d7			;num points
	bmi	.last

	move.w	d7,(a1)+		;store num points
	move.l	a1,a3			;store start points adr

.calc	move.w	(a0)+,d2		;x
	add.w	d2,d2
	move.w	d2,d3
	muls.w	d0,d2			;xSin0
	muls.w	d1,d3			;xCos0
	move.w	(a0)+,d4		;y
	add.w	d4,d4			;*2
	move.w	d4,d5	
	muls.w	d0,d4			;YSin0
	muls.w	d1,d5			;YCos0

	sub.l	d4,d3			;xCos0-ySin0
	add.l	d5,d2			;yCos0+xSin0
	swap	d3			;get int part of x
	swap	d2			;get int part of y
	add.w	d6,d3			;x+tx
	swap	d6			;get ty
	add.w	d6,d2			;x+ty
	swap	d6			;get tx
	move.w	d3,(a1)+		;store x
	move.w	d2,(a1)+		;store y
	dbra	d7,.calc		;loop for all points

	move.l	(a3),(a1)+		;copy first points to end
.last
	movem.l	(a7)+,d0-7/a0-3
	rts

;a0-> poly (num_points, coords(x1,y1...xn,yn) a1->left buffer,a2->right buffer

rlmt_calc_poly_edges:
	movem.l	d0-a6,-(a7)

	lea	rlmt_maths_space,a6

	move.l	a0,a3			;save poly ptr
	move.w	rlmt_screen_y(a6),d0	;default poly top
	moveq	#0,d1			;default poly bot

	move.w	(a3)+,d3		;num points
	subq.w	#1,d3
.get_limits
	move.l	(a3)+,d2		;get y
	cmp.w	d2,d0			;check against current top
	ble.s	.too_big		;greater than top
	move.w	d2,d0			;store new poly top
.too_big
	cmp.w	d2,d1			;check against poly bot
	bge.s	.too_small		;less than
	move.w	d2,d1			;store new poly bot
.too_small
	dbra	d3,.get_limits

	tst.w	d1			;check poly bottom
	ble.s	.no_poly		;off top of screen
	cmp.w	rlmt_screen_y(a6),d0	;check poly top
	blt.s	.do_poly		;not off bottom of screen
.no_poly
	move.l	#-1,(a1)		;flag no poly draw
	movem.l	(a7)+,d0-a6
	rts

.do_poly
	tst.w	d0			;poly top off top?
	bpl.s	.top_in			;top in screen
	moveq	#0,d0			;set top to top of screen
.top_in
	cmp.w	rlmt_screen_y(a6),d1	;poly bot in bounds
	blt.s	.bot_in			;bottom in screen
	move.w	rlmt_screen_y_1(a6),d1	;set bot to screen bot
.bot_in

	sub.w	d0,d1			;calc poly height
	move.w	d0,(a1)+		;store poly top
	move.w	d1,(a1)+		;store poly height

	move.w	(a0)+,d7		;num line to calculate
	subq.w	#1,d7
	
rlmt_poly_loop
	move.l	(a0)+,d1		;get x1y1
	move.l	(a0),d2			;get x2y2
	cmp.w	d1,d2			;cmp y1,y2
	bgt	rlmt_do_poly_right_edge
	blt	rlmt_do_poly_left_edge

rlmt_do_poly_straight_edge		

	move.w	d1,d3			;store y value

	cmp.l	d1,d2			;cmp x1,x2
	bgt.s	.x2_big			;x2>x1
	exg.l	d1,d2			;put big value into x2
.x2_big
	swap	d2			;get x2
	tst.w	d2			;check x2 on screen
	bmi	rlmt_next_poly_edge	;both points off screen
	cmp.w	rlmt_screen_x(a6),d2	;check against screen bound
	ble.s	.onscr			;in bounds
	move.w	rlmt_screen_x_1(a6),d2	;clip to screen edge
.onscr
	swap	d1			;get x1
	cmp.w	rlmt_screen_x(a6),d1	;check against screen bound
	bge	rlmt_next_poly_edge	;both points off right
	tst.w	d1			;check if on left
	bpl.s	.onlft			;in bounds
	clr.w	d1			;clip to left of screen
.onlft
	sub.w	d0,d3			;get to place in buffer
	add.w	d3,d3			;as offset in table
	move.w	d1,(a1,d3.w)		;store x1 in left buffer
	move.w	d2,(a2,d3.w)		;store x2 in right buffer
	bra	rlmt_next_poly_edge


rlmt_do_poly_left_edge	
	exg.l	d1,d2
	bsr	rlmt_poly_clip_top_bot
	bne	rlmt_next_poly_edge

	move.w	d1,d3			;y1
	sub.w	d0,d3			;y1-poly top=offset in buffer
	add.w	d3,d3			;*2=word offset
	lea	(a1,d3),a3		;get to place in left buffer

	swap	d1			;get x1
	swap	d2			;get x2
	tst.w	d1			;test left point
	bpl	.check_x1_2
	tst.w	d2			;check x2
	bpl	.leftx2_in		;x2 in bounds


; x1<0 & x2<0, fill left buffer=0

	swap	d1			;get y1
	swap	d2			;get y2
	sub.w	d1,d2			;calc DY
	bmi	rlmt_next_poly_edge	;error!
.fill1	clr.w	(a3)+			;poly starts at screen edge
	dbra	d2,.fill1		;loop dy
	bra	rlmt_next_poly_edge	;next coord pair


;x1<0 & x2>0, calc left clip. fill left buffer to clip

.leftx2_in
	move.w	d1,d3			;x
	neg.w	d3			;+x
	add.w	d3,d3			;+x*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3	;x/DX
	clr.w	d1			;flag x1=0

	muls.w	d6,d3			;dy*(x/dx)	
	swap	d3			;get int value
	swap	d1			;get y1
	add.w	a5,d3			;y1+offset
	move.w	d3,d4
	sub.w	d1,d3			;calc offset
	move.w	d4,d1			;store new y1
	swap	d1			;get x1
	tst.w	d3
	bmi	.left_x2_check		;nothing to blank

.fill2	clr.w	(a3)+			;blank left edge
	dbra	d3,.fill2		;loop for out amount
	bra	.left_x2_check

.check_x1_2
	cmp.w	rlmt_screen_x(a6),d1	;check x1
	blt	.left_x2_check		;in right of screen
	cmp.w	rlmt_screen_x(a6),d2	;check x2
	bge	rlmt_next_poly_edge	;line off screen

; x1> screen x, calc right clip. adjust y1.

	move.w	rlmt_screen_x_1(a6),d3	;screen_x-1
	sub.w	a4,d3			;screen_x-x1
	add.w	d3,d3			;*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3 ;(screen_x-x1/dx)
	muls.w	d6,d3			;dy*(screen_x-x1/dx)
	swap	d3			;length of line to boundary
	add.w	a5,d3			;+y1
	swap	d1			;get y1
	move.w	d3,d1			;store new y1
	sub.w	d0,d3			;-poly top
	add.w	d3,d3			;*2 as offset
	lea	(a1,d3),a3		;new buffer place
	swap	d1			;get x1

.left_x2_check
	tst.w	d2
	bpl	.left_pos_x2

; x2<0 calc left clip, addx to clip, fill buffer to end

	move.w	d2,d3			;x2
	neg.w	d3			;+x
	add.w	d3,d3			;+x*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3	;x/DX
	clr.w	d2			;flag x2=0

	muls.w	d6,d3			;dy*(x/dx)	
	swap	d3			;get int value
	swap	d1			;get y1
	add.w	a5,d3			;y1+offset
	move.w	d3,d4			;yb
	sub.w	d1,d3			;calc offset
	swap	d1			;get x1

	add.w	d5,d5			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d5	;addx value
	swap	d5

	ext.l	d1			;clear high word

	tst.w	d3
	bmi	.fill_lbuffer

.ledge1	move.w	d1,(a3)+		;store x
	addx.l	d5,d1			;next x
	dbf	d3,.ledge1

.fill_lbuffer
	swap	d2			;get y2
	sub.w	d4,d2			;y2-yb
	bmi	rlmt_next_poly_edge

.clr1	clr.w	(a3)+			;fill left buffer
	dbra	d2,.clr1		;loop off screen amount

	bra	rlmt_next_poly_edge


.left_pos_x2
	cmp.w	rlmt_screen_x(a6),d2	;check x2
	blt	.left_right_in		;in right of screen
	cmp.w	rlmt_screen_x(a6),d1	;check x1
	bge	rlmt_next_poly_edge	;line off screen

; x2>screen x. calc y2. addx to clip.

	move.w	rlmt_screen_x_1(a6),d3	;screen_x-1
	sub.w	a4,d3			;screen_x-x1
	add.w	d3,d3			;*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3 ;(screen_x-x1/dx)
	muls.w	d6,d3			;dy*(screen_x-x1/dx)
	swap	d3			;length of line to boundary
	add.w	a5,d3			;+y1
	swap	d2			;get y2
	move.w	d3,d2			;store new y2
	swap	d2			;get x2

.left_right_in
	move.w	d5,d3			;dx
	add.w	d3,d3			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;addx value
	swap	d3

	swap	d1			;get y1
	swap	d2			;get y2
	sub.w	d1,d2			;calc line length
	bmi	rlmt_next_poly_edge
	sub.w	d0,d1			;get offset in table
	lea	(a1,d1.w*2),a3		;get to place in buffer
	clr.w	d1			;clear high word
	swap	d1			;get x word

.ledge	move.w	d1,(a3)+		;store x
	addx.l	d3,d1			;next x
	dbf	d2,.ledge
	bra	rlmt_next_poly_edge



rlmt_do_poly_right_edge
	bsr	rlmt_poly_clip_top_bot
	bne	rlmt_next_poly_edge

	move.w	d1,d3			;y1
	sub.w	d0,d3			;y1-poly top=offset in buffer
	add.w	d3,d3			;*2=word offset
	lea	(a2,d3),a3		;get to place in right buffer

	swap	d1			;get x1
	swap	d2			;get x2
	tst.w	d1			;test left point
	bpl	.right_x1_check2
	tst.w	d2			;check x2
	bmi	rlmt_next_poly_edge	;poly out of bounds

; x2<0. calc left clip. calc new y1

	move.w	d1,d3			;x
	neg.w	d3			;+x
	add.w	d3,d3			;+x*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3	;x/DX
	clr.w	d1			;flag x1=0

	muls.w	d6,d3			;dy*(x/dx)	
	swap	d3			;get int value
	swap	d1			;get y1
	add.w	a5,d3			;y1+offset
	move.w	d3,d1			;store new y1
	sub.w	d0,d3			;-poly top
	add.w	d3,d3			;as offset
	lea	(a2,d3),a3		;get to place in buffer
	swap	d1			;get x1
	bra	.right_x2_check

.right_x1_check2
	cmp.w	rlmt_screen_x(a6),d1	;check x1
	blt	.right_x2_check
	cmp.w	rlmt_screen_x(a6),d2	;check x2
	blt.s	.right_rclip

	swap	d1			;get y1
	swap	d2			;get y2
	sub.w	d1,d2
	bmi	rlmt_next_poly_edge

	move.w	rlmt_screen_x_1(a6),d4
.fillr	move.w	d4,(a3)+
	dbra	d2,.fillr
	bra	rlmt_next_poly_edge

.right_rclip
	move.w	rlmt_screen_x_1(a6),d3	;screen_x-1
	sub.w	a4,d3			;screen_x-x1
	add.w	d3,d3			;*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3 ;(screen_x-x1/dx)
	muls.w	d6,d3			;dy*(screen_x-x1/dx)
	swap	d3			;length of line to boundary
	add.w	a5,d3			;+y1
	move.w	d3,d4			;save
	swap	d1			;get y1
	sub.w	d1,d3			;line length
	move.w	d4,d1			;store new y1
	swap	d1			;get x1

	tst.w	d3
	bmi	.right_x2_check

	move.w	rlmt_screen_x_1(a6),d4
.fillr1	move.w	d4,(a3)+
	dbra	d3,.fillr1

.right_x2_check
	tst.w	d2			;check x2
	bpl	.right_x2_pos
	tst.w	d1			;check x1
	bmi	rlmt_next_poly_edge

	move.w	d2,d3			;x2
	neg.w	d3			;+x
	add.w	d3,d3			;+x*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3	;x/DX
	clr.w	d2			;flag x2=0

	muls.w	d6,d3			;dy*(x/dx)	
	swap	d3			;get int value
	swap	d1			;get y1
	add.w	a5,d3			;y1+offset
	sub.w	d1,d3			;calc offset
	swap	d1			;get x1

	add.w	d5,d5			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d5	;addx value
	swap	d5

	ext.l	d1			;clear high word

	tst.w	d3
	bmi	rlmt_next_poly_edge

.redge1	move.w	d1,(a3)+		;store x
	addx.l	d5,d1			;next x
	dbf	d3,.redge1
	bra	rlmt_next_poly_edge

.right_x2_pos
	cmp.w	rlmt_screen_x(a6),d2	
	blt	.right_x2_in

	move.w	rlmt_screen_x_1(a6),d3	;screen_x-1
	sub.w	a4,d3			;screen_x-x1
	add.w	d3,d3			;*2
	muls.w	(rlmt_one_over_table,d5.w*2),d3 ;(screen_x-x1/dx)
	muls.w	d6,d3			;dy*(screen_x-x1/dx)
	swap	d3			;length of line to boundary
	add.w	a5,d3			;+y1
	move.w	d3,d4			;save yb
	swap	d1			;get y1
	sub.w	d1,d3			;calc line length
	swap	d1			;get x1

	add.w	d5,d5			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d5	;addx value
	swap	d5

	ext.l	d1			;clear high word

	swap	d2			;get y2
	sub.w	d4,d2			;y2-yb
	bmi	.fill_rbuff

.redge2	move.w	d1,(a3)+		;store x
	addx.l	d5,d1			;next x
	dbf	d2,.redge2

.fill_rbuff
	tst.w	d3
	bmi	rlmt_next_poly_edge
	
	move.w	rlmt_screen_x_1(a6),d4
.frb	move.w	d4,(a3)+
	dbra	d3,.frb
	bra	rlmt_next_poly_edge

.right_x2_in
	move.w	d5,d3			;dx
	add.w	d3,d3			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;addx value
	swap	d3

	swap	d1			;get y1
	swap	d2			;get y2
	sub.w	d1,d2			;calc line length
	bmi	rlmt_next_poly_edge
	swap	d1			;get x word
	ext.l	d1

.redge	move.w	d1,(a3)+		;store x
	addx.l	d3,d1			;next x
	dbf	d2,.redge
;	bra	rlmt_next_poly_edge


rlmt_next_poly_edge
	dbra	d7,rlmt_poly_loop
	movem.l	(a7)+,d0-a6
	rts

;clips top and bottom of poly line, calcs new x1, x2

rlmt_poly_clip_top_bot
	cmp.w	rlmt_screen_y(a6),d1	;check if top of line off screen
	bge	.poly_clip_error	;no poly edge

	move.w	d2,d6			;y2
	sub.w	d1,d6			;DY=y2-y1
	move.w	d1,a5			;store y1
	swap	d1			;get x1			
	swap	d2			;get x2
	move.w	d1,a4			;store x1
	move.w	d2,d5			;x2
	sub.w	d1,d5			;DX=x2-x1
	swap	d1			;get y1
	swap	d2			;get y2

	tst.w	d1			;check y1
	bpl	.y1_onscr
	tst.w	d2			;check y2
	bmi	.poly_clip_error	;both off screen

	neg.w	d1			;+y1
	move.w	d1,d3			;y1
	add.w	d3,d3			;*2
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;+y1/y2-y1
	clr.w	d1			;clip y to screen top

	muls.w	d5,d3			;dx*(y1/y2-y1)
	swap	d3			;get integer part
	swap	d1			;get x1
	add.w	d3,d1			;x1+(y0/y2-y1)(x2-x1)
	swap	d1			;get y1

.y1_onscr
	cmp.w	rlmt_screen_y(a6),d2	;check if bot of line off screen
	blt	.y2_onscr		;on screen

	move.w	rlmt_screen_y_1(a6),d3	;screen y
	move.w	d3,d2			;clip y2
	sub.w	a5,d3			;screen_y -y1
	add.w	d3,d3
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;screen_y-y1/DY
	muls.w	d5,d3			;DX*(screen_y-y1/y2-y1)
	swap	d3			;get integer part
	swap	d2			;get x2	
	add.w	d3,d2			;new x2
	swap	d2			;get y2
.y2_onscr
	ori.b	#%100,ccr		;set zero flag
	rts
.poly_clip_error:
	andi.b	#%1111011,ccr		;clear zero flag
	rts

;a0-> screen, a1-> left buffer, a2-> right buffer, d0=colour

rlmt_plot_polygon:
	movem.l	d0-a6,-(a7)

	move.w	(a1)+,d6		;poly top
	bmi	.no_poly
	move.w	(a1)+,d7		;poly height
	bmi	.no_poly

	add.l	(rlsc_screen_space+rlsc_line_offsets,d6.w*4),a0
	move.w	rlsc_screen_space+rlsc_line_size,d1

.pol	move.l	a0,a3
	move.w	(a1)+,d2		;x1
	lea	(a3,d2.w*2),a3		;get to x1
	move.w	(a2)+,d3		;x2
	sub.w	d2,d3
	ble	.nextl
.ras	move.w	d0,(a3)+		;raster
	dbra	d3,.ras
.nextl	add.w	d1,a0
	dbra	d7,.pol

.no_poly
	movem.l	(a7)+,d0-a6
	rts		

;a0-> screen, a1-> left buffer, a2-> right buffer, d0=colour

rlmt_plot_polygon2:
	movem.l	d0-a6,-(a7)

	move.w	(a1)+,d6		;poly top
	bmi	.no_poly
	move.w	(a1)+,d7		;poly height
	bmi	.no_poly

	add.l	(rlsc_screen_space+rlsc_line_offsets,d6.w*4),a0
	move.w	rlsc_screen_space+rlsc_line_size,d1

	move.w	rlmt_maths_space+rlmt_screen_x_1,d4

.pol	move.l	a0,a3
	move.w	(a1)+,d2		;x1
	bpl.s	.x1pls
	clr.w	d2
.x1pls	lea	(a3,d2.w*2),a3		;get to x1
	move.w	(a2)+,d3		;x2
	cmp.w	d4,d3
	ble.s	.x2ok
	move.w	d4,d3
.x2ok	sub.w	d2,d3
	bmi	.nextl
.ras	move.w	d0,(a3)+		;raster
	dbra	d3,.ras
.nextl	add.w	d1,a0
	dbra	d7,.pol

.no_poly
	movem.l	(a7)+,d0-a6
	rts		

rlmt_calc_poly_edges2:
	movem.l	d0-a6,-(a7)

	lea	rlmt_maths_space,a6

	move.l	a0,a3			;save poly ptr
	move.w	rlmt_screen_y(a6),d0	;default poly top
	moveq	#0,d1			;default poly bot

	move.w	(a3)+,d3		;num points
;	subq.w	#1,d3
.get_limits
	move.l	(a3)+,d2		;get y
	cmp.w	d2,d0			;check against current top
	ble.s	.too_big		;greater than top
	move.w	d2,d0			;store new poly top
.too_big
	cmp.w	d2,d1			;check against poly bot
	bge.s	.too_small		;less than
	move.w	d2,d1			;store new poly bot
.too_small
	dbra	d3,.get_limits

	tst.w	d1			;check poly bottom
	ble.s	.no_poly		;off top of screen
	cmp.w	rlmt_screen_y(a6),d0	;check poly top
	blt.s	.do_poly		;not off bottom of screen
.no_poly
	move.l	#-1,(a1)		;flag no poly draw
	movem.l	(a7)+,d0-a6
	rts

.do_poly
	tst.w	d0			;poly top off top?
	bpl.s	.top_in			;top in screen
	moveq	#0,d0			;set top to top of screen
.top_in
	cmp.w	rlmt_screen_y(a6),d1	;poly bot in bounds
	blt.s	.bot_in			;bottom in screen
	move.w	rlmt_screen_y_1(a6),d1	;set bot to screen bot
.bot_in

	sub.w	d0,d1			;calc poly height
	move.w	d0,(a1)+		;store poly top
	move.w	d1,(a1)+		;store poly height

	move.w	(a0)+,d7		;num line to calculate
;	subq.w	#1,d7
	
rlmt_poly_loop2
	move.l	(a0)+,d1		;get x1y1
	move.l	(a0),d2			;get x2y2
	cmp.w	d1,d2			;cmp y1,y2
	bgt	rlmt_do_poly_right_edge2
	blt	rlmt_do_poly_left_edge2

rlmt_do_poly_straight_edge2

	move.w	d1,d3			;store y value

	cmp.l	d1,d2			;cmp x1,x2
	bgt.s	.x2_big			;x2>x1
	exg.l	d1,d2			;put big value into x2
.x2_big
	swap	d2			;get x2
	tst.w	d2			;check x2 on screen
	bmi	rlmt_next_poly_edge	;both points off screen
	cmp.w	rlmt_screen_x(a6),d2	;check against screen bound
	ble.s	.onscr			;in bounds
	move.w	rlmt_screen_x_1(a6),d2	;clip to screen edge
.onscr
	swap	d1			;get x1
	cmp.w	rlmt_screen_x(a6),d1	;check against screen bound
	bge	rlmt_next_poly_edge	;both points off right
	tst.w	d1			;check if on left
	bpl.s	.onlft			;in bounds
	clr.w	d1			;clip to left of screen
.onlft
	sub.w	d0,d3			;get to place in buffer
	add.w	d3,d3			;as offset in table
	move.w	d1,(a1,d3.w)		;store x1 in left buffer
	move.w	d2,(a2,d3.w)		;store x2 in right buffer
	bra	rlmt_next_poly_edge2

rlmt_do_poly_left_edge2
	exg.l	d1,d2
	bsr	rlmt_poly_clip_top_bot
	bne	rlmt_next_poly_edge2

	move.w	d1,d3			;y1
	sub.w	d0,d3			;y1-poly top=offset in buffer
	add.w	d3,d3			;*2=word offset
	lea	(a1,d3),a3		;get to place in left buffer


	move.w	d5,d3			;dx
	add.w	d3,d3			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;addx value
	swap	d3

	sub.w	d1,d2			;calc line length
	bmi	rlmt_next_poly_edge2
	swap	d1
	ext.l	d1

.ledge	move.w	d1,(a3)+		;store x
	addx.l	d3,d1			;next x
	dbf	d2,.ledge
	bra	rlmt_next_poly_edge2


rlmt_do_poly_right_edge2
	bsr	rlmt_poly_clip_top_bot
	bne	rlmt_next_poly_edge2

	move.w	d1,d3			;y1
	sub.w	d0,d3			;y1-poly top=offset in buffer
	add.w	d3,d3			;*2=word offset
	lea	(a2,d3),a3		;get to place in left buffer

	move.w	d5,d3			;dx
	add.w	d3,d3			;dx*2
	muls.w	(rlmt_one_over_table,d6.w*2),d3	;addx value
	swap	d3

	sub.w	d1,d2			;calc line length
	bmi	rlmt_next_poly_edge2
	swap	d1			;get x word
	ext.l	d1

.redge	move.w	d1,(a3)+		;store x
	addx.l	d3,d1			;next x
	dbf	d2,.redge

rlmt_next_poly_edge2
	dbra	d7,rlmt_poly_loop2
	movem.l	(a7)+,d0-a6
	rts

;rotate: X:Y:Z

rlmt_rotate_3d
	and.w	#1023,d0		;clip x
	and.w	#1023,d1		;clip y
	and.w	#1023,d2		;clip z

	movem.w	d0-2,rlmt_angles

	move.w	(a0)+,d7		;points to rotate
	move.w	d7,(a1)+		;store	

; ROTATE ABOUT X AXIS

.trans
	movem.w	rlmt_angles,d0-2

	move.w	2(a0),d3			;Y
	muls.w	(rlmt_cos_table,d0.w*2),d3	;Ycos0x
	move.w	4(a0),d4			;Zsin0x
	muls.w	(rlmt_sin_table,d0.w*2),d4	;sin0x
	sub.l	d4,d3				;Ycos0x-Zsin0x
	swap	d3				;new Y

	move.w	2(a0),d4			;Y
	muls.w	(rlmt_sin_table,d0.w*2),d4	;Ysin0x
	move.w	4(a0),d5			;Zcos0x
	muls.w	(rlmt_cos_table,d0.w*2),d5	;cos0x
	move.l	d5,d0
	add.l	d4,d0				;Ysin0x+Zcos0x
	swap	d0				;new Z

; ROTATE ABOUT Y AXIS

	move.w	(a0),d4				;X
	muls.w	(rlmt_cos_table,d1.w*2),d4	;Xcos0y
	move.w	d0,d5				;Z
	muls.w	(rlmt_sin_table,d1.w*2),d5	;Zsin0y
	add.l	d5,d4				
	swap	d4				;new X

	move.w	(a0),d5				;X
	muls.w	(rlmt_sin_table,d1.w*2),d5	;Xsin0y
	muls.w	(rlmt_cos_table,d1.w*2),d0	;Zcos0y
	sub.l	d5,d0				;Zcos0y-Xsin0y
	swap	d0				;new Z

	cmp.w	rlmt_min_z+2,d0
	bgt.s	.nmin
	move.w	d0,rlmt_min_z+2
.nmin	cmp.w	rlmt_max_z+2,d0
	blt.s	.nmax
	move.w	d0,rlmt_max_z+2
.nmax

; ROTATE ABOUT Z AXIS

	move.w	d4,d1				;X
	muls.w	(rlmt_cos_table,d2.w*2),d1	;Xcos0z
	move.w	d3,d5				;Y
	muls.w	(rlmt_sin_table,d2.w*2),d5	;Ysin0z
	sub.l	d5,d1
	swap	d1				;new X

	muls.w	(rlmt_sin_table,d2.w*2),d4	;Xsin0z
	muls.w	(rlmt_cos_table,d2.w*2),d3	;Ycos0z
	add.l	d4,d3
	swap	d3				;new Y


	add.w	a4,d0				;translate z
	ext.l	d1
	ext.l	d3
	cmp.w	#-1023,d0
	bge.s	.nbc
	move.w	#-1023,d0
.nbc	cmp.w	#1023,d0
	ble.s	.ntc
	move.w	#1023,d0
.ntc
	muls.l	(rlmt_z_pers_table,d0.w*4),d1	
	muls.l	(rlmt_z_pers_table,d0.w*4),d3
	swap	d1
	swap	d3

	add.w	a2,d1				;translate x
	add.w	a3,d3				;translate y

	move.w	d1,(a1)+			;store x
	move.w	d3,(a1)+			;store y
	addq.w	#6,a0
	dbra	d7,.trans
	
	rts

;rotate: X:Y:Z

rlmt_rotate_3d_2
	and.w	#1023,d0		;clip x
	and.w	#1023,d1		;clip y
	and.w	#1023,d2		;clip z

	move.l	#1024,rlmt_min_z
	move.l	#1024,rlmt_min_z2
	move.l	#-1024,rlmt_max_z

	movem.w	d0-2,rlmt_angles

	move.w	(a0)+,d7		;points to rotate
	move.w	d7,(a1)+		;store	


.trans
	movem.w	rlmt_angles,d0-2

; ROTATE ABOUT Z AXIS
	
	move.w	(a0),d3				;X
	muls.w	(rlmt_cos_table,d2.w*2),d3	;Xcos0z
	move.w	2(a0),d4			;Y
	muls.w	(rlmt_sin_table,d2.w*2),d4	;Ysin0z
	sub.l	d4,d3				
	swap	d3				;new X

	move.w	(a0),d4				;X
	muls.w	(rlmt_sin_table,d2.w*2),d4	;Xsin0z
	move.w	2(a0),d5			;Y
	muls.w	(rlmt_cos_table,d2.w*2),d5	;Ysin0z
	add.l	d5,d4
	swap	d4				;new Y

; ROTATE ABOUT Y AXIS

	move.w	d3,d2				;X
	muls.w	(rlmt_cos_table,d1.w*2),d2	;Xcos0y
	move.w	4(a0),d5			:Z
	muls.w	(rlmt_sin_table,d1.w*2),d5	;Zsin0y
	add.l	d5,d2				;new X
	swap	d2

	muls.w	(rlmt_sin_table,d1.w*2),d3	;Xsin0y
	move.w	4(a0),d5			;Z
	muls.w	(rlmt_cos_table,d1.w*2),d5	;Zcos0y
	sub.w	d3,d5				;new Z
	swap	d5

; ROTATE ABOUT X AXIS

	move.w	d4,d3				;Y
	muls.w	(rlmt_cos_table,d0.w*2),d3	;Ycos0x
	move.w	d5,d1				;Z
	muls.w	(rlmt_sin_table,d0.w*2),d1	;Zsin0x
	sub.l	d1,d3				;new Y
	swap	d3

	muls.w	(rlmt_sin_table,d0.w*2),d4	;Ysin0x
	muls.w	(rlmt_cos_table,d0.w*2),d5	;Zcos0x
	add.l	d5,d4
	swap	d4				;nex Z
	add.w	a4,d4				;translate z

	cmp.w	rlmt_min_z+2,d4
	bge.s	.nmin
	move.l	rlmt_min_z,rlmt_min_z2
	move.w	d4,rlmt_min_z+2
	bra.s	.nmin2
.nmin	cmp.w	rlmt_min_z2+2,d4
	bgt.s	.nmin2
	move.w	d4,rlmt_min_z2+2
.nmin2	cmp.w	rlmt_max_z+2,d4
	blt.s	.nmax
	move.w	d4,rlmt_max_z+2
.nmax


	ext.l	d2
	ext.l	d3
	cmp.w	#-1023,d4
	bge.s	.nbc
	move.w	#-1023,d4
.nbc	cmp.w	#1023,d4
	ble.s	.ntc
	move.w	#1023,d4
.ntc
	muls.l	(rlmt_z_pers_table,d4.w*4),d2	
	muls.l	(rlmt_z_pers_table,d4.w*4),d3
	swap	d2
	swap	d3

	add.w	a2,d2				;translate x
	add.w	a3,d3				;translate y

	move.w	d2,(a1)+			;store x
	move.w	d3,(a1)+			;store y
	move.w	d4,(a1)+			;store z
	addq.w	#2,a1
	addq.w	#6,a0
	dbra	d7,.trans
	
	rts

rlmt_rotate_3d_3:
	and.w	#1023,d0		;clip x
	and.w	#1023,d1		;clip y
	and.w	#1023,d2		;clip z

	lea	rlmt_matrix,a5

	move.w	(rlmt_cos_table,d1.w*2),d3	;cos0y
	muls.w	(rlmt_cos_table,d2.w*2),d3	;cos0z*cos0y
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_cos_table,d1.w*2),d3	;cos0y
	neg.w	d3				;-cos0y
	muls.w	(rlmt_sin_table,d2.w*2),d3	;sin0z*-cos0y
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_sin_table,d1.w*2),(a5)+	;sin0y

	move.w	(rlmt_sin_table,d0.w*2),d3	;sin0x
	muls.w	(rlmt_sin_table,d1.w*2),d3	;sin0y*sin0x
	swap	d3
	muls.w	(rlmt_cos_table,d2.w*2),d3	;cos0z*(sin0y*sin0x)
	move.w	(rlmt_cos_table,d0.w*2),d4	;cos0x
	muls.w	(rlmt_sin_table,d2.w*2),d4	;sin0z
	add.l	d4,d3				;cos0x+sin0z
	swap	d3
	move.w	d3,(a5)+
	
	move.w	(rlmt_sin_table,d0.w*2),d3	;sin0x
	neg.w	d3
	muls.w	(rlmt_sin_table,d1.w*2),d3	;sin0y*sin0x
	swap	d3
	muls.w	(rlmt_sin_table,d2.w*2),d3	;sin0z*(sin0y*sin0x)
	move.w	(rlmt_cos_table,d0.w*2),d4	;cos0x
	muls.w	(rlmt_cos_table,d2.w*2),d4	;cos0z*cos0x
	add.l	d4,d3
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_sin_table,d0.w*2),d3	;sin0x
	neg.w	d3
	muls.w	(rlmt_cos_table,d1.w*2),d3	;cos0y*(sin0x)
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_cos_table,d0.w*2),d3
	neg.w	d0
	muls.w	(rlmt_sin_table,d1.w*2),d3
	swap	d3
	muls.w	(rlmt_cos_table,d2.w*2),d3
	move.w	(rlmt_sin_table,d0.w*2),d4
	muls.w	(rlmt_sin_table,d2.w*2),d4
	add.l	d4,d3
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_cos_table,d0.w*2),d3
	muls.w	(rlmt_sin_table,d1.w*2),d3
	swap	d3
	muls.w	(rlmt_sin_table,d2.w*2),d3
	move.w	(rlmt_sin_table,d0.w*2),d4
	muls.w	(rlmt_cos_table,d2.w*2),d4
	add.l	d4,d3
	swap	d3
	move.w	d3,(a5)+

	move.w	(rlmt_cos_table,d0.w*2),d3
	muls.w	(rlmt_cos_table,d1.w*2),d3
	swap	d3
	move.w	d3,(a5)+

	move.w	(a0)+,d7	
	move.w	d7,(a1)+
.trans	lea	rlmt_matrix,a5
	
	movem.w	(a0),d0-2
	muls.w	(a5)+,d0
	muls.w	(a5)+,d1
	muls.w	(a5)+,d2
	add.l	d1,d0
	add.l	d2,d0
	swap	d0			;new x

	movem.w	(a0),d1-3
	muls.w	(a5)+,d1
	muls.w	(a5)+,d2
	muls.w	(a5)+,d3
	add.l	d2,d1
	add.l	d3,d1
	swap	d1			;new y

	movem.w	(a0),d2-4
	muls.w	(a5)+,d2
	muls.w	(a5)+,d3
	muls.w	(a5)+,d4
	add.l	d3,d2
	add.l	d4,d2
	swap	d2			;new z

	add.w	a4,d2				;translate z
	cmp.w	rlmt_min_z+2,d2
	bgt.s	.nmin
	move.w	d2,rlmt_min_z+2
.nmin	cmp.w	rlmt_max_z+2,d2
	blt.s	.nmax
	move.w	d2,rlmt_max_z+2
.nmax


	ext.l	d0
	ext.l	d1
	cmp.w	#-1023,d2
	bge.s	.nbc
	move.w	#-1023,d2
.nbc	cmp.w	#1023,d2
	ble.s	.ntc
	move.w	#1023,d2
.ntc
	muls.l	(rlmt_z_pers_table,d2.w*4),d0
	muls.l	(rlmt_z_pers_table,d2.w*4),d1
	swap	d0
	swap	d1

	add.w	a2,d0				;translate x
	add.w	a3,d1				;translate y

	move.w	d0,(a1)+			;store x
	move.w	d1,(a1)+			;store y
	move.w	d2,(a1)+			;THIS MAY NEED REMOVING!
	tst.w	(a1)+				;IF BUGS IN OLD CODE!
	addq.w	#6,a0
	dbra	d7,.trans
	

	rts


rlmt_matrix:	ds.w	9

d	set	0
	rept	1024
	dc.l	d*64
d	set	d+1
	endr
rlmt_z_pers_table
d	set	0
	rept	1024
	dc.l	65536+d*64
d	set	d+1
	endr

rlmt_min_z	dc.l	100
rlmt_min_z2	dc.l	100
rlmt_max_z	dc.l	100

rlmt_angles	ds.w	3
		even	

rlmt_testhidden_face:
	moveq	#-1,d0		;flag face hidden
	movem.w (a0),d1-d6	;get xy coords
	sub.w 	d3,d1		;dx1 (a)
	sub.w 	d4,d2		;dy1 (b)
	sub.w 	d5,d3		;dx2 (l)
	sub.w 	d6,d4		;dy2 (m)
	muls 	d1,d4		;a*m
	muls 	d2,d3		;b*l
	sub.l 	d3,d4		;am-bl
	blt.s 	.face_hidden	;if face hidden
	moveq 	#0,d0		;flag face not hidden
.face_hidden
	tst	d0
	rts			;return

	even
***************************************************************************
	SECTION DATA
***************************************************************************	

	even

rlmt_sin_table:
	dc.w	$0000,$00C9,$0192,$025B,$0324,$03ED,$04B6,$057E 
	dc.w	$0647,$0710,$07D9,$08A1,$096A,$0A32,$0AFB,$0BC3 
	dc.w	$0C8B,$0D53,$0E1B,$0EE3,$0FAB,$1072,$1139,$1200 
	dc.w	$12C7,$138E,$1455,$151B,$15E1,$16A7,$176D,$1833 
	dc.w	$18F8,$19BD,$1A82,$1B46,$1C0B,$1CCF,$1D93,$1E56 
	dc.w	$1F19,$1FDC,$209F,$2161,$2223,$22E4,$23A6,$2467 
	dc.w	$2527,$25E7,$26A7,$2767,$2826,$28E5,$29A3,$2A61 
	dc.w	$2B1E,$2BDB,$2C98,$2D54,$2E10,$2ECC,$2F86,$3041 
	dc.w	$30FB,$31B4,$326D,$3326,$33DE,$3496,$354D,$3603 
	dc.w	$36B9,$376F,$3824,$38D8,$398C,$3A3F,$3AF2,$3BA4 
	dc.w	$3C56,$3D07,$3DB7,$3E67,$3F16,$3FC5,$4073,$4120 
	dc.w	$41CD,$4279,$4325,$43D0,$447A,$4523,$45CC,$4674 
	dc.w	$471C,$47C3,$4869,$490E,$49B3,$4A57,$4AFA,$4B9D 
	dc.w	$4C3F,$4CE0,$4D80,$4E20,$4EBF,$4F5D,$4FFA,$5097 
	dc.w	$5133,$51CE,$5268,$5301,$539A,$5432,$54C9,$555F 
	dc.w	$55F4,$5689,$571D,$57B0,$5842,$58D3,$5963,$59F3 
	dc.w	$5A81,$5B0F,$5B9C,$5C28,$5CB3,$5D3D,$5DC6,$5E4F 
	dc.w	$5ED6,$5F5D,$5FE2,$6067,$60EB,$616E,$61F0,$6271 
	dc.w	$62F1,$6370,$63EE,$646B,$64E7,$6562,$65DD,$6656 
	dc.w	$66CE,$6745,$67BC,$6831,$68A5,$6919,$698B,$69FC 
	dc.w	$6A6C,$6ADB,$6B4A,$6BB7,$6C23,$6C8E,$6CF8,$6D61 
	dc.w	$6DC9,$6E30,$6E95,$6EFA,$6F5E,$6FC0,$7022,$7082 
	dc.w	$70E1,$7140,$719D,$71F9,$7254,$72AE,$7306,$735E 
	dc.w	$73B5,$740A,$745E,$74B1,$7503,$7554,$75A4,$75F3 
	dc.w	$7640,$768D,$76D8,$7722,$776B,$77B3,$77F9,$783F 
	dc.w	$7883,$78C6,$7908,$7949,$7989,$79C7,$7A04,$7A41 
	dc.w	$7A7C,$7AB5,$7AEE,$7B25,$7B5C,$7B91,$7BC4,$7BF7 
	dc.w	$7C29,$7C59,$7C88,$7CB6,$7CE2,$7D0E,$7D38,$7D61 
	dc.w	$7D89,$7DB0,$7DD5,$7DF9,$7E1C,$7E3E,$7E5E,$7E7E 
	dc.w	$7E9C,$7EB9,$7ED4,$7EEF,$7F08,$7F20,$7F37,$7F4C 
	dc.w	$7F61,$7F74,$7F86,$7F96,$7FA6,$7FB4,$7FC1,$7FCD 
	dc.w	$7FD7,$7FE0,$7FE8,$7FEF,$7FF5,$7FF9,$7FFC,$7FFE 
	dc.w	$7FFF,$7FFE,$7FFC,$7FF9,$7FF5,$7FEF,$7FE8,$7FE0 
	dc.w	$7FD7,$7FCD,$7FC1,$7FB4,$7FA6,$7F96,$7F86,$7F74 
	dc.w	$7F61,$7F4C,$7F37,$7F20,$7F08,$7EEF,$7ED4,$7EB9 
	dc.w	$7E9C,$7E7E,$7E5E,$7E3E,$7E1C,$7DF9,$7DD5,$7DB0
	dc.w	$7D89,$7D61,$7D38,$7D0E,$7CE2,$7CB6,$7C88,$7C59
	dc.w	$7C29,$7BF7,$7BC4,$7B91,$7B5C,$7B25,$7AEE,$7AB5
	dc.w	$7A7C,$7A41,$7A04,$79C7,$7989,$7949,$7908,$78C6
	dc.w	$7883,$783F,$77F9,$77B3,$776B,$7722,$76D8,$768D
	dc.w	$7640,$75F3,$75A4,$7554,$7503,$74B1,$745E,$740A
	dc.w	$73B5,$735E,$7306,$72AE,$7254,$71F9,$719D,$7140
	dc.w	$70E1,$7082,$7022,$6FC0,$6F5E,$6EFA,$6E95,$6E30
	dc.w	$6DC9,$6D61,$6CF8,$6C8E,$6C23,$6BB7,$6B4A,$6ADB 
	dc.w	$6A6C,$69FC,$698B,$6919,$68A5,$6831,$67BC,$6745 
	dc.w	$66CE,$6656,$65DD,$6562,$64E7,$646B,$63EE,$6370 
	dc.w	$62F1,$6271,$61F0,$616E,$60EB,$6067,$5FE2,$5F5D 
	dc.w	$5ED6,$5E4F,$5DC6,$5D3D,$5CB3,$5C28,$5B9C,$5B0F 
	dc.w	$5A81,$59F3,$5963,$58D3,$5842,$57B0,$571D,$5689 
	dc.w	$55F4,$555F,$54C9,$5432,$539A,$5301,$5268,$51CE 
	dc.w	$5133,$5097,$4FFA,$4F5D,$4EBF,$4E20,$4D80,$4CE0 
	dc.w	$4C3F,$4B9D,$4AFA,$4A57,$49B3,$490E,$4869,$47C3 
	dc.w	$471C,$4674,$45CC,$4523,$447A,$43D0,$4325,$4279 
	dc.w	$41CD,$4120,$4073,$3FC5,$3F16,$3E67,$3DB7,$3D07 
	dc.w	$3C56,$3BA4,$3AF2,$3A3F,$398C,$38D8,$3824,$376F 
	dc.w	$36B9,$3603,$354D,$3496,$33DE,$3326,$326D,$31B4 
	dc.w	$30FB,$3041,$2F86,$2ECC,$2E10,$2D54,$2C98,$2BDB 
	dc.w	$2B1E,$2A61,$29A3,$28E5,$2826,$2767,$26A7,$25E7 
	dc.w	$2527,$2467,$23A6,$22E4,$2223,$2161,$209F,$1FDC 
	dc.w	$1F19,$1E56,$1D93,$1CCF,$1C0B,$1B46,$1A82,$19BD 
	dc.w	$18F8,$1833,$176D,$16A7,$15E1,$151B,$1455,$138E 
	dc.w	$12C7,$1200,$1139,$1072,$0FAB,$0EE3,$0E1B,$0D53 
	dc.w	$0C8B,$0BC3,$0AFB,$0A32,$096A,$08A1,$07D9,$0710 
	dc.w	$0647,$057E,$04B6,$03ED,$0324,$025B,$0192,$00C9 
	dc.w	$0000,$FF37,$FE6E,$FDA5,$FCDC,$FC13,$FB4A,$FA82 
	dc.w	$F9B9,$F8F0,$F827,$F75F,$F696,$F5CE,$F505,$F43D 
	dc.w	$F375,$F2AD,$F1E5,$F11D,$F055,$EF8E,$EEC7,$EE00 
	dc.w	$ED39,$EC72,$EBAB,$EAE5,$EA1F,$E959,$E893,$E7CD 
	dc.w	$E708,$E643,$E57E,$E4BA,$E3F5,$E331,$E26D,$E1AA 
	dc.w	$E0E7,$E024,$DF61,$DE9F,$DDDD,$DD1C,$DC5A,$DB99 
	dc.w	$DAD9,$DA19,$D959,$D899,$D7DA,$D71B,$D65D,$D59F 
	dc.w	$D4E2,$D425,$D368,$D2AC,$D1F0,$D134,$D07A,$CFBF 
	dc.w	$CF05,$CE4C,$CD93,$CCDA,$CC22,$CB6A,$CAB3,$C9FD 
	dc.w	$C947,$C891,$C7DC,$C728,$C674,$C5C1,$C50E,$C45C 
	dc.w	$C3AA,$C2F9,$C249,$C199,$C0EA,$C03B,$BF8D,$BEE0 
	dc.w	$BE33,$BD87,$BCDB,$BC30,$BB86,$BADD,$BA34,$B98C 
	dc.w	$B8E4,$B83D,$B797,$B6F2,$B64D,$B5A9,$B506,$B463 
	dc.w	$B3C1,$B320,$B280,$B1E0,$B141,$B0A3,$B006,$AF69 
	dc.w	$AECD,$AE32,$AD98,$ACFF,$AC66,$ABCE,$AB37,$AAA1 
	dc.w	$AA0C,$A977,$A8E3,$A850,$A7BE,$A72D,$A69D,$A60D 
	dc.w	$A57F,$A4F1,$A464,$A3D8,$A34D,$A2C3,$A23A,$A1B1 
	dc.w	$A12A,$A0A3,$A01E,$9F99,$9F15,$9E92,$9E10,$9D8F 
	dc.w	$9D0F,$9C90,$9C12,$9B95,$9B19,$9A9E,$9A23,$99AA 
	dc.w	$9932,$98BB,$9844,$97CF,$975B,$96E7,$9675,$9604 
	dc.w	$9594,$9525,$94B6,$9449,$93DD,$9372,$9308,$929F 
	dc.w	$9237,$91D0,$916B,$9106,$90A2,$9040,$8FDE,$8F7E 
	dc.w	$8F1F,$8EC0,$8E63,$8E07,$8DAC,$8D52,$8CFA,$8CA2 
	dc.w	$8C4B,$8BF6,$8BA2,$8B4F,$8AFD,$8AAC,$8A5C,$8A0D 
	dc.w	$89C0,$8973,$8928,$88DE,$8895,$884D,$8807,$87C1 
	dc.w	$877D,$873A,$86F8,$86B7,$8677,$8639,$85FC,$85BF 
	dc.w	$8584,$854B,$8512,$84DB,$84A4,$846F,$843C,$8409 
	dc.w	$83D7,$83A7,$8378,$834A,$831E,$82F2,$82C8,$829F 
	dc.w	$8277,$8250,$822B,$8207,$81E4,$81C2,$81A2,$8182 
	dc.w	$8164,$8147,$812C,$8111,$80F8,$80E0,$80C9,$80B4 
	dc.w	$809F,$808C,$807A,$806A,$805A,$804C,$803F,$8033 
	dc.w	$8029,$8020,$8018,$8011,$800B,$8007,$8004,$8002 
	dc.w	$8001,$8002,$8004,$8007,$800B,$8011,$8018,$8020 
	dc.w	$8029,$8033,$803F,$804C,$805A,$806A,$807A,$808C 
	dc.w	$809F,$80B4,$80C9,$80E0,$80F8,$8111,$812C,$8147 
	dc.w	$8164,$8182,$81A2,$81C2,$81E4,$8207,$822B,$8250 
	dc.w	$8277,$829F,$82C8,$82F2,$831E,$834A,$8378,$83A7 
	dc.w	$83D7,$8409,$843C,$846F,$84A4,$84DB,$8512,$854B 
	dc.w	$8584,$85BF,$85FC,$8639,$8677,$86B7,$86F8,$873A 
	dc.w	$877D,$87C1,$8807,$884D,$8895,$88DE,$8928,$8973 
	dc.w	$89C0,$8A0D,$8A5C,$8AAC,$8AFD,$8B4F,$8BA2,$8BF6 
	dc.w	$8C4B,$8CA2,$8CFA,$8D52,$8DAC,$8E07,$8E63,$8EC0 
	dc.w	$8F1F,$8F7E,$8FDE,$9040,$90A2,$9106,$916B,$91D0 
	dc.w	$9237,$929F,$9308,$9372,$93DD,$9449,$94B6,$9525 
	dc.w	$9594,$9604,$9675,$96E7,$975B,$97CF,$9844,$98BB 
	dc.w	$9932,$99AA,$9A23,$9A9E,$9B19,$9B95,$9C12,$9C90 
	dc.w	$9D0F,$9D8F,$9E10,$9E92,$9F15,$9F99,$A01E,$A0A3 
	dc.w	$A12A,$A1B1,$A23A,$A2C3,$A34D,$A3D8,$A464,$A4F1 
	dc.w	$A57F,$A60D,$A69D,$A72D,$A7BE,$A850,$A8E3,$A977 
	dc.w	$AA0C,$AAA1,$AB37,$ABCE,$AC66,$ACFF,$AD98,$AE32 
	dc.w	$AECD,$AF69,$B006,$B0A3,$B141,$B1E0,$B280,$B320 
	dc.w	$B3C1,$B463,$B506,$B5A9,$B64D,$B6F2,$B797,$B83D 
	dc.w	$B8E4,$B98C,$BA34,$BADD,$BB86,$BC30,$BCDB,$BD87 
	dc.w	$BE33,$BEE0,$BF8D,$C03B,$C0EA,$C199,$C249,$C2F9 
	dc.w	$C3AA,$C45C,$C50E,$C5C1,$C674,$C728,$C7DC,$C891 
	dc.w	$C947,$C9FD,$CAB3,$CB6A,$CC22,$CCDA,$CD93,$CE4C 
	dc.w	$CF05,$CFBF,$D07A,$D134,$D1F0,$D2AC,$D368,$D425 
	dc.w	$D4E2,$D59F,$D65D,$D71B,$D7DA,$D899,$D959,$DA19 
	dc.w	$DAD9,$DB99,$DC5A,$DD1C,$DDDD,$DE9F,$DF61,$E024 
	dc.w	$E0E7,$E1AA,$E26D,$E331,$E3F5,$E4BA,$E57E,$E643 
	dc.w	$E708,$E7CD,$E893,$E959,$EA1F,$EAE5,$EBAB,$EC72 
	dc.w	$ED39,$EE00,$EEC7,$EF8E,$F055,$F11D,$F1E5,$F2AD 
	dc.w	$F375,$F43D,$F505,$F5CE,$F696,$F75F,$F827,$F8F0 
	dc.w	$F9B9,$FA82,$FB4A,$FC13,$FCDC,$FDA5,$FE6E,$FF37 
	dc.w	$0000,$00C9,$0192,$025B,$0324,$03ED,$04B6,$057E 
	dc.w	$0647,$0710,$07D9,$08A1,$096A,$0A32,$0AFB,$0BC3 
	dc.w	$0C8B,$0D53,$0E1B,$0EE3,$0FAB,$1072,$1139,$1200 
	dc.w	$12C7,$138E,$1455,$151B,$15E1,$16A7,$176D,$1833 
	dc.w	$18F8,$19BD,$1A82,$1B46,$1C0B,$1CCF,$1D93,$1E56 
	dc.w	$1F19,$1FDC,$209F,$2161,$2223,$22E4,$23A6,$2467 
	dc.w	$2527,$25E7,$26A7,$2767,$2826,$28E5,$29A3,$2A61 
	dc.w	$2B1E,$2BDB,$2C98,$2D54,$2E10,$2ECC,$2F86,$3041 
	dc.w	$30FB,$31B4,$326D,$3326,$33DE,$3496,$354D,$3603 
	dc.w	$36B9,$376F,$3824,$38D8,$398C,$3A3F,$3AF2,$3BA4 
	dc.w	$3C56,$3D07,$3DB7,$3E67,$3F16,$3FC5,$4073,$4120 
	dc.w	$41CD,$4279,$4325,$43D0,$447A,$4523,$45CC,$4674 
	dc.w	$471C,$47C3,$4869,$490E,$49B3,$4A57,$4AFA,$4B9D 
	dc.w	$4C3F,$4CE0,$4D80,$4E20,$4EBF,$4F5D,$4FFA,$5097 
	dc.w	$5133,$51CE,$5268,$5301,$539A,$5432,$54C9,$555F 
	dc.w	$55F4,$5689,$571D,$57B0,$5842,$58D3,$5963,$59F3 
	dc.w	$5A81,$5B0F,$5B9C,$5C28,$5CB3,$5D3D,$5DC6,$5E4F 
	dc.w	$5ED6,$5F5D,$5FE2,$6067,$60EB,$616E,$61F0,$6271 
	dc.w	$62F1,$6370,$63EE,$646B,$64E7,$6562,$65DD,$6656 
	dc.w	$66CE,$6745,$67BC,$6831,$68A5,$6919,$698B,$69FC 
	dc.w	$6A6C,$6ADB,$6B4A,$6BB7,$6C23,$6C8E,$6CF8,$6D61 
	dc.w	$6DC9,$6E30,$6E95,$6EFA,$6F5E,$6FC0,$7022,$7082 
	dc.w	$70E1,$7140,$719D,$71F9,$7254,$72AE,$7306,$735E 
	dc.w	$73B5,$740A,$745E,$74B1,$7503,$7554,$75A4,$75F3 
	dc.w	$7640,$768D,$76D8,$7722,$776B,$77B3,$77F9,$783F 
	dc.w	$7883,$78C6,$7908,$7949,$7989,$79C7,$7A04,$7A41 
	dc.w	$7A7C,$7AB5,$7AEE,$7B25,$7B5C,$7B91,$7BC4,$7BF7 
	dc.w	$7C29,$7C59,$7C88,$7CB6,$7CE2,$7D0E,$7D38,$7D61 
	dc.w	$7D89,$7DB0,$7DD5,$7DF9,$7E1C,$7E3E,$7E5E,$7E7E 
	dc.w	$7E9C,$7EB9,$7ED4,$7EEF,$7F08,$7F20,$7F37,$7F4C 
	dc.w	$7F61,$7F74,$7F86,$7F96,$7FA6,$7FB4,$7FC1,$7FCD 
	dc.w	$7FD7,$7FE0,$7FE8,$7FEF,$7FF5,$7FF9,$7FFC,$7FFE 



rlmt_cos_table	equ	rlmt_sin_table+512

o	set	-1023
	rept	1023
	dc.w	32767/o
o	set	o+1	
	endr
rlmt_one_over_table:
	dc.w 0
o	set 1
	rept 1023
	dc.w 32767/o
o	set o+1
	endr

	even

***************************************************************************
	SECTION BSS
***************************************************************************	
	even

rlmt_screen_x:		rs.w	1
rlmt_screen_x_1:	rs.w	1
rlmt_screen_y:		rs.w	1
rlmt_screen_y_1:	rs.w	1
rlmt_maths_buffer:	rs.b	0
	even

rlmt_maths_space:	ds.b	rlmt_maths_buffer

	even