***********************************
*=================================*
* RESERVOIR GODS LIBRARY ROUTINES *
*=================================*
*        |              |         *
*        |SCREEN LIBRARY|         *
*        |              |         *
***********************************
* CODE: MR. PINK | (C): 19/02/96  *
***********************************
* UPDATE: 19/2/96  *
********************

***************************************************************************
	SECTION TEXT
***************************************************************************	



rlsc_screen_constructor:
	movem.l	a0-1/d0-1,-(a7)

	bsr	dhs_save_video

	lea	rlsc_screen_space,a0

	bsr	rlsc_save_st_pal
	bsr	rlsc_save_falcon_pal
	
	movem.l	a0-2/d1-2,-(a7)
	move.w	#$59,-(a7)
	trap	#14
	addq.l	#2,a7
	movem.l	(a7)+,a0-2/d1-2
	move.w	d0,rlsc_monitor_type(a0)

	lea	rlsc_videl_rgb,a1
	cmp.w	#2,d0
	bne.s	.not_vga
	lea	rlsc_videl_vga,a1	
.not_vga
	move.l	a1,rlsc_videl_block_adr(a0)

	lea	rlsc_videl_saves(a0),a1

	move.b	$ffff8201.w,(a1)+	; 0 Screen Adr (high)
	move.b	$ffff8203.w,(a1)+	; 1 Screen Adr (medium)
	move.b	$ffff820d.w,(a1)+	; 2 Screen Adr (low)
	move.b	$ffff8265.w,(a1)+	; 3 Horizontal Scroll
	move.w	$ffff8282.w,(a1)+	; 4 Horizontal Hold Timer
	move.w	$ffff8284.w,(a1)+	; 6 Horizontal Border Begin
	move.w	$ffff8286.w,(a1)+	; 8 Horizontal Border End
	move.w	$ffff8288.w,(a1)+	;10 Horizontal Display Begin
	move.w	$ffff828a.w,(a1)+	;12 Horizontal display End 
	move.w	$ffff828c.w,(a1)+	;14 HSS-Synchro
	move.w	$ffff828e.w,(a1)+	;16 HFS
	move.w	$ffff8290.w,(a1)+	;18 HEE
	move.w	$ffff82a2.w,(a1)+	;20 Vertical Frequency Timer
	move.w	$ffff82a4.w,(a1)+	;22 Vertical Border Begin
	move.w	$ffff82a6.w,(a1)+	;24 Vertical Border End
	move.w	$ffff82a8.w,(a1)+	;26 Vertical Display Begin
	move.w	$ffff82aa.w,(a1)+	;28 Vertical Display End
	move.w	$ffff82ac.w,(a1)+	;30 VSS
	move.w	$ffff820a.w,(a1)+	;32 Video Sync Mode
	move.w	$ffff82c0.w,(a1)+	;34 Video Clock
	move.w	$ffff8266.w,(a1)+	;36 SPSHIFT - Falcon res
	move.w	$ffff82c2.w,(a1)+	;38 Video Control
	move.w	$ffff8210.w,(a1)+	;40 Falcon Line Width
	move.w	$ffff820e.w,(a1)+	;42 Offset to next line
	move.b	$ffff8260.w,(a1)+	;44 ST Resolution
	clr.b	(a1)			;st flag

	bsr	rlsc_store_old_x_mode
	bsr	rlsc_store_old_y

	tst.w	rlsc_old_screen_mode(a0)
	beq	.check_16_st_mode

	cmp.w	#1,rlsc_old_screen_mode(a0)
	bne	.non_st_mode

.check_4_st_mode
	cmp.b	#1,-1(a1)
	bne.s	.non_st_mode
	bra.s	.is_st_mode
.check_16_st_mode:
	cmp.w	#320,rlsc_old_screen_x(a0)
	bne.s	.non_st_mode
	cmp.w	#200,rlsc_old_screen_y(a0)
	bne.s	.non_st_mode
.is_st_mode
	st.b	(a1)
.non_st_mode
	movem.l	(a7)+,a0-1/d0-1
	rts


rlsc_store_old_y:
	move.w	rlsc_old_vde(a0),d0
	sub.w	rlsc_old_vdb(a0),d0
	move.w	rlsc_old_vco(a0),d1

	btst	#1,d1			;interlace mode
	bne.s	.nint			;yes
	lsr.w	d0
.nint	btst	#0,d1			;line doubling?
	beq.s	.nol
	lsr.w	d0	
.nol	move.w	d0,rlsc_old_screen_y(a0)
	rts

rlsc_store_old_x_mode:
	move.w	rlsc_old_spshift(a0),d0
	btst	#10,d0			;check for mono
	bne	.store_mono_info
	btst	#8,d0			;check for true colour
	bne	.store_tc_info
	btst	#4,d0
	bne	.store_256_info

	move.w	rlsc_old_st_res(a0),d0
	beq	.store_16_info

	moveq	#62,d0
	cmp.w	#2,rlsc_monitor_type(a0)
	bne.s	.nvga
	moveq	#23,d0
.nvga	cmp.w	rlsc_old_hht(a0),d0
	bne	.store_16_info
	bra	.store_4_info

.store_mono_info
	clr.w	rlsc_old_screen_mode(a0)
	move.w	rlsc_old_line_width(a0),d0	;width of a line
	lsl.w	#4,d0				;*16=num pixels
	move.w	d0,rlsc_old_screen_x(a0)
	rts

.store_4_info
	move.w	#1,rlsc_old_screen_mode(a0)
	move.w	rlsc_old_line_width(a0),d0	;width of a line
	lsl.w	#3,d0				;*8=num pixels
	move.w	d0,rlsc_old_screen_x(a0)
	rts

.store_16_info
	move.w	#2,rlsc_old_screen_mode(a0)
	move.w	rlsc_old_line_width(a0),d0	;width of a line
	lsl.w	#2,d0				;*4=num pixels
	move.w	d0,rlsc_old_screen_x(a0)
	rts

.store_256_info
	move.w	#3,rlsc_old_screen_mode(a0)
	move.w	rlsc_old_line_width(a0),d0	;width of a line
	add.w	d0,d0				;*2=num pixels
	move.w	d0,rlsc_old_screen_x(a0)
	rts

.store_tc_info
	move.w	#3,rlsc_old_screen_mode(a0)
	move.w	rlsc_old_line_width(a0),d0	;width of a line
	move.w	d0,rlsc_old_screen_x(a0)
	rts

rlsc_save_st_pal:
	movem.l	a0-1/d0,-(a7)
	lea	rlsc_screen_space,a0
	lea	rlsc_save_st_pal_space(a0),a0
	movea.w	#$8240,a1
	bsr	rlvc_wait_vbl
	moveq	#7,d0
.savep	move.l	(a1)+,(a0)+
	dbra	d0,.savep
	movem.l	(a7)+,a0-1/d0
	rts

rlsc_fade_st_between:
	movem.l	a0-2/d0-2,-(a7)
	move.l	a0,d0
	lea	rlsc_screen_space,a0
	move.l	d0,rlsc_fade_pal_source_adr(a0)
	move.l	a1,rlsc_fade_pal_dest_adr(a0)
	clr.l	rlsc_fade_counter(a0)
	lea	rlsc_fade_pal_space(a0),a1
	move.l	a1,rlsc_set_pal_adr(a0)
.loop	bsr	rlsc_calc_mid_st_pal
	bsr	rlvc_wait_vbl
	bsr	rlsc_set_st_pal
	addq.l	#1,rlsc_fade_counter(a0)
	cmp.l	#16,rlsc_fade_counter(a0)
	blt.s	.loop
	move.l	rlsc_fade_pal_dest_adr(a0),rlsc_set_pal_adr
	bsr	rlsc_set_st_pal
	movem.l	(a7)+,a0-2/d0-2
	rts

rlsc_fade_falc_between:
	movem.l	a0-2/d0-2,-(a7)
	move.l	a0,d0
	lea	rlsc_screen_space,a0
	move.l	d0,rlsc_fade_pal_source_adr(a0)
	move.l	a1,rlsc_fade_pal_dest_adr(a0)
	clr.l	rlsc_fade_counter(a0)
	lea	rlsc_fade_pal_space(a0),a1
	move.l	a1,rlsc_set_pal_adr(a0)

.loop	bsr	rlsc_calc_mid_falc_pal
	bsr	rlvc_wait_vbl
	bsr	rlsc_set_falcon_pal
	addq.l	#1,rlsc_fade_counter(a0)
	cmp.l	#64,rlsc_fade_counter(a0)
	blt.s	.loop

	move.l	rlsc_fade_pal_dest_adr(a0),rlsc_set_pal_adr
	bsr	rlsc_set_falcon_pal
	movem.l	(a7)+,a0-2/d0-2
	rts


rlsc_set_st_pal:
	movem.l	a0/d0-7,-(a7)
	lea	rlsc_screen_space,a0
	move.l	rlsc_set_pal_adr(a0),a0
	movem.l	(a0),d0-7
	movea.w	#$8240,a0
	bsr	rlvc_wait_vbl
	movem.l	d0-7,(a0)
	movem.l	(a7)+,a0/d0-7
	rts	


rlsc_restore_st_pal:
	movem.l	a0-1/d0,-(a7)
	lea	rlsc_screen_space,a0
	lea	rlsc_save_st_pal_space(a0),a0
	movea.w	#$8240,a1
	bsr	rlvc_wait_vbl
	moveq	#7,d0
.savep	move.l	(a0)+,(a1)+
	dbra	d0,.savep
	movem.l	(a7)+,a0-1/d0
	rts

rlsc_save_falcon_pal:
	movem.l	a0-1/d0,-(a7)
	lea	rlsc_screen_space,a0
	lea	rlsc_save_falc_pal_space(a0),a0
	movea.w	#$9800,a1
	bsr	rlvc_wait_vbl
	move.w	#255,d0
.savep	move.l	(a1)+,(a0)+
	dbra	d0,.savep
	movem.l	(a7)+,a0-1/d0
	rts

rlsc_set_falcon_pal
	movem.l	a0-1/d0,-(a7)
	lea	rlsc_screen_space,a0
	move.l	rlsc_set_pal_adr(a0),a0
	movea.w	#$9800,a1
	bsr	rlvc_wait_vbl
	move.w	#255,d0
.savep	move.l	(a0)+,(a1)+
	dbra	d0,.savep
	movem.l	(a7)+,a0-1/d0
	rts


rlsc_restore_falcon_pal:
	movem.l	a0-1/d0,-(a7)
	lea	rlsc_screen_space,a0
	lea	rlsc_save_falc_pal_space(a0),a0
	movea.w	#$9800,a1
	bsr	rlvc_wait_vbl
	move.w	#255,d0
.savep	move.l	(a0)+,(a1)+
	dbra	d0,.savep
	movem.l	(a7)+,a0-1/d0
	rts

rlsc_calc_mid_st_pal:
	movem.l	a0-3/d0-4,-(a7)
	lea	rlsc_screen_space,a0
	move.l	rlsc_fade_pal_source_adr(a0),a1	;source
	lea	rlsc_fade_pal_space(a0),a2
	move.l	rlsc_fade_pal_dest_adr(a0),a3	;dest
	moveq	#15,d3
.pal	moveq	#4,d2
	bsr	rlsc_conv_mid_st_col
	moveq	#8,d2
	bsr	rlsc_conv_mid_st_col
	moveq	#12,d2
	bsr	rlsc_conv_mid_st_col
	tst.w	(a1)+
	tst.w	(a2)+
	tst.w	(a3)+
	dbra	d3,.pal
	movem.l	(a7)+,a0-3/d0-4
	rts

rlsc_calc_mid_falc_pal:
	movem.l	a0-3/d0-4,-(a7)
	lea	rlsc_screen_space,a0
	move.l	rlsc_fade_pal_source_adr(a0),a1	;source
	lea	rlsc_fade_pal_space(a0),a2
	move.l	rlsc_fade_pal_dest_adr(a0),a3	;dest
	move.w	#255,d3
.pal	moveq	#0,d2
	bsr	rlsc_conv_mid_falc_col
	moveq	#8,d2
	bsr	rlsc_conv_mid_falc_col
	moveq	#24,d2
	bsr	rlsc_conv_mid_falc_col
	tst.l	(a1)+
	tst.l	(a2)+
	tst.l	(a3)+
	dbra	d3,.pal
	movem.l	(a7)+,a0-3/d0-4
	rts

rlsc_conv_mid_st_col:
	bfextu	(a1){d2:4},d4		;source
	move.w	(rlsc_ste_table1,d4.w*2),d4		;conv col
	bfextu	(a3){d2:4},d0		;dest
	move.w	(rlsc_ste_table1,d0.w*2),d0		;convert colour (msb->lsb)
	sub.w	d4,d0			;source-dest
	muls.w	#4096,d0		;* 1/16
	move.l	rlsc_fade_counter(a0),d1
	muls.l	d0,d0:d1
	swap	d1
	add.w	d4,d1			;+source
	move.w	(rlsc_ste_table2,d1.w*2),d0		;convert colour (lsb->msb)
	bfins	d0,(a2){d2:4}
	rts

rlsc_conv_mid_falc_col:
	bfextu	(a1){d2:6},d4		;source
	bfextu	(a3){d2:6},d0		;dest
	sub.w	d4,d0			;source-dest
	muls.w	#1024,d0		;* 1/64
	move.l	rlsc_fade_counter(a0),d1
	muls.l	d0,d0:d1
	swap	d1
	add.w	d4,d1			;+source
	bfins	d1,(a2){d2:6}
	rts

;d0=screen x, d1=screen y, d2=mode, a0=start mem block

rlsc_init_screen_space:
	movem.l	d0-7/a2-6,-(a7)

	move.l	a0,d3
	clr.b	d3	
	move.l	d3,a1

	bsr	rlvc_install_vbl
	lea	rlsc_set_screen_vbl,a0
	bsr	rlvc_install_vbl_routine
	move.l	a1,a0				;new physic	
	bsr	rlsc_set_new_physic
	bsr	rlvc_wait_vbl
	bsr	rlsc_set_screen_mode

	move.l	a1,a0
	bsr	rlsc_clear_screen
	lea	rlsc_screen_space,a2
	move.w	rlsc_line_size(a2),d0
	mulu	rlsc_screen_y(a2),d0
	move.l	a0,a1
	add.l	d0,a1

	movem.l	(a7)+,d0-7/a2-6
	rts

rlsc_clear_screen:
	movem.l	d0-3/a0-1,-(a7)

	lea	rlsc_screen_space,a1
	move.w	rlsc_line_size(a1),d0
	lsr.w	#2,d0
	subq.w	#1,d0
	move.w	rlsc_screen_y(a1),d1
	subq.w	#1,d1

	moveq	#0,d3
.liney	move.w	d0,d2
.linex	move.l	d3,(a0)+
	dbra	d2,.linex
	dbra	d1,.liney

	movem.l	(a7)+,d0-3/a0-1
	rts


rlsc_set_new_physic:
;	move.l	d0,-(a7)
;	move.l	a0,d0
;	move.l	a0,$ffff8200.w
;	move.b	d0,$ffff820d.w
;	move.l	(a7)+,d0
;	rts		

	move.l	a1,-(a7)
	lea	rlsc_screen_space,a1
	move.l	a0,rlsc_new_physic(a1)
	st.b	rlsc_show_new_physic_flag(a1)
	move.l	(a7)+,a1
	rts

rlsc_set_screen_vbl
	move.w	sr,-(a7)
	ori.w	#$0700,sr
	movem.l	a0-a2,-(a7)

	lea	rlsc_screen_space,a0
	tst.b	rlsc_show_new_physic_flag(a0)
	beq.s	.no_new
	lea	rlsc_new_physic(a0),a1
	movea.w	#$8201,a2	;$fffff8201=screen address
	move.b	1(a1),(a2)	
	move.b	2(a1),2(a2)	;$fffff8203
	move.b	3(a1),$C(a2)	;$fffff820d
	clr.b	rlsc_show_new_physic_flag(a0)

.no_new	movem.l	(a7)+,a0-2
	move.w	(a7)+,sr
	rts

rlsc_return_monitor_type:
	move.l	a0,-(a7)
	lea	rlsc_screen_space,a0
	move.w	rlsc_monitor_type(a0),d0
	move.l	(a7)+,a0
	rts

rlsc_screen_deconstructor:
	lea	rlsc_screen_space,a0
	lea	rlsc_videl_saves(a0),a0

	bsr	rlvc_wait_vbl

	move.b	(a0)+,$ffff8201.w	; 0 Screen Adr (high)
	move.b	(a0)+,$ffff8203.w	; 1 Screen Adr (medium)
	move.b	(a0)+,$ffff820d.w	; 2 Screen Adr (low)
	move.b	(a0)+,$ffff8265.w	; 3 Horizontal Scroll

	move.w	(a0)+,$ffff8282.w	; 4 Horizontal Hold Timer
	move.w	(a0)+,$ffff8284.w	; 6 Horizontal Border Begin
	move.w	(a0)+,$ffff8286.w	; 8 Horizontal Border End
	move.w	(a0)+,$ffff8288.w	;10 Horizontal Display Begin
	move.w	(a0)+,$ffff828a.w	;12 Horizontal display End 
	move.w	(a0)+,$ffff828c.w	;14 HSS-Synchro
	move.w	(a0)+,$ffff828e.w	;16 HFS
	move.w	(a0)+,$ffff8290.w	;18 HEE
	move.w	(a0)+,$ffff82a2.w	;20 Vertical Frequency Timer
	move.w	(a0)+,$ffff82a4.w	;22 Vertical Border Begin
	move.w	(a0)+,$ffff82a6.w	;24 Vertical Border End
	move.w	(a0)+,$ffff82a8.w	;26 Vertical Display Begin
	move.w	(a0)+,$ffff82aa.w	;28 Vertical Display End
	move.w	(a0)+,$ffff82ac.w	;30 VSS
	move.w	(a0)+,$ffff820a.w	;32 Video Sync Mode
	move.w	(a0)+,$ffff82c0.w	;34 Video Clock
	move.w	(a0)+,$ffff8266.w	;36 SPSHIFT - Falcon res
	tst.b	7(a0)
	beq.s	.no_st
	move.b	6(a0),$ffff8260.w
.no_st
	move.w	(a0)+,$ffff82c2.w	;38 Video Control
	move.w	(a0)+,$ffff8210.w	;40 Falcon Line Width
	move.w	(a0)+,$ffff820e.w	;42 STe Line Width

	bsr	dhs_restore_video

	bsr	rlsc_restore_st_pal
	bsr	rlsc_restore_falcon_pal

	rts

; --------------------------------------------------------------
; ------------- Save video -------------------------------------
; --------------------------------------------------------------

dhs_save_video:	move.w	#2,-(sp)		;xbios save video
		trap	#14			;
		addq.l	#2,sp			;
		move.l	d0,dhs_save_phys	;

	    	move.w  #-1,-(sp)		;
                move.w  #$58,-(sp)		;
                trap    #14			;
                addq.l  #4,sp			;
                move.w  d0,dhs_save_scr		;
		rts


; --------------------------------------------------------------
; ------------- Restore video ----------------------------------
; --------------------------------------------------------------

dhs_restore_video:
	 	move.w	dhs_save_scr,-(sp)	;xbios restore video
		move.w	#-1,-(sp)		;
		move.l	dhs_save_phys,-(sp)	;
		move.l	dhs_save_phys,-(sp)	;
		move.w	#5,-(sp)		;
		add.l	#14,sp			;

                move.w  dhs_save_scr,-(sp)	;
                move.w  #$58,-(sp)		;
                trap    #14			;
                addq.l  #4,sp			;
		rts


		
dhs_save_scr:	ds.l	1			;save videomode
dhs_save_phys:	ds.l	1			;save physbase


* Notes:
* 2 Colour modes of 320/384 X pixels are not supported
* True colour modes of 640/768 X pixels are not supported on VGA
* Vertical resolution of 100/120/128 software supported on VGA



*********************************
* VIDEL MASTER - INITIALISATION *
*********************************	

	lea	rlsc_videl_rgb,a0
	cmp.w	#2,rlsc_monitor_type(a0)
	bne.s	.not_vga
	lea	rlsc_videl_vga,a0
.not_vga
	lea	rlsc_start_videl_data,a1
	move.l	#(rlsc_end_videl_data-rlsc_start_videl_data)/2-1,d0
.copy	move.w	(a0)+,(a1)+
	dbra	d0,.copy
	rts


************************************
* VIDEL MASTER - RESOLUTION SETTER *
************************************	

* enter with d0=x pixels, d1=y pixels, d2=colour mode
* 0=mono, 1=2, 2=4, 3=16, 4=tc

* returns d0=x pixels, d1=y pixels, d2=line size

rlsc_set_screen_mode:
	movem.l	a0-1/d0-2,-(a7)
	lea	rlsc_screen_space,a0
	move.w	d2,rlsc_screen_mode(a0)
	bsr	rlsc_change_pink_res
	move.w	d0,rlsc_screen_x(a0)
	move.w	d1,rlsc_screen_y(a0)
	move.w	d2,rlsc_line_size(a0)
	ext.l	d2
	subq.w	#1,d1
	lea	rlsc_line_offsets(a0),a1
	moveq	#0,d0
.ct	move.l	d0,(a1)+
	add.l	d2,d0
	dbra	d1,.ct
	bsr	rlsc_construct_pixel_offsets
	
	move.w	rlsc_screen_x(a0),d0
	move.w	rlsc_screen_y(a0),d1
	move.w	rlsc_screen_mode(a0),d2
	move.w	rlsc_line_size(a0),d3
	lea	rlsc_pixel_offsets(a0),a1
	lea	rlsc_line_offsets(a0),a0
	bsr	rlsp_sprite_constructor

	bsr	rlnem_set_nemesis_rgb

	movem.l	(a7)+,a0-1/d0-2
	rts

rlsc_construct_pixel_offsets
	movem.l	d0-3/a1,-(a7)
	move.w	rlsc_screen_x(a0),d0
	subq.w	#1,d0
	lea	rlsc_pixel_offsets(a0),a1
	move.w	rlsc_screen_mode(a0),d1
	jmp	([rlsc_construct_pixel_routines,d1.w*4])

rlsc_construct_pixel_routines:
	dc.l	rlsc_construct_po_2
	dc.l	rlsc_construct_po_4
	dc.l	rlsc_construct_po_16
	dc.l	rlsc_construct_po_256
	dc.l	rlsc_construct_po_tc

rlsc_construct_po_2
	moveq	#2,d1
	bra.s	rlsc_construct_po_bp
rlsc_construct_po_4
	moveq	#4,d1
	bra.s	rlsc_construct_po_bp
rlsc_construct_po_16
	moveq	#8,d1
	bra.s	rlsc_construct_po_bp
rlsc_construct_po_256
	moveq	#16,d1
rlsc_construct_po_bp
	moveq	#0,d2
	moveq	#16,d3
.cons	move.l	d2,(a1)+
	subq.w	#1,d3
	bne.s	.neq
	moveq	#16,d3
	add.l	d1,d2
.neq	dbra	d0,.cons
	movem.l	(a7)+,a1/d0-3
	rts

rlsc_construct_po_tc
	moveq	#0,d1
.cons	move.l	d1,(a1)+
	addq.l	#2,d1
	dbra	d0,.cons
	movem.l	(a7)+,a1/d0-3
	rts

rlsc_change_pink_res
	cmp.w	#5,d2		;colour mode in range?
	blt.s	.col_ok		;yes
	moveq	#-1,d0		;error, invalid colour mode request
	rts
.col_ok
	movem.l	d3-4/a0-4,-(a7)
	move.l	(rlsc_colour_mode_table,d2.w*8),a1	;get to colour table
	move.l	(rlsc_colour_mode_table+4,d2.w*8),a2	;get to colour table

	lea	rlsc_horizontal_sizes,a3		;rgb horizontal values
	move.w	rlsc_monitor_type(a0),d3		;monitor type
	cmp.w	#2,d3				;vga?
	bne.s	.not_vga			;no
	lea	rlsc_vga_horizontal_sizes,a3	;vga horizontal values
	cmp.w	#4,d2				;true colour mode?
	bne.s	.not_vga			;no
	move.l	#rlsc_h_320_true,a3		;must be 320
	move.w	#320,d4
	bra.s	.gopic
.not_vga
	
	moveq	#-1,d3		;table index
.nexth	addq.w	#1,d3		;inc index
	move.w	(a3)+,d4	;get x pixels
	bmi.s	.lasth		;last one
	beq.s	.nexth		;if 0, skip
	cmp.w	d0,d4		;reached target?
	blt.s	.nexth		;too small
	bra.s	.goth
.lasth	move.w	-(a3),d4	;get x pixels
	subq.w	#1,d3		;dec index
.goth	move.l	(a1,d3.w*4),a3	;get horizontal table
.gopic	move.w	d4,-(a7)	;store x size


	lea	rlsc_vertical_sizes,a1		;vertical table
	moveq	#-1,d3		;table index
.nextv	addq.w	#1,d3		;inc index
	move.w	(a1)+,d4	;get x pixels
	bmi.s	.lastv		;last one
	beq.s	.nextv		;if 0, skip
	cmp.w	d1,d4		;reached target?
	beq.s	.contv
	blt.s	.nextv		;too small
	bra.s	.gotv
.lastv	move.w	-(a1),d4	;get y pixels
	subq.w	#1,d3		;dec index
.gotv	move.l	(a2,d3.w*4),a1	;get vertical table

* Non standard Y res handled here!

	move.w	d4,d5		;current
	move.w	d1,d2		;y lines
	sub.w	d1,d5		;current-target

	btst	#0,15(a1)	;double line mode?
	bne.s	.double_l	;yes
	btst	#1,15(a1)	;interlace mode?
	beq.s	.cnr		;no
	lsr.w	d5		;lines/2
	bra.s	.cnr
.double_l
	add.w	d5,d5		;lines*2
.cnr

.nodo	cmp.w	#2,rlsc_monitor_type(a0)	;vga?
	bne.s	.nonv			;no
	add.w	d5,d5		;double lines
.nonv
	lea	rlsc_temp_v(a0),a2
	move.l	(a1)+,(a2)+
	move.l	(a1)+,(a2)+
	move.l	(a1)+,(a2)+
	move.l	(a1)+,(a2)+
	lea	rlsc_temp_v(a0),a1
	add.w	d5,6(a1)	;vde
	sub.w	d5,8(a1)	;vdb
	move.w	d1,d4		;y pixels
	bra.s	.skip
.contv	move.l	(a2,d3.w*4),a1	;vertical offsets
.skip	move.w	d4,-(a7)			;save y value


	cmpa.l	#rlsc_h_320_16,a3
	bne.s	.n320
	cmpa.l	#rlsc_v_200_16,a1
	bne.s	.n320
	move.l	#rlsc_h_320_16_st,a3
	move.l	#rlsc_v_200_16_st,a1
.n320
	move.l	rlsc_videl_block_adr(a0),a4
	move.l	a1,d0
	lea	(a4,d0.w),a1
	move.l	a3,d0
	lea	(a4,d0.w),a3

	bsr	rlvc_wait_vbl		; sync

	clr.b	$ffff8265.w		; Horizontal Scroll

	move.w	(a3)+,$ffff8282.w	; Horizontal Hold Timer
	move.w	(a3)+,$ffff8284.w	; Horizontal Border Begin
	move.w	(a3)+,$ffff8286.w	; Horizontal Border End
	move.w	(a3)+,$ffff8288.w	; Horizontal Display Begin
	move.w	(a3)+,$ffff828a.w	; Horizontal display End 
	move.w	(a3)+,$ffff828c.w	; HSS-Synchro
	move.w	(a3)+,$ffff828e.w	; HFS
	move.w	(a3)+,$ffff8290.w	; HEE

	move.w	(a1)+,$ffff82a2.w	; Vertical Frequency Timer
	move.w	(a1)+,$ffff82a4.w	; Vertical Border Begin
	move.w	(a1)+,$ffff82a6.w	; Vertical Border End
	move.w	(a1)+,$ffff82a8.w	; Vertical Display Begin
	move.w	(a1)+,$ffff82aa.w	; Vertical Display End
	move.w	(a1)+,$ffff82ac.w	; VSS
	move.w	(a3)+,$ffff820a.w	; Video Sync Mode
	move.w	(a1)+,$ffff82c0.w	; Video Clock
	move.w	(a3)+,$ffff8266.w	; SPSHIFT - Falcon res
	tst.b	(a3)+			; use st mode?
	beq.s	.no_st			; no
	move.b	(a3),$ffff8260.w	; set st mode
.no_st	addq.w	#1,a3			; next data
	move.w	(a3)+,d0		; horizontal VCO
	or.w	(a1)+,d0		; + vertical VCO
	move.w	d0,$ffff82c2.w		; Video Control
	move.w	(a3)+,d2
	move.w	d2,$ffff8210.w		; Falcon Line Width
	move.w	(a3)+,$ffff820e.w	; STe Line Width

	add.w	d2,d2			; return line size	
	move.w	(a7)+,d1		; return y value
	move.w	(a7)+,d0		; return x value
	movem.l	(a7)+,d3-4/a0-4
	rts


	SECTION DATA

	even

rlsc_colour_mode_table
	dc.l	rlsc_h_2_colour_modes,rlsc_v_2_colour_modes
	dc.l	rlsc_h_4_colour_modes,rlsc_v_4_colour_modes
	dc.l	rlsc_h_16_colour_modes,rlsc_v_16_colour_modes
	dc.l	rlsc_h_256_colour_modes,rlsc_v_256_colour_modes
	dc.l	rlsc_h_true_colour_modes,rlsc_v_true_colour_modes


rlsc_vertical_sizes:
	dc.w	100,120,200,240,400,480,-1

rlsc_horizontal_sizes:
	dc.w	320,384,640,768,-1

rlsc_vga_horizontal_sizes:
	dc.w	320,0,640,-1

rlsc_h_2_colour_modes:
	dc.l	rlsc_h_640_2
   	dc.l	rlsc_h_640_2
	dc.l	rlsc_h_640_2
	dc.l	rlsc_h_768_2

rlsc_h_4_colour_modes:
	dc.l	rlsc_h_320_4
	dc.l	rlsc_h_384_4
	dc.l	rlsc_h_640_4
	dc.l	rlsc_h_768_4

rlsc_h_16_colour_modes:
	dc.l	rlsc_h_320_16
	dc.l	rlsc_h_384_16
	dc.l	rlsc_h_640_16
	dc.l	rlsc_h_768_16

rlsc_h_256_colour_modes:
	dc.l	rlsc_h_320_256
	dc.l	rlsc_h_384_256
	dc.l	rlsc_h_640_256
	dc.l	rlsc_h_768_256

rlsc_h_true_colour_modes:
	dc.l	rlsc_h_320_true
	dc.l	rlsc_h_384_true
	dc.l	rlsc_h_640_true
	dc.l	rlsc_h_768_true

rlsc_v_2_colour_modes
	dc.l	rlsc_v_100_2
	dc.l	rlsc_v_120_2
	dc.l	rlsc_v_200_2
	dc.l	rlsc_v_240_2
	dc.l	rlsc_v_400_2
	dc.l	rlsc_v_480_2

rlsc_v_4_colour_modes
	dc.l	rlsc_v_100_4
	dc.l	rlsc_v_120_4
	dc.l	rlsc_v_200_4
	dc.l	rlsc_v_240_4
	dc.l	rlsc_v_400_4
	dc.l	rlsc_v_480_4

rlsc_v_16_colour_modes
	dc.l	rlsc_v_100_16
	dc.l	rlsc_v_120_16
	dc.l	rlsc_v_200_16
	dc.l	rlsc_v_240_16
	dc.l	rlsc_v_400_16
	dc.l	rlsc_v_480_16

rlsc_v_256_colour_modes
	dc.l	rlsc_v_100_256
	dc.l	rlsc_v_120_256
	dc.l	rlsc_v_200_256
	dc.l	rlsc_v_240_256
	dc.l	rlsc_v_400_256
	dc.l	rlsc_v_480_256

rlsc_v_true_colour_modes
	dc.l	rlsc_v_100_true
	dc.l	rlsc_v_120_true
	dc.l	rlsc_v_200_true
	dc.l	rlsc_v_240_true
	dc.l	rlsc_v_400_true
	dc.l	rlsc_v_480_true


rlsc_videl_rgb:		incbin	d:\gods\library\reservor.lib\videl.rgb
rlsc_videl_vga:		incbin	d:\gods\library\reservor.lib\videl.vga

rlsc_ste_table1:
	dc.w	0,2,4,6,8,10,12,14
	dc.w	1,3,5,7,9,11,13,15

rlsc_ste_table2
	dc.w	0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15



***************************************************************************
	SECTION BSS
***************************************************************************	
	even
	RSRESET
rlsc_start_videl_data	rs.w	0

rlsc_v_100_2:	rs.w	8
rlsc_v_200_2:	rs.w	8
rlsc_v_120_2:	rs.w	8
rlsc_v_240_2:	rs.w	8
rlsc_v_400_2:	rs.w	8
rlsc_v_480_2:	rs.w	8

rlsc_v_100_4:	rs.w	8
rlsc_v_200_4:	rs.w	8
rlsc_v_120_4:	rs.w	8
rlsc_v_240_4:	rs.w	8
rlsc_v_400_4:	rs.w	8
rlsc_v_480_4:	rs.w	8

rlsc_v_100_16:	rs.w	8
rlsc_v_200_16:	rs.w	8
rlsc_v_120_16:	rs.w	8
rlsc_v_240_16:	rs.w	8
rlsc_v_400_16:	rs.w	8
rlsc_v_480_16:	rs.w	8

rlsc_v_100_256:	rs.w	8
rlsc_v_200_256:	rs.w	8
rlsc_v_120_256:	rs.w	8
rlsc_v_240_256:	rs.w	8
rlsc_v_400_256:	rs.w	8
rlsc_v_480_256:	rs.w	8

rlsc_v_100_true:	rs.w	8
rlsc_v_200_true:	rs.w	8
rlsc_v_120_true:	rs.w	8
rlsc_v_240_true:	rs.w	8
rlsc_v_400_true:	rs.w	8
rlsc_v_480_true:	rs.w	8

rlsc_v_100_16_st:	rs.w	8
rlsc_v_200_16_st:	rs.w	8

rlsc_h_640_2:	rs.w	14
rlsc_h_768_2:	rs.w	14

rlsc_h_320_4:	rs.w	14
rlsc_h_384_4:	rs.w	14
rlsc_h_640_4:	rs.w	14
rlsc_h_768_4:	rs.w	14

rlsc_h_320_16:	rs.w	14
rlsc_h_320_16_st:	rs.w	14
rlsc_h_384_16:	rs.w	14
rlsc_h_640_16:	rs.w	14
rlsc_h_768_16:	rs.w	14

rlsc_h_320_256:	rs.w	14
rlsc_h_384_256:	rs.w	14
rlsc_h_640_256:	rs.w	14
rlsc_h_768_256:	rs.w	14

rlsc_h_320_true:	rs.w	14
rlsc_h_384_true:	rs.w	14
rlsc_h_640_true:	rs.w	14
rlsc_h_768_true:	rs.w	14

rlsc_end_videl_data:	rs.w	1




	even

	RSRESET
rlsc_videl_block_adr	rs.l	1
rlsc_new_physic		rs.l	1
rlsc_set_pal_adr	rs.l	1
rlsc_fade_counter	rs.l	1
rlsc_fade_pal_source_adr	rs.l	1
rlsc_fade_pal_dest_adr		rs.l	1
rlsc_monitor_type	rs.w	1
rlsc_screen_x		rs.w	1
rlsc_screen_y		rs.w	1
rlsc_screen_mode	rs.w	1
rlsc_line_size		rs.w	1
rlsc_old_screen_x	rs.w	1
rlsc_old_screen_y	rs.w	1
rlsc_old_screen_mode	rs.w	1
rlsc_save_st_pal_space	rs.w	16
rlsc_save_falc_pal_space rs.l	256
rlsc_fade_pal_space	rs.l	256
rlsc_temp_v:		rs.w	8

rlsc_videl_saves	rs.b	0
rlsc_old_scr_adr_high	rs.b	1	
rlsc_old_scr_adr_med	rs.b	1	
rlsc_old_scr_adr_low	rs.b	1	
rlsc_old_hscroll	rs.b	1
rlsc_old_hht		rs.w	1
rlsc_old_hbb		rs.w	1
rlsc_old_hbe		rs.w	1
rlsc_old_hdb		rs.w	1
rlsc_old_hde		rs.w	1
rlsc_old_hss		rs.w	1
rlsc_old_hfs		rs.w	1
rlsc_old_hee		rs.w	1
rlsc_old_vft		rs.w	1
rlsc_old_vbb		rs.w	1
rlsc_old_vbe		rs.w	1
rlsc_old_vdb		rs.w	1
rlsc_old_vde		rs.w	1
rlsc_old_vss		rs.w	1
rlsc_old_vsm		rs.w	1
rlsc_old_vcl		rs.w	1
rlsc_old_spshift	rs.w	1
rlsc_old_vco		rs.w	1
rlsc_old_line_width	rs.w	1
rlsc_old_line_off	rs.w	1
rlsc_old_st_res		rs.b	1
rlsc_old_st_flag	rs.b	1

rlsc_show_new_physic_flag	rs.b	1
rlsc_line_offsets	rs.l	1280
rlsc_pixel_offsets	rs.l	1280
rlsc_buffer1_size	rs.w	1
	even

rlsc_screen_space:	ds.b	rlsc_buffer1_size

	even