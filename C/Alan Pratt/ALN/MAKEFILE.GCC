# place -g in cflags for dbx
# place -pg in cflags for profiling

CC = gcc
CFLAGS = -DATARI_GCC -UDBMALLOC -DEBUG -DJAGUAR -O

# OSTRIP is the ofiles needed if you don't want debugging, malloc or mark.

CSTRIP = aln.c util.c writefns.c relmod.c doobj.c doarc.c bdcommon.c \
	dolist.c hash.c resolve.c port.c slongio.c qsort.c version.c klist.c

CFILES = $(CSTRIP) dbmalloc.c

OSTRIP = aln.o util.o writefns.o relmod.o doobj.o doarc.o bdcommon.o \
	dolist.o hash.o resolve.o port.o slongio.o qsort.o version.o klist.o

OFILES = $(OSTRIP) dbmalloc.o

DISTRIP = builddir.o bdcommon.o port.o slongio.o
DIFILES = $(DISTRIP) dbmalloc.o

alnstrip: $(OSTRIP)
	$(CC) $(CFLAGS) -o alnstrip $(OSTRIP)

aln: $(OFILES)
	$(CC) $(CFLAGS) -o aln $(OFILES)

lint:
	lint $(CFLAGS) $(CFILES)

#version.o: version.c
#	tcsh -c "if (! -e version.o) gcc -c version.c"
#	mkvers version.o
#	touch version.c

bdcommon.o: bdcommon.c builddir.h
port.o: port.c port.h
slongio.o: slongio.c 
dbmalloc.o: dbmalloc.c

$(OFILES): aln.h

aln.h: debug.h port.h slongio.h
	touch aln.h

doindex: $(DIFILES)
	$(CC) -o doindex $(DIFILES)

distrip: $(DISTRIP)
	$(CC) -o distrip $(DISTRIP)

builddir.o: builddir.c builddir.h
	$(CC) $(CFLAGS) -c builddir.c

