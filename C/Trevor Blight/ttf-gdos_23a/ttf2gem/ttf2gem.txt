ttf2gem
=======

ttf2gem does what it says - it creates gem fonts from true type fonts.
There's a very wide choice of true type fonts and with ttf2gem you can create
the corresponding gem fonts at any (reasonable) size you like.

It is based on freetype 1.2, which is a freely available true type library.

ttf2gem is also free, but is not guaranteed in any way at all.

TTF-GDOS recommends using gem fonts (i.e. bit maps) for small font sizes on
the screen.

True type fonts contain instructions for generating accurate fonts for small
font sizes (aka hinting) and ttf2gem uses the freetype font engine do do this.
You can use the fonts as generated, or polish them up with a font editor.

It should be easy to use. Just run it, choose your true type font and gem
font file name and point size.



There's just a few things to consider:


Any point size from 2 to 99 is valid.
    ==========
Make up a gem font name that includes the point size.
If you put a double '??' in the gem file name, ttf2gem replaces the '??' pair
    with the font point size when it writes the gem font file.  This saves
    entering the point size in the file name every time you create a new size
    for your chosen true type font.   It also avoids the possibility of
    creating, say, a 10 point font with a 12 point name.

You also need to set the screen resolution of your output application.
                         ====== =========
For a hi rez screen this is usually 90 dpi, but can be 80 dpi
for timeworks, opus and possibly some other programs.
Choose 90 dpi if you are unsure, and check that the font sizes on the screen
match the font sizes on the printed paper. Alternatively (or additionally),
compare the font size of your generated fonts with the fonts shipped by your
application.

Most GDOS variants need Intel format fonts.
                              ============
TTF-GDOS can use either, but Motorola format fonts are slightly more efficient.
This is because Motorola format fonts are already in the correct format for
the GDOS drivers.


The characters in the font are normally rearranged so they appear as
expected in the Atari character set, but those fonts with an id in the range
128-130 are assumed to be symbolic fonts and the characters are kept in
their original (non-alphabetic) order.


There is very little guidance on choosing a font id.
                                           =======

ttf2gem will try to suggest a font id derived from the font family, but
you can override this if you want.

All fonts are identified by their id, so different fonts need a different id.
If your work is moved to a new GDOS environment (say another computer), you
need the fonts there to have the same id, otherwise your document is spoiled.

Digital research specify that swiss (aka helvetica) font has an id = 2,
and times has an id = 14.  The fonts distributed with GDOS by Atari are
consistent with this.  Atari's typewriter font has an id = 15.

Apart from that, your options are:

- make up a font id, but take care not to give a font 2 different ids, or give
  2 fonts the same id.

- some applications can use only a font id <= 255

- the font id must be <= 4095.  Larger numbers are reserved for italics, bolds,
  etc

- GST has compiled a list of font ids.  It's in the timeworks publisher manual.

- ttf2gem by default makes a font id from the IBM font class and family codes
  stored in the ttf file.
  This means that different fonts in different environments with the same id
  should look similar.

  The assigned font id is 256 * (class id) + (subclass id). For example,
  the font Century Schoolbook has a class id = 4 (Clarendon Serifs), and a
  subclass id = 2 (Modern), so the assigned gem font id is 4*256 + 2 = 1026.

  Note that some ttf fonts don't contain this information.

  references:
    https://www.afpconsortium.org/uploads/1/1/8/4/118458708/fgid-registry-afpc-font-typeface-registry.pdf
    https://docs.microsoft.com/en-us/typography/opentype/spec/ibmfc
    https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6OS2.html
