	La mise en oeuvre facile des Fenˆtres de dialogue non modales.
				en Pure C, par  Jacques  Delavoix.

Mise … jour du 24/03/1996.

		Comme ce titre l'indique, ces routines, dont je viens de terminer
la mise au point, ont ‚t‚ ‚tudi‚es pour permettre une mise en oeuvre trŠs
fa‡ile des formulaires en fenˆtres non bloquants, encore appel‚s "fenˆtres
de dialogue non modales", avec une architecture similaire (mais pas identique)
… celle employ‚e lors de la mise en oeuvre de formulaires bloquants par
"form_do()".
		Il ‚tait ‚galement important d'‚viter une dispersion et un m‚lange
du code et aussi d'obtenir une bonne structuration de celui_ ci; le code
g‚rant le fonctionnement des fenˆtres de dialogue est ici ind‚pendant du
code de gestion des fenˆtres principales. Cette structuration offre en outre
l'avantage de faciliter la mise en oeuvre, la mise au point et le d‚boggage
des programmes.

		Il est important de noter que les routines fournies ici donnent 
une base pour la programmation des fenˆtres de dialogue, mais que ce code 
peut ˆtre modifi‚ pour ˆtre adapt‚ aux besoins propres de chaque programmeur.
On peut ‚galement utiliser ces routines pour la programmation d'un accessoire
ou d'un executable mixte ACC/APP.

	Quatre routines sont … la disposition des programmeurs pour la ges-
tion de ces fenˆtres :
	- init_var() pour l'initialisation de chaque fenˆtre.
	- open_dialog() pour ouvrir une fenˆtre de dialogue.
	- close_dialog() pour la refermer.
	- windform_do() pour gŠrer le dialogue actuellement actif, le coeur 
du dispositif, ‚quivalent en gestion non bloquante … la fonction form_do().

		Pour la suite des explications, le terme de "routine utilisateur", 
servira … d‚signer les fonctions ayant une action particuliŠre dans votre
programme et qui vont utiliser les fenˆtres de dialogue; par exemple une
fonction de Recherche et Remplacement ou tout simplement une routine affichant
la traditionnelle boite d'Informations du programme (baptis‚e "informe()"
dans le programme d'exemple fourni).

Le principe de fonctionnement :

Voyons donc ce qui se passe dans le cas o— l'on appele la boite "Informa-
tions" :

		Regardez tout d'abord dans la fonction "main()", aprŠs l'appel …
evnt_multi(): on commence, dans un premier temps, par d‚coder l'option de
menu correspondante et on appele la routine utilisateur "informe()".
Vous remarquerez que l'on transmet un paramŠtre baptis‚ "OPEN_DIAL" … cette
routine. Ce paramŠtre, comme son nom le laisse supposer, indique … cette
routine que l'on demande l'ouverture du dialogue. Cette routine va donc
ouvrir la fenˆtre d'"Informations" puis va retourner dans la boucle d'attente
des ‚vŠnements.

		Maintenant un problŠme se pose, car il est n‚c‚ssaire de retourner
dans cette routine … chaque fois que l'on re‡oit un ‚vŠnement concernant
cette fenˆtre de dialogue, (et donc pour g‚rer le dialogue), comment faire ?

		En fait c'est simple: Il suffit, aprŠs le d‚codage des options de 
menus, d'effectuer un aiguillage en fonction du Handle de fenˆtre renvoy‚
par la fonction "evnt_multi()" et d'appeler … nouveau la routine utilisateur
concern‚e (et donc la routine "informe()" dans le cas pr‚sent) mais cette fois
en lui transmettant la variable des flags d'‚vŠnements en paramŠtre.
		Etant donn‚ que le paramŠtre "OPEN_DIAL" emprunte le mˆme chemin,
sa valeur a ‚t‚ fix‚e suffisamment haute pour ne pas interf‚rer avec les flags
d'‚vŠnements. 

		Mais avant de faire ceci il reste quand mˆme un petit problŠme …
r‚gler: en effet, le handle de fenˆtre renvoy‚ dans le mot 3 du buffer de
message n'est valable que pour les ‚vŠnements "Message"... 
		Et bien peu inporte car il suffit, au pr‚alable, d'affecter un 
handle de fenˆtre aux ‚vŠnements qui en sont d‚pourvus :

	- Pour "MU_KEYBD" nous demandons le handle de la fenˆtre qui se trouve
au premier plan.

	- Pour "MU_BUTTON" nous demandons, par "wind_find()", le handle de la
fenˆtre qui se trouve sous la souris :

		Si le handle de Fenˆtre est ‚gal … z‚ro, cela signifie que c'est le 
Bureau du programme qui se trouve concern‚ et qu'il est possible alors,
le cas ‚ch‚ant, d'aiguiller le programme vers un traitement des objets
‚ventuellements pr‚sents sur ce bureau (non employ‚ dans l'exemple fourni).

Les Variables :

		Pour pouvoir faire fonctionner les fenˆtres de dialogue, un certain
nombre de variables s'avŠrent n‚c‚ssaires: L'adresse du formulaire, le Handle
de la fenˆtre et les coordonn‚es de celle-ci ainsi que deux variables
n‚c‚ssaires … la gestion des champs de texte ‚ditables.
		Ces variables, qui sont personnelles … chaque fenˆtre, ont ‚t‚ 
regroup‚es dans une structure de type "WINDFORM_VAR".
		L'adresse de la structure concern‚e sera transmise par la routine
utilisateur aux fonctions de gestion du dialogue (voir le fichier "WINDFORM.H").
Il faudra donc pr‚voir une structure "WINDFORM_VAR" (et bien ‚videmment une
routine utilisateur) pour chaque fenˆtre de dialogue que l'on compte utiliser.

La Routine "Utilisateur" :

		Pour que le fonctionnement soit possible cette routine doit ˆtre con‡ue
selon un sh‚mas particulier, d'une maniŠre similaire … ce que l'on ferait pour
une gestion bloquante par "form_do()", et dont voici le principe :

Routine utilisateur (‚vŠnements)
	Si ‚vŠnements == OPEN_DIAL
		/* Initialisations ‚ventuelles (champs ‚ditables et/ou radio_buttons) */
		Alors Ouverture du dialogue
	sinon Choix = Gestion du dialogue
		Si Choix diff‚rent de Z‚ro	/* si Choix == 0 le dialogue n'est pas
										termin‚. */
			Alors Fermeture possible du dialogue
			Si Choix == CLOSE_DIAL  /* La case de fermeture a ‚t‚ cliqu‚e. */
				Choix = ANNULER		/* C'est … vous de le d‚cider ! */
			fin Si
			Si Choix diff‚rent de ANNULER
				Alors action demand‚e
			fin Si
		fin Si
	fin Si
Retour

Voyons donc ce qui se passe dans le cas de la proc‚dure "color_window()":

		Si cette routine re‡oit le paramŠtre "OPEN_DIAL": aprŠs avoir v‚rifi‚
que la fenˆtre n'est pas d‚j… ouverte, nous initialisons l'unique champ de
texte ‚ditable pr‚sent dans cette boite, (notez que dans la boite "Client"
les champs de texte ne sont initialis‚s que lors du d‚marrage du programme
(c'est suivant ce que vous voulez faire)), puis nous appellons la proc‚dure
d'ouverture.
		Sinon le paramŠtre re‡u est un ‚vŠnement, et nous appellons la fonction
de gestion du dialogue "windform_do()"; au retour de cette fonction, nous
commen‡ons par tester si le dialogue est termin‚:
 
		Dans ce cas la valeur renvoy‚e (r‚cup‚r‚e dans la variable "choix")
est diff‚rente de z‚ro et le reste du traitement est identique … celui que
l'on aurait eu dans le cas d'une gestion par "form_do()", except‚ la prise
en compte de la valeur "CLOSE_DIAL" indiquant un Clic sur la case de fermeture
de la fenˆtre, normalement consid‚r‚e comme ‚quivalente … "ANNULER", comme
c'est le cas dans l'exemple fourni, mais vous pouvez bien entendu en d‚cider
autrement.
		Sinon, la valeur renvoy‚e par "windform_do()" est ‚gale … z‚ro, 
et dans ce cas le dialogue doit continuer.

		Observez attentivement les routines "informe()", "fiche_client()"
et "color_window()" dans le programme et comparez les avec le modŠle que
je viens de d‚crire.

	NOTE : Remarquez le bouton 'noir' dans la boite "Couleur Fenˆtre" qui
a ‚t‚ d‚clar‚ "DISABLED".


Les quatre routines principales :

		Ces quatre routines re‡oivent toutes l'adresse de la structure 
WINDFORM_VAR concern‚e en premier paramŠtre. Leurs prototypes se trouvent
dans le fichier "WINDFORM.H" ainsi que les diff‚rentes d‚finitions utilis‚es
par les routines "WINDFORM".

La routine d'initialisation :

		Cette routine doit ˆtre appel‚e durant la phase d'initialisation 
du programme pour chaque fenˆtre de dialogue. Le deuxiŠme paramŠtre est
l'index du formulaire dans le fichier ressource, donn‚ par le fichier header
associ‚ (.H). Les deux paramŠtres "inf_x" et "inf_y" sont pr‚vus pour ˆtre
utilis‚s en conjonction avec la lecture d'un fichier ".INF" o— pourront ˆtre
sauvegard‚es les coordonn‚es initiales X et Y de chaque fenˆtre (sauvegarde
des pr‚f‚rences). Si ces deux paramŠtres sont … z‚ro, la fenˆtre sera centr‚e
… l'‚cran.
		Cette routine permet maintenant un recadrage automatique de la fenˆtre
de dialogue, si les donn‚es fournies par "inf_x" et "inf_y" tendent … faire
sortir le formulaire de l'‚cran.

	Voir la proc‚dure "init_prog()" dans le programme d'exemple "WINFDEMO.PRG".

La routine d'ouverture :

		Cette routine assure l'ouverture de la fenˆtre de dialogue. Les deux
autres paramŠtres … passer sont un pointeur sur le titre de la fenˆtre et
l'index de l'objet texte ‚ditable o— doit apparaitre le curseur d'‚dition
(ou '0' sinon).

La routine de fermeture :

	Fermeture de la fenˆtre de dialogue concern‚e.

La routine de gestion du dialogue :

		Voici enfin cette fameuse routine ! Le deuxiŠme paramŠtre est 
constitu‚ des flags d'‚vŠnement retransmis par la routine utilisateur 
appelante. La valeur retourn‚e est soit :

	- Z‚ro : Le dialogue n'est pas termin‚.
	- CLOSE_DIAL  : Valeur -1, la case de fermeture de la fenˆtre a ‚t‚ 
cliqu‚e.
	- Une valeur Positive : Dans ce cas l'utilisateur a actionn‚ un bouton 
de sortie et cette valeur en repr‚sente l'index.

La Mise en Oeuvre :

	Elle doit ˆtre faite de la fa‡on suivante, en vous inspirant du programme
d'exemple fourni :

	1, D‚clarez une structure WINDFORM_VAR pour chaque fenˆtre de dialogue
que vous d‚sirez mettre dans votre programme, et en lui donnant un nom
explicite.

	2, Si ce n'est d‚j… fait, structurez le traitement des ‚vŠnements,
effectu‚ aussit“t aprŠs le retour de l'appel evnt_multi(), en traitant d'abord
les options de Menu, puis en affectant un Handle de fenˆtre aux ‚vŠnements
voulus et en effectuant ensuite des aiguillages sur vos proc‚dures
"utilisateur" en fonction de ce Handle. Je laisse … votre initiative le
traitement d'autres ‚vŠnements comme par exemple l' ‚vŠnement MU_TIMER, utile
si vous voulez g‚rer un ou plusieurs ph‚nomŠnes p‚riodiques (par ex.:
sauvegarde automatique du document actif toute les n secondes et/ou un
curseur clignotant, etc...), 
mais ne l'utilisez pas, comme je l'ai d‚j… vu faire, uniquement pour que
"l'AES rende la main", ce qui est inutile si le programme n'a rien … faire.

	3, Lors de l'initialisation du programme, effectuez un appel … init_var()
pour chaque fenˆtre de dialogue, en passant en paramŠtres : L'adresse de la
structure concern‚e, l'Indice du formulaire concern‚ et ‚ventuellement les
coordonn‚es X et Y de d‚part (pouvant provenir de la lecture d'un fichier INF).

	4,  Concevez vos fonctions "utilisateurs" conform‚ment … ce qui a ‚t‚
d‚crit plus haut.

Les Formulaires :

		Ils seront ‚dit‚s de la mˆme fa‡on que pour une mise en oeuvre
classique avec des radio_buttons, champs de texte ‚ditables, ic“nes couleurs,
boutons de sortie et un bouton par d‚faut ‚ventuel. 
Libre … vous de mettre en oeuvre les menus POP_UP du FALCON , les USERDEFS
et autres...
		Notez que l'‚paisseur du cadre du formulaire doit ˆtre au moins ‚gal
… 2 pour les boites en 3D, il est ‚galement possible de lui donner une
‚paisseur de 3 si l'on veut que ce cadre soit visible dans la fenˆtre.

Les extensions :

		WINDFORM_DO permet des commandes ‚tendues, tout d'abord pour les
champs ‚ditables, avec le positionnement du curseur en d‚but ou en fin de champ
par les touches "Control" + les touches  curseur gauche et droite, sauter
un mot par la touche "Shift" + ces mˆme touches curseur et positionner le
curseur sur une lettre avec la souris ainsi que le fait de d‚placer ce curseur
dans le champ en maintenant le bouton de la souris enfonc‚.

		Une possibilit‚ nouvelle est apparue depuis le mois d'Aout 1995 :
les fenˆtres comportent maintenant une case "FULLER" qui permet de r‚duire
la fenˆtre … sa seule barre de titre, cette commande agit en bascule, c'est
… dire qu'un second clic sur la case Plein ‚cran permet de retrouver
l'int‚gralit‚ de la fenˆtre de dialogue. 
Une fenˆtre "R‚duite" ne peut bien sur pas recevoir de commandes. 
Adjonction due … R‚mi VANEL .

Les Raccourcis clavier :

		Ils sont trait‚s pour les Boutons dont l'OB_TYPE ‚tendu comporte la
valeur 18 (BIT '1' DE L'OB_TYPE ETENDU) et la lettre concern‚e doit ˆtre
pr‚c‚d‚e du symbole "[" standard.
Dans ces conditions le dessin et le comportement de ces boutons est tout … fait
conforme aux boutons du GEM par le truchement de la routine USERDEF fournie
ici, avec l'affichage du raccourci par un soulignement.

		La documentation d‚veloppeur ATARI sp‚cifie que les raccourcis clavier
pour les Menus D‚roulants doivent ˆtre d‚clench‚s par la touche "Control";
en cons‚quence de ceci, il parait logique que la touche utilis‚e pour le
d‚clenchement des raccourcis clavier dans les fenˆtres de dialogue soit la
touche "Alternate" comme c'est le cas dans WINDFORM.
Ces dispositions permettent d'‚viter d'‚ventuels conflits dans la gestion des
raccourcis claviers entre les Menus et les Fenˆtres de dialogue, et d'ailleurs,
depuis quelques temps, de nombreux programmes fonctionnent de cette maniŠre.

		Les flags 3D du nouveau TOS sont ‚galement pris en compte
(ob_flags 9 et ob_flags 10), seul l'‚tat SHADOWED n'est pas trait‚ par la 
routine. J'ai cependant dot‚ cette routine d'une possibilit‚ suppl‚mentaire,
accessible en donnant la valeur 22 au lieu de 18 pour l'OB_TYPE ‚tendu, 
et qui affiche alors un "mini bouton" (d‚crit un peu plus bas).

Les valeurs utilis‚es :

		Afficher des raccourcis clavier dans des boutons transform‚s en
USERDEFS est une chose, en assurer la d‚tection dans la routine de gestion
en est une autre. On pourrait penser qu'il suffit de d‚tecter la valeur 18
pour d‚cider que le bouton puisse comporter un raccourci clavier, mais on se
retrouve alors limit‚ … un seul type de bouton; rajouter des tests sur d'autres
valeurs est tout aussi limitatif, et de plus il faudrait encore d‚cider quelle
seraient les valeurs … employer.

		J'ai donc opt‚ pour le systŠme suivant : La valeur 18, pr‚conis‚e par
INTERFACE pour les raccourcis clavier, positionne le bit Num‚ro 1 de OB_TYPE
‚tendu (valeur 2), la d‚tection des raccourcis clavier se fera donc en testant
si ce bit est … 1, ce qui nous laisse une belle brochette de valeurs pour les
routines de boutons avec raccourcis que nous pourrons impl‚menter.

Les "mini boutons" :

		Cette possibilit‚ est accessible en donnant une valeur de 22 … 
l'OB_TYPE ‚tendu au lieu de 18, on a alors acc‚s … un bouton GEM de taille
r‚duite et dont le texte est affich‚ avec la plus petite fonte systŠme
(fonte des Ic“nes de hauteur 4). Il sera par contre utile, dans ce cas, de
r‚duire la largeur du bouton lors de l'‚dition du ressource.

Les "boutons bistables" :

		Il ne s'agit pas d'une nouveaut‚, puisque cette possibilit‚ a toujours
exist‚ dans le GEM.
		WINDFORM permet maintenant l'affichage correct des raccourcis clavier
dans ce type de boutons.
		Un bouton de ce type est d‚fini lorsqu'il est d‚clar‚ SELECTABLE et
‚ventuellement TOUCHEXIT et que les flags suivants : DEFAULT, EXIT, EDITABLE
et RBUTTON soient tous … z‚ro.

		L'‚tat de ce bouton s'inverse … chaque fois que l'on clique dessus;
utile, par exemple, pour activer/d‚sactiver une ou plusieurs option(s)
individuellement. Si le bouton Bistable est d‚clar‚ TOUCHEXIT, il provoquera
une sortie du dialogue (c'est … dire que son index sera retourn‚) … chaque
sollicitation de ce bouton, cette possibilit‚ de sortie permet une action
imm‚diate de ce bouton Bistable.
	Voir l'exemple dans la boite 'Informations' de "WINFDEMO.PRG".

Les routines USERDEFS :

	-set_user() : Cette routine parcours le formulaire … la recherche des 
objets … transformer en USERDEFS et appelle, dans ce cas, la routine set_objc()
qui r‚alise cette transformation, en lui transmettant l'adresse de l'objet et
l'adresse de la routine de dessin … utiliser (under_button() ou d'autres
Routines ‚ventuellement).
		Une particularit‚ du TOS 4.02 fait que les flags 3D en ob_flag 9 et
ob_flag 10 ne sont pas directement utilisables avec des Ojets Userdefs;
ils sont donc automatiquement d‚plac‚s dans ob_flags 11 et ob_flags 12 si
n‚c‚ssaire.
		Ces flags sont d‚finis au d‚but du fichier WINDFORM.C par 
USR_INDICATOR et USR_ACTIVATOR.

Les Accessoires :

		Le fichier ACC_FORM.C est un squelette pour la programmation d'un
accessoire (mixte ACC / APP) utilisant les routines WINDFORM.

		L'utilisation d'une allocation dynamique de m‚moire ‚tant d‚conseill‚e
dans le cas d'un accessoire, il suffit alors de r‚server un tableau de
structures USERBLK dont le nombre d'‚l‚ments sera au moins ‚gal au nombre de
boutons contenu dans le Ressource. La fonction set_objc() doit dans ce cas
ˆtre modifi‚e en cons‚quence, une variable globale sera alors utilis‚e,
comme compteur, pour indexer ce tableau d'USERBLKs et incr‚m‚nt‚e aprŠs chaque
transformation en USERDEF (voir USER_ACC.TXT dans le dossier SOURCES).

Annexe :
		Le fichier "USAGE" est destin‚ … l'utilisateur de votre programme et
est pr‚vu pour ˆtre incorpor‚ dans le Manuel de celui_ci.

Les d‚fauts :

		MalgrŠs une ‚tude approfondie, je n'ai pu ‚viter un ph‚nomŠne de
non_r‚apparition du curseur  d'‚dition dans certains cas, assez rares il est
vrai. Si cela se produit, il suffit d'activer une autre fenˆtre puis de
r‚activer la fenˆtre de dialogue en cliquant dessus (ceci peut se produire si
une fenˆtre … ‚t‚ d‚plac‚e sur notre fenˆtre de dialogue puis red‚plac‚e
complŠtement en dehors de celle_ci, puis ferm‚e, autant dire qu'il faut presque
le faire exprŠs).


Fonctions Annexes :

	int load_rsc( char *rsc_name, int wind_fail ) :

		Cette routine assure le chargement du Fichier Ressource (par 
rsrc_load() ) et la r‚cup‚ration de l'adresse d'une chaine d'Alerte 
"Plus de Fenˆtres", qui doit Obligatoirement ˆtre plac‚e dans le Ressource,
pour la Fonction "open_dialog()". Les paramŠtres … passer sont :

	- Le nom du Fichier Ressource.
	- L'index de la chaine Libre d'Alerte "NO_WINDOW".
	La valeur retourn‚e par cette fonction est celle renvoy‚e par rsrc_load().
	Exemple :	load_rsc( "winfdemo.rsc", NO_WINDOW );

	char * rsrc_get_string( int index ) :
		Cette routine renvoie l'adresse d'une chaine libre plac‚e dans 
le ressource, et dont l'index est pass‚ en paramŠtre. Cette fonction est
utilis‚e par load_rsc().

	Ces deux fonctions ont ‚t‚ rajout‚es de fa‡on … faciliter la mise en 
oeuvre de chaines libres dans le fichier ressource, en vue de pouvoir 
facilement traduire son programme dans une autre Langue sans avoir …
recompiler (en mettant les chaines de caractŠres dans le Ressource).

	Voir les Fichiers WINFDEMO.C et ACC_FORM.C.

Nouvelle Fonctionnalit‚ :

	Il est maintenant possible de "Sortir du Dialogue" par un Double-clic sur 
un Champ ‚ditable, il suffit que celui-ci ait ‚galement son Flag EXIT 
positionn‚. Cette fonctionnalit‚ est g‚n‚ralement employ‚e pour appeler le
S‚lecteur d'objets.

	A cette occasion, une nouvelle fonction a fait son apparition pour assurer
le redessin du Champ ‚ditable actif dans lequel on vient de copier une chaine
(la fenˆtre de dialogue ‚tant toujours pr‚sente … l'‚cran) :

	void redraw_editable(WINDFORM_VAR *ptr_var, index) ;

	- Le premier paramŠtre est bien s–r un pointeur sur la structure
	WINDFORM_VAR concern‚e.
	- Le deuxiŠme paramŠtre est l'index du Champ ‚ditable … redessiner.

	Voir l'exemple dans la boite "Couleurs Fenˆtre" et la Routine associ‚e,
"color_window" dans le fichier WINFDEMO.C .


Le Programme d'exemple :

	Ce programme est founi sous la forme de  plusieurs fichiers source :
	- WINDFORM.C : Contient les routines de gestion du dialogue ainsi 
que rc_intersect() et stdkey().
Ce fichier est  pr‚vu pour ˆtre incorpor‚ directement dans un projet logiciel.
	 ATTENTION : Ce fichier utilise des variables externes d‚finies dans 
le programme principal et il vous faudra mettre les noms des variables
concern‚es en concordance.

	- WINFDEMO.C : Le programme d'exemple proprement dit.
	ATTENTION : V‚rifier dans votre fichier AES.H si la structure utilis‚e par
votre version de PURE C se nomme _GemParBlk; Si elle se nomme _VDIParBlk ,
alors mettez en service la ligne de red‚finition situ‚e au d‚but du fichier
WINDFORM.H.

	- WINDFORM.H contient les prototypes des fonctions et les d‚clarations
utilis‚es pour la gestion des dialogues.

	- ACC_FORM.C : Squelette d'un accessoire utilisant les routines WINDFORM.


