socket_init
a%=@get_connected
PRINT a%
a%=@get_dns(0)
PRINT HEX$(a%)
a%=@get_dns(1)
PRINT HEX$(a%)
'
'
' *** Initialization and internal used utitlity functions ***
'
> PROCEDURE sock_constants
  ' Socket types
  sock_stream%=1
  sock_dgram%=2
  sock_raw%=3
  '
  ' Address families
  af_unspec%=0
  af_unix%=1
  af_inet%=2
  '
  ' Protocol families
  pf_unspec%=af_unspec%
  pf_unix%=af_unix%
  pf_inet%=af_inet%
  '
  ' send/recv flags
  msg_oob%=1
  msg_peek%=2
  msg_dontroute%=4
  '
  ' IP protocols
  ipproto_ip%=0
  ipproto_icmp%=1
  ipproto_igmp%=2
  ipproto_tcp%=6
  ipproto_udp%=17
  ipproto_raw%=255
  '
  ' Socket options
  sol_socket%=&HFFFF
  so_setfl%=83
  so_getfl%=84
  '
  ' Extended File Options
  so_o_nonblock%=4000
  '
  ' Ioctl options
  so_fionbio%=126
  '
  ' Extended Error values
  eagain%=11                      ! Do it again
  eproto%=71                      ! Protocol error
  enotsock%=88                    ! Not a valid socket
  eopnotsupp%=95                  ! Operation not supported
  eaddrinuse%=98                  ! Address is already in use
  enobufs%=105
  eisconn%=106                    ! Socket is already connected
  enotconn%=107                   ! Socket is not connected
  ealready%=114                   ! Operation in progress
  einprogress%=115                ! Operation started
  '
  ' #define MAJOR_VERSION(a)	(a >> 16)
  ' #define MINOR_VERSION(a)	(a & 0x7FFF)
  '
RETURN
> PROCEDURE socket_init
  RESERVE -100000
  @sock_constants
  sock_bp%=EXEC(3,"e:\1_7\drsocket\dsockgfa.ovl",CHR$(0),"")
  IF sock_bp% AND &HFF000000
    ALERT 3,"DSOCKGFA?",1,"Ok",b%
    END
  ELSE
    ADD sock_bp%,256
    sock_array%=C:sock_bp%()
  ENDIF
RETURN
> FUNCTION get_call_addr(fnc&)
RETURN LPEEK(sock_array%+SHL(fnc&,2))
ENDFUNC
> FUNCTION mk_cstring$(s$)
RETURN s$+CHR$(0)
ENDFUNC
> FUNCTION get_cstring$(addr%)
RETURN CHAR{addr%}
ENDFUNC
'
' *** Standard socket calls ***
'
> FUNCTION accept(s&,saddr%,addrlen%)
LOCAL r%,addr%
addr%=@get_call_addr(0)
r%=C:addr%(s&,L:saddr%,L:addrlen%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION bind(s&,saddr%,addrlen&)
LOCAL r%,addr%
addr%=@get_call_addr(1)
r%=C:addr%(s&,L:saddr%,L:addrlen&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION connect(s&,saddr%,len&)
LOCAL r%,addr%
addr%=@get_call_addr(2)
r%=C:addr%(s&,L:saddr%,len&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION listen(s&,backlog&)
LOCAL r%,addr%
addr%=@get_call_addr(3)
r%=C:addr%(s&,backlog&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION recv(s&,buf%,len%,flags&)
LOCAL r%,addr%
addr%=@get_call_addr(4)
r%=C:addr%(s&,L:buf%,L:len%,flags&)
RETURN r%
ENDFUNC
> FUNCTION recvfrom(s&,buf%,len%,flags&,saddr%,addrlen%)
LOCAL r%,addr%
addr%=@get_call_addr(5)
r%=C:addr%(s&,L:buf%,L:len%,flags&,L:saddr%,L:addrlen%)
RETURN r%
ENDFUNC
> FUNCTION select(nfds&,readfds%,writefds%,exceptfds%,timeout%)
LOCAL r%,addr%
addr%=@get_call_addr(6)
r%=C:addr%(nfds&,L:readfds%,L:writefds%,L:exceptfds%,L:timeout%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION send(s&,buf%,len%,flags&)
LOCAL r%,addr%
addr%=@get_call_addr(7)
r%=C:addr%(s&,L:buf%,L:len%,flags&)
RETURN r%
ENDFUNC
> FUNCTION sendto(s&,buf%,len%,flags&,saddr%,addrlen&)
LOCAL r%,addr%
addr%=@get_call_addr(8)
r%=C:addr%(s&,L:buf%,L:len%,flags&,L:saddr%,addrlen&)
RETURN r%
ENDFUNC
> FUNCTION shutdown(s&,how&)
LOCAL r%,addr%
addr%=@get_call_addr(9)
r%=C:addr%(s&,how&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION socket(domain&,type&,protocol&)
LOCAL r%,addr%
addr%=@get_call_addr(10)
r%=C:addr%(s&,domain&,type&,protocol&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION getsockopt(s&,level&,optname&,optval%,optlen%)
LOCAL r%,addr%
addr%=@get_call_addr(11)
r%=C:addr%(s&,level&,optname&,L:optval%,L:optlen%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION setsockopt(s&,level&,optname&,optval%,optlen&)
LOCAL r%,addr%
addr%=@get_call_addr(12)
r%=C:addr%(s&,level&,optname&,L:optval%,optlen&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION sockfcntl(s&,cmd&,args%)
LOCAL r%,addr%
addr%=@get_call_addr(13)
r%=C:addr%(s&,cmd&,L:args%)
RETURN r%
ENDFUNC
> FUNCTION htonl(hostlong%)
LOCAL r%,addr%
addr%=@get_call_addr(14)
r%=C:addr%(L:hostlong%)
RETURN r%
ENDFUNC
> FUNCTION htons(hostshort&)
LOCAL r%,addr%
addr%=@get_call_addr(15)
r%=C:addr%(hostshort&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION ntohl(netlong%)
LOCAL r%,addr%
addr%=@get_call_addr(16)
r%=C:addr%(L:netlong%)
RETURN r%
ENDFUNC
> FUNCTION ntohs(netshort&)
LOCAL r%,addr%
addr%=@get_call_addr(17)
r%=C:addr%(netshort&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION inet_addr(cp%)
LOCAL r%,addr%
addr%=@get_call_addr(18)
r%=C:addr%(L:cp%)
RETURN r%
ENDFUNC
> FUNCTION inet_network(cp%)
LOCAL r%,addr%
addr%=@get_call_addr(19)
r%=C:addr%(L:cp%)
RETURN r%
ENDFUNC
> FUNCTION inet_ntoa(in%) ! Bug -> Structure as value
LOCAL r%,addr%
addr%=@get_call_addr(20)
r%=C:addr%(L:in%)
RETURN @get_cstring$(r%)
ENDFUNC
> FUNCTION inet_makeaddr(net&,lna&) ! Bug -> Structure as value
LOCAL r%,addr%
addr%=@get_call_addr(21)
r%=C:addr%(net&,lna&)
RETURN r%
ENDFUNC
> FUNCTION inet_lnaof(in%) ! Bug -> Structure as value
LOCAL r%,addr%
addr%=@get_call_addr(22)
r%=C:addr%(L:in%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION inet_netof(in%) ! Bug -> Structure as value
LOCAL r%,addr%
addr%=@get_call_addr(23)
r%=C:addr%(L:in%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION getservent
LOCAL r%,addr%
addr%=@get_call_addr(24)
r%=C:addr%()
RETURN r%
ENDFUNC
> FUNCTION getservbyname(name$,proto$)
LOCAL r%,addr%,n$,p$
addr%=@get_call_addr(25)
n$=@mk_cstring$(name$)
p$=@mk_cstring$(proto$)
r%=C:addr%(L:VARPTR(n$),L:VARPTR(p$))
RETURN r%
ENDFUNC
> PROCEDURE setservent(stayopen&)
LOCAL addr%
addr%=@get_call_addr(26)
VOID C:addr%(stayopen&)
RETURN
> PROCEDURE endservent
LOCAL addr%
addr%=@get_call_addr(27)
VOID C:addr%()
RETURN
> FUNCTION close_socket(s&)
LOCAL r%,addr%
addr%=@get_call_addr(28)
r%=C:addr%(s&)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION gethostname(name%,namelen%)
LOCAL r%,addr%
addr%=@get_call_addr(29)
r%=C:addr%(L:name%,L:namelen%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION getsockname(s&,name%,namelen%)
LOCAL r%,addr%
addr%=@get_call_addr(30)
r%=C:addr%(s&,L:name%,L:namelen%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION getpeername(s&,name%,namelen%)
LOCAL r%,addr%
addr%=@get_call_addr(31)
r%=C:addr%(s&,L:name%,L:namelen%)
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION gethostid
LOCAL r%,addr%
addr%=@get_call_addr(32)
r%=C:addr%()
RETURN r%
ENDFUNC
> PROCEDURE sethostid(hostid%)
LOCAL addr%
addr%=@get_call_addr(33)
VOID C:addr%(L:hostid%)
RETURN
> FUNCTION gethostip
LOCAL r%,addr%
addr%=@get_call_addr(34)
r%=C:addr%()
RETURN r%
ENDFUNC
> PROCEDURE sethostip(hostip%)
LOCAL addr%
addr%=@get_call_addr(35)
VOID C:addr%(L:hostip%)
RETURN
> FUNCTION gethostent
LOCAL r%,addr%
addr%=@get_call_addr(36)
r%=C:addr%()
RETURN r%
ENDFUNC
> FUNCTION gethostbyname(name$)
LOCAL r%,addr%,n$
addr%=@get_call_addr(37)
n$=@mk_cstring$(name$)
r%=C:addr%(L:VARPTR(n$))
RETURN r%
ENDFUNC
> FUNCTION gethostbyaddr(saddr%,len&,type&)
LOCAL r%,addr%
addr%=@get_call_addr(38)
r%=C:addr%(L:saddr%,len&,type&)
RETURN r%
ENDFUNC
> PROCEDURE sethostent(stayopen&)
LOCAL addr%
addr%=@get_call_addr(39)
VOID C:addr%(stayopen&)
RETURN
> PROCEDURE endhostent
LOCAL addr%
addr%=@get_call_addr(40)
VOID C:addr%()
RETURN
> FUNCTION async_gethostbyname(name$)
LOCAL r%,addr%,n$
addr%=@get_call_addr(41)
n$=@mk_cstring$(name$)
r%=C:addr%(L:VARPTR(n$))
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION async_queryname
LOCAL r%,addr%
addr%=@get_call_addr(42)
r%=C:addr%()
RETURN r%
ENDFUNC
> PROCEDURE async_discard
LOCAL addr%
addr%=@get_call_addr(43)
VOID C:addr%()
RETURN
> PROCEDURE async_getconfig(retries%,timeout%)
LOCAL addr%
addr%=@get_call_addr(44)
VOID C:addr%(L:retries%,L:timeout%)
RETURN
> PROCEDURE async_setconfig(retries&,timeout&)
LOCAL addr%
addr%=@get_call_addr(45)
VOID C:addr%(retries&,timeout&)
RETURN
> PROCEDURE set_error_mode(type&)
LOCAL addr%
addr%=@get_call_addr(46)
VOID C:addr%(type&)
RETURN
> FUNCTION get_connected
LOCAL r%,addr%
addr%=@get_call_addr(47)
r%=C:addr%()
RETURN r% AND &HFFFF
ENDFUNC
> FUNCTION get_dns(no&)
LOCAL r%,addr%
addr%=@get_call_addr(48)
r%=C:addr%(no&)
RETURN r%
ENDFUNC
> FUNCTION get_libversion
LOCAL r%,addr%
addr%=@get_call_addr(49)
r%=C:addr%()
RETURN r%
ENDFUNC
> FUNCTION get_tcpversion
LOCAL r%,addr%
addr%=@get_call_addr(50)
r%=C:addr%()
RETURN r%
ENDFUNC
'
' *** FD_SET helper functions ***
'
> FUNCTION alloc_fdset
LOCAL r%,addr%
addr%=@get_call_addr(51)
r%=C:addr%()
RETURN r%
ENDFUNC
> PROCEDURE free_fdset(fd%)
LOCAL addr%
addr%=@get_call_addr(52)
VOID C:addr%(L:fd%)
RETURN
> PROCEDURE fd_set(s&,fd%)
LOCAL addr%
addr%=@get_call_addr(53)
VOID C:addr%(s&,L:fd%)
RETURN
> PROCEDURE fd_clr(s&,fd%)
LOCAL addr%
addr%=@get_call_addr(54)
VOID C:addr%(s&,L:fd%)
RETURN
> PROCEDURE fd_zero(fd%)
LOCAL addr%
addr%=@get_call_addr(55)
VOID C:addr%(L:fd%)
RETURN
> FUNCTION fd_isset(s&,fd%)
LOCAL addr%,r%
addr%=@get_call_addr(56)
r%=C:addr%(s&,L:fd%)
RETURN r%
ENDFUNC
'
'
' *** SOCKADDR_IN helper functions ***
'
' struct sockaddr_in
' {
' short int           sin_family;     /* family   */
' unsigned short int  sin_port;       /* port     */
' struct in_addr      sin_addr;       /* Internet address */
' unsigned char pad[8];               /* make same size as sockaddr */
' };
'
'
' *** IOVEC helper functions ***
'
' struct iovec
' {
' void *iov_base;
' long iov_len;
' };
'
'
' *** SERVENT helper functions ***
'
' struct servent
' {
' char *s_name;
' char **s_aliases;
' int s_port;
' char *s_proto;
' };
'
'
' *** HOSTENT helper functions ***
'
' struct hostent
' {
' char  *h_name;
' char  **h_aliases;
' int   h_addrtype;
' int   h_length;
' char  **h_addr_list;
' };
'
'
' *** TIMEVAL helper functions ***
'
' struct timeval
' {
' long tv_sec;
' long tv_usec;
' };
'
'
> PROCEDURE gfa_array_list ! only comment
' 0: int cdecl gfa_accept(int sfd, struct sockaddr *address, int *addrlen);
' 1: int cdecl gfa_bind(int sfd, struct sockaddr *address, int addrlen);
' 2: int cdecl gfa_connect(int sfd, struct sockaddr *in, int len);
' 3: int cdecl gfa_listen(int sfd, int backlog);
' 4: long cdecl gfa_recv(int sfd, void *buf, long len, unsigned flags);
' 5: long cdecl gfa_recvfrom(int sfd, void * buf, long len, unsigned flags, struct sockaddr_in *addr, int *addr_len);
' 6: int cdecl gfa_select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
' 7: long cdecl gfa_send(int sfd, void *buf, long len, unsigned flags);
' 8: long cdecl gfa_sendto(int sfd, void *buf, long len, unsigned flags, struct sockaddr_in *addr, int addr_len);
' 9: int cdecl gfa_shutdown(int sfd, int how);
' 10: int cdecl gfa_socket(int domain, int type, int protocol);
' 11: int cdecl gfa_getsockopt(int sfd, int level, int optname, char *optval, int *optlen);
' 12: int cdecl gfa_setsockopt(int sfd, int level, int optname, char *optval, int optlen);
' 13: long cdecl gfa_sockfcntl(int sfd, int cmd, long args);
' 14: unsigned long cdecl gfa_htonl(unsigned long hostlong);
' 15: unsigned short cdecl gfa_htons(unsigned short hostshort);
' 16: unsigned long cdecl gfa_ntohl(unsigned long netlong);
' 17: unsigned short cdecl gfa_ntohs(unsigned short netshort);
' 18: unsigned long cdecl gfa_inet_addr(char *cp);
' 19: unsigned long cdecl gfa_inet_network(char *cp);
' 20: char * cdecl gfa_inet_ntoa(struct in_addr in);
' 21: struct in_addr cdecl gfa_inet_makeaddr(int net, int lna);
' 22: int cdecl gfa_inet_lnaof(struct in_addr in);
' 23: int cdecl gfa_inet_netof(struct in_addr in);
' 24: struct servent * cdecl gfa_getservent(void);
' 25: struct servent * cdecl gfa_getservbyname(char *name, char *proto);
' 26: void cdecl gfa_setservent(int stayopen);
' 27: void cdecl gfa_endservent(void);
' 28: int cdecl gfa_close_socket(int sfd);
' 29: int cdecl gfa_gethostname(char *name, int namelen);
' 30: int cdecl gfa_getsockname(int sfd, struct sockaddr *name, int *namelen);
' 31: int cdecl gfa_getpeername(int sfd, struct sockaddr *name, int *namelen);
' 32: long cdecl gfa_gethostid(void);
' 33: void cdecl gfa_sethostid(long hostid);
' 34: long cdecl gfa_gethostip(void);
' 35: void cdecl gfa_sethostip(long hostip);
' 36: struct hostent * cdecl gfa_gethostent(void);
' 37: struct hostent * cdecl gfa_gethostbyname(char *name);
' 38: struct hostent * cdecl gfa_gethostbyaddr(char *addr, int len, int type);
' 39: void cdecl gfa_sethostent(int stayopen);
' 40: void cdecl gfa_endhostent(void);
' 41: int cdecl gfa_async_gethostbyname(char *name);
' 42: struct hostent * cdecl gfa_async_queryname(void);
' 43: void cdecl gfa_async_discard(void);
' 44: void cdecl gfa_async_getconfig(int *retries, int *timeout_p_t);
' 45: void cdecl gfa_async_setconfig(int retries, int timeout_p_t);
' 46: void cdecl gfa_set_error_mode(int type);
' 47: int cdecl gfa_get_connected(void);
' 48: long cdecl gfa_get_dns(int no);
' 49: long cdecl gfa_get_libversion(void);
' 50: long cdecl gfa_get_tcpversion(void);
' 51: void *cdecl gfa_alloc_fdset(void);
' 52: void cdecl gfa_free_fdset(void *fd);
' 53: void cdecl gfa_FD_SET(int sock, fd_set *fd);
' 54: void cdecl gfa_FD_CLR(int sock, fd_set *fd);
' 55: void cdecl gfa_FD_ZERO(fd_set *fd);
' 56: long cdecl gfa_FD_ISSET(int sock, fd_set *fd);
RETURN
'
