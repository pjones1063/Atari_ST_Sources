*** config.h.orig	Tue Oct  8 22:47:28 1991
--- config.h	Tue Oct  8 22:48:58 1991
***************
*** 519,525 ****
   *	This symbol, if defined, indicates that the syscall routine is available
   *	to call arbitrary system calls.  If undefined, that's tough.
   */
! /* #define	HAS_SYSCALL		/**/
  
  /* HAS_TRUNCATE
   *	This symbol, if defined, indicates that the truncate routine is
--- 519,526 ----
   *	This symbol, if defined, indicates that the syscall routine is available
   *	to call arbitrary system calls.  If undefined, that's tough.
   */
! /* we will use this to call gemdos/bios/xbios/lineA see atarist.c */
! #define	HAS_SYSCALL		/**/
  
  /* HAS_TRUNCATE
   *	This symbol, if defined, indicates that the truncate routine is
*** doarg.c.orig	Tue Oct  8 22:36:43 1991
--- doarg.c	Tue Oct  8 22:46:58 1991
***************
*** 1531,1537 ****
--- 1531,1541 ----
      register STR **st = stack->ary_array;
      register int sp = arglast[1];
      register int items = arglast[2] - sp;
+ #ifdef atarist
+     unsigned long arg[14]; /* yes, we really need that many ! */
+ #else
      unsigned long arg[8];
+ #endif
      register int i = 0;
      int retval = -1;
  
***************
*** 1588,1593 ****
--- 1592,1623 ----
  	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
  	  arg[7]);
  	break;
+ #ifdef atarist
+     case 9:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8]);
+ 	break;
+     case 10:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8], arg[9]);
+ 	break;
+     case 11:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8], arg[9], arg[10]);
+ 	break;
+     case 12:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8], arg[9], arg[10], arg[11]);
+ 	break;
+     case 13:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8], arg[9], arg[10], arg[11], arg[12]);
+ 	break;
+     case 14:
+ 	retval = syscall(arg[0],arg[1],arg[2],arg[3],arg[4],arg[5],arg[6],
+ 	  arg[7], arg[8], arg[9], arg[10], arg[11], arg[12], arg[13]);
+ 	break;
+ #endif /* atarist */
      }
      return retval;
  #else
