drap&drop:

l'emetteur envoit un message GEM AP_DRAGDROP
et ouvre un pipe de communication. Ce pipe
lu et ecrit par les deux applications (emetteur
et recepteur) sert a echanger les infos selon
un protocole bien definie.




Routines pour l'emetteur:
------------------------

WORD ddcreate(WORD *pipe);
cr‚er un pipe DD (U:\PIPE\DRAGDROP.??)
input:
	n‚ant
output:
	pipe donne l'extension du pipe (deux lettres)
return:
	l'handle du pipe, -1 si erreur


WORD ddmessage(WORD apid, WORD fd, WORD winid, WORD mx, WORD my, WORD kstate, WORD pipename)
envoie un message de DD
input:
	apid: 		id de l'application receptrice
	fd:	  		handle du pipe (creer par ddcreate())
	winid:		handle de la fenetre du recepteur
	mx,my:		coordonnees de la souris
	kstate: 	‚tat du clavier
	pipename:	extension du pipe
output:
	n‚ant
return:
	>0:		pas d'erreur
	-1:		le recepteur refuse le DD (DD_NAK)
	-2:		le recepteur ne repond pas (timeout)
	-3:		erreur dans appl_write()


WORD ddrexts(WORD fd, BYTE *exts);
Lecture des pr‚f‚rences du recepteur (dans le pipe)
input:
	fd:	handle du pipe
output:
	exts: 	pointeur sur un buffer de 32 octets
			contenant les huit extensions de fichier
			accepter par le r‚cepteur
return:
	>0:	pas d'erreur
	-1:	erreur en lisant le pipe


WORD ddstry(WORD fd, BYTE *ext, BYTE *text, BYTE *name, LONG size);
Teste si le receveur accepte un type de fichier



Routines pour le receveur et l'emetteur
---------------------------------------

VOID ddclose(WORD fd);
ferme un pipe
fd:	handle du pipe


Routines pour le receveur
-------------------------

WORD ddopen(WORD ddnam, BYTE ddmsg);
ouvre le pipe pour y ecrire un message de reception
ddnam: extension du pipe (donne par le message AP_DRAGDROP)
ddmsg: 	DD_OK	-> on accepte le DD
		DD_NAK	-> on refuse le DD
return: >0: handle du pipe
		-1: DD annul‚

WORD ddsexts(WORD fd, BYTE *exts);
‚criture des preferences du recepteur
fd:		handle pipe
ext: 	8 extensions de 4 octets
return:	>0: pas d'erreur
		-1: erreur d'‚criture du pipe

WORD ddrtry(WORD fd, BYTE *name, BYTE *file, BYTE *whichext, LONG *size);

entree:
fd: 	handle du pipe (donne par ddopen())
sortie:
name:		


WORD ddreply(WORD fd, BYTE ack);
envoit un accuse de reception a l'emetteur
fd: 	handle du pipe (donne par ddopen())
ack: 	byte a envoyer (DD_OK, ...)
retour: -1 erreur (le pipe sera automatiquement ferme)
		>0 pas d'erreur

