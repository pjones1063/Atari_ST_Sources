/************************************************************************/
/*																		*/
/*																		*/
/*		>>>>>>>>>>>  TOS - Magazin   Ausgabe 4/93  <<<<<<<<<<<<<		*/
/*																		*/
/*																		*/
/*		P R O J E C T	:	Beispiele fÅr Codieralgorithmen				*/
/*							CODING.TTP									*/
/*																		*/
/*		M O D U L E		:	README										*/
/*																		*/
/*																		*/
/*		Author			:	JÅrgen Lietzow fÅr TOS-Magazin				*/
/*																		*/
/*		System/Compiler	:	Atari ST/TT, TOS 4.01, Pure C				*/
/*																		*/
/*		Last Update		:	26.02.93 (JL)								*/
/*																		*/
/*																		*/
/************************************************************************/




I N H A L T
===========

I.   Bedienungsanleitung des Packers (CODING.TTP)
II.  Beschreibung der Kodierbibliothek
III. Umfang des Projekts
IV.  Anregungen und Anmerkungen etc.



I.   Bedienungsanleitung des Packers (CODING.TTP)
=================================================

Beim Aufruf von CODING.TTP ohne Parameter erscheint eine Beschreibung
der verschiedenen mîglichen Parameter.

Folgender Aufbau der Kommandozeile ist zu beachten:

CODING.TTP:

[-]Kommando [-Optionen] Quelldatei(en) [Zielpfad|Zieldatei]

Als erster Parameter wird ein Kommando verlangt (ein Buchstabe):

	f	kodiert die Datei(en) mit einem Huffman kodierten LauflÑngen-
		Algorithmus.
	l	kodiert die Datei(en) via Huffman kodiertem Lempel-Ziv-Fiala-Green-
		Verfahren.
		(Besser und schneller)
	n	speichert die Datei(en) unkomprimiert (aber mit Check-Summe).

	e	expandiert die angegebenen Datei(en) je nach verwendetem
		Kodierverfahren.

Direkt im Anschluû an das Kommando oder als neuen, mit "-" eingeleiten,
Parameter kînnen weitere Optionen folgen:

	h	wartet nach Beendigung auf einen Tastendruck
	y	beantwortet automatisch alle eventuell aufkommenden Fragen
		mit "ja".
	d	lîscht (nur) bei Erfolg die Quelldateien
	s	unterdrÅckt die Bildschirmausgaben wÑhrend des Betriebs

Der nÑchste Parameter enthÑlt die Quelldatei(en). Hier sind die
Dateispezifikationen "?" und "*" erlaubt.

Als letzter Parameter kann ein Zielpfad angegeben werden. Ohne Pfadangabe
wird der aktuelle Pfad genommen. Wenn als Quelle nur EINE Datei gewÑhlt
wurde (keine "?" und "*"), kann als Ziel auch ein Dateiname angegeben
werden.

ACHTUNG:

Anders als die bekannten Packer erzeugt dieser Packer fÅr jede Datei eine
eigene gepackte Datei gleichen Namens. Sollen die Quelldateien erhalten
bleiben, MUû als Ziel ein anderer Pfad eingegeben werden.

Nicht vorhandene Pfade kînnen von dem Packer nicht erzeugt werden.



II.  Beschreibung der Kodierbibliothek
======================================

Der Umgang mit Bibliotheken sollte bekannt sein.

Als Ziel und Quelle der Packroutinen wird eine XFILE-Struktur Åbergeben.
Diese Struktur lÑût sich so erweitern daû jede Art von Ein/Ausgabe
realisiert werden kann. Also nicht nur wie hier gezeigt, fÅr Dateien,
sondern auch fÅr RAM-Speicher. Dazu mÅssen nur die Funktionen
XRead(), XWrite(), XOpen() und XClose() die gewÅnsche Ein/Ausgabeart
unterstÅtzen.

Bei der Huffman-Kodierung handelt es sich um eine adaptive Version,
die nach einer zu bestimmenden Anzahl ausgegebener Codes den Huffman-Baum
neu aufbaut, und dann mit diesem weiter kodiert. Kodierer und Dekodierer
zÑhlen die bisher verarbeiteten Codes mit.

Weitere Verbesserungen lassen sich hauptsÑchlich bei der Huffman-Kodierung
erreichen. PKZIP erreicht z.B. bei manchen Dateien durch einen dynamischen
Huffman-Code bessere Ergebnisse.

Die im Artikel nicht erwÑhnte <<Arithmetische Kompression>> lohnt sich nur
im dynamischen Fall. Da der Rechenaufwand hier wesentlich grîûer ist,
erreicht man im adativen Verfahren durch îfteres <<updaten>> eines
Huffman-Baumes bei gleichem Zeitaufwand bessere Ergebnisse.

Die hier verwendete Huffman-Implementierung mÅûte schneller als
z.B. die Shanon-Fanno-Version von PKZIP sein. Allerdings lÑût sich hier
die maximale Bit-Zahl eines Kodes nur schlecht begrenzen.
Trotzdem mÅûten sich auch hier <p_code> und <p_len> Felder, wie sie PKZIP
verwendet, lohnen.

Der Lempel-Ziv-Teil dÅrfte weitgehend perfekt sein. Weitere Verbesserungen
sind nur im Zusammenspiel mit der Huffman-Kodierung zu erreichen, oder
aber durch einen ganz neuen Algorithmus. Der muû aber erst noch entdeckt
werden.
Zwar kann ich den Lazy-Evaluation-Teil bei PKZIP immer noch
nicht ganz nachvollziehen, doch zeigen sowohl die Komprimierraten, wie
auch die Zeiten, verglichen mit diesem Algirithmus, daû sich nicht all zu
viel dahinter verbergen kann.

PKZIP verwendet bei kleineren Dateien kleinere dictionaries, um somit
kÅrzere Offset-Codes ausgeben zu kînnen. Das wird hier durch ein îfteres
Updating der Huffman-Codes wÑhrend der Anfangsphase kompensiert.

Versuche eine zusÑtzliche String-LÑnge einzufÅhren, die der zuletzt
ausgegebenen LÑnge einer jeden Textposition (im dictionary) entspricht,
haben zu keinen besseren Komprimierraten gefÅhrt.

Interresant ist, daû sich Binaries mit dictionary-grîûen von 16Kbytes am
besten komprimieren lassen, wÑhrend bei Textdateien wohl auch bei 32 Kbytes
noch nicht Schluû ist.

Staffelt man die minimale StringlÑnge (THRESHOLD) in AbhÑngigkeit von der
relativen Offset-Position, lassen sich die Komprimierraten geringfÅgig
verbessern.
Also z.B. bei Offsets kleiner 8 KBytes ist THRESHOLD 2 und darÅber 3.

Bei Binaries kînnte eventuell eine StinglÑngenreduzierung auf eine
gerade Textposition, bessere Komprimierraten erziehlen (nicht ausprobiert).


III. Umfang
===========

CODING\
	
	README			- diese Datei

	CODING.TTP		- einfaches Packprogramm das die Coding-Bibliothek
					  benutzt.

	CODING.PRJ		- Turbo/Pure C Projekt-Datei des Packprogrammes
	
	CODING.C		- enthÑlt alle Funktionen des Packprogrammes
	CODING.O		- entsprechende Objektdatei
	
	MESSAGES.H		- enthÑlt alle Bildschirmausgaben des Packprogrammes
	
	COD_LIB.LIB		- Turbo/Pure C Bibliothek mit allen Kodierfunktionen
	
	COD_LIB.H		- Header-Datei der Bibliothek
	

CODING\COD_LIB\		- Quelltexte der Bibliothek

	PORT.C			- fÅr eine leichtere Portierung auf andere Systeme
	PORT.O			- entsprechende Objektdatei

	XFILE.C			- Datei Ein/Ausgabe-Funktionen
	XFILE.O			- entsprechende Objektdatei

	HUFFMAN.C		- Funktionen zur Huffman-Kodierung
	HUFFMAN.O		- entsprechende Objektdatei

	LZFG.C			- Implementation des Lempel-Ziv-Fiala-Green-Algorithmus
	LZFG.O			- entsprechende Objektdatei

	COD_LIB.PRJ		- Turbo/Pure C Projekt-Datei der Bibliothek
		


IV. Anregungen und Anmerkungen etc.
===================================

schicken Sie bitte an:


ICP-Innovativ Computer-Presse
Verlag GmbH & Co. KG
Wendelsteinstraûe 3

8011 Vaterstetten

Telefon 08106 / 33945


oder

JÅrgen Lietzow
Jesuitengasse 3
8390 Passau

Telefon 0851 / 2197

