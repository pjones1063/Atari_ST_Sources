                           ST MAKE Version 1.4
                  A Public Domain MAKE for the Atari ST
                              By Ian Lepore

  Recently-added features are listed in the Version Notes section at
  the end of this document.  Portions of the document text modified
  on the most recent release are identified with the '|' char.

  This document describes the installation and ST-specific features of
  this implementation of make.  Instructions on using make as a
  development tool are contained in the MAKE.DOC file.  If you are
  unfamiliar with using make, read the MAKE.DOC file first.

  In this document, the term STMAKE refers to this implementation of
  make, even though the executable name is MAKE.TTP.

  PACKING LIST

    The following files should be present in the distribution ARCs:

       (xx = version number, 12 = v1.2, etc)

       MAKBINxx.ARC     Binaries and docs.
         MAKE.TTP          The program.
         MAKE.DOC          General usage instructions for make.
         MAKE_ST.DOC       Implementation-specific details.
         VERSIONS.DOC      Notes on what was added in each version.
         MAKE.INI          The default INI file for Sozobon C.
         IAN.INI           The author's INI file, an example.
         TYPICAL.INI       Another INI file example.
         NAMETRAK.PRG      A debugging program.

       MAKSRCxx.ARC     Source code.
         MAKEFILE.MAK      The makefile for the make source code.
                           The rest of the source code packing list can
                           be obtained by browsing makefile.mak.

  FEATURES SUPPORTED BY THIS IMPLEMENTATION

    The MAKE.INI File

       With most implementations of make the builtin compiler rules are
       hard-coded in the make source code.  This ties make to the
       development system it was written for, and makes it difficult to
       customize.  STMAKE has no builtin rules or suffixes.  Instead,
       the 'builtin' data is loaded from a MAKE.INI file.  (Macros and
       runtime options can also be coded in MAKE.INI.)

       The MAKE.INI files provided with STMAKE are commented, and can be
       used as examples when customizing make for additional language
       processors. Builtin rules and suffixes are discussed in detail in
       MAKE.DOC.

       When STMAKE is started, it attemps to locate a file named
       'MAKE.INI', by searching directories in the following order:

       - The current directory is searched first.

       - If a PATH= env variable is set, those directories are searched.

       - The following paths are searched:
            \bin
            \sozobon\bin
|           \gnu\bin
|           c:\bin
|           c:\sozobon\bin
|           c:\gnu\bin

       If the MAKE.INI file is not found, STMAKE will print a warning,
       and will then attempt to continue processing.  Since there are no
       builtin rules, it probably won't run very well without the INI
       file.  It is possible, however, to run without an INI file if all
       needed rules and suffixes are coded in the makefile.

    Syntax of Commands in the Makefile

       Many implementations of make require that the first character on
       a command line associated with a target (or rule) be a <tab>
       character.  STMAKE supports the use of a leading space (or
       spaces) as equivelent to a leading <tab>.  STMAKE also supports
       the use of a plus sign ('+'), but this is supported only for
       compatibility with v1.1, and will be phased out in a later
       version.  The following illustrates all three valid formats:

            mytarget: mydepend
            <tab> command1              # leading tab
                  command2              # leading spaces
            +     command3              # leading '+'

    Default Makefile Name

       STMAKE supports the standard default name 'makefile', and the
       additional default name of 'makefile.mak'.  If no filename is
       passed on the command line, STMAKE will attempt to locate
       'makefile'.  If this is not found, STMAKE will try to use
       'makefile.mak'.

    Runtime Command Line Options

       STMAKE supports the following command line option switches:

         -c dir    Change current directory to 'dir' before running.
         -d        Debug mode, print lots of debugging info.
         -e        Don't read env vars to set macros.
         -f file   Use 'file' as the makefile, instead of default name.
         -i        Ignore exit status codes from programs.
         -h        Hold screen (wait for key) before exiting.
|        -h-       Do not hold screen regardless of .HOLDSCREEN or -h.
         -n        Norun mode, report what a normal run would do.
         -p        Print out internal data structures (debugging).
         -q        Question up-to-dateness of targets, exit w/status.
         -r        Don't use builtin rules from MAKE.INI.
         -s        Make silently (don't list commands).
         -t        Touch files instead of making them.

    Support for Special Targets

       STMAKE allows many command line options to be set via 'special
       targets' (see MAKE.DOC).  These may be coded in the INI file, or
       in the makefile.  The special targets supported are:

         Target         Action                 Command Line Equivelent

         .DEBUG       - Prints lots of debug info.       -d
         .HOLDSCREEN  - Wait for key before exit.        -h
         .IGNORE      - Set 'ignore return codes'.       -i
         .INICMDS     - Specify initialization cmds.    (none)
         .NORUN       - Operate in 'norun' mode.         -n
         .PRINT       - Print data structures.           -p
         .SILENT      - Run in 'silent' mode.            -s

       HOLDSCREEN is helpful when running from the GEM desktop.  It
       causes make to issue a "Hit any key..." prompt before exiting.

       INICMDS is most useful when coded in the MAKE.INI file, although
       it can be coded in a makefile.  (When coded in a makefile, the
       commands in the makefile completely replace the list of commands
       in the INI file.)  Any commands that can be specified for a
       normal target can be included following the INICMDS target.

       STMAKE will execute all the commands in the INICMDS list each
       time make is started, before any normal targets are processed.
       The INICMDS will be executed even if all targets in the makefile
       are up to date.

       While it is possible to use INICMDS to execute programs, it was
       designed to support environment variables when make is run from
       the GEM desktop.  Since the Sozobon compiler uses env vars
       extensively to control its actions, and the desktop doesn't
       support env vars, you can set any needed env vars using the
       $(SETENV) builtin macro following the INICMDS target.

    Macros

       STMAKE will (unless overridden with -e) read all variables in the
       env string area, and will set macros with the same names and
       values.  For example, if there were an ABC= variable in the
       environment with a value of 'xyzzy', then STMAKE will assign a
       macro automatically, as if you had coded:
         ABC = xyzzy
       in your makefile.

    Builtin Command Macros

       STMAKE supports several special builtin macros, providing actions
       which are commonly provided by a shell in the unix environment.
       (Note that these are truly builtin; they are not located in the
       INI file.)  When these macros are specified on a command line,
       STMAKE handles the associated action internally.  If this is
       undesirable, the macros can be redefined in the INI file or
       makefile to execute programs or commands for your shell.  These
       builtin macros are:

         $(CP) a b              Copies file a to file b. No wildcards.
         $(ECHO) line           Echo the line to the screen.
         $(RM) f1 [f2...]       Deletes files.  Wildcards allowed.
         $(SETENV) var=value    Set an env var to a value.
|        $(BEEP)                Makes the ST go 'ding'.
|        $(PAUSE)               Displays 'Hit any key...' then waits.
|        $(MKDIR) dirname       Makes a directory.  Trailing \ optional.
|        $(RMDIR) dirname       Removes a directory (it must be empty).
|        $(CHDIR) dirname       Change current directory to named dir.
|        $(PUSHDIR) dirname     Save current dir and change to named dir.
|        $(POPDIR)              Return to previously saved dir.

|       The PUSHDIR and POPDIR commands maintain a stack internally
|       such that you can PUSHDIR your way into new directories and 
|       POPDIR your way out along the same path.  There is no limit to
|       the stack depth other than memory in your machine.  These
|       commands, as well as CHDIR, will change the current drive if
|       the specified path starts with a drive letter followed by a 
|       colon.
        

|   Special Macros
|
|      STMAKE supports the following special macros:
|
|        $*   - Root name (no .ext) of dependant being made (rules only)
|        $<   - Full name of dependant being made (rules only)
|        $@   - Full name of target being made.
|        $?   - List of outdated dependants that triggered this target.
|
|      These macros are explained in detail in MAKE.DOC.

    GEM Desktop Support

       In addition to the HOLDSCREEN and INICMDS/$(SETENV) support,
       STMAKE has a special 'hack' to allow usage from the GEM desktop.

       If STMAKE is started with just one parameter on the command line,
       and that parameter is a filename of the form 'somename.MAK', that
       file will be used as the input makefile.  This allows STMAKE to
       be installed as the application to handle *.MAK type files; it
       can then be started by double-clicking on the 'somename.MAK' file
       on the desktop.  You can use the name 'MAKEFILE.MAK' (eg, a name
       similar to the accepted standard), or you can use a name that
       relates to your programming project, such as 'MYPROG.MAK'.  (I
       generally use the latter method.)

|      Another feature specific to GEM desktop users allows command-line
|      parms to be typed in after the program starts.  If either SHIFT key
|      is held down when the program is started, (ie, hold SHIFT and
|      double-click on a .MAK file), the program will prompt for command
|      line input interactively.  You may enter any commands in this way
|      that you would enter on the command line if you were using a CLI.
|      This is especially handy for running makefiles that have multiple
|      targets and you want to make a non-primary target.  Just hold down
|      SHIFT, double-click on the makefile, and type in the alternate
|      target name.

  INSTALLATION

    Command Shell / CLI

       Most commands shells for the ST support the use of environment
       variables.  You will typically have a PATH= variable set in your
       environment already.  Simply copy MAKE.TTP and MAKE.INI to one of
       the directories listed in your PATH= list. If your shell requires
       program names to end in .PRG, rename MAKE.TTP to MAKE.PRG.

       Check the MAKE.INI file to see if it needs customizaton.  Most
       likely, you will want to remove the .INICMDS target and commands,
       since your command shell will allow you to manage the env vars.

    GEM Desktop

       The GEM desktop does not directly support env vars, and does not
       have provisions for finding a program via a PATH= specification.
       Installing STMAKE for use with the GEM desktop depends in part on
       how you intended to use STMAKE.

       The most basic use involves keeping a copy of MAKE.TTP and
       MAKE.INI in every directory where you work on source code.  This
       is fairly wastefull of space, but it allows you to double-click
       on MAKE.TTP and (optionally) enter parameters for it.  (If you
       don't enter any parameters, MAKE will look for MAKEFILE or
       MAKEFILE.MAK, and use it if found.)

       A more reasonable approach is to install MAKE.TTP as the
       application that handles .MAK files.  Then, when you double-click
       on the makefile in a window (which must end in .MAK) the desktop
       will automatically start MAKE and pass it the name of the
       makefile you clicked on.

       To do this, first copy MAKE.TTP and MAKE.INI to a likely path,
       such as \BIN or \SOZOBON\BIN.  If you are using TOS 1.4 or higher,
       you can install it with the 'Install Application' menu item.  If
       you are using TOS 1.0, Install Application doesn't store the
       drive and path of the application, and it is better to edit the
       DESKTOP.INF file directly.

       To use Install Application, open a window on the directory to
       which you copied MAKE.TTP.  Single-click on MAKE.TTP to highlight
       it, then select the Install menu item.  Key in 'MAK' for the
       Document Type, then click on INSTALL.  Be sure to do a 'Save
       Desktop' after you've installed it!

       To install MAKE by editing DESKTOP.INF (the method you must use
       if you are using a TOS version earlier than 1.4), insert a line
       at the bottom of your DESKTOP.INF file, as follows:

         #P 03 04   C:\BIN\MAKE.TTP@ *.MAK@

       The '#' character must appear in column 1, and all spaces must be
       preserved exactly as shown.  You should change C:\BIN\ to the
       drive and path in which you installed MAKE.TTP.  You may notice
       that other application lines in your DESKTOP.INF file don't
       include the drive and path names.  This is fine, in fact, you can
       add drive and path names to other items in the file if you want.
       Remember that you have to reboot to make the changes take effect.

       (Note:  If you have the Quick Inf utility from Branch Always
       Software, you can use it to install MAKE.TTP instead of editing
       the desktop file directly.)

       Depending on your system configuration, a problem with the
       MAKE.INI file can sometimes occur when MAKE is used as an
       installed application.  If MAKE reports a warning that it cannot
       find the MAKE.INI file, put a copy of MAKE.INI in the root
       directory of the boot drive.  (More specifically, put MAKE.INI in
       the same place as your DESKTOP.INF file.)  MAKE will then be able
       to find MAKE.INI no matter what drive you are in when you click
       on a .MAK file.  If you use a TSR program to handle environment
       variables, you can put MAKE.INI in any PATH= directory.

  TROUBLESHOOTING

    Even when you've followed all instructions to the letter, it may
    happen that some piece of the intricate Sozobon puzzle is missing,
    and you'll get a message saying that a file cannot be found.  For
    that reason, the NAMETRAK program is included to help figure out
    these errors.

    NAMETRAK will install itself in the system's DOS vector, and report
    on the actions being taken by other programs.  It logs to the
    printer every attempt made by every program to access or execute a
    file.  (Parallel printers only, sorry 'bout that).  To use it,
    simply double-click on NAMETRAK.PRG, then take the action that is
    leading to the error (eg, double-click on a makefile, try to run the
    CC program, whatever.)  Pages and pages of print will probably be
    produced (you'll be surprised at how much activity the system
    normally does behind your back to run a compiler.)  The only way to
    stop the logging printout is to reboot.

    You can use the NAMETRAK program to figure out where MAKE and CC are
    looking for things, and then create the appropriate directories and
    put the things there.

  CREDITS DEPT

    The source code which I used as the basis of this implementation of
    make contains comments indicating that it has been worked on by
    Jwahar Bammi, Ton van Overbeek, the Sozobon crew, and now me.  (I
    wonder if there's something significant in the fact that none of us
    have 'normal' names like Jack or Ed?)  I certainly couldn't have
    cooked this beast up from scratch, so I'd like to thank all those
    who were involved before me.  (Mostly, I've just made it work better
    with the desktop.)

    Ian Lepore (BIX userid ianl)
    06/08/90

  -----------------------------------------------------------------------------
 Version notes for STMAKE...

   1.1   ??/??/??   My first attempts at hacking on this beast.
    
   1.2   06/02/90   First real version, supports MAKE.INI file, looks in
                    paths that are 'likely' for a Sozobon user, supports
                    setting of env vars in makefiles or ini file.
                    
   1.3   06/22/91   Fixed a bug in the builtin $(RM) command...a buffer
                    was being allocated on the stack as 128 bytes, now it
                    is 512 bytes and includes an overflow check to prevent
                    bombs on a very long list of files to delete.  Also,
                    added paths that are 'likely' for GNU C to the list
                    of places to look for the make.ini file.
                    
                    Added new builtin commands $(BEEP), $(PAUSE), $(MKDIR)
                    and $(RMDIR).  Enhanced the logic in the builtin copy
                    command, now it tries to grab a 16k buffer via Malloc()
                    and if that fails, it falls back to the 512 byte stack
                    based buffer it used to use.  (Copies oughta be a bit
                    faster now!)
                    
                    Also, added the '-h-' command switch to override 
                    HOLDSCRN unconditionally and exit without pausing.
                    This is handy when running make from within make,
                    and you want the inner runs to not wait for a key
                    but the outmost run to wait at the end of everything.

                    Finally, added a new feature for desktop users:  if
                    either SHIFT key is held down when a somefile.MAK is
                    double-clicked on, the program prompts interactively
                    for command-line input before starting the make.  This
                    is handy when you have makefiles with multiple targets
                    in it, and you want to run from the desktop and make
                    a non-primary target.  Any command-line switches can
                    also be specified this way.
                    
   1.4   06/27/91   Added new internal commands $(CHDIR), $(PUSHDIR),
                    and $(POPDIR).  Also, FWIW, had a whole passle of 
                    troubles compiling this version.  Eventually ended up
                    replacing the dlibs.a ctype system, but I'm not sure
                    that's what fixed it.  I think there are parts of the
                    make code that are essentially fragile.  ::sigh::
                    
                     

