
   Sozobon Version Notes...

   Listed below are notes about what enhancements have been made since
   the original release.  I am not a fanatical note-taker, but these
   cover the high points.  Please don't read too much into these notes,
   they are mostly little reminders to myself of what was done at what
   point, so I can track down bugs quickly.
   
------------------------------------------------------------------------
Version notes for CC...

 100  ??/??/??  Original Sozobon release
 
 110  11/13/90  Fixed a bug that was glitching out filenames if the paths
                in PATH= or LIB= already had a trailing backslash on them.
                Also improved the list of likely places to look for the
                compiler pieces in the absence of PATH= data.
                
 120  06/21/91  Fixed a glitch that was not properly initializing the
                the string array for the ld_tmp filename string.  
                (Discovered this by trying to use LD for the first time!)
                
 130  06/26/91 >Added dummy Cconout() that displays nothing but is 
                sensitive to ^C, so that the compiler can be aborted
                between passes even when -V option isn't being used.
               >Changed logic to find compiler pieces only once instead
                of once for each .C or .S to be compiled.
              
 140  06/27/91 >Basically, a total rewrite.  The code is now ANSIfied,
                (only when __STDC__ is defined).  The main purpose of the
                rewrite was to support the placement of intermediate files
                on the device specified in the TMP= environment variable.
                This allows folks (especially floppy disk users) to keep
                intermediates on a ramdisk.
               >The '-r' option was added.  This option allows you to
                special an alternate runtime startup code object file
                to override the default 'dstart.o' file.  This is handy
                for GEM programs and accessories which need minimal or
                special startup handling. 

  141 07/14/91 >Fixed a glitch in the automatic inclusion of the runtime
                library name.  It didn't like having just 'dlibs' as the
                default library, so now it's 'dlibs.a'.
               >Added the numeric qualifiers to the -v option.  Now -v
                can be followed by any or all of the digits 1,2,3, or 4.
                The digits correspond to HCC, TOP, JAS, and LD.  When a 
                digit is included following -v, it causes the -v flag to
                be passed to the corresponding compiler piece.  Thus, an
                option of -v24 would pass a -v flag in to TOP and LD.
                There cannot be any spaces between the -v and the digits.
   
  142 07/16/91 >Relinked with the fixed dlibs that supports XARGS properly.
  
  143 08/25/91 >Added -t flag, causes symbol table to appear in exe file.
               >Added -f flag, causes libm to be included in link command.

  144 11/01/91 >Added -g flag, causes HCC to emit C source code as comments
                in the asm code.  Only truly useful in conjunction with -S.

------------------------------------------------------------------------
Version notes for Ian's modified HCC...

 120    01/01/90    Sozobon folks release v1.20.

 121    03/01/90  > Fixed a bug in register allocation algorithm for 
                    variables declared in nested blocks.
                  > Rewrote a lot of the I/O-related routines and added
                    support for user-specified buffer sizes (via BUFSIZE=
                    env var).
                  > Did a few other performance-related tweaks.

 122    06/20/91  > Fixed handling of void* pointers.  You no longer get a
                    pointer type mismatch error when one of the pointers
                    involved is a void* type.  A side effect of this is 
                    that char***a;void**b=a; is legal when it shouldn't
                    be, (because of inconsistent levels of indirection),
                    but this is pretty rare stuff, and a fair tradeoff
                    in my opinion.
                  > Cleaned up most error messages.  The program now speaks
                    English instead of technish.  (EG, the old message
                    "? member ID" is now "member not found in struct: XX",
                    "bin-op expr" is now "bad syntax in expression with
                    two operands", and so on).
                  > Added new '-Ooutname' switch to allow output of .S code
                    to any arbitrary name.  This enables CC to pass a name
                    that includes the TMP= path, ie, a ramdisk or other
                    fast device.  Changes in MAIN.C and OUT_ST.C.
                    
 123    07/04/91  > Rewrote routines in SUB_TOS.S, and worked over NODES.C
                    for performance, mainly adding 'register' in places.
                    The hash() routine was moved from NODES to SUBS_TOS.
                  > Added new module EXHANDLR.S and code in MAIN.C to
                    invoke it.  This installs an exception and ^C handler
                    (similar to what signal() provides, except dLibs 
                    doesn't have a signal system).  Basically, now when
                    corner-case compiler bugs crop up, you'll get a nice
                    little message insteads of bombs.
                  > The SOZOBON builtin macro is now #defined internally
                    as the sozobon (hcc) version number, instead of as 1.
                    The version number is 0x0123 for this release.
                  > The compiler now reports memory usage on exit, with -V.
                  
 124    07/05/91  > Misc performance tweaks.  Basically went through all
                    source modules and registerized things and looked for
                    other obvious improvements.
                  > Added support for #error preprocessor directive.
                  > Increased maximum string size to 2048 bytes (from 256).

 125    07/12/91  > Rewrote codegen logic for output of string literals.
                    It used to write strings as a comma-separated sequence
                    of hex constants that represented the string.  (IE,
                    "ab\tc" use to be output as dc.b $41,$42,$09,$43,$0.
                    Now it is output as dc.b "ab\tc\0".)  This corresponds
                    to a change in JAS (at JAS v1.23), and JAS can rip
                    through the strings a LOT faster than it can a list
                    of comma-separated values.

 126    07/13/91  > Total rewrite of the front end, including I/O routines
                    in xfileio.c, tokenizer and lexical analyzer in tok.c,
                    and #include command handling in pre.c.  This gave a
                    good 20% speedup, and as a side effect, removed the
                    limitation of 8 max levels of nesting of #include files.
                  > Added support for C++ style comments (// delimiter).
                  > Added support for all ANSI-defined escape sequences in
                    strings, including hex (\xNN) format.
                  > Changed abort-check logic from checking at the start
                    of every function block to checking after every 128
                    lines of input.

 127    07/13/91  > Did cleanup of changes done in v126.  It's now a bit
                    more portable, and a bit more internally consistant.
                  > Changed error message display format.  It is now:
                       error in FILENAME (linenum): message
                    the difference being that the line number is in parens.
                    Also, if something goes wrong before the first file
                    is open, it reports FILENAME as <no files open>.
                  > Line numbers will now be reported correctly when more
                    than 32767 lines are in the file. (Yeah, right.)
                    
 128    07/14/91  > Tweaked PRE.C and TOK.C so that the compiler now 
                    screams through the inactive arms of conditional 
                    compilation sections.
                  > Tidied up header files (mostly the new ones I've 
                    added) to prevent multiple inclusions of stdio.h.
                    (All this does is give a faster compile of HCC.)
                    
 129    07/14/91  > Added support for ANSI-style concatenation of adjacent
                    string literals.  Changes in PRE.C and new routine
                    n2nappend() in NODES.C.
                  > Fixed a glitch in DECL.C that was causing duplicate
                    struct/union tags to be generated for untagged 
                    definitions.  The old method used the line number of
                    the current input file; if you declared untagged 
                    structs on line 100 of a couple different header files
                    they would be erroniously flagged as duplicates.  Now
                    it just uses a counter that increments with each 
                    generated name.

 130    07/14/91  > Added new error reporting routine bugchk() to main.c,
                    and made another pass through all the error reporting
                    done in all modules.  Cleaned up a few more bogus msgs,
                    and added calls to bugchk() instead of fatal() for 
                    those things which are internal consistancy check
                    failures instead of C syntax errors.
                  > Fixed line numbers for error reporting.  They were off
                    by one because inp_open() was initializing the counter
                    to zero.  Now it gets init'd to one.
                  > Linked with updated dlibs that has fixed XARGS support.

 131    08/25/91  > The #error directive now echos the rest of the #error
                    line as part of the 'fatal error' message it displays.
                  > Added support for #pragma.  Per ANSI, we ignore any
                    #pragma which we don't understand.
                  > Added #pragma echo.  When the compiler encounters this
                    it will echo the remainder of the line (starting with
                    the space/token immediately following 'echo') to stdout.
                    Now your source code can talk to you during a compile!

 132    08/25/91  > Added #pragma idempotent.  When this appears in a file,
          thru      it prevents the file from being read again via #include
        11/01/91    for the duration of the current compile.  This is much
                    faster than using the standard #ifndef/#endif protective
                    wrapper in a header file, because the file doesn't even
                    have to be searched for or opened and read at all.
                  > Fixed a bug in which an enum declared locally within a
                    function would cause a bugchk(2bombs).
                  > Added ANSI builtin macros __DATE__ and __TIME__.  As
                    implemented, these macros resolve to the same date and
                    time for each occurance that appears in the source, 
                    even if considerable time has elapsed between the
                    occurances during the compile.  (IE, you can't time 
                    the compiler with these!)
                  > Added output of warning/error messages to a .ERR file.
                  > Fixed a bug causing recursion through the fatal error
                    reporting routines when an "out of memory" error was
                    being reported, because it couldn't get memory for a 
                    buffer for the (new) .ERR file.                      
                  > As a side effect of the above fix, the compiler no 
                    longer dies if it can't get a big I/O buffer for a file,
                    now it just uses the default I/O buffer assigned by
                    fopen().  (A 512 byte buffer, I think.)
                  > Changed memory allocation behavior in NODES.C; it now
                    gets more nodes at a time, which makes less 
                    fragmentation and thus allows compilation of bigger
                    source modules in the same amount of memory.
                  > Fixed a bug in the handling of \xNN type escape 
                    sequences in strings.  Any value of 'NN' greater than
                    0x7F was causing the output char in the asm code to
                    be created as \xFF.  This was (hopefully the last) 
                    remaining side effect of when the compiler used to not
                    handle any char values over 0x7F by definition, and was
                    located in OUT_ST.C, not the front end.
                  > Fixed a bug in which a missing ')' on a macro invokation
                    would cause a bugchk(2 bombs) if the ')' char was not
                    found before EOF.
                  > Changed the error message for attempting to use the 
                    'value' of a void-typed expression.  For example, 
                    "a = func();" where func() was declared as void used to
                    report "bad type", now it's "void type not allowed".
                  > Added new command line option -G.  This causes the C
                    source code to be emitted into the .S file as comments.
                  > Did a couple tiny, tentative codegen tweaks.  It should
                    now emit moveq.l #0 instead of clr.l to clean a register
                    and a couple other equally dumb little things.
                    
 133    11/19/91  > Fixed main.c so that TOS is pre-defined again.  
                  > A new pre-define, __SOZOBONC__ exists now.  It contains
                    the version number of HCC, just like SOZOBON does.  But,
                    it's more ANSI-compliant.
                  > Fixed pre.c so that #include filenames will have
                    forward slashes translated to backslashes.  (IE, 
                    "sys/stat.h" becomes "sys\stat.h" internally.)
                  > Fixed a bug in string constant concatenation.  It now
                    expands macros before concatenating strings, so that
                        #define B_MACRO "B"
                        "A" B_MACRO "C" 
                    works now.

------------------------------------------------------------------------
Version notes for JAS...

  120   07/06/91  > Performance tweaks.  Added smallblk memory allocation
                    system to main.c; this alone gave about 20% speedup.
                    Other minor performance tweaks at this stage gave about
                    another 5%.
                    
  121   07/10/91  > Added full ANSI handling of escape sequences in string
                    literals (ie, \a, \v, \xNN, other new sequences).
                    This is to support changes in HCC that will cause it
                    to emit regular strings rather than sequences of bytes
                    expressed as hex constants (ie, dc.b "ab\0" instead of
                    dc.b $41,$42,$0).  We can chew through strings a LOT
                    faster than we can a list of numeric constants because
                    we can bypass full-blown expression parsing in strings.

 122    07/11/91  > Eliminated LEX.C, rolled it into SCAN.C, rewrote much
                    of SCAN.C (the tokenizer/lexical analyzer) for better
                    performance.
                    
 123    07/11/91  > Rewrote the tokenizer -- that is, all the bits that
                    didn't get rewritten in v122 got done this time.

 124    07/11/91  > Rewrote instruction lookup in OPS.C.  Opcodes table 
                    is now indexed (two different ways even!).

 125    07/15/91  > Tiny tweak to LEX.C so that a star in the first column
                    indicates the rest of the line is a comment.  Stars 
                    elsewhere will NOT delimit a comment.  This is mostly
                    to stay friendly with a large mass of dlibs source 
                    that uses stars in column 1, but semicolons elsewhere.
                  > Decreased the SMALLBLK memory allocation unit from 
                    28 bytes to 14.  This saves bunches of memory without
                    noticibly affecting performance.
                  > This version linked with new dlibs.a that has fixed
                    version of XARGS support.
                
------------------------------------------------------------------------
Version notes for TOP...

  123   03/01/90    Vast rewrite of peephole optimizations.  This included
                    adding new routines in other places (eg, op_copy()) to
                    support the new types of optimizations.  Also, tweaked
                    a lot of things for performance.
                    
  124   07/15/91    Worked over tokenizer in IO.C, mainly because I had to
                    add the ubiquitous check-for-abort-every-128-lines
                    logic to it anyway.  Also, this version linked with
                    new dlibs.a that has fixed XARGS code.
                    
  124a  11/20/91    Fixed a wee little bug in REG.C -- if variables were
                    registerized and a move(m) was added to the function,
                    the op->filler field wasn't being zeroed when the new
                    instruction was built.  This didn't show up for a long
                    time because the malloc'd memory for the instruction
                    was most often already zeroed.

------------------------------------------------------------------------
Version notes for LD...

 110  ??/??/??  Original Sozobon release.
 
 111  06/26/91  Added logic to search along all paths in LIB= for object
                and library files, after searching the current directory.
                This allows usage of any C runtime startup file in the
                LIB= paths, rather than being tied to dstart.o, which CC
                used to have to locate for LD.
                Made the error messages slightly more sensible, but there's
                still room for improvement.  
  
 112  07/14/91  Fixed glitch in error message that was jamming the module
                name up against the message text for the undefined symbol
                error message.  Also, linked with fixed XARGS support.
                
 113  08/25/91  Eeeek!  The sozobon.doc file said the -t option causes a 
                symbol table to be emitted into the exe file.  In the 
                program, the -n flag was recognized, not -t.  Even worse,
                a symbol table was being included by default, and it had
                to be supressed with -n.  Now we do it the other way:
                by default you get no symbol table, and the -t option will
                include it.  '-n' means nothing now.
                

------------------------------------------------------------------------
 Version notes for dlibs fixes...
 
  Note, right now I don't have a formal numbering system.  I just figure
 the first thing I did created v002, and so on.  I've started tracking 
 changes at v004.

 pre-v004       > Replaced ctype system (isspace, etc).
                > plugged in my assemblerized string functions. 

 v004 11/01/91  > Fixed getcwd() to allocate a buffer as documented.
                > Fixed strncat() -- it was totally broken.
                > Tweaked strchr() and strpos() for performance.
                
 v005 11/02/91  > Fixed bad variable name in ASSERT.H.
                > Fixed bad return type recasts in OSBIND.H for Bconin(),
                  Bconstat().  Also removed some unneeded casts to (long).
                > Fixed strncpy() to pad destination string, per ANSI.
                > Fixed clock() to return the number of ticks since the
                  program started instead of the number since the machine
                  was booted.  The since-booted value is now available
                  via a new function _GetHz200().
                > Changed Mshrink() macro in OSBIND.H to have just 2 parms.

 Changes planned for the near future...

 In general, expect things to move towards ANSI compliance.

 First and foremost will be implementation of the ANSI naming convention:
Names beginning with a leading underbar followed by a capital letter, and
names beggining with two underbars, are reserved for implementation of the
runtime system.  If you name things by either of these standards now, 
consider changing your standards!  (These names refer to how the symbol
is seen from the C-language name space.  From assembler, it would be items
starting with 2 underbars and a capital, or 3 underbars.)  These naming 
standards apply to macro names in #define statements as well.

 Don't count on the third parameter to main(), the envp parm, to remain
a char* type.  It may eventually become a char** type.  A pointer to the
environment data as a char* type will always be available in the global
variable _envp.

 I/O redirection will be handled by the arg-parsing routines (_initargs()).


