***********************************************************************
*                         IMPORTANT NOTICE!                           *
*                                                                     *
*  This is a MODIFIED version of the Sozobon C compiler!  The         *
*  Sozobon crew listed below deserves 99.97% of the credit for        *
*  this work, but please do not bother them about bugs found in       *
*  this version!  All comments, bug reports, and other                *
*  support-related communications for this version of the compiler    *
*  should be directed to Ian Lepore (BIX userid 'ianl').              *
*                                                                     *
*  The document that follows is the original Sozobon document,        *
*  reformated and modified slightly to correspond to my version.      *
***********************************************************************


The most recent additions to this document are marked with a vertical
bar in the left margin.  The second-oldest revisions have two bars, etc.

|  - v1.32 changes
|| - v1.31 changes


                           The Sozobon C Compiler

                          a freeware offering from

                              Sozobon, Limited


                                Tony Andrews
                                Johann Ruegg
                                  Joe Treat


                               User Reference

                                  10/22/88
                             (updated 06/21/91)







   1. Introduction


   The Sozobon C Compiler is a complete implementation of the C
   language as defined by Kernighan & Ritchie and prevailing practice.
   The package includes a compiler, optimizer, assembler, and linker,
   as well as several other associated utilities.  For runtime library
   support, version 1.2 of the public domain dLibs library is
   included.  For GEM programming support, version 1.5 of the public
   domain GemFast library is included.  Like the dLibs and GemFast
   packages, source code and executables for all components of the
   Sozobon compiler may be freely distributed.

   This document describes the various components of the system in
   detail.  Chapter 8 contains a convenient command reference for the
   various utilities included in the system.

   Dale Schumacher's documentation for the dLibs package is provided
   separately.  Documention for the GemFast libraries is also provided
   separately.

   1.1 System Overview


   1.1.1 History

   The Sozobon compiler was originally written as a replacement
   front-end for the buggy Alcyon compiler.  Johann had been working
   on the compiler for quite a while, and eventually got the rest of
   us interested in working on the other parts of the system.  I
   (Tony) started working on an optimizer, mainly because I hadn't
   written one before and it sounded like fun.  As the pieces started
   coming together, we discovered that there weren't any public domain
   assemblers that generated Alcyon-compatible objects.  Joe offered
   to write one, filling the last major hole in the project.  (And I
   (Ian) came in after the fact with the GemFast libraries and some
   performance tweaks, creating this modified version).

   1.1.2 Distribution

   The Sozobon C Compiler is distributed in both binary and source
   form.  The programs and code are copyrighted, but may be freely
   distributed.  The only restrictions are:

   1. No charge may be made other than reasonable charges for
      reproduction.

   2. Modified versions must be clearly marked as such.

   3. The authors are not responsible for any harmful consequences of
      using this software, even if they result from defects in it.

   You are encouraged to make copies for friends, upload it to
   bulletin boards, or distribute it via networks.  This is not a
   shareware product.  We wrote this compiler because it was fun, not
   because we expected to make any money from it.

   1.1.3 Obtaining the Source Code

   Note that source code for the modified version is not currently
   available online.  If anyone actually requests the source, it will
   be uploaded to BIX.

   If you received only a binary release of the compiler (or if your
   binary release is incomplete or outdated), the complete source
   distribution can be obtained by sending $10 to:

        Tony Andrews
        5902E Gunbarrel Ave.
        Boulder, CO 80301


   Be sure to include your return address, and specify single or
   double-sided floppies.  Checks should be payable to "Tony Andrews".
   Feel free to split the cost with as many people as you want.  We're
   interested in getting the compiler distributed and used, not in
   spending our spare time writing floppies.

   The complete release comes on two single-sided floppies or one
   double-sided floppy containing:

   * all executables

   * source code for the compiler

   * source code for the utilities

   * documentation

   * dLibs, version 1.2 (including source)

   Most of this will be in arc format to conserve space.  Since the
   compiler can compile itself, you will have everything you need to
   hack on any part of the package.

   1.1.4 Performance

   The compiler runs faster than Alcyon and generates code that is
   generally better than Alcyon's.  The Alcyon compiler is smarter
   about register allocation and usage, but the Sozobon optimizer
   makes up most of the difference.  Our assembler is better at
   generating short forms of the branch instructions, so that helps
   too.

   The code generation appears to be quite solid.  None of the
   problems that we found during beta testing involved the code
|| generation of the compiler, optimizer, or assembler.  (Nice try,
|| guys, but there's been codegen bugs in every version so far.  At
|| least one still remains, see 'known shortcomings', below.)

   1.2 Acknowledgements

   We'd like to thank our beta testers for their help in completing
   this project.  Ian Lepore, in Denver, was the first to dive in and
   start using the compiler, and made many helpful suggestions.  Dale
   Schumacher worked long hours to get a new release of dLibs ready
   and pointed out several problems.  And Steve Yelvington was the
   first to develop a GEM application using the Sozobon compiler.

   1.3 Support

|| Very little, actually, in this modified version.  If you have
|| access to BIX, please feel free to send email to 'ianl', or post a
|| message in the atari.st/c.language topic.  If you're on GENIE, you
|| should be able to find a few folks there who are also on BIX that
|| may be willing to route the communications to me.  I can generally
|| find a workaround of a bug for you very quickly, but don't expect a
|| flood of bugfix releases, this is a part-time project for me.


   2. Development Environment


   This section describes in more detail the operation of the compiler
   and the relationship between parts of the compiler and the
   corresponding pieces of the Alcyon compiler.

|| This version of the compiler and support tools, unlike prior
|| versions, is especially designed to work well in the GEM desktop
|| environment as well as any of the various CLI environments.  The
|| changes to accomplish this desktop-friendliness are largely in the
|| support tools added to the package rather than in the core of the
|| compiler itself.

   The compiler should be usable on machines with 512K and a single
   disk.  This document doesn't describe the optimal layout for
   various ST configurations, but you can probably figure out what
   makes the most sense for your machine.  This will probably involve
   a ram disk, and some arrangement of programs and libraries on one
   or more floppies.

   2.1 Environment Variables

   Several environment variables may be used to alter the operation of
   the compiler.  The variables are used to specify the location of
   executables, header files, libraries, temporary files, and file
|| buffer sizes (for performance).  Each path-related variable except
|| TMP= may reference a list of directories to be searched, with
|| elements of the list separated by commas or semicolons.  (The TMP
|| variable, if used, must contain a single pathname) The variables are:

    PATH=       executables
    INCLUDE=    header files
    LIB=        startup code and libraries
||  TMP=        temporary and intermediate files
    BUFSIZE=    size of I/O buffers

|| The path listed in the "TMP" variable is used to store intermediate
|| files during the process of compilation.  Setting this variable to a
|| ramdisk device name (eg, TMP=G:\) will significantly speed up the
|| compilation process.

   2.2 Machine Dependencies

   The supported data types and their sizes (in bytes) are:

           char            1
           short           2
           int             2
           long            4
           unsigned char   1
           unsigned short  2
           unsigned int    2
           unsigned long   4
           float           4
           double          4
           POINTER         4

   Floating point is supported using the "Fast Floating Point"
   representation documented by Motorola and implemented by the Alcyon
   compiler.  Both 'float' and 'double' types are supported, but are
   actually identical.  We'd like to support the IEEE format
   eventually, but this will have to do for now.

   Any of the basic data types may be declared as register variables.
   Pointers occupy the 'An' registers, all other types are placed in
   'Dn' registers.  Five data registers and three address registers
   are available for use by register variables.

   2.3 Compiler Limits

   Some limits imposed by the Sozobon compiler are:

||  * Input source code lines are limited to 1024 characters in length.
||    This includes lines that are spliced with a trailing '\' char.  When
||    splicing is used, the total length of the spliced lines is limited
||    to 1024 characters.

||  * String literals are limited to 1024 characters in length per a 
||    single literal.  However, HCC now supports ANSI-style concatenation
||    of adjacent string literals, and there is no limit to the total 
||    length of a string assembled by the concatenations. (ANSI-style
||    concatenation means that if a pair of strings is separated only by
||    whitespace, they are logically joined together as if they were a
||    single string literal.) 

    * Local variables are limited to a total of 32K of storage size per
      function.

    * The size of a single structure may not exceed 32K.

||  * Include files may be nested to any depth (former limit was 8).

    * The assembler will have problems with extremely large source
      files that produce more than 32K of code from a single file.
||    (I've never seen this happen. Ian.)

    * Identifiers internal to a file may be of any length.

    * Only the first 7 characters of external identifiers are
||    significant, and case is significant for all identifiers.  Note 
||    that if an identifier is NOT declared as static, then the 
||    assembler will require that it be unique in the first seven chars.
||    The compiler, however, will not complain, because it will see the
||    unique-ness in the characters beyond the seventh, and will consider
||    the identifier to be unique.  This is a limitation imposed by the
||    DRI object module format, and is not easily fixable.  Note that
||    this applies only to global variables and functions; items declared
||    as static, and local variables, do not suffer this limitation.

   2.4 Relationship to the Alcyon Compiler

   The components of the Sozobon compiler were developed by replacing
   pieces of the Alcyon compiler one by one.  For this reason, a
   certain level of compatibility with the Alcyon system was
   inevitable.  While the Alcyon system provided a convenient way to
   bootstrap a new compiler, our goal was not to be completely
   compatible with Alcyon.  Compatibility is more in the interfaces
   between pieces of the compiler than in their command line options.

|| There is less compatibility in the modified version of the compiler
|| than there was in the original.  In particular, the assembler likes
|| to see semicolons instead of stars used as a comment delimeter. 
|| (Stars in column 1 still delimit a comment, but semicolons are 
|| required to add comments to the end of a line of asm code.)
 
   The Sozobon compiler program replaces the pre-processor and the two
   compiler passes of the Alcyon system.  This speeds up compilation
   quite a bit.  The output of the compiler is suitable for input to
   other compatible assemblers such as Alcyon's assembler or the
|| Atari MadMac assembler.  (Don't use MadMac on programs which use
|| floating point variables or expressions!  MadMac will 'optimize'
|| certain forms of the PEA instruction incorrectly, causing errors in
|| the floating point values at runtime.  In general, I've had mixed
|| results using MadMac as a backend assembler with Sozobon, and I
|| don't recommend it.  Ian.)

   The optimizer is tuned in many ways to the output of the Sozobon
   compiler and could not (without some modifications) be used with
   the Alcyon compiler, or with hand-written assembly code.

   The Sozobon assembler was developed primarily to accept input from
   the Sozobon compiler (or optimizer) and doesn't support all the
   features of the Alcyon or MadMac assemblers.  It does generate
   compatible object files, though, and generates smaller code since
   it uses 'short' branch instructions wherever possible.

   The Sozobon loader (linker in non-unix terminology) accepts Alcyon-
   format object files and libraries.  The function of the 'relmod'
   program is incorporated into the loader, so a separate utility
   isn't needed.

   The other Sozobon utilities all operate on and generate
   Alcyon-compatible object files and libraries.


   3. Component Overviews


   The following sections describe in detail the passes of the
   compiler.

   3.1 Compiler

   The compiler is essentially compatible with the Alcyon compiler,
   but is stricter about type checking and will complain about things
   that Alcyon permits.  The compiler implements the full C language
   as described by K&R, with the usual extensions:

         * bit fields

         * enumerations

         * structure assignment

         * passing structure-by-value parameters

         * structure return values

         * embedded assembly (limited capability)
         
|        * several #pragma directives (described below) are accepted, 
|          and unrecognized pragmas do not cause errors now.

||       * ANSI-style concatenation of adjacent string literals.
         
||       * C++ comments are allowed (// delimits a comment).

||       * Full support for void* pointers as a generic pointer type
||         that does not generate a type mismatch warning.

   Most of the features listed above are self-explanatory.  Assembly
   code can be embedded within C using the following syntax:

           asm("assembly code");

   The string within quotes is passed directly to the output file.  It
   is preceded by a tab, and followed by a newline, so these don't
   need to be given in the string.  Extreme caution should be used
   when running the optimizer on C code that contains assembly
|| escapes.  (Note that because the internal handling of the asm()
|| psuedo-function automatically prepends a tab to the string you
|| specify, you cannot define labels in the asm() statements.  Ian.)

   The compiler has been tested with the "C Compiler Torture Test"
   from the Austin Code Works.  This tests for full K&R compatibility.
   The compiler has been used to compile itself as well as many other
   programs totaling around 50,000 lines of code.

   The compiler uses the "normal" 68000 C calling conventions;
   parameters are passed on the stack, with the last specified
   parameter stacked first.  Register A6 is used as a frame pointer,
   and function return values are placed in D0.  Registers D3-D7 and
   A3-A5 are used to hold register variables.

|| When interfacing C and assembler code, the assembler routines must
|| preserve registers D3-D7/A3-A6 if they are used in the assembler
|| routine.  Registers D0-D2/A0-A2 may be used without preserving
|| their contents.

|  The compiler now handles several types of #pragma statements.  As per
|  the ANSI spec, an unrecognized #pragma is ignored by the compiler.  The
|  word pragma must be lowercase, but the keyword(s) following it may be in
|  upper, lower, or mixed case.  The pragmas now supported are:
|  
|  #pragma echo
|   
|       This statement prints to stdout the characters between the end of
|       of the word 'echo' and the end of the line.  Thus the statement 
|           #pragma echo we made it to here!
|       would cause the line " we made it to here!" to be displayed at
|       compile time.  Note the leading space in the displayed line...
|       there's no way to prevent that.  This statement can be handy for 
|       debugging complex conditional sections, because it displays 
|       progress messages during the compilation process.
|       
|   #pragma idempotent [off]
|   
|       This pragma ensures that a file is only #include'd once.  I'm told
|       that idempotent is a mathematical term that a layman can consider
|       to mean "multiple use doesn't change the results".  While it is
|       typical to put a 'protective wrapper' around the contents of header
|       files using #ifndef/#endif sequences, the compiler still has to 
|       read through the header file, ignoring the contents of the file on
|       the second and subsequent inclusions.  This pragma corrects that
|       problem by short-circuiting the inclusion before the file is even
|       opened.  
|
|       It works like this... When this statement appears in a file, the
|       path and name of the file is added to a list of idempotent files.
|       When a later #include statement is seen that specifies a file on
|       the idempotent list, the file is not searched for or opened, 
|       processing just continues with the line following the #include.
|       When a file name is added to the idempotent list, it includes any
|       pathname info that was specified in the #include, or that was 
|       added by the compiler when searching for the file the first time.
|
|       Thus, if you code #include <osbind.h>, and the compiler found the
|       file as '\sozobon\include\osbind.h', then the name is added to the
|       list with the path info as shown here.  If you later code another
|       #include <osbind.h>, the file will not be re-read.  If, however, 
|       you code #include "osbind.h", and there is such a file in the 
|       current directory, it *would* be included, due to having different
|       path info.  In this latter case, if #pragma idempotent was in the
|       second osbind.h file, it would be added to the idempotent list as
|       'osbind.h' (ie, without any path info, the way it was found.)
|       
|       Confused yet?  Me too.  This is all a very experimental concept 
|       recommended by Phar Lap Software for C compilers in general, and
|       I thought I'd give it a try.  We may spend a release or two working
|       bugs out of the idea.  Feedback is welcomed.  For now, I'd 
|       recommend that you use BOTH idempotent and the usual #ifndef/#endif
|       methods for protecting from multiple inclusions.  That way, if the
|       idempotent system doesn't work the way it should, the multiple
|       inclusion will still be prevented by the usual method.  Also, this
|       will make your headers portable to other systems, since they will
|       see-and-ignore the idempotent pragma, but still use the wrapper.
|
|       When the optional 'off' keyword is added, all idempotent processing
|       is disabled for the duration of the run.  This basically provides
|       an escape mechanism if this system doesn't work for some reason.
|       By putting '#pragma idempotent off' in your program, or in a header
|       file, the compiler will from that point on stop trying to optimize
|       #include processing with the idempotent system.          
        
   3.2 Optimizer

   The Sozobon optimizer accepts assembly language input from the
   compiler and generates optimized assembly output.  The optimizer is
   tuned to the output of the compiler and should not be used with
   hand-written assembly code.  The optimizer performs several kinds
   of optimizations.  Command line options can be used to control
   which kinds of operations are performed on the source file.

   The most important function of the optimizer is branch
   optimization.  The compiler's code generation can be simplified
   somewhat if an optimizer is used to clean up redundant branches.
   Because branch optimization lays the foundation for everything else
   the optimizer does, this cannot be disabled on the command line.

   Another function of the optimizer will attempt to place
   frequently-used local variables into registers.  Extensive data
   analysis is first conducted to ensure that 'alias' problems do not
   occur.  The compiler (HCC) emits 'hints' as comments in its
   assembler output to help the optimizer perform the automatic
|| registerization.  Note that the registerization algorithm is based
|| upon the number of times a variable is referenced in a function,
|| and is blind to whether the variable appears in a loop.  For this
|| reason, it is still best to declare local variables as 'register'
|| types in the source code when you know the variable is heavily used
|| in a loop.  Also, the algorithm never assigns pointers to address
|| registers, so it is best to declare pointer vars as 'register'.

   The largest part of the optimizer performs peephole optimization,
   replacing specific instruction sequences with shorter or faster
   ones.  From one to three instructions at a time are re-written.
   The optimizer is able to ignore instructions that don't affect the
   validity of the optimization, so the instructions aren't
   necessarily adjacent.  This process is aided by the use of dataflow
   analysis, which determines which registers are "live" at each point
|| in a function.  This part of the optimizer is more bug-prone (not
|| really, it works pretty well these days.  Ian.), and can be
|| disabled without affecting branch optimization.  (Most of the
|| changes I did in this modified release consisted of adding several
|| dozen new peephole sequences to the optimizer.  The new peepholing
|| is especially good at shortening sequences commonly found in GEM
|| programming, such as access to an element in an array of structures
|| via pointer and index into the array.  Ian.)

   The optimizer appears to be quite solid, and its use is highly
   recommended.  The compiler depends pretty much on the optimizer to
   clean up useless branches, and this helps keep the compiler's code
   generation simple.
   
|| The optimizer, on the other hand, is by far the slowest of the 
|| compiler pieces, due to the computation-intensive nature of the 
|| dataflow analysis.  You might want to do a lot of your early edit-
|| compile-test cycles without the optimizer pass.
   

   3.3 Assembler

   The assembler was designed to support the compiler and optimizer.
   It's small (about half the size of the Alcyon assembler) and quite
   a bit faster.  If you want a "user-friendly" assembler, you're
   probably better off looking elsewhere, or hacking the features you
   want into our assembler yourself.  Besides being smaller and
   faster, the Sozobon assembler does a better job of optimizing
   branch instruction sizes.

|| The assembler in this modified version runs 50-100% faster than the
|| original Sozobon version, but as a tradeoff, several features were
|| punted.  Primary among these is that semicolons are now the only
|| legal comment delimeters.  (The assembler used to also accept stars
|| and C-style /**/ comment blocks that could span lines.  Not any more.)
|| It now processes full-ANSI escape sequences within string constants.
   
|| The assembler is case-sensitive for labels, reserved words, and 
|| instructions.  Reserved words (eg, '.data', 'd0', 'sp', etc) and
|| instruction opcodes MUST be in lowercase.  Labels may be in any case.

   3.4 Linker

   The linker accepts Alcyon-compatible object files and libraries.
   It incorporates the function of the Alcyon 'relmod' program, so a
   separate utility is not needed.  The linker can be instructed to
   make multiple passes over libraries if their contents are not
|| ordered by dependency.  (Note that the linker cannot perform
|| relocation fixup on 16-bit values, some other ST linkers can.)

   3.5 Utilities

   Besides the primary programs, there are several useful utilities
   provided.

    * The 'cc' program is used to run the passes of the compiler,
      avoiding the use of batch files.

    * The 'nm' program dumps the symbol table of object files,
|     libraries, and executables.  As of release 1.32, NM is included in
|     the distribution again.

    * The 'size' utility prints the size of text, data, and bss for
      objects, libraries, and executables.

    * The 'ar' program manages libraries of object modules.  As of release
|     1.32, AR is included in the distribution again.

    * The 'globs' program isn't very useful unless you have the Alcyon
      compiler.  It removes local symbols from object modules and
      libraries.  These aren't needed for linking and take up quite a
      bit of space.  If you have Alcyon libraries that you use
||    frequently, 'globs' can reduce their size by around 30%.  (Note
||    that globs is also useful if you use the MadMac assembler to
||    assemble your hand-written asm code, as it also has the nasty
||    habit of including local symbols in the output object file.)

||  * An enhanced version of a public-domain 'make' utility is
||    provided.  Documentation for it is in a separate file.

   3.6 Libraries

   The dLibs routines, written by Dale Schumacher provide runtime
   support for the Sozobon compiler.  We started our development using
   dLibs version 1.1, but worked closely with Dale as he prepared his
   1.2 release to insure full compatibility with our programs.  The
   new release is fully compatible with our compiler.  
   
|| The version of dlibs included with the modified Sozobon is not the
|| original dlibs v1.2.  It has several fixed routines, including the
|| XARGS support routines, lmemcpy and bzero functions, and my own
|| private string library functions (strcpy, etc) which are hand-coded
|| assembler routines, quite a bit faster than the original.

   3.6.1 Startup Code

   The dLibs C startup code (dstart.o) is used to link programs.  
|| Alternate startup files (apstart.o and minstart.o) are also available
|| in the modified version.  They are useful in creating GEM applications
|| and desk accessories.

   3.6.2 C Runtime Library

   The dLibs documentation is included in our release, since there are
   no changes for use with the Sozobon compiler.

   3.6.3 Floating Point Library

   Our floating point code is included as a separate library.  One
   traditional problem with C compilers and floating point is that as
   soon as you call printf(), you wind up linking in a bunch of
   floating point code whether you need it or not.  To avoid this
   problem the dLibs package and our floating point library actually
   contain (slightly) different versions of printf and scanf.  The
   versions in the normal library contain no support for floating
   point.  The versions in the floating point library do support
   floating point.

|| If your code uses printf() or scanf() with floating-point formats, 
|| you MUST link libm.a before dlibs.a to access those features.  If you
|| don't use floating point formats in printf() and scanf() calls (even
|| though you may use floating point in the program), linking libm
|| *after* dlibs will give a smaller program (because the non-fp printf
|| code will be picked up from dlibs before the linker sees the much
|| larger fp version in libm.)
 
   We make no claims regarding the accuracy or speed of the floating
   point code.  This code was thrown together to get something into
   this release, but still needs plenty of work.  Only the basic
   operations are supported.

   Those of you with the Alcyon compiler can use the fast floating
   point library (libf) in place of our routines.  Low level
   conversion routines between ASCII and floating point numbers are
   available in libf, or printf and scanf can be used by linking with
   the entire Alcyon runtime library.
  
|   As of release 1.32, the LIBM.A file included in the distribution is
|   David Brooks' FPLIB20 package.  This package includes trigonometric
|   and other advanced functions (such as sqrt(), pow(), etc).  The 
|   source code for FPLIB20, and some notes about it, is available at 
|   your favorite PD software outlet.

   3.6.4 GEM library

   Ian Lepore's GemFast libraries are included for support of GEM
   programming.  The libraries and header files for GemFast are
   documented separately.
  

   4. Known Shortcomings and Bugs

   4.1 Shortcomings

   The floating point code needs more work.  Unfortunately, this code
   isn't much fun to work on, and since none of us have much use for
   floating point, it probably won't receive much attention.  If
   anyone has access to a public domain floating point library (IEEE
   preferred), we'd be happy to look into it for a future release.

   More optimization work is needed and many error cases could be
|| handled better.  (Actually, I've tidied up most of that.)

   ANSI support would be nice.  (::sigh::  Wouldn't it, though?)

   4.2 Known bugs

|| A code generation bug sometimes causes problems with indexing into
|| arrays larger than 32k.  If the index variable (or expression) has
|| an integer type (and the array is any type other than array-of-char)
|| the code generator builds an instruction to multiply the index
|| value by the size of an array element.  Following the multiply
|| instruction, it generates an EXT.L instruction, which it should not
|| do.  If the result of the multiply was larger than 32767, the EXT.L
|| causes a loss of significant digits in the result, and the wrong
|| array element is thus indexed to.  Luckily, the optimizer will
|| remove the uneeded EXT.L instruction, effectively undoing the bug.
|| If the optimizer is not being used, a guaranteed workaround is to
|| use a long variable or expression as the index value (a recast to
|| long, ie, bigarray[(long)ix*2+4] works fine).

|| Non-integral auto-class variables cannot be initialized in the 
|| declaration statement.  That is, a local (inside a function, stack-
|| allocated) array, structure, string, array of structures, etc cannot
|| have an initialization specified.  So, you can code:
||      char a = 'x'; int x = 3; void *ptr = NULL;
|| But you cannot code (inside a function):
||      char a[20] = "string"; int x[] = {1,2,3}; struct s1 = {1};
|| If you attempt to do this, the program warns of an 'compiler bug   
|| (2 bombs)', and exits semi-gracefully.  (It used to just bomb.)

|| The JAS assembler will generate bad code for a PC-relative form of 
|| the PEA instruction (the offset is always zero).  I suspect this may
|| effect LEA instructions too, but I haven't tested for that yet.  Again,
|| this only hits hand-written code.

|| The JAS assembler doesn't handle instructions that access the SR and
|| CCR registers.  (It interprets SR and CCR to be symbols, not register
|| names).  Again, only hand-written code gets bitten by this one.

|  The old JAS bug involving the BTST instruction HAS BEEN FIXED! Yay!

   5. Next Release Plans

   Several items are high on the wish list for the next release.  These
|  items are now Ian's wish list, not Sozobon Ltd's.  They are roughly
|  in the order I figure I might get to them.
|
|  * Support for #elif.
|
|  * Full-ANSI preprocessor, including # and ## in macros, recursive macros.
|  
|  * ANSI-compatible libs and headers.
|
|  * Support for sizeof(int) being 16 or 32 bits, based on command line
|    switches and/or #pragma statements.
|
|  * Support of ANSI-style prototypes.
|
|  * Support of large and small memory models for better codegen.
|
|  * Better embedded assembly, including block-notation (asm {stuff}), 
|    and communication between the compiler and optimizer concerning 
|    embedded assembly statements.
|
|  * The assembly code produced by the compiler should refer to
|    parameters and locals symbolically.  This will make it easier to
|    use embedded assembly within C.  (It now generates numeric
|    offsets).

   6. Future Directions

   The compiler is quite usable and has already replaced Alcyon and
   Megamax as our standard development environment.  Over time, we
   plan to move toward ANSI conformance.  This is a very large task,
   impacting the runtime library as well as the compiler itself.

   Other possible projects:

   * Dale Shumacher has already done some work on a debugger, so with
     some more work, that would be a nice addition to a future release.

   * A port to the Amiga.

   * A version for the 8086.


   7. Summary


   We've had fun creating this compiler.  While we've been using this
   software for a long time ourselves, a lot of additional work went
   into making a release to the general public.  That effort will have
   been well-spent if it encourages more people like us to continue
   developing software for the ST or if it helps more people learn C
   who might not have otherwise.

   May the source be with you...

                          Tony Andrews
                          Johann Ruegg
                          Joe Treat


   8. Command References


   8.1 cc

      C Compiler driver program

   8.1.1 Synopsis


           cc [ options ] file [ file ... ]


   8.1.2 Description

   The cc command runs the passes of the compiler as needed to process
   files given on the command line.  Various options exist to control
   the execution of cc or the compiler passes it runs.

   CC recognizes file names with the following suffixes:

            .c     C source file
            .s     Assembly language input
            .o     Relocatable object module
            .lib   Library module
            .a     Library module

   Normally, cc tries to form an executable image using the files given
   on the command line.  C source files are compiled and assembled;
   assembly language files are passed to the assembler, and the
   resulting object modules are linked with any other object files or
   libraries given to form an executable program.  If not explicitly
   specified via -o, the name of the executable is based on the first
   file name seen on the command line.  If the first file name was
   "foobar.c", the executable would be named "foobar.prg".

   The following options to the cc command may be used to alter the
   default operation just described:  (Note these these switches ARE
   case-sensitive!)

           -c
                Supress  the link phase. Leave generated object modules
                around.

           -O
                Run  the  assembly  optimizer  between the compiler and
                assembler.

           -S
                Compile  C  source  files leaving the assembly language
                output in the corresponding ".s" file.

           -Ipath
                Include  'path'  in  the  list  of  directories  to  be
                searched for header files (e.g. "-I\usr\include").

           -Dname
           -Dname=value
                Define  the  pre-processor macro 'name'. If no value is
                given the macro is defined as 1.

           -Uname
                Un-define  one  of  the  built-in macros. For a list of
                the built-in macros, see the 'hcc' reference section.

           -o file
                Put the generated executable in the named file.

           -m
                Generate a load map during the link phase.

|          -t
|               Put a symbol table in the generated program.

|          -g 
|               Tell HCC to emit C source code as comment lines in generated
|               assembler source code file.  Really only useful if used
|               with -S and not -O, so that unmodified asm source is left
|               around for you to look at.

||         -v[1][2][3][4]
||              Show  the  passes  as  they are being executed, and the
||              version of 'cc'.  The optional numeric parameters will
||              cause cc to pass the -v flag to the compiler pieces as
||              they run.  The numbers 1,2,3,4 correspond to the compiler
||              pieces HCC, TOP, JAS, and LD, in that order.

           -n
                Like -v, but don't really execute anything.

||         -r file
||              Use the named file for the runtime startup code, instead
||              of the default dstart.o file.

||         -h
||              Hold the screen with a Hit any key... prompt before exit.
||              Also, running CC with only the -h option will present a
||              help screen reminding you of the available options.

|          -f   
|               Floating point support:  automatically include LIBM.A as
|               the first library on the linker command line, if the 
|               programmer hasn't specified LIBM.A specifically on the 
|               CC command line.


   8.1.3 Files

   CC assumes that header files, libraries, and executables can be
   found in the following locations:

                                   Primary location        Alternate
                   -------------------------------------------------
                   header files    \sozobon\include        \include
                   libraries       \sozobon\lib            \lib
                   executables     \sozobon\bin            \bin

|| The current directory is always searched first.  If the file is not
|| found there, the values in the environment variables are used.  If
|| there are no environment variables, the locations listed above are
|| checked, on the current drive.  If the file is still not found, the
|| locations in the primary list are checked on the boot drive.

   Environment variables can be used to override the default locations
   listed above.  The variables "INCLUDE", "LIB", and "PATH" may
   contain lists of paths separated by commas or semicolons.  The
   given paths will be searched, in order, instead of the primary and
   alternate paths shown above.

   8.2 hcc

   Hans' C compiler

   8.2.1 Synopsis


           hcc [ options ] file [ file ... ]


   8.2.2 Description

   The hcc command accepts C source files and generates assembly
   language output to the corresponding ".s" files.  The pre-processor
   and all phases of the compiler are included within this program.

   The following (case-sensitive) options are accepted by hcc:

           -Ipath
                Include  'path'  in  the  list  of  directories  to  be
                searched for header files (e.g. "-I\usr\include").

           -Dname
           -Dname=value
                Define  the  pre-processor macro 'name'. If no value is
                given the macro is defined as 1.

           -Uname
                Un-define one of the built-in macros.

           -V
                Display version information.

||         -Ofile
||              Generate assembly-language output to the named file.

|          -G
|               Emit C source codes lines (from main file only, not files
|               that are #include'd) into the asm source code file as 
|               comment lines.

           -P
                Instructs  the  compiler  to generate modified function
                entry  code that will count the number of calls to each
                function.   This  is  not  fully  implemented,  but  is
                provided  for  compatibility  with  a future release of
                the compiler.

|| Directories are searched in the followed order for #include files:
||    1. The current directory (for #include "somename").
||    2. The directories named in any -I arguments.
||    3. The directories listed in the INCLUDE= env var.
||    4. The default directories listed in 8.1.3.
||    5. The current directory (for #include <somename>).

|| Note the different handling of search sequence depending on the
|| type of #include statement.  System header files (ie, stdio.h) 
|| should be coded as #include <stdio.h>, which will find the file
|| faster by not searching the current directory.  (The current dir
|| is actually searched, as the very last place to look, for a <> type
|| include name.  This is a feature I cajoled Tony into adding back in 
|| the v1.0 days, to duplicate an Alcyon bug I counted on.  I now
|| regret it, but maintain it for compatibility reasons.  Ian).
    
|| If a BUFSIZE environment variable is defined, and contains a
|| numeric value, that value will be the size (in bytes) of the I/O
|| buffers used by HCC (and other compiler pieces).  It is recommended
|| that this value be set between 4096 and 32512 for performance.  If
|| you are short on memory, smaller values may be used.  Do not use
|| values larger than 32512.  The value choosen should be a multiple
|| of 512.

   Several macros are normally pre-defined.  These are:  MC68000,
   mc68000, SOZOBON, ATARI_ST, and (as applicable) TOS or MINIX.
|| The value of the SOZOBON macro will be the version number of HCC,
|| encoded as 0xVVRR, where VV is the major version, and RR is the 
|| release.  In this release, for example, the value of the macro is
|| 0x0131 (or 305 in decimal notation).  This can be useful for 
|| conditional sections, such as:
||   #if SOZOBON >= 0x0130
||      // code that uses some new feature
||   #else
||      // some alternative code
||   #endif
     

   8.3 top

   Tony's optimizer.

   8.3.1 Synopsis


           top [ -vpbfd ] infile [ outfile ]


   8.3.2 Description

   Top is an assembly-code optimizer designed for use with hcc.  It
   accepts as input, the code generated by hcc and generates an
   optimized form of the assembly as output.

   If 'outfile' is given, the optimized code is written to the named
   file.  If no output file is listed, the optimized code replaces the
   original code in the input file.  Using the name "-" for the output
   file causes the output to be sent directly to the screen.

   The optimizer is normally run by the cc command, but accepts the
   following options when run manually:

           -v
                Display  statistics  about  optimizations  made  on the
                file, and the version information for 'top'.

           -p
                Disable peephole optimizations.

           -b
                Disable conditional branch reversals.

           -f
                Disable    data-flow   analysis   (live-dead   register
                analysis) and any optimizations depending on it.

           -d
                Print detailed debugging information to stderr.

   The optimizer performs branch optimization as a minimum.  The
   options above can be used to disable everything else.  The
   optimizer will sometimes reverse the sense of a conditional branch
   to produce shorter code; this is disabled by the -b options.

   Data-flow analysis determines which machine registers contain
   useful data at any point in the code.  This is used by other parts
   of the optimizer, but is also a likely source of bugs.  It can be
   disabled with -f.

   Peephole optimizations are performed by looking at from one to
   three instructions at a time to see if a better sequence can be
   used.  Optimizations of this kind are disabled with -p.

   If a bug is found in the optimizer, the options -bfp can be used
   together to eliminate more advanced features while still gaining
   the benefit of the more reliable (and quite useful) branch
   optimizer.

|| The BUFSIZE environment variable, discussed under HCC above, is
|| also used by TOP to set I/O buffer sizes for performance.

   8.4 jas

      Joe's assembler.

   8.4.1 Synopsis


           jas [ -NVlu ] [ -s dir ] [ -Ln ] [ -o file ] file


   8.4.2 Description

   The jas assembler is designed for compatibility with the Alcyon
   assembler.  It doesn't provide many features the assembly language
   programmer might want, but is intended more for use by a compiler
   front-end.  Jas generally produces smaller code than the Alcyon
   assembler because it is smarter about generating short branch
   instructions.  Also, jas uses no temporary files and runs quite a
   bit faster than Alcyon.

|| The assembler syntax is pretty much Motorola-standard, with the 
|| following extensions and/or limitations:
||  - Input lines are limited to 256 chars per line.
||  - Only a semicolon is recognized as a comment delimiter.
||  - All ANSI-C escape sequences in string constants are handled.
||  - A colon is always required following a label.
||  - All reserved words and instructions must be lowercase.
||  - A label may start with a dot (like madmac) but that doesn't 
||    provide madmac's scoping rules for local symbols.  
||  - Symbols cannot be redefined even if they're defined with '='.

   Some of the command line options are accepted for compatibility
   with the Alcyon assembler, but are actually ignored.  The following
   command line options are supported:

           -N
                Don't generate 'short' branch instructions.

           -V
                Print a version message.

           -l
           -u
           -s dir
                Ignored.

           -Ln
                By  default,  no local symbols are placed in the symbol
                table  of  the output. This option instructs jas to put
                all  symbols  into  the  symbol  table  if  n  is  2 or
                greater.  If  the  option '-L1' is given, symbols whose
                name  doesn't  start with 'L' are written to the symbol
                table.

           -o file
                Be  default,  the  assembler  replaces  the  '.s'  file
                extension  of the input file with '.o' to form the name
                of  the  output.   This option can be used to write the
                output to any file.

|| The BUFSIZE environment variable, discussed under HCC above, is
|| also used by JAS to set I/O buffer sizes for performance.

   8.5 ld

      Loader

|  PLEASE NOTE:  there is an important change in the behavior of LD v1.13,
|  starting with sozobon release 1.32.  LD used to always put a symbol
|  table into the executable file, making programs bigger than they needed
|  to be.  THE DEFAULT IS NOW NO SYMBOL TABLE unless requested via the -t
|  option.  Also, the docs used to state that -t would output the symbol
|  table, but in fact it was ignored, and a -n switch existed to supress
|  the symbol table.  The options below are now correct: -t gives a 
|  symbol table, otherwise you don't get one. The -n is option is invalid.
|  A symbol table in the exe is useful only in conjunction with a symbolic
|  debugger that can read DRI-style symbol tables in programs.

   8.5.1 Synopsis


|          ld [ -mvtbp ] [ -f file ] [ -o output ] [ -u symbol ] ... file ...


   8.5.2 Description

   The ld command links object modules and libraries to form an
   executable program.  Both object modules and libraries may be
   passed to ld for linking.  Several options may be specified to
   alter the operation of the loader:

           -m
                Generate a load map

|          -t
|               Put a symbol table in the output file.

           -p
                Make  multiple  passes  over each library until no more
                references  can  be satisfied. If libraries are ordered
                appropriately,  this  option  is not needed and linking
                will be faster.  If you get unresolved reference
                errors at the end of a run, this option may correct it.

           -b
                This  option can be used when linking large programs to
                reduce  the  amount  of  memory used by the loader. The
                loader  makes  more  disk  accesses when this option is
                used.

           -f file
                This  option  is  useful  when  many  files  are  to be
                linked.  The loader reads the file name specified for a
                list  of  object  modules  and  libraries to be linked.
                Names  in  the  file should be separated by white space
                or newlines.

           -o file
                By  default, the name of the executable file created is
                based  on  the  first  file  name  given on the command
                line.  An  initial file name of "foobar.o" would result
                in  a program named "foobar.ttp".  This option allows a
                different name to be specified.

           -u symbol
                The  given  symbol  is marked as undefined. This can be
                useful  when  linking  from  libraries.  A symbol (e.g.
                _main)  can  be  marked  as  undefined to force loading
                from the library.

           -v
                Tells  the  loader to be verbose about what it's doing,
                and print version information.  May be specified twice
                for addition detail of what's happening during the run.

   8.6 size

      Prints program sizes

   8.6.1 Synopsis


           size [ -oxV ] file ...


   8.6.2 Description

   The size command examines object modules or libraries and prints
   information about their size.  By default, for each module (or
   member of a library), the size of the text, data, and bss sections
   are printed in decimal.  The 'o' and 'x' options can be used to
   print the sizes in octal or hexadecimal respectively.  If the 'V'
   option is given, the version number of 'size' is printed.

   8.7 nm

   Prints symbol tables

   8.7.1 Synopsis


        nm [-g][-h] file [file... ]


   8.7.2 Description

   The nm command dumps the symbol table of all object files,
   libraries or executables given on the command line.  If the 'g'
   option is given, only information about global symbols is printed.

   As usual, the 'h' option will hold the screen with a Hit Any Key...

   8.8 ar

    Archive management program

   8.8.1 Synopsis


           ar -{drqtpmx}[vch] libfile [ file ... ]


   8.8.2 Description

   The ar command is used to maintain object module libraries.  It can
   perform one of seven basic operations as selected by a command
   character.  The operation of the selected command can be modified
   by other option characters that may follow it.

   The name of the archive to be manipulated follows the option
   characters.  Some commands also require (or allow) the names of
   files in the archive to follow the archive name on the command
|  line.  Wildcards are not allowed for the archive name.  They are 
|  allowed in the list of filenames, for the 't', 'x', and 'd' options,
|  but NOT for the 'r', or 'q' options.  (I haven't nailed all this 
|  wildcard stuff down, but I know Bad Things happen with a command 
|  like "AR r mylib *.o". - Ian)
   
   The following commands are supported:

           d
                Delete the named files from the archive.

           r
                Replace  the  named files in the archive. New files are
                placed at the end of the archive.

           q
                Quickly  append  the  named  files  to  the  end of the
||              archive.  (Note that incorrect use of this option can
||              cause duplicated modules within a library.)

           t
                Print  the  contents  of the archive. If file names are
                given, only show those files.

           p
                Print the named files to the standard output.

           m
                Move the named files to the end of the archive.

           x
                Extract  the named files from the archive, or all files
                if none were listed on the command line.

      The  following  characters  modify  the operation of the commands
      described above.

           v    Generally show more information about what ar is doing.
                In a table of contents, show information about the size,
                mode, etc.  (It is highly recommended that you add this
                option to all commands!)

           c
                Suppress  the  message  normally  printed  when  a  new
                archive is created.

||         h
||              Holds the screen with a Hit any key...prompt before exit.


   8.9 globs

   Remove non-global symbols

   8.9.1 Synopsis


   globs file ...


   8.9.2 Description

   The named files (object modules or libraries) are compressed by
   removing non-essential symbols from their symbol table.  Since the
   Sozobon assembler does this by default, this program it mostly
   useful to users with old Alcyon libraries, and users of MadMac.

   9.0 Versions
    
   Version notes have been moved into the separate file VERSIONS.DOC.
   
*********************************************************************
* end of document for MODIFIED Sozobon.
*********************************************************************
