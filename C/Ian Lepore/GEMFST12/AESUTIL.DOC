
**************************************************************************
*
* AESUTIL.DOC - Descriptions of the utility functions in AESFAST.
*
**************************************************************************

This document describes the functions in the AESUTxxx modules of the
GEMFAST bindings.  These are not GEM function calls, and thus are not
documented in standard GEM programming guides.

Definitions:

GRECT     - A graphics-type rectangle of the form x,y,w,h.  A GRECT
            describes a screen area by defining the x/y of the upper left
            corner, and the width and height of the area.

VRECT     - A vdi-type rectangle of the form x1,y1,x2,y2.  A VRECT
            describes a screen area by defining the upper left and lower
            right corners of the area in x/y coordinates.

xRECT     - Used to indicate that either of the above types is accepted.

Functions:

void rc_copy (xRECT *source, xRECT *dest)

        This function copies a rectangle.  It will copy either a GRECT or
        VRECT type rectangle.  More generally, it will copy 2 longwords
        from source to dest, they don't have to be rectangles at all.
         >> NOTE BACKWARDS ORDER OF SOURCE & DEST.  Sorry, not my decision.
     
bool rc_equal(xRECT *rect1, xRECT *rect2)
        
        This function tests 2 rectangles for equality and returns TRUE/FALSE
        (1/0) accordingly.  Works on GRECT or VRECT type rectangles.
     
bool rc_intersect(GRECT *rect1, GRECT *rect2)

        This function computes the intersection of 2 rectangles.  It works
        only for GRECT type rectangles.  The intersection is the parts of 
        two rectangles which overlap each other; this function is typically
        used in processing the AES window-update rectangle list.  The result
        is placed into 'rect2', overlaying the original data (again, not my
        decision).  TRUE/FALSE is returned, depending on whether the 
        rectangles had a common intersected area or not; the values in 
        'rect2' are modified regardless of whether there was an intersection or not.

void rc_union(GRECT *rect1, GRECT *rect2)

        This function computes the union of two rectangles.  The union is 
        the single rectangle that encompases all the area defined by the 
        individual rectangles.  It works only for GRECT type rectangles.  
        The result is placed into 'rect2'.
     
void rc_vtog(VRECT *rect1, GRECT *rect2)

        This function converts a VRECT rectangle to a GRECT rectangle.
        Do not specify the same rectangle for input and output.
        
void rc_gtov(GRECT *rect1, VRECT *rect2)

        This function converts a GRECT rectangle to a VRECT rectangle.
        Do not specify the same rectangle for input and output.
        
void objc_xywh(OBJECT *tree, int object, GRECT *rect);
        
        Returns an object's x/y/w/h values into a GRECT rectangle.  Note
        that the x/y values are NOT adjust to screen coordinates, they are
        copied directly from the object tree structure.

void objcl_calc(OBJECT *tree, int object, {GRECT *r1|NULL}, {VRECT *r2|NULL});

        This routine does clipping calculations for an object. It calculates
        both GRECT and VRECT clipping rectangle simulataneously; if you
        specify a null pointer for one of the rectangle types those values
        won't be returned.  This function will handle OUTLINED and SHADOWED
        objects, and will return the proper clipping rectangle to be passed
        to objc_draw() or vs_clip().  Typical usage might be:
         To redraw an object after changing ob_state or ob_flags...
            objcl_calc(mytree, refreshobj, &cliprect, 0L);
            objc_draw(mytree, refreshobj, MAX_DEPTH, cliprect);
         To outline an object with a VDI rounded rectangle...  
            objcl_calc(mytree, refreshobj, 0L, &boxrect);
            v_rbox(vdi_handle, &boxrect);
            
void objclv_adjust(VRECT *rect, int h_adjust, int v_adjust);
void objclg_adjust(GRECT *rect, int h_adjust, int v_adjust);

        This function expands or contracts a clipping rectangle by a 
        given amount in each axis.  One works for GRECT the other for VRECT
        rectangles.  A positive value expands the clipping area, a negative
        value contracts it.  In the above example of outlining an object
        with a VDI rectangle, the VDI graphics will obscure part of the
        object.  That can be avoided by coding as follows:
            objcl_calc(mytree, refreshobj, 0L, &boxrect);
            objclv_adjust(&boxrect, 3, 2);
            v_rbox(vdi_handle, &boxrect);

void objst_change(OBJECT *tree, int object, int statemask, int updateflag);

        This function sets or resets bits in an object's ob_state field.
        Depending on the setting of 'updateflag' the object is updated 
        on the screen or not. (Update is done via objc_draw internally).
        If the high bit of 'statemask' is set, the state bits are reset,
        otherwise they are set.  This allows the following syntax:
           objst_change(mytree, myobj,  SELECTED, TRUE);
           objst_change(mytree, myobj, ~SELECTED, FALSE);
        The first case will set 'myobj' to SELECTED and show it that way
        on the screen.  The second case will set 'myobj' to non-selected,
        and will not update the screen.

void objfl_change(OBJECT *tree, int object, int flagsmask, int updateflag);

        This function sets or resets bits in an object's ob_flags field.
        Depending on the setting of 'updateflag' the object is updated 
        on the screen or not. (Update is done via objc_draw internally).
        If the high bit of 'flagsmask' is set, the flags bits are reset,
        otherwise they are set.  This allows the following syntax:
           objfl_change(mytree, myobj,  HIDETREE, TRUE);
           objfl_change(mytree, myobj, ~HIDETREE, FALSE);
        The first case will set 'myobj' to hidden and will erase it from
        the screen.  The second case will set 'myobj' to visible, but does
        not update the screen.
        Note that you CAN use this function to hide and unhide trees
        visibly on the screen.  When the objc_draw is called internally
        by this function, the draw starts at the root of the tree, but is
        clipped by the x/y/w/h of the object who's state is being changed.
        This means that a flag change to HIDETREE with update will draw
        the parents of the hidden object, effectively erasing it on the
        screen.  The same holds true for setting an object to ~HIDETREE;
        the object will be redrawn and become visible.
        
int  objrb_which(OBJECT *tree, int parentobj);

        This function returns the index of the first child object of the
        specified parent which has the SELECTED bit set, or -1 if no child
        objects are selected.  It is most useful in determining which 
        radio button in a group has been selected.

int  obj_parent(OBJECT *tree, int curentobj);

        This function returns the index of the parent object of the
        specified object.  By definition, the root object in a tree has
        no parent, 0 will be returned (as if the root were its own parent).
        This function is useful for things like building your own radio
        button handler using evnt_multi().

void rsc_sstrings(OBJECT *tree, 
                    int obj1, char *ptr1,
                    [obj2,ptr2, ... objn,ptrn,]
                    -1);
                 
        This function sets one or more string pointers within an object
        tree.  It understands the difference between STRING, BUTTON, and
        TEXT object types, and sets the appropriate pointer fields (ob_spec
        or te_ptext).  Any number of object/pointer pairs may be specified,
        the list is terminated by a negative object number.  The purpose
        of this function is to replace all the lines of code looking like...
            *((TEDINFO *)(tree[object].ob_spec))->te_ptext = pointer;
        with the simpler construct...
            rsc_strings(tree, str1obj,pstr1, 
                              txt1obj,ptxt1, 
                              /* etc */ 
                              -1);

void rsc_gstrings(OBJECT *tree, 
                    int obj1,char **ptr1,
                    [obj2,ptr2, ... objn,ptrn,]
                    -1);
                 
        This function gets one or more string pointers from within an object
        tree.  It understands the difference between TEXT/nonTEXT object
        types, and gets the appropriate fields (ob_spec or te_ptext). 
        Any number of object/pointer pairs may be specified, the list is
        terminated by a negative object number.  This is a provided as a 
        shortcut to doing a long series of rsrc_gaddr() calls to get the
        string/text pointers from a tree.  Note that this function is not
        as flexible as rsrc_gaddr()...if the object type is one of the
        text objects, it will return a te_ptext pointer, otherwise the
        ob_spec value is returned.  When used with strings, the ob_spec
        field will be a string pointer.
          example() {
          char *string1;
          char *text2;
                    
          rsrc_gaddr(R_TREE, MYTREE, &mytree);
          rsc_gstrings(mytree, MYSTR1,&string1,
                               MYTXT2,&text2,
                               -1);
          }
          
void rsc_treefix(OBJECT *tree);
        
        This function performs an rsrc_obfix() call for all objects in
        a tree.  It's handy when using resource trees imbedded as source
        code within your program, which require manual x/y fixup.  
        NOTE:  This functions uses the LASTOB bit in ob_flags to determine
        when it has hit the end of the tree.  When coding your resource
        tree, please be careful to set the LASTOB bit in the last object 
        in the array.  Note that this is NOT a routine to provide a full
        fixup of .RSH-type code emmitted by a resource construction editor;
        this routine does only x/y/w/h fixup on a single tree, and does 
        not resolve cross-structure pointers.

void graqon_mouse();
void graqof_mouse();

        These routines turn the mouse pointer on and off quickly (using
        the Line-A HideMouse/ShowMouse routines).  They will execute much
        faster than the equivelant graf_mouse() calls.

graq_mstate(int *mousex, int *mousey, int *mousebtns);

        This routine returns the mouse x/y location and button state
        quickly, using the Line-A variable structure as the source of 
        information.  It is much faster than the graf_mkstate() call, and
        it does not return the keyboard state information.  If you have
        an application full of graf_mkstate() calls that don't use the
        keystate info, you can code 
          #define graf_mkstate(a,b,c,d) graq_mstate((a),(b),(c))
        at the top of your program and instantly convert to the faster
        routine.  (Caveat:  This routine is NOT well-tested in v1.0).

-------------------------------------------------------------------------
- End of doc.
-------------------------------------------------------------------------
