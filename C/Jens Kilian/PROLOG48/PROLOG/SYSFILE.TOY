 :- graf_mouse(255).
 :- op(700, xfx, '=').
 :- op(700, xfx, 'is').
 :- op(1200, xfx, '-->').
 :- op(700, xfx, '<').
 :- op(700, xfx, '=<').
 :- op(700, xfx, '>').
 :- op(700, xfx, '>=').
 :- op(700, xfx, '=:=').
 :- op(700, xfx, '=\=').
 :- op(700, xfx, '@<').
 :- op(700, xfx, '@=<').
 :- op(700, xfx, '@>').
 :- op(700, xfx, '@>=').
 :- op(700, xfx, '=..').
 :- op(700, xfx, '==').
 :- op(700, xfx, '\==').
 :- ordchr(13, EoLn) , assert(iseoln(EoLn), true, 0) , assert(nl, wch(EoLn), 0).
 :- ordchr(27, Esc) , assert(escape, wch(Esc), 0) , assert(cls, (wch(Esc) , wch('E')), 0).
 :- ordchr(7, Bell) , assert(bell, wch(Bell), 0).
 :- set_fstring(0, ':-cls.\M').
 :- set_fstring(1, ':-listing(').
 :- set_fstring(2, 'assert(').
 :- set_fstring(3, 'retract(').
 :- set_fstring(28, '[- editor].\M').
 :- set_fstring(29, '[- calltree].\M').
 :- set_fstring(40, ':-status.\M').
 :- v_opnvwk(phys_handle, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2], vdi_handle).

 :- rsrc_load('toy.rsc') , rsrc_handle(0, 0, toytree) , form_center(toytree, Rect) , objc_draw(toytree, 0, 8, Rect) , forget_handle(toytree) , rsrc_free.

error(Err) :- functor(Err, Fun, Ar) , predefined(Fun, Ar) , ! , telling(Stream) , tell(user) , nl , display(' +++ System call error : ') , writeq(Err) , nl , bell , tell(Stream) , ! , fail.
error(Err) :- telling(Stream) , tell(user) , nl , display(' +++ ERROR : ') , writeq(Err) , nl , bell , tell(Stream) , ! , fail.
X = X.
X , Y :- X , Y.
X ; _ :- X.
_ ; X :- X.
 not X :- X , ! , fail.
 not _.
check(X) :-  not  not X.
side_effects(X) :-  not  not X.
once(X) :- X , !.
try(X) :- once(X).
try(_).
X @=< Y :- Y @< X , ! , fail.
_ @=< _.
X @> Y :- Y @< X.
X @>= Y :- Y @=< X.
rdchsk(Chr) :- rch , skipbl , lastch(Chr).
rdch(Chr) :- rch , lastch(RawChr) , sch(RawChr, Chr).
sch(Chr, Chr) :- ' ' @< Chr , !.
sch(Chr, ' ').
txt_mode :- v_hide_c(vdi_handle) , v_enter_cur(vdi_handle).
grf_mode :- v_exit_cur(vdi_handle) , v_show_c(vdi_handle, 1).
subdirs(S) :- disk_search(*.*, 16, Nm, At) , ! , subdirs(Nm, At, S).
subdirs([]).
subdirs(., 16, S) :- ! , subdirs1(S).
subdirs(.., 16, S) :- ! , subdirs1(S).
subdirs(Nm, At, [Nm | S]) :- 16 is At and 16 , ! , subdirs1(S).
subdirs(_, _, S) :- subdirs1(S).
subdirs1(S) :- disk_search(Nm, At) , ! , subdirs(Nm, At, S).
subdirs1([]).
find(File, Dir) :- disk_dir(CDir) , find(CDir, File, Dir) , disk_dir(CDir).
find(Dir, File, Dir) :- disk_dir(Dir) , see(File) , seen , !.
find(InDir, File, OutDir) :- subdirs(SubDirs) , find(InDir, SubDirs, File, OutDir).
find(TheDir, _, _) :- disk_dir(TheDir) , fail.
find(_, [], _, _) :- ! , fail.
find(InDir, [SubDir | _], File, OutDir) :- once(dir_concat(InDir, SubDir, ThisDir)) , find(ThisDir, File, OutDir).
find(InDir, [_ | SubDirs], File, OutDir) :- find(InDir, SubDirs, File, OutDir).
dir_concat(Dir, SubDir, NewDir) :- pname(Dir, DirN) , pname(SubDir, SubN) , append(DirN, SubN, Name1) , append(Name1, [\], Name) , pname(NewDir, Name).
open(File) :- find(File, Dir) , disk_dir(Dir) , see(File).
repeat.
repeat :- repeat.
member(Head, [Head | Tail]).
member(Head, [_ | Tail]) :- member(Head, Tail).
append([], L, L).
append([H | T], L, [H | TL]) :- append(T, L, TL).
proc(Head) :- '$procinit' , '$pr'(Head).
'$pr'(Head) :- '$proclimit' , ! , fail.
'$pr'(Head) :- '$proc'(Head).
'$pr'(Head) :- '$pr'(Head).
bagof(Item, Cond, _) :- assert('BAG'(' BAG'), true, 0) , Cond , assert('BAG'(Item), true, 0) , fail.
bagof(_, _, Bag) :- 'BAG'(Item) , ! , intobag(Item, [], Bag).
intobag(' BAG', Bag, Bag) :- ! , retract('BAG', 1, 1).
intobag(Item, This_Bag, Final_Bag) :- retract('BAG', 1, 1) , 'BAG'(Next) , ! , intobag(Next, [Item | This_Bag], Final_Bag).
ear :- nl , display('--- TOY Prolog ST Version 4.8      (c) Copyright 1987 JJK ---') , nl , nl , tag(loop).
ear :- grf_mode , v_clsvwk(vdi_handle) , halt('TOY Prolog --- end of session.').
loop :- repeat , display(?-) , read(Term, Sym_tab) , exec(Term, Sym_tab) , fail.
stop :- tagfail(loop).
exec('e r r', _) :- !.
exec(( :- Goal), _) :- ! , once(Goal).
exec(N, _) :- integer(N) , ! , num_clause.
exec((Head :- Body), _) :- ! , assimilate((Head :- Body)) , display(ok) , nl.
exec((Left --> Right), _) :- ! , assimilate((Left --> Right)) , display(ok) , nl.
exec([H | T], _) :- ! , consultall([H | T]).
exec(Goals, Sym_tab) :- Goals , printvars(Sym_tab) , enough(Sym_tab) , !.
exec(_, _) :- display(no) , nl.
enough([]) :- !.
enough(_) :- rch , skipbl , lastch(Ch) , rch ,  not Ch = ';'.
printvars([]) :- display(yes) , nl , !.
printvars(Sym_tab) :- prvars(Sym_tab).
prvars([]) :- !.
prvars([Instance - Name | Sym_tab_tail]) :- nl , display(Name) , display(' = ') , writeq(Instance) , wch(' ') , prvars(Sym_tab_tail).
num_clause :- display('A number can''t be a clause.') , nl.
consultall([]) :- !.
consultall([ - Name | OtherNames]) :- ! , reconsult(Name) , consultall(OtherNames).
consultall([Name | OtherNames]) :- ! , consult(Name) , consultall(OtherNames).
consult(File) :- seeing(OldF) , readprog(File) , see(OldF).
reconsult(File) :- redefine , seeing(OldF) , readprog(File) , see(OldF) , redefine.
readprog(user) :- ! , getprog.
readprog(File) :- disk_dir(CDir) , open(File) , ! , getprog , seen , disk_dir(CDir).
readprog(NoFile) :- display(' +++ File not found : ') , display(NoFile) , nl.
getprog :- side_effects((read(T) , try(assimilate(T)))) , ! , getprog.
getprog.
assimilate('e r r') :- !.
assimilate((Left --> Right)) :- ! , tag(transl_rule(Left, Right, Clause)) , assertz(Clause).
assimilate(( :- Goal)) :- ! , once(Goal).
assimilate(N) :- integer(N) , ! , num_clause.
assimilate(Clause) :- assertz(Clause).
save(Predicates, File) :- telling(OldF) , tell(File) , save_header(File) , listing(Predicates) , told , tell(OldF).
save_header(File) :- display('%  From TOY Prolog ST, Version 4.8') , nl , date(Day, Month, Year) , time(Hour, Minute, Second) , display('%  File "') , display(File) , display('", created ') , stamp(Day, Month, Year, .) , display(', ') , stamp(Hour, Minute, Second, :) , nl , nl.
stamp(X1, X2, X3, C) :- display(X1) , wch(C) , display(X2) , wch(C) , display(X3).
transl_rule(Left, Right, Clause) :- two_ok(Left, Right) , isolate_lhs_t(Left, Nont, Lhs_t) , connect(Lhs_t, Outpar, Finalvar) , expand(Nont, Initvar, Outpar, Head) , makebody(Right, Initvar, Finalvar, Body, Alt_flag) , do_clause(Body, Head, Clause).
do_clause(true, Head, Head) :- !.
do_clause(Body, Head, (Head :- Body)).
isolate_lhs_t((Nont , Lhs_t), Nont, Lhs_t) :- (nonvarint(Nont) ; rulerror(varint)) , (isclosedlist(Lhs_t) ; rulerror(ter)) , !.
isolate_lhs_t(Nont, Nont, []).
connect([], Nextvar, Nextvar).
connect([Tsym | Tsyms], [Tsym | Outpar], Nextvar) :- connect(Tsyms, Outpar, Nextvar).
makebody((Alt ; Alts), Initvar, Finalvar, (' dummy'(Initvar, Nextvar) , Alt_b ; Alt_bs), _) :- ! , two_ok(Alt, Alts) , makeright(Alt, Nextvar, Finalvar, Alt_b) , makebody(Alts, Initvar, Finalvar, Alt_bs, alt).
makebody(Right, Initvar, Finalvar, Body, Alt_flag) :- var(Alt_flag) , ! , makeright(Right, Initvar, Finalvar, Body).
makebody(Right, Initvar, Finalvar, (' dummy'(Initvar, Nextvar) , Body), alt) :- makeright(Right, Nextvar, Finalvar, Body).
makeright((Item , Items), Thispar, Finalvar, T_item_items) :- ! , two_ok(Item, Items) , transl_item(Item, Thispar, Nextvar, T_item) , makeright(Items, Nextvar, Finalvar, T_items) , combine(T_item, T_items, T_item_items).
makeright(Item, Thispar, Finalvar, T_item) :- transl_item(Item, Thispar, Finalvar, T_item).
combine(T_item, T_items, T_items) :-  not var(T_item) , T_item = true , !.
combine(T_item, T_items, T_item) :-  not var(T_items) , T_items = true , !.
combine(T_item, T_items, (T_item , T_items)).
transl_item(Terminals, Thispar, Nextvar, true) :- isclosedlist(Terminals) , ! , connect(Terminals, Thispar, Nextvar).
transl_item(!, Thispar, Thispar, !) :- !.
transl_item({Cond}, Thispar, Thispar, Cond) :- !.
transl_item([_ | _], _, _, _) :- rulerror(ter).
transl_item((X ; Y), Thispar, Nextvar, Transl) :- ! , makebody((X ; Y), Thispar, Nextvar, Transl, _).
transl_item(Nont, Thispar, Nextvar, Transl) :- expand(Nont, Thispar, Nextvar, Transl).
expand(Nont, In_par, Out_par, Call) :- Nont =.. [Fun | Args] , Call =.. [Fun, In_par, Out_par | Args].
two_ok(X, Y) :- nonvarint(X) , nonvarint(Y) , !.
two_ok(_, _) :- rulerror(varint).
rulerror(Message) :- nl , display('+++ Error in this rule: ') , mes(Message) , nl , tagfail(transl_rule(_, _, _)).
mes(varint) :- display('variable or integer item.').
mes(ter) :- display('terminals not in a closed list.').
phrase(Nont, Terminals) :- nonvarint(Nont) , ! , expand(Nont, Terminals, [], Init_call) , Init_call.
phrase(N, T) :- error(phrase(N, T)).
' dummy'(X, X).
X =:= Y :- Val is X , Val is Y.
X < Y :- Xv is X , Yv is Y , less(Xv, Yv).
X =< Y :- Xv is X , Yv is Y ,  not less(Yv, Xv).
X > Y :- Xv is X , Yv is Y , less(Yv, Xv).
X >= Y :- Xv is X , Yv is Y ,  not less(Xv, Yv).
X =\= Y :-  not X =:= Y.
T1 == T2 :- var(T1) , var(T2) , ! , eqvar(T1, T2).
T1 == T2 :- check(==?(T1, T2)).
T1 \== T2 :-  not ==?(T1, T2).
==?(T1, T2) :- integer(T1) , integer(T2) , ! , T1 = T2.
==?(T1, T2) :- nonvarint(T1) , nonvarint(T2) , functor(T1, Fun, Arity) , functor(T2, Fun, Arity) , equalargs(T1, T2, 1).
equalargs(T1, T2, Argnumber) :- arg(Argnumber, T1, Arg1) , arg(Argnumber, T2, Arg2) , ! , Arg1 == Arg2 , Nextnumber is Argnumber + 1 , equalargs(T1, T2, Nextnumber).
equalargs(_, _, _).
assert(Cl) :- asserta(Cl).
asserta(Cl) :- nonvarint(Cl) , convert(Cl, Head, Body) , ! , assert(Head, Body, 0).
asserta(Cl) :- error(asserta(Cl)).
assertz(Cl) :- nonvarint(Cl) , convert(Cl, Head, Body) , ! , assert(Head, Body, 32767).
assertz(Cl) :- error(assertz(Cl)).
convert((Head :- Body), Head, Body) :- !.
convert(Unit_cl, Unit_cl, true).
retract(Cl) :- nonvarint(Cl) , convert(Cl, Head, Body) , ! , functor(Head, Fun, Arity) , remcls(Fun, Arity, 1, Head, Body).
retract(Cl) :- error(retract(Cl)).
remcls(Fun, Arity, N, Head, Body) :- clause(Fun, Arity, N, N_head, N_body) , remcls(Fun, Arity, N, N_head, Head, N_body, Body).
remcls(Fun, Arity, N, Head, Head, Body, Body) :- retract(Fun, Arity, N).
remcls(Fun, Arity, N, N_head, Head, N_body, Body) :- check(N_head = Head) , check(N_body = Body) , ! , remcls(Fun, Arity, N, Head, Body).
remcls(Fun, Arity, N, _, Head, _, Body) :- N1 is N + 1 , remcls(Fun, Arity, N1, Head, Body).
clause(Head, Body) :- nonvarint(Head) , ! , functor(Head, Fun, Arity) , gencls(Fun, Arity, 1, Head, Body).
clause(Head, Body) :- error(clause(Head, Body)).
gencls(Fun, Arity, N, Head, Body) :- clause(Fun, Arity, N, N_head, N_body) , gencls(Fun, Arity, N, N_head, Head, N_body, Body).
gencls(_, _, _, Head, Head, Body, Body).
gencls(Fun, Arity, N, _, Head, _, Body) :- N1 is N + 1 , gencls(Fun, Arity, N1, Head, Body).
edit(Fun, Arity, N) :- clause(Fun, Arity, N, Head, Body) , edit((Head :- Body), NewClause) , convert(NewClause, NewHead, NewBody) , retract(Fun, Arity, N) , NewN is N - 1 , assert(NewHead, NewBody, NewN).
edit(TermIn, TermOut) :- ioreset(memory) , tell(memory) , prettyprint(TermIn) , told , '$edit'(TermOut).
ioreset(Stream) :- see(Stream) , ! , seen.
ioreset(Stream) :- retell(Stream) , told.
listing :- proc(Head) , functor(Head, Fun, Ar) , listproc(Fun, Ar) , nl , fail.
listing.
listing(Fun) :- atom(Fun) , ! , listbyname(Fun).
listing(Fun / Ar) :- atom(Fun) , integer(Ar) , 0 =< Ar , ! , listproc(Fun, Ar).
listing(L) :- isclosedlist(L) , listseveral(L) , !.
listing(X) :- error(listing(X)).
listseveral([]).
listseveral([Item | Items]) :- listing(Item) , listseveral(Items).
listbyname(Fun) :- proc(Head) , functor(Head, Fun, Ar) , listproc(Fun, Ar) , nl , fail.
listbyname(_).
listproc(Fun, Ar) :- gencls(Fun, Ar, 1, Head, Body) , prettyprint((Head :- Body)) , fail.
listproc(_, _).
directory :- display('Directory of ') , disk_dir(Current) , display(Current) , nl , disk_search(*.*, 255, FirstName, FirstAttr) , directory(FirstName, FirstAttr).
directory(PName) :- disk_dir(Current) , disk_dir(PName) , directory , disk_dir(Current).
directory(Name, Attr) :- namattr(Name, Attr) , disk_search(NxtName, NxtAttr) , directory(NxtName, NxtAttr).
directory(_, _) :- nl , nl.
namattr(Name, Attr) :- display(Name) , pname(Name, NmStr) , length(NmStr, NmLen) , NmTab is 16 - NmLen , blanks(NmTab) , display(Attr) , pnamei(Attr, AtStr) , length(AtStr, AtLen) , AtTab is 4 - AtLen , blanks(AtTab) , !.
blanks(0) :- !.
blanks(N) :- wch(' ') , NN is N - 1 , blanks(NN).
 :- txt_mode , protect(_, _) , goal(ear) , disk_dir(\).
