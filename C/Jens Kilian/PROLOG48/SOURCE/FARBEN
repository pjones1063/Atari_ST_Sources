
% Demonstration fÅr TOY Prolog ST, Version 4

% Problem : EinfÑrben einer "Karte" mit 4 Farben, so daû
%           benachbarte Gebiete verschiedene Farben erhalten.

% Erweiterung eines Beispiels aus : Kluzniak/Szpakowicz,
% "Prolog for Programmers"  (dort zitiert aus Pereira & Porto, 1980)

% Verwendete "Karte" :

%     +-----------------+--------------------+
%     |  R3             |         R6         |
%     |  +----+--+------+-------------+---+  |
%     |  |    |R4|                    |   |  |
%     +--+    +--+                    |   |  |
%     |  |            R2              |R5 |  |
%     |  |                            |   +--+
%     |  |                            |   |  |
%     |  +----------------------------+---+  |
%     |              R1                      |
%     +--------------------------------------+

%  Folgendes PrÑdikat definiert die Relation "Farbe A darf an Farbe B angrenzen"

nachbarn(A, B) :- farbe(A), farbe(B), not A = B.

%  Die Farben sind als Zahlen definiert (FÅllmuster fÅr die graphische
%  Ausgabe, daher "krumme" Zahlen) :

farbe(2).
farbe(4).
farbe(6).
farbe(8).

%  Die folgenden PrÑdikate geben die einzelnen KartenflÑchen graphisch aus.

r1 :- v_fillarea(vdi_handle, [192,184, 224,184, 224,248, 384,248,
                              384,216, 416,216, 416,280, 192,280, 192,184]).

r2 :- v_fillarea(vdi_handle, [224,152, 256,152, 256,184, 288,184,
                              288,152, 352,152, 352,248, 224,248, 224,152]).

r3 :- v_fillarea(vdi_handle, [192,120, 320,120, 320,152, 224,152,
                              224,184, 192,184, 192,120]).

r4 :- v_fillarea(vdi_handle, [256,152, 288,152, 288,184, 256,184, 256,152]).

r5 :- v_fillarea(vdi_handle, [352,152, 384,152, 384,248, 352,248, 352,152]).

r6 :- v_fillarea(vdi_handle, [320,120, 416,120, 416,216, 384,216,
                              384,152, 320,152, 320,120]).

%  Folgendes PrÑdikat findet eine Lîsung des Problems :

lîsung(R1, R2, R3, R4, R5, R6) :-
      nachbarn(R1, R3), nachbarn(R1, R2), nachbarn(R1, R5), nachbarn(R1, R6),
      nachbarn(R2, R3), nachbarn(R2, R4), nachbarn(R2, R5), nachbarn(R2, R6),
      nachbarn(R3, R4), nachbarn(R3, R6),
      nachbarn(R5, R6).


% Folgendes PrÑdikat sucht die nÑchste Lîsung und gibt sie graphisch aus :

ausgabe :- lîsung(R1, R2, R3, R4, R5, R6), vsf_interior(vdi_handle, 2),
            vsf_style(vdi_handle, R1), r1,
            vsf_style(vdi_handle, R2), r2,
            vsf_style(vdi_handle, R3), r3,
            vsf_style(vdi_handle, R4), r4,
            vsf_style(vdi_handle, R5), r5,
            vsf_style(vdi_handle, R6), r6.

% Folgendes PrÑdikat sucht alle Lîsungen und gibt sie aus (zwischen zwei
%  verschiedenen Lîsungen wird auf einen Tastendruck gewartet).

farbenproblem :- v_exit_cur(vdi_handle), see(keybd), ausgabe, rch, fail.
farbenproblem :- seen, v_enter_cur(vdi_handle).

