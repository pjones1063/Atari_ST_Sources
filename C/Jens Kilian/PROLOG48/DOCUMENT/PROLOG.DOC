0720103030566
1TOY Prolog Version 4Seite #
2(c) JJK 1987
9[....................................................]
Ä










ÅDokumentationzuTOYPrologSTÄ

Version4


(c)Copyright1987,JensJ.Kilian

          âInhaltÄ                                           àSeiteÄ

1.ÅGrundlagenÄ
1.1UrsprÅngevonProlog4
1.2WasistProlog?4
1.3DiewichtigstenBegriffeundKonzepte5

2.ÅSyntaxvonTOYPrologSTÄ
2.1EinfÅhrung7
2.2SyntaxvonTermenallgemein8
2.3SyntaxvonKlauseln10

3.ÅDieBenutzerschnittstelleÄ
3.1DerAufbaudesSystems11
3.2DieSystemdateien11
3.3WiebenutztmanTOYPrologST?13
3.4DerBildschirmeditor14

4.ÅSystemfunktionenundvordefiniertePrÑdikateÄ
4.1AttributevonFunktoren16
4.2Begriffe16
4.3Fehlermeldungen17
4.4BeschreibungdereinzelnenFunktionen20

5.ÅGEM-FunktionenÄ
5.1DatenstrukturenauûerhalbvonProlog47
5.2VDI-Funktionen53
5.3AES-Funktionen66
5.4Hilfsfunktionen79

6.ÅDieHilfs-undDemonstrationsprogrammeÄ
6.1DerKlauseleditor(EDITOR)80
6.2DerProgrammanalysator(CALLTREE)81
6.3DerKompaktierer(COMPACT)81

6.4EinkleinerLISP-Interpreter(LISCHP)82
6.5SymbolischesDifferenzieren(DIFF)82
6.6EinfÑrbeneiner'Landkarte'(FARBEN)82
6.7EinerelationaleDatenbank(TOYSQL)83

6.8TICTAC:EinSpielmitGrafik83
6.9HEXAPAWN:EinSpielmitGEM-UnterstÅtzung83

AnhÑnge

A.UnterschiedezurvorherigenVersion84
B.Literaturangaben85


     àUrheberrechteÄ

"TOYProlog"istderNameeinesProgramms,dasvonF.Kluzniakund
S.SzpakowiczinihremBuch"PrologforProgrammers"verîffentlicht
wurde."TOYPrologST"istderNamederaufdemATARIST
implementiertenVersiondiesesProgramms.DieseVersionist
gegenÅberderursprÅnglichenerheblicherweitert.

DieRechteandiesemProgrammliegenbei

JensKilian
LiegnitzerWeg14
6140Bensheim1

DasProgrammistzurîffentlichenVerbreitungfreigegeben("Public
Domain"),sofernkeinederHinweiseaufbestehendeUrheberrechte
ausdenverschiedenenDateienentferntwerden.Davonausgenommen
istjedeàgewinnbringendeÄWeitergabe(z.B.derVerkauf).
ZurkommerziellenNutzungdesProgrammsisteineschriftliche
Genehmigungerforderlich.

'ATARI'und'ST'sindWarenzeichenderATARICorp.DerAutorhat
keineVerbindungzudieserFirma;dieFirmaATARIistnicht
verantwortlichfÅrdasProgramm.DerNamedesProgrammsbezieht
sichausdrÅcklichnuraufdasRechnermodell,aufdemdasProgramm
lauffÑhigist.

IndieserDokumentationwerdenandereBezeichnungen(wiez.B.
'GEM','UNIX'etc.)ohneRÅcksichtdaraufverwendet,obessichum
WarenzeichenirgendwelcherUnternehmenhandelt.

DerAutorkannkeineVerantwortungfÅrdieKorrektheitdes
ProgrammsoderfÅrSchÑdenÅbernehmen,derenUrsache
Programmierfehler,unsachgemÑûeBedienung,SchÑdenamverwendeten
Rechneretc.sind.


DieEntwicklungdiesesProgrammshatvielZeitgekostet.Ichbitte
daherdiejenigen,dieesbenutzen,umeineSpendevonca.20.-DM.
Ichkannniemandendazuzwingen,abervomErfolgdieser
'Sammelaktion'hÑngtesab,obauchzukÅnftigeVersionendes
ProgrammszusogÅnstigenBedingungenverbreitetwerdenkînnen.
ManvergleichedengenanntenBetragz.B.mitkommerziellen
VersionenvonProlog(diemeistensnochnichtmalfehlerfreisind
bzw.demStandardvonProlog-10entsprechen).
WermireinesolcheSpendezukommenlassenwill,kanndasGeldauf
meinKontobeiderBezirkssparkasseBensheim(BLZ50950068)
Åberweisen.MeineKontonummerist1110550.

ÅEignungdesProgrammsÄ

TOY Prolog STsollteaufallenRechnernderST-SerielauffÑhig
sein.EsunterstÅtztSchwarzweiû-undFarbmonitore.DasProgramm
istzwarinallenBildschirmauflîsungenbenutzbar,aberviele
FunktionenbenîtigeneineBildschirmbreitevon80Zeichen(dazu
gehîrtinsbesonderederBildschirmeditor).DasProgrammsollte
dahermithoherodermittlererAuflîsungbenutztwerden.

Å1.âGrundlagen
Ä
1.1  UrsprÅngevonProlog

1972entwickeltenÑKowalskiÄundÑHayesÄdieKonzepteder
logischenProgrammierung.1973wurdedieersteFormvon
PrologvonÑColmerauerÄinMarseilleimplementiert.Bis1981
wurdeeswenigbeachtet;nachderAnkÅndigungderJapaner,
PrologalsàdieÄSprachefÅrihr'5th-generationproject'zu
benutzen,ÑndertesichdieseSituation.Prologist
mittlerweileweitverbreitet(nach'Dr.Dobb'sJournalof
SoftwareTools'vomJanuar1987inEuropastÑrkeralsinden
USA).EsgibtfÅrdiemeistenUNIX-SystemeProlog-
Interpreter;unterCP/Mgibtesmicro-Prolog;auf
GroûrechnernlaufengroûeSystemewieProlog-10(einSystem,
daseinenanerkanntenStandardfestgesetzthat)undMPROLOG;
dasletztereistauchaufdemSTunddenSmalltalk-
WorkstationsvonTektronixverfÅgbar.Sogar(!)aufden
Siemens-GroûrechnernunterBS2000lÑufteineVersionvon
MPROLOG.

Colmerauerundanderehabeninzwischen(1981/82)ein
'endgÅltiges'Prologentwickelt,nÑmlichPrologII.Viele
moderneProlog-SystemeenthaltenKonzeptewieModularisierung
vonProgrammen,AnsÑtzezurparallelenVerarbeitungund
intelligentesBacktracking.EsgibtauchProlog-Compiler
(z.B.inProlog-10).

1.2  WasistProlog?

PrologisteineÑlogischeÄProgrammiersprache,d.h.einProlog-
ProgrammisteineAnsammlunglogischerFaktenundRegeln.Die
GrundlagenfÅrdieBehandlungsolcherRegelnentstammender
ÑPrÑdikatenlogikÄ.DerProlog-Interpreterwendetein
BeweisverfahrenderPrÑdikatenlogikaufdieseRegelnan;die
AusfÅhrungeinesProlog-ProgrammsbestehtausdemVersuch,
dieWahrheiteinerAussagezubeweisen.

DasProlog-SystembestehtausdemÑInterpreterÄundder
ÑDatenbank,ÄdiedieKlauseln(FaktenundRegeln)desProgramms
enthÑlt.DieDatenbankkannvomBenutzer,aberauchvom
Programmselbstmanipuliertwerden.WieinLISPundanderen
SprachenderkÅnstlichenIntelligenzbestehtinPrologkein
UnterschiedzwischenProgrammenundDaten.InPrologist
dieseEigenschaftbesondersdeutlich:esgibtinProlog
wederdasKonzeptdesàProgrammsÄnochdasderàDatenÄ.Obein
FaktodereineRegelalsProgrammoderDatuminterpretiert
wird,istAnschauungssache.

FÅrweitereInformationenzurPhilosophievonPrologwirdauf
dieeinschlÑgigeLiteraturverwiesen.

1.3  DiewichtigstenBegriffeundKonzepte

ÅHinweisÄ:DieserAbschnittistnuralsöbersichtgedachtund
ersetztinkeinerWeiseeineEinfÅhrungindie
SpracheProlog.AnfÑngersolltensicheingutes
einfÅhrendesBuchkaufen(esgibtinzwischenauûer
dem'Clocksin/Mellish'auchdeutscheBÅcherÅber
Prolog).EsgibtauchdieMîglichkeit,anProlog-
Kursenteilzunehmen;z.B.bietetdieTHDarmstadt
imRahmendes'StudiumsfÅralle'einenkostenlosen
Prolog-Kursan.

àLiteraleÄ:EinLiteralisteinsymbolischesDatenobjekt.
EsgibtverschiedeneArtenvonLiteralen:

ÑNamenÄbestehenausBuchstaben,Ziffernunddem
Zeichen'_'.SiemÅssenmiteinemàKleinÄbuchstaben
beginnen.
ÑSymboleÄbestehenausSonderzeichen.
VerschiedeneZeichenstellenfÅrsichalleinschon
einLiteraldar.
SchlieûlichgibtesdieMîglichkeit,Ñbeliebige
ZeichenfolgenÄalsLiteralezubenutzen,indemman
sieinApostrophen(')einschlieût.ImInnerneines
solchenLiteralskînnenaucheinzelneApostrophen
auftreten,wennsiebeimHinschreibenverdoppelt
werden.

àKonstantenÄ:EsgibtinPrologzweiArtenvonKonstanten:
ZahlenundLiterale.KonstantenheiûenauchÑAtomeÄ,
dasiediekleinsteEinheitderDatenstrukturen
sind.AllerdingswerdenAtomeoftmitLiteralen
gleichgesetzt.

àVariablenÄ:VariableninPrologunterscheidensichfundamental
vonVariableninimperativenSprachenwieModula-2,
Pascal,ALGOL,FORTH,PL/1,FORTRANoderCOBOL;sie
unterscheidensichauchvonVariableninSprachen
mitanderenKonzeptenwieLISPoderSmalltalk.
ÑInProloggibteskeineZuweisungsoperation!Ä
EineVariableinPrologisteinObjekt,dessen
StrukturÑunbekanntÄist.ImVerlaufderAusfÅhrung
einesProlog-ProgrammswerdenVariablenan
bestimmteWerteÑgebundenÄ(mitdiesenWerten
ÑinstantiiertÄ).VondiesemZeitpunktankanndie
VariablenichtmehrvonihremWertunterschieden
werden.Prolog-VariablenÑhnelndarinden
'Variablen'derAlgebra.
EinÑVariablennameÄbestehtausBuchstaben,Ziffern
unddemZeichen'_'undmuûmiteinem
àGroûÄbuchstabenodereinem'_'beginnen.

àZusammengesetzteObjekteÄ:
AusKonstantenundVariablenwerdenkomplexere
Objektezusammengesetzt.EinsolchesObjektwird
auchalsÑFunktor-TermÄbezeichnet.DieRegelzur
Bildungisteinfach:EinFunktor-Termbestehtaus
einemLiteral(demÑFunktorÄ)undauseiner
beliebigenAnzahlvonÑArgumentenÄ.DieArgumente
kînnenbeliebigeObjektesein,insbesonderewieder
zusammengesetzteObjekte.EinzelneLiteraleohne
ArgumentesindsyntaktischÑquivalentzuFunktor-
Termenmit0Argumenten.

EsgibtverschiedeneDarstellungsartenfÅrFunktor-
Terme.InderÑregulÑrenÄoderÑkanonischen
ÄSchreibweisewirdeinzusammengesetztesObjekt
dargestellt,indemzuerstderFunktorgeschrieben
wird,danach(fallsessichnichtumeinLiteral
ohneArgumentehandelt)dieArgumenteinrunden
Klammern,durchKommatagetrennt.
UmdieDarstellunggroûerObjektezuvereinfachen,
gibtesdieMîglichkeit,FunktorenalsÑOperatoren
Äzuvereinbaren;fÅrListengibteseinebesondere
ÑListenschreibweiseÄ.

UmdenFunktoreineszusammengesetztenObjekts
eindeutigzubeschreiben,schreibtmandenÑNamen
ÄdesFunktors,einenSchrÑgstrich,unddieAnzahl
derArgumente(dieÑStelligkeitÄ).Also:

Funktorvonvater(bert,anna)istvater/2
Funktorvonvateristvater/0

àTermeÄ:JedesDatenobjektvonPrologisteinÑTermÄ.

àKlauseln,Fakten,Regeln,Kommandos,AnfragenÄ:
EinProlog-ProgrammisteineAnsammlungvon
ÑKlauselnÄ.KlauselnsindÑFakten,RegelnÄund
ÑgrammatischeRegelnÄ.
FaktensindzusammengesetzteTerme.Regelnsind
ebenfallszusammengesetzteTermemitdemFunktor
':-'/2alsÑuûerstemFunktor,einemÑRegelkopfÄals
erstemundeinemÑRegelrumpfÄalszweitemArgument.
GrammatischeRegelnhabendenFunktor'-->'/2und
sindbesondersaufgebaut.

EinÑKommandoÄisteinzusammengesetzterTermmit
Funktor':-'/1;eineÑAnfrageÄistsyntaktischeinem
RegelrumpfÑquivalent.

GenauereszurBedeutungdieserObjektestehtim
KapitelÅberdieBenutzerschnittstelle.

àAusfÅhrungeinesProgramms;Erfolg,Fehlschlag,BacktrackingÄ:
DieAusfÅhrungeinesProlog-Programmswirddurch
einKommandoodereineAnfrageveranlaût;das
Kommando(bzw.dieAnfrage)wirdalsÑZiel
Äbetrachtet.Eswirdversucht,dasZielzuÑerfÅllen
Ä(zubeweisen),indemesÅberdieRegelnin
ÑTeilzieleÄaufgespaltenwird.Faktenkînnendabei
alsunteilbareAxiomeangesehenwerden.Kannein
TeilzielnichterfÅlltwerden(ÑFehlschlagÄ),dann
versuchtderProlog-Interpreter,dasvorhergehende
Teilzielnochmals(aufandereWeise,miteiner
anderenKlausel)zuerfÅllen.DieserVorgangheiût
ÑBacktrackingÄ.

àPrÑdikate,Prozeduren,SystemfunktionenÄ:
DerFunktoreinesZielsoderTeilzielswirdauch
alsÑPrÑdikatensymbolÄoderÑPrÑdikatÄbezeichnet.Die
GesamtheitderKlauselneinesPrÑdikatskannman
alsÑProzedurÄbezeichnen(obwohldieseBezeichnung
zuMiûverstÑndnissenfÅhrenkann).
ÑSystemfunktionenÄbesitzenkeineKlauselninder
Datenbank,kînnenaberi.A.erfÅlltwerden.Sie
sindimProlog-Interpreterselbstimplementiertund
werdenmeistenswegenihrerÑSeiteneffekteÄ(z.B.
Ein-/Ausgabe)aufgerufen.

DieArgumenteeineszusammengesetztenTerms,der
einenAufrufeinesPrÑdikatsodereiner
Systemfunktiondarstellt,werdenalsÑParameter
Äbezeichnet.

     Å2. âSyntaxvonTOYPrologSTÄ

2.1  EinfÅhrung

DiefolgendeDarstellungderSyntaxvonTOYPrologorientiert
sichanderSyntaxbeschreibungvonKluzniakundSzpakowicz.
DiegewÑhlteDarstellungsformisterweiterteBNF;essind
auchSyntaxdiagrammevorhanden(alsGEM-Metafiles),dieaber
teilweiseetwasunprÑzisesind.

DieverwendeteNotation:

EineProduktionwirdalsBNF-Regelmitden
metasprachlichenZeichen::=|[]{}angegeben.Die
terminalenSymbolesindÅfettÄdargestellt.

DieFolge[...]bedeutet,daûderKlammerinhalt
weggelassenwerdenkann.

DieFolge{...}bedeutet,daûderKlammerinhalt
beliebigoftwiederholtoderweggelassenwerdenkann.

KommentarezudeneinzelnenRegelnwerdendurchÅ*Ä
gekennzeichnet(nurderFormhalber).

2.2  SyntaxvonTermenallgemein

     Term::=Term†1200Ä
     Term†NÄ::=Term†N-1Ä|PrÑfix-Term†NÄ|Infix-Term†NÄ|
Postfix-Term†NÄ
     PrÑfix-Term†NÄ::=Operator†fx,NÄTerm†N-1Ä|Operator†fy,NÄTerm†NÄ
     Infix-Term†NÄ::=Term†N-1ÄOperator†xfx,NÄTerm†N-1Ä|
Term†N-1ÄOperator†xfy,NÄTerm†NÄ|
Term†NÄOperator†yfx,NÄTerm†N-1Ä
     Postfix-Term†NÄ::=Term†N-1ÄOperator†xf,NÄ|Term†NÄOperator†yf,NÄ
Å*ÄMehrdeutigeKombinationenvonOperatorenwerdenhierdurch
nichtabgedeckt.DerParsererkenntalleKombinationen,die
ohneeinegrîûereKontextanalysealserlaubtklassifiziert
werdenkînnen(PrologistànichtÄkontextfrei!).

     Term†0Ä::=Variable|Zahl|Liste|String|
Nicht-Operator[Å(ÄTerm{Å,ÄTerm}Å)Ä]|
Å(ÄTermÅ)Ä|Å{ÄTermÅ}Ä
     Nicht-Operator::=Funktor
Å*Ä    DerFunktordarfnichtalsOperatorvereinbartwordensein.

     Operator†T,NÄ::=Funktor
Å*ÄTmuûausderMenge{fx,fy,xfx,xfy,yfx,xf,yf}sein.N
muûzwischen1und1200(einschlieûlich)liegen.DerFunktor
muûeinName,SymboloderEinzelzeichensein(sieheunten).
GemischteOperatorenkînnenhîchstensjeeinenunÑrenund
binÑrenTypgleichzeitigbesitzen.

     Liste::=Å[Ä[Term†999Ä{Å,ÄTerm†999Ä}[Å|ÄTerm]]Å]Ä
Å*Ä','/2isteinOperatormitPrioritÑt1000,deshalbkînnen
Terme,derenFunktoreneinePrioritÑtÛ999haben,ohne
KlammerndurchKommataverbundenwerden.

     Funktor::=Name|Q-Name|Symbol|Einzelzeichen
     Name::=Kleinbuchstabe{Alphanumerisch}
     Alphanumerisch::=Kleinbuchstabe|Groûbuchstabe|Ziffer|
Å_Ä
     Q-Name::=Å'Ä{Q-Zeichen}Å'Ä
     Q-Zeichen::=Å''Ä|Nicht-'
Å*Ä    Nicht-'isteinbeliebigesZeichenauûerÅ'Ä

     Symbol::=Symbolzeichen{Symbolzeichen}

     Variable::=Variablenanfang{Alphanumerisch}
     Variablenanfang::=Groûbuchstabe|Å_Ä

     Zahl::=[Å-Ä]Ziffernfolge
Å*ÄEsistzubeachten,daûinTOYPrologSTnurZahlenim
Bereichvon-32767bis32767erlaubtsind.
BesondereVorsichtistgeboten,wenndasMinuszeichenals
ÅFunktorÄverwendetwerdensoll.Esmuûdanndurchein
LeerzeichenvonderZahlgetrenntwerden.Beispiele:
-20istdieZahl-20.
-20istderTerm'-'(20).
--20istderTerm'--'(20),wenn'--'/1alsPrÑfix-
Operatorvereinbartwurde,ansonsteneinÅillegalerÄ
Term(!).

     Ziffernfolge::=Å0XÄSedezimalZF|Å0xÄSedezimalZF|
Å0ÄOktalziffer{Oktalziffer}|
Dezimalziffer{Dezimalziffer}
SedezimalZF::=Sedezimalziffer{Sedezimalziffer}

     String::=Å"Ä{S-Zeichen}Å"Ä
     S-Zeichen::=Å""Ä|Nicht-"
Å*ÄNicht-"isteinbeliebigesZeichenauûerÅ"Ä.InTOYPrologST
isteineZeichenketteeineListeausdenÑNamenÄderZeichen,
nichtwieinProlog-10ausihrenÑASCII-WertenÄ.

     Oktalziffer::=Å0Ä|Å1Ä|Å2Ä|Å3Ä|Å4Ä|Å5Ä|Å6Ä|Å7Ä
Dezimalziffer::=Oktalziffer|Å8Ä|Å9Ä
Sedezimalziffer::=Dezimalziffer|ÅAÄ|ÅBÄ|ÅCÄ|ÅDÄ|ÅEÄ|ÅFÄ|
ÅaÄ|ÅbÄ|ÅcÄ|ÅdÄ|ÅeÄ|ÅfÄ

     Kleinbuchstabe::=ÅaÄ|ÅbÄ|ÅcÄ|ÅdÄ|ÅeÄ|ÅfÄ|ÅgÄ|ÅhÄ|ÅiÄ|ÅjÄ|
ÅkÄ|ÅlÄ|ÅmÄ|ÅnÄ|ÅoÄ|ÅpÄ|ÅqÄ|ÅrÄ|ÅsÄ|ÅtÄ|
ÅuÄ|ÅvÄ|ÅwÄ|ÅxÄ|ÅyÄ|ÅzÄ|ÅÅÄ|ÅÇÄ|ÅÉÄ|ÅÑÄ|
ÅÖÄ|ÅÜÄ|ÅáÄ|ÅàÄ|ÅâÄ|ÅäÄ|ÅãÄ|ÅåÄ|ÅçÄ|ÅëÄ|
ÅìÄ|ÅîÄ|ÅïÄ|ÅñÄ|ÅóÄ|ÅòÄ|ÅûÄ|ÅüÄ|Å†Ä|Å°Ä|
Å¢Ä|Å£Ä|Å§Ä|Å¶Ä|ÅßÄ|Å∞Ä|Å±Ä|Å≥Ä|Å¥Ä|Å¿Ä
     Groûbuchstabe::=ÅAÄ|ÅBÄ|ÅCÄ|ÅDÄ|ÅEÄ|ÅFÄ|ÅGÄ|ÅHÄ|ÅIÄ|ÅJÄ|
ÅKÄ|ÅLÄ|ÅMÄ|ÅNÄ|ÅOÄ|ÅPÄ|ÅQÄ|ÅRÄ|ÅSÄ|ÅTÄ|
ÅUÄ|ÅVÄ|ÅWÄ|ÅXÄ|ÅYÄ|ÅZÄ|ÅÄÄ|ÅéÄ|ÅèÄ|ÅêÄ|
ÅíÄ|ÅôÄ|ÅöÄ|Å•Ä|Å≤Ä|ÅµÄ|Å∂Ä|Å∑Ä|Å∏Ä|Å¡Ä
     Symbolzeichen::=Å#Ä|Å$Ä|Å&Ä|Å*Ä|Å+Ä|Å-Ä|Å.Ä|Å/Ä|Å:Ä|Å<Ä|
Å=Ä|Å>Ä|Å?Ä|Å@Ä|Å\Ä|Å^Ä|Å`Ä|Å~Ä|ÅÄ|ÅõÄ|
ÅúÄ|ÅùÄ|Å®Ä|Å©Ä|Å™Ä|Å≠Ä|ÅÆÄ|ÅØÄ|Å›Ä|ÅﬁÄ|
ÅﬂÄ|ÅÄ|ÅÒÄ|ÅÚÄ|ÅÛÄ|ÅˆÄ|Å˜Ä|ÅˇÄ
Å*ÄEineinzelnerPunkt,gefolgtvonLeerraum,istkein
Symbolzeichen,sonderneinEnde-Punkt.

     Einzelzeichen::=Å,Ä|Å;Ä|Å!Ä
     Token::=Funktor|Variable|Zahl|String
Å(Ä|Å)Ä|Å[Ä|Å]Ä|Å{Ä|Å}Ä|Å|Ä
Å*ÄKommentareundLeerraumkînnenbeliebigzwischen
Tokenseingesetztwerden,abernichtinderenInnern.

     Kommentar::=Å%Ä{Nicht-Zeilenende}ÅZeilenendeÄ
Å*ÄÅZeilenendeÄisteinZeichen,dasdasEndeeinerZeileangibt
(inTOYPrologSTdasASCII-ZeichenCR),Nicht-Zeilenendeist
einbeliebigesanderesZeichen.

     Leerraum::=ÅSteuerzeichenÄ{ÅSteuerzeichenÄ}
Å*ÄJedesnichtdruckbareZeichen,insbesondere'SPACE','TAB'und
Zeilenende,isteinÅSteuerzeichenÄ.DasDateiende(bzw.das
ZeichenEOF)giltÅnichtÄalsÅSteuerzeichenÄ!
     Ende-Punkt::=Å.ÄLeerraum
Å*ÄJedereingegebeneTermmuûmiteinemEnde-Punktabgeschlossen
werden.

2.3  SyntaxvonKlauseln

DieSyntaxderKlauselnrichtetsichnachderverwendeten
Benutzerschnittstelle,dienachdemMustervonProlog-10
entworfenwurde.

     Klausel::=Definition|Grammatische_Regel|
Direktive
     Definition::=Regel|Fakt
     Regel::=KopfÅ:-ÄRumpf
Fakt::=Kopf
Å*ÄDerÑuûersteFunktorvonKopfistnicht'Å:-Ä'/2

     Kopf::=Funktor-Term
     Rumpf::=R-Alternative{Å;ÄR-Alternative}
     R-Alternative::=Aufruf{Å,ÄAufruf}
     Aufruf::=Funktor-Term|Variable|Å(ÄRumpfÅ)Ä

     Funktor-Term::=Term
Å*ÄWedereineVariablenocheineZahl-eineformaleDefinition
istmîglich,aberumstÑndlich.

     Grammatische_Regel::=Linke_SeiteÅ-->ÄRechte_Seite
     Linke_Seite::=Nicht-terminal[Å,ÄKontext]
     Nicht-terminal::=Funktor-Term
     Kontext::=terminale_Symbole
     Rechte_Seite::=Alternativen
     Alternativen::=Alternative{Å;ÄAlternative}
     Alternative::=Regelelement{Å,ÄRegelelement}
     Regelelement::=Nicht-terminal|terminale_Symbole|
Bedingung|Å(ÄAlternativenÅ)Ä
     terminale_Symbole::=Liste|String
Å*ÄNur'geschlossene'Listensinderlaubt,alsokeineStruktur
derForm[....|T],wobeiTkeineListeist.Tdarf
insbesonderekeineVariablesein.

     Bedingung::=Å!Ä|Å{ÄTermÅ}Ä

     Direktive::=Kommando|Anfrage
     Kommando::=Å:-ÄRumpf
     Anfrage::=Rumpf
Å*Ä    DerÑuûersteFunktorvonRumpfistnicht'Å:-Ä'/1

     Å3.âDieBenutzerschnittstelleÄ

3.1  DerAufbaudesSystems

DiefrÅherenVersionenvonTOYPrologSTbestandenauseinem
ÅinnerenÄInterpreter,dernureineneinfachenZwischencode
verarbeitenkonnte,undeinemÅÑuûerenÄInterpreter(Parser),
deralsZwischencode-Dateieingelesenwerdenmuûte.
IndervorliegendenVersionistdieseUnterscheidungzum
grîûtenTeilweggefallen.DerInterpreterkannjetztalle
TermeauûergrammatischenRegelndirektverarbeiten.

DieVerarbeitungàohneÄdieBenutzerschnittstellegeschieht
folgendermaûen:

     -WirdvomEingabestrom'user'gelesen,undwurdedurch
dieSystemfunktiongoal/1einZieldefiniert,sowird
versucht,diesesZielzuerfÅllen.

     -AnsonstenwerdenTermeeingelesen;ÅFaktenÄundÅRegelnÄ
werdenindieDatenbankaufgenommen,ÅKommandosÄwerden
direktausgefÅhrt.

NachdemStartdesInterpretersistkeinStandardziel
definiert,undessindnichtalleStandardoperatoren
vereinbart.NormalerweisewirddieSystemdatei'SYSFILE.TOY'
eingelesen,dieauûerdiesenVereinbarungendenQuellcodeder
vordefiniertenPrÑdikateundderBenutzerschnittstelle
enthÑlt.DazugehîrtaucheinPrÑprozessorfÅrgrammatische
Regeln.

3.2  DieSystemdateien

3.2.1DieKonfigurationsdatei'CONFIG.TOY'

DieKonfigurationsdateiisteineTextdatei,dieOptionenfÅr
dieInitialisierungdesInterpretersenthÑlt.SieÅmuûÄden
Namen'CONFIG.TOY'tragenundimselbenDateiverzeichniswie
'TOY.PRG'stehen.

DerTextinderKonfigurationsdateiwirdvollkommenignoriert
-bisaufZeilenmitfolgendemAufbau:

#<Option><Argument>(ÅkeinÄLeerraumdazwischen!)

<Option>isteinKlein-oderGroûbuchstabe,dereine
bestimmteOptionauswÑhlt,<Argument>hÑngtvonderOption
ab.UnbekannteOptionen,sowiederRestderZeilehinter
<Argument>,werdenignoriert.EswerdenauchkeineFehler
erkannt;wirdz.B.zuvielSpeicherreserviert,dannwirddas
ProgrammerstÅnachÄdemEinlesenderKonfigurationsdatei
abgebrochen.

ImMomentwerdenfolgendeOptionenerkannt:

RSpeicherplatzÅrÄeservieren.<Argument>isteineZahl,die
inDezimaldarstellungangegebenwerdenmuû.Siegibtdie
GrîûedeszureservierendenSpeichersinKBytean.
DieseOptionistwichtig,wennGEM-Funktionenverwendet
werdensollen,daGEMvonGEMDOSfÅrVerwaltungszwecke
Speicheranfordert.Dasgeschiehtz.B.wennein
GerÑtetreiberodereineResourcedateigelesenwird.
FallszuvielSpeicherreserviertwerdensoll,wirddas
Programmabgebrochen.

LDateiÅlÄaden.<Argument>istderNameeinerDatei(ÅohneÄ
Pfadnamen)imselbenDateiverzeichniswie'TOY.PRG'und
'CONFIG.TOY'.
DieangegebeneDateiwirdÅstattÄ'SYSFILE.TOY'
eingelesen,wennderInterpreterinitialisiertwurde.

C(ÅcÄhain)Programmnachladen.DieseOptionermîglichtes,
nachBeendigungdesProgrammsàohneRÅckkehrzumDesktopÄ
einanderesProgrammzustarten.DerAufbaudergesamten
Optionszeileist

#C<x><y><Programm>{Leerzeichen<Argumente>}

<x>isteinZeichen,dasangibt,ob<Programm>eineGEM-
Anwendungist,<y>gibtan,ob<Programm>TOS-Funktionen
benutzt.EingeraderASCII-Wert(z.B.z'0')bedeutet
dabei,daûdasentsprechendeKriteriumÅnichtÄzutrifft,
einungeraderWert(z.B.'1')bedeutet,daûeszutrifft.
<Programm>istderNamedesnachzuladendenProgramms
(eventuellmitPfadnamen);<Argumente>bezeichneteine
Zeichenkette(biszumZeilenende),diedemProgrammin
der'basepage'Åbergebenwird.
DasNachladenerfolgtmitderAES-Funktion'shel_write'.

3.2.2     DieQuelldatei'SYSFILE.TOY'

'SYSFILE.TOY'enthÑltVereinbarungenfÅrOperatoren,
Funktionstastenbelegung,sowiedenQuellcodeder
vordefiniertenPrÑdikate,desPrÑprozessorsfÅrgrammatische
RegelnundderBenutzerschnittstelle.

WersichdiesenCodeanschauenoderihnverÑndernmîchte,
solltedazuaberÅnichtÄdieDatei'SYSFILE.TOY'benutzen.Sie
istnÑmlichmitHilfeeinesHilfsprogrammskompaktiertworden
(alleKommentarewurdenentfernt,undproZeilestehteine
ganzeKlausel).DerursprÅngliche,kommentierteQuelltext
stehtinderDatei'MONITOR'im'SOURCE'-Ordner.Erkannmit
demHilfsprogramm'COMPACT'kompaktiertwerden;dieses
ProgrammÅbersetztauchgrammatischeRegeln.

3.3  WiebenutztmanTOYPrologST?

NachdemEinlesenderDatei'SYSFILE.TOY'wirddie
Benutzerschnittstellegestartet.DasPrÑdikatear/0istzu
diesemZeitpunktalsStandardzielvereinbartundwirdbei
jedemProgrammabbruchautomatischaufgerufen.
ear/0ruftdieHauptschleifederBenutzerschnittstelleauf;
siestehtimPrÑdikatloop/0.AuchandereProgrammekînnen
dieBenutzerschnittstelleauffolgendeWeiseaufrufen:     

loopruftdieBenutzerschnittstelleauf.Eingabevon
'stop'bewirktwieÅblichdenAbbruchdesgesamten
ProgrammsunddieRÅckkehrzumDesktop.

tag(loop)bewirktdasselbewie'loop'allein;beiEingabevon
'stop'wirdaberdasProgrammnichtabgebrochen.
StattdessenschlÑgtderAufruf'tag(loop)'fehl.

NormalerweisebefindetsichderComputerimÑAnfragemodusÄ.Man
erkenntdasdaran,daûderPrompt

?-

ausgegebenwird.EswirddanachaufdieEingabeeinesTerms
gewartet,derauffolgendeWeiseinterpretiertwird:

-VariablenundfehlerhafteTermewerdenignoriert,Zahlen
erzeugeneineFehlermeldung.

-RegelnundgrammatischeRegelnwerdenindieDatenbank
aufgenommen.

-KommandoswerdendirektausgefÅhrt.

-ListenwerdenalsArgumentfÅreinenAufrufvon
consultall/1benutzt(EinlesenvonDateien).

-AlleanderenTermewerdenalsAnfragenbetrachtet.Es
wirdversucht,dasangegebeneZielzuerfÅllen.Gelingt
das,sowerdendieWertederVariablenausgegeben,und
dasSystemwartetaufdieEingabeeinesZeichens.
HandeltessichumdasZeichen';',sowirdversucht,
dieAnfrageneuzuerfÅllen.
EnthÑltdieAnfragekeineVariablen,sowird'yes'
ausgegeben;schlÑgtsiefehl,sowird'no'ausgegeben.

DieEingabevon'stop'bewirktdenAbbruchdesProgrammsund
dieRÅckkehrzumGEM-Desktop.

ImAnfragemoduswerdenzwarRegelnerkanntundindie
Datenbankgeschrieben,aberkeineFakten.UmeinProgramm
einzulesen,muûmandahereinesderPrÑdikateconsult/1,
reconsult/1oderconsultall/1benutzen.UmFakten(und
Regeln)vonderTastaturauseinzugeben,gibtman'user'als
Dateinamenan.

Nachconsult(user)etc.befindetsichderComputerim
ÑLesemodusÄ.IndiesemModuserscheintÅkeinÄPrompt.Fakten,
RegelnundgrammatischeRegelnwerdengespeichert,Kommandos
werdenausgefÅhrt.Anfragenkînnennichterkanntwerden.Der
Lesemoduswirdnachdem'Einlesen'desDateiendesverlassen.
BeiEingabevonderTastaturaus(Datenstrîme'user'bzw.
'keybd')kanndasDateiendedurchEingabedesZeichensEOF
(ASCII'SUB',Control+Z)simuliertwerden.DadasDateiende
vondenEingabefunktionennichtalsSteuerzeichenerkannt
wird,muûzwischendemletztenPunkteinerDatei(bzw.
Eingabezeile)unddemDateiende(bzw.EOF)Åmindestensein
LeerraumÄstehen!

DieÅblicheVorgehensweisebeiderProgrammentwicklungist
folgende:

-SchreibendesProgrammsmiteinemTexteditor

-StartendesInterpreters

-EinlesendesProgramms/AufrufdergewÅnschten
PrÑdikate.ZurFehlersuchekannmandenÑTestmodusÄund
denÑEinzelschrittmodusÄbenutzen.

-InteraktivesVerbessernvonFehlernundVerÑnderndes
ProgrammsmitdemBildschirmeditorund/oderdem
HilfsprogrammEDITOR.
MitdemPrÑdikatsave/2kînnengeÑndertePrÑdikateals
Dateienabgespeichertwerden.

-VerlassendesSystems,KorrekturderQuelldatei.

-WeiterbeimzweitenSchritt.

3.4DerBildschirmeditor

DievorliegendeVersionvonTOY Prolog STenthÑlteinen
bildschirmorientiertenEditor,derzuminteraktivenVerÑndern
vonTermenundKlauselnbenutztwerdenkann.DerEditor
erhebtnichtdenAnspruch,besonderskomfortabeloderschnell
zusein;erreichtaberfÅrdenvorgesehenenVerwendungszweck
aus.

MitdemEditorlassensichZeilenineinemÑTextpuffer
Äbearbeiten.DieZeilenlÑngeistauf80ZeichenbeschrÑnkt,
derEditorkannaberZeilenmitöberlÑngeerkennenund
bearbeiten.Eswirdempfohlen,solcheöberlÑngenzu
vermeiden,dadasEinfÅgenundLîschenvonZeichensonst
erheblichmehrZeitinAnspruchnimmt.

àAufrufdesEditorsÄ

DerEditorkannmitdenPrÑdikaten'$edit'/1,edit/2und
edit/3,sowieÅberdasHilfsprogramm'EDITOR'aufgerufen
werden.

àSteuerungdesEditorsÄ

DerEditorwirdmitfolgendenFunktionstastengesteuert:

àTasteÄàFunktionÄ

ÅCursortastenÄBewegungdesCursors
ÅClr/HomeÄCursorzumAnfang/EndederaktuellenZeile
ÅControl+linksÄCursorzumEndedesvorherigen'Wortes'
Å"+rechtsÄCursorzumAnfangdesnÑchsten'Wortes'
Å"+Clr/HomeÄCursorzumTextanfang

ÅInsertÄSchaltetdenEinfÅgemodusausbzw.ein
ÅControl+AÄSchaltetdasautomatischeEinrÅckenein/aus

ÅBackspaceÄLîschtdasZeichenlinksvomCursor
ÅDeleteÄLîschtdasZeichenunterdemCursor
ÅControl+DeleteÄLîschtdas'Wort'unterdemCursor

àVerlassendesEditorsÄ

MitdenTastenÅEscapeÄundÅUndoÄkannderEditorverlassen
werden.DieTasteÅEscapeÄlîsteineSyntaxanalyseaus.Wenn
derTextpuffereinensyntaktischkorrektenTermenthÑlt,dann
wirddieserandasaufrufendePrÑdikatweitergegebenundder
Editorerfolgreichverlassen;ansonstenerscheintinder
Statuszeile(s.u.)eineFehlermeldung,undderCursorwirdan
eineStelleinderNÑhe(!)desFehlersgesetzt.
MitÅUndoÄwirdderEditorohneSyntaxanalyseabgebrochenund
dasaufrufendePrÑdikatschlÑgtfehl.

àEinfÅgenvonZeichenÄ

DerEditorkannimEinfÅge-oderimErsetzungsmodusarbeiten
(umschaltenmitÅInsertÄ).ImEinfÅgemoduswerdenneueZeichen
zwischendiealteneingefÅgt,imErsetzungsmoduswerdendie
altenZeichenÅberschrieben.

AuûerdemexistiertdieMîglichkeit,neuerzeugteZeilen
automatischeinzurÅcken.DieserModuswirdmitÅControl+AÄein-
undausgeschaltet.

àStatuszeileÄ

DieobersteBildschirmzeiledientzumAnzeigenvonMeldungen
desEditors.ImNormalfallwirdangegeben,obderEinfÅge-
oderErsetzungsmoduseingeschaltetistundobautomatisch
eingerÅcktwird.NachErkenneneinesSyntaxfehlers(bei
EingabevonÅEscapeÄ)erscheintindieserZeileeine
Fehlermeldung.

     Å4.âSystemfunktionenundvordefiniertePrÑdikateÄ

4.1  AttributevonFunktoren

InTOYPrologSTkanneinFunktor(bestimmtdurchseinen
ÑNamenÄundseineÑStelligkeitÄ)nichtimmerzurDefinitioneines
PrÑdikatsbenutztwerden.

EinFunktorkanneinervonmehrerenKlassenangehîren:

(a)FunktoreinesProlog-PrÑdikats
(b)FunktoreinerSystemfunktion
(c)HandhabefÅreinSpeicherobjektauûerhalbvonProlog

(a)istderNormalfall;aucheinFunktor,fÅrdenkein
PrÑdikatdefiniertist,gehîrtdieserKlassean.

(b)trifftnurfÅrdieFunktorenderSystemfunktionenzu.
FunktorenkînnenwederausdieserKlasseentferntnochinsie
aufgenommenwerden.

(c)wirdimKapitelÅberGEM-FunktionenerklÑrt.EinFunktor
ausKlasse(a),fÅrdenkeinPrÑdikatdefiniertist,kannmit
bestimmtenSystemfunktioneninKlasse(c)aufgenommenwerden;
FunktorenausKlasse(c)kînnenwiederentferntundinKlasse
(a)aufgenommenwerden.àFunktorenindieserKlassehaben
ÄàimmerdieStelligkeit0,sindalsoLiteraleÄ.

FunktoreninKlasse(a)kînnenÑgeschÅtztÄwerden;esistdann
nichtmehrmîglich,dieihnenzugeordnetenKlauselnzu
verÑndern.SelbstverstÑndlichkannderSchutzauchwieder
aufgehobenwerden.

FÅrFunktorenderKlassen(a)und(b)existiertein
ÑTestmodusÄ,derzurProgrammentwicklungundFehlersuche
nÅtzlichist.ErwirdineinemgesondertenAbschnitt
besprochen.

4.2  Begriffe

EineÑSystemfunktionÄisteinTeildesProlog-Interpreters,der
vonPrologausaufgerufenwerdenkann.EinerSystemfunktion
isteinFunktorzugeordnet;siewirdmitHilfedieses
Funktorsaufgerufen.AuchGEM-Funktionengehîrenzuden
Systemfunktionen(siewerdenaberineinemeigenenKapitel
besprochen).
EinÑvordefiniertesPrÑdikatÄisteinnormalesProlog-PrÑdikat,
dessenDefinitioninderDatei'SYSFILE.TOY'stehtundbeim
StartdesInterpreterseingelesenwird.

SystemfunktionensindàimmerÄdeterministisch,kînnenalsonur
genaueinmalerfÅlltwerden.VordefiniertePrÑdikate
unterliegendieserEinschrÑnkungnicht.Esexistierenzum
BeispieleineSystemfunktiondmember/2undeinvordefiniertes
PrÑdikatmember/2,diesichnurdadurchunterscheiden,daû
dmember/2deterministischundschnelleralsmember/2ist.

SystemfunktionenwerdenmeistenswegenihrerÑSeiteneffekteÄ
aufgerufen.DaseinfachsteBeispielsinddieFunktionen,die
eineAusgabebewirken.

DieÑParameterÄeinerSystemfunktionodereinesvordefinierten
PrÑdikatsdÅrfennormalerweisenichtbeliebigeTermesein.In
denBeschreibungenwerdendaherfolgendeBezeichnungenfÅr
bestimmteKlassenvonTermenbenutzt:

TERMEinbeliebigerTerm
ZAHLEineZahl
VAREine(freie)Variable
VARINTEineZahloderVariable
FTERMEineFunktor-Term(auchohneArgumente)
AUFRUFEinFTERM,aberimSinneineszuerfÅllenden
Ziels
LITERALEinLiteral(FTERMohneArgumente)
NAMEEinLiteral,aberdiebetrachteteFunktion
benutztdenNamendesLiterals(z.B.als
Dateinamen)
ZEICHENEinauseinemeinzelnenZeichenbestehender
NAME(ànichtÄderASCII-WertdesZeichens)
DATEINAMEEinNAME,derentwedereinenStandardstromzur
Ein-/AusgabeodereineDiskettendatei
bezeichnet
LISTEEineListe,dienochbestimmten
EinschrÑnkungenfÅrihreElementeunterliegen
kann

IndenBeschreibungenwerdendieParametereinerFunktionder
ReihenachmitPAR1,PAR2etc.bezeichnet.

4.3  Fehlermeldungen

4.3.1     Fehler,diezumProgrammabbruchfÅhren

VerschiedeneFehlerhabensoschwerwiegendeAuswirkungen,daû
dasmomentaneZielabgebrochenwird.ManchedavonfÅhrenzum
AbbruchdesganzenInterpreters.DiefolgendenÅfatalenÄFehler
kînnenauftreten:

-EinAusnahmezustand(ÑExceptionÄ)des68000-Prozessors,
deraufeinenundefiniertenSprungvektorfÅhrt.
Beispiel:Busfehler.
ÅFallseinsolcherFehlerauftritt,benachrichtigenSie
bitte
JensKilian
LiegnitzerWeg14
6140Bensheim1

ÄÅunterAngabederSituation,inderderFehler
aufgetretenist.ÄEinderartigerFehlerfÅhrtzumAbsturz
desInterpreters.

-EinöberlaufderNamenstabelle.DieserFehleristnicht
behebbarundfÅhrtzumAbsturz.

-EinöberlaufeinesderdreiDatenstacks.Einsolcher
FehlerfÅhrtnichtzumAbsturz.

-EinöberlaufdeszentralenSpeicherbereichs(Heap).
DieserFehlerfÅhrt(imMoment)zumAbsturz,obwohler
ineinigenFÑllenbehebbarwÑre.InspÑterenVersion
wirddieserFehlerdurcheinenGarbage-Collector
abgefangenwerden.

DieGrîûedergenanntenSpeicherbereichekannmandurch
status/0anzeigenlassen.

-EinFehlerimParser(keinSyntaxfehler,sondernein
FehlerinTOYPrologselbst!)oderbeiderUnifikation.
ÅSieheoben.ÄEinsolcherFehlerfÅhrtzumAbsturz.

-DerVersuch,denDruckerstromzurEingabezubenutzen.
FÅhrtnichtzumAbsturz.

-EinLese-oderSchreibfehlerbeieinemDiskettenzugriff.
FÅhrtnichtzumAbsturz.

-öberlaufdesPuffersbeiAusgabeaufdenDatenstrom
'memory',oderderVersuch,ÅberdasPufferendehinaus
zulesen.FÅhrtnichtzumAbsturz.

4.3.2    FehlerbeimAufrufvonSystemfunktionen

WirdeineSystemfunktionmitParametermaufgerufen,dienicht
zulÑssigsind,dannfÅhrtdaszueinemÑSystemaufruffehlerÄ.
DerInterpreterruftbeieinemsolchenFehlerselbstÑndigdas
PrÑdikaterror/1auf,wobeiderParametervonerror/1der
fehlerhafteAufrufist.error/1istinderDatei
'SYSFILE.TOY'definiertundgibteineMeldungderForm

+++Systemcallerror:...

aus.DanachschlÑgterror/1(unddamitauchderfehlerhafte
Aufruf)fehl.

SinddieParametereinerSystemfunktioninOrdnung,aber
trittbeiderAusfÅhrungeinFehlerauf,dannschlÑgtdie
FunktionÅindenmeistenFÑllenÄfehl.VieleFunktionengeben
auûerdemnocheineMeldungaus.
BeispielezudieserArtvonFehlern:

-SyntaxfehlerbeimLeseneinesTerms.
-Versuch,eingeschÅtztesPrÑdikatzuÑndern.

EinigePrÑdikategebendieseArtvonMeldungenauchanstelle
einesSystemaufruffehlersaus,aberdanngehtausderMeldung
hervor,welcheArtvonParametererwartetwurde.

4.3.3    FehlermeldungeninProlog-PrÑdikaten

VielevordefiniertePrÑdikate(z.B.assert)ÅberprÅfenihre
ParameterundgebenentsprechendeFehlermeldungenab.Die
meistenbenutzendazudasPrÑdikaterror/1,dasdanneine
MeldungderForm

+++Error:...

erzeugt(sieheauchunter'Systemaufruffehler').

SelbstverstÑndlichkannerror/1auchinPrÑdikatendes
Benutzersverwendetwerden.Mannkannerror/1aucherweitern,
umspezielleFehlerfÑllezuerkennen.EinBeispieldazu:

error(Var):-var(Var),!,
display('+++Variableineinem Aufrufnichtgebunden:'),
display(Var),nl,bell,fail.

erkenntdenFall,daûbeieinemVariablenaufrufzumZeitpunkt
derAusfÅhrungdesAufrufsdieVariablenichtinstantiiert
war.

4.3.4KritischeDiskettenfehler

SolcheFehlertretenz.B.auf,wenneinefalscheDisketteim
Laufwerkliegt.EsfolgtdieMeldung

Therewasacriticalerror.(A)bort,(R)etryor(I)gnore?

DurchEingebenvonÅAÄkannmandieOperationabbrechen;mitÅRÄ
kanneinneuerVersuchveranlaûtwerdenundmitÅIÄwirdder
Fehlerignoriert(Vorsicht!).

4.4  ÅBeschreibungdereinzelnenFunktionenÄ

DieFormulierung'DieFunktionXàprÅftÄeineBedingung'
bedeutet,daûdieFunktionbeiBestehenderBedingungerfÅllt
wirdundansonstenfehlschlÑgt.
'DieFunktionXversucht,zweiTermezuunifizieren'
bedeutet,daûdieFunktiongenaudannerfÅlltwird,wenndie
Unifikationerfolgreichist.

4.4.1     Programmablauf

4.4.1.1   SteuerungdesProgrammablaufs(imweitestenSinne)

ÑtrueÄ

WirdimmererfÅllt,kannabernichtwiedererfÅlltwerden.

ÑfailÄ

SchlÑgtimmerfehl.

ÑcallÄ(AUFRUF)

HatdenselbenEffektwieAUFRUF;wirdinbestimmtenFÑllen
vomInterpreterbenîtigt(unddannautomatischeingesetzt).

AUFRUFÑ,ÄAUFRUF

WirdgenaudannerfÅllt,wennPAR1àundÄPAR2(indieser
Reihenfolge)erfÅlltwerdenkînnen.

AUFRUFÑ;ÄAUFRUF

WirdgenaudannerfÅllt,wennPAR1àoderÄPAR2(indieser
Reihenfolge)erfÅlltwerdenkînnen.PAR2wirdnurbetrachtet,
wennPAR1fehlschlÑgtoder';'/2wiedererfÅlltwerdensoll.

ÑnotÄAUFRUF

WirdgenaudannerfÅllt,wennAUFRUFfehlschlÑgt.

ÑcheckÄ(AUFRUF)

WirdgenaudannerfÅllt,wennAUFRUFerfÅlltwird,aber
instantiiertkeineVariablen.

Ñside_effectsÄ(AUFRUF)

équivalentzucheck/1;solltebenutztwerden,wennesumdie
SeiteneffektevonPAR1geht.

ÑonceÄ(AUFRUF)

WirdgenaudannerfÅllt,wennAUFRUFerfÅlltwerdenkann,
aberkannnichtwiedererfÅlltwerden.

ÑtryÄ(AUFRUF)

Versucht,AUFRUFdeterministischzuerfÅllen(wieonce/1),
wirdaberunabhÑngigvomErfolgoderFehlschlagvonAUFRUF
immererfÅllt.

ÑrepeatÄ

WirderfÅlltundkannbeliebigoftwiedererfÅlltwerden.

ÑstopÄ

BewirktnormalerweisedenAbbruchvonTOYPrologST.Falls
dieBenutzerschnittstellemit'tag(loop)'voneinemProgramm
ausaufgerufenwurde,wirdnureinFehlschlagdiesesAufrufs
ausgelîst.

ÑhaltÄ(TERM)

GibtTERMausundbewirktdenAbbruchdesInterpreters.

ÑinterruptÄ

BewirkteineProgrammunterbrechung.SiehedenAbschnittÅber
denTestmodus.

ÑerrorÄ(TERM)

GibteineFehlermeldungaus;schlÑgtnormalerweisefehl,kann
aberverÑndertwerden.

ÑgoalÄ(TERM)

FallsPAR1einAUFRUFist,dannwirddieserAufrufzumneuen
ÅStandardzielÄdesInterpreters.Erwirdautomatisch
aufgerufen,wennderInterpreterdirekt(alsonichtÅberdie
Benutzerschnittstelle)vomEingabestrom'user'lesensoll.
àAusnahmeÄ:FallsPAR1derTerm'true'ist,wirddasmomentane
Standardzielgelîscht.

FallsPAR1eineVARIABLEist,wirddiesemitdemmomentanen
Standardzielunifiziert.FallskeinStandardzieldefiniert
ist,wirddazuderTerm'true'benutzt.

ImNormalfallist'ear'dasStandardziel.

âWARNUNG:ÄBevormaneinenAufrufzumStandardzielmacht,
solltemansichvergewissern,daûdie
entsprechendenPrÑdikatefehlerfreiundvollstÑndig
sind.Werwissenwill,wasansonstenpassiert,kann
jamal

:-goal(status),tagexit(loop).

ausprobieren.

4.4.1.2VerÑnderungdesProgrammablaufs

WennderAufrufeinesPrÑdikatseineKlauselinderDatenbank
aktiviert,dienichtdieletzteKlauseldeszugehîrigen
PrÑdikatsist,dannwirddermomentaneZustanddes
Interpretersineinem'failpoint'oder'backtrackpoint'
gespeichert,denmansichalsÅZeigerÄindieDatenbank
vorstellenkann.DieserZeigerwirdverwendet,umdienÑchste
KlauseldesPrÑdikatszufinden,wenneswiedererfÅlltwerden
soll.
DieÅdirektenNachkommenÄeinesAufrufsAsinddieAufrufein
derdurchihnaktiviertenKlausel;AistderenÅdirekter
VorfahrÄ.ÅNachkommenÄvonAsinddiedirektenNachkommenund
derenNachkommen;ÅVorfahrenÄvonAsindderdirekteVorfahr
undseineVorfahren.

Ñ!Ä   (gesprochen'cut',veraltetauch'slash')

WirderfÅllt,nachdemdernÑchsteVorfahrgefundenwurde,der
nichtcall/1,tag/1,,/2oder;/2ist.AlleDatenbankzeiger,
diezudiesemVorfahrenundseinenNachkommengehîren,werden
gelîscht.AlsResultatschlÑgtdergefundeneVorfahrfehl,
wenn'!'/0wiedererfÅlltwerdensoll.

ÑtagÄ(AUFRUF)

Bewirktdasselbewiecall(AUFRUF),allerdingsmiteinem
wichtigenUnterschied:wennderAufruftag(A)explizitin
einerKlauselsteht(alsoànichtÄz.B.call(tag(A))!),dann
kannvonAunddessenNachkommenausaufdenAufrufvontag/1
zugegriffenwerden.AistdanneinÅmarkierterVorfahrÄ(tag,
engl.:Marke,Etikett)seinerNachkommen.

ÑancestorÄ(TERM)

suchtnachdemnÑchstenmarkiertenVorfahren,dermitPAR1
unifiziertwerdenkann(Fehlschlag,fallskeinergefunden
wird).NachderUnifikationwirdancestor/1erfÅllt.

ÑtagcutÄ(TERM)

Kombinationvonancestor/1und!/0:wenneinmarkierter
VorfahrvonPAR1gefundenwurde,werdendiezuihmundseinen
NachkommengehîrendenDatenbankzeigergelîscht.

ÑtagfailÄ(TERM)

SuchtnachdemnÑchstenmarkiertenVorfahren,dermitPAR1
unifiziertwerdenkann;schlÑgtfehl,fallskeinergefunden
wird.BeiErfolgschlÑgtderàVorfahrÄsofortfehl.

ÑtagexitÄ(TERM)

Wietagfail/1,aberderVorfahrwirderfÅllt.

tag/1,ancestor/1,tagcut/1,tagfail/1undtagexit/1dienen
dazu,dennormalenProgrammablaufzudurchbrechen.Siewirken
Ñhnlichwie'goto'inimperativenProgrammiersprachenund
erschwerendadurchdasVerstÑndniseinesProgramms.
FÅrbestimmteAufgaben(AbbruchvonSchleifen,
Fehlerbehandlungetc.)sindsiesehrnÅtzlich,abersie
solltenÅmitVorsichtÄverwendetwerden.IndenmeistenProlog-
DialektengibtesÑhnlicheMîglichkeiten,inProlog-IIz.B.
ÑblocÄundÑfin-blocÄ(bzw.ÑblockÄundÑblock_endÄ).

4.4.2     Arithmetik,EinzelzeichenundVergleiche

4.4.2.1   Arithmetik

DiefrÅhervorhandenenFunktionensum/3undprod/4fallen
weg,dais/2jetzteineSystemfunktionist.

TERMÑisÄTERM

PAR2muûeinÅarithmetischerAusdruckÄsein,d.h.einTerm,der
nurausZahlen,denarithmetischenOperatoren'+'/1,'+'/2,
'-'/1,'-'/2,'*'/2,'/'/2,'mod'/2unddenlogischen
Operatoren'and'/2,'or'/2,'xor'/2und'not'/1besteht.Der
ÅWertÄdiesesAusdruckswirdberechnet(wobeidielogischen
OperationenbitweisedurchgefÅhrtwerden).Dannwird
versucht,PAR1mitdemerrechnetenWertzuunifizieren.

UmKompatibilitÑtmitProlog-10zuerreichen,wirdalsPAR2
aucheinTermderForm[N]zugelassen,wobeiNeineZahlist.
DerWertdiesesAusdrucksistN.

BeiBenutzungdesOperators'not'ineinemarithmetischen
AusdruckistVorsichtgeboten,dadieserOperatoreine
'falsche'PrioritÑthat(erwirdauchalsPrÑdikatbenutzt).

4.4.2.2   EinzelzeicheninTOYProlog

InProlog-10werdenEinzelzeichenalsASCII-Werte(alsoals
Zahlen)dargestelltundbehandelt.TOYPrologbenutzt
stattdesseneineandereDarstellung:

EinÅEinzelzeichenÄisteinLiteral,dessenNamegenauein
Zeichenlangist.Erlaubtsind(inderST-Version)alle
ZeichendeserweitertenZeichensatzesvonGEM.

ZurUmwandlungzwischenEinzelzeichenundihrenASCII-Werten
dientdieFunktionordchr/2:

ÑordchrÄ(ZAHL,ZEICHEN)

WirdgenaudannerfÅllt,wennPAR1dieOrdinalzahl(der
ASCII-Wert)vonPAR2ist.

ÑordchrÄ(VAR,ZEICHEN)

WirderfÅllt,nachdemPAR1mitderOrdinalzahlvonPAR2
unifiziertwurde.

ÑordchrÄ(ZAHL,VAR)

WirderfÅllt,nachdemPAR2mitdemZEICHENunifiziertwurde,
dessenOrdinalzahl(PAR1mod255)ist.

ZurKlassifikationvonZeichengibtesverschiedene
Funktionen:

ÑiseolnÄ(TERM)

Versucht,PAR1mitdemZeilenendezeichen(CR)zuunifizieren.

ÑsmalletterÄ(TERM)

öberprÅft,obPAR1einKleinbuchstabeist.AuchÑ,Å,ã,ë,...
sindKleinbuchstaben(sieheSyntaxbeschreibung).

ÑbigletterÄ(TERM)

öberprÅft,obPAR1einGroûbuchstabeist.Auché,ö,è,•,...
sindGroûbuchstaben(sieheSyntaxbeschreibung).

ÑletterÄ(TERM)

öberprÅft,obPAR1einKlein-oderGroûbuchstabeist.

ÑdigitÄ(TERM)

öberprÅft,obPAR1einZiffernzeichenist.

ÑalphanumÄ(TERM)

öberprÅft,obPAR1einBuchstabe,einZiffernzeichenoderein
Tiefstrich('_')ist.

ÑbracketÄ(TERM)

öberprÅft,obPAR1einesderZeichen()[]{}ist.

ÑsolocharÄ(TERM)

öbrprÅft,obPAR1einesderZeichen,;!ist.

ÑsymchÄ(TERM)

öberprÅft,obPAR1einSymbolzeichenist(siehe
Syntaxbeschreibung).

4.4.2.3   FunktionenzumVergleichenvonZahlenundAusdrÅcken

ÑlessÄ(ZAHL,ZAHL)

öberprÅft,obPAR1kleineralsPAR2ist.

TERMÑ=:=ÄTERM

PAR1undPAR2mÅssenarithmetischeAusdrÅckesein;eswird
ÅberprÅft,obsiedengleichenWerthaben.

TERMÑ=\=ÄTERM   (=\=)

     Wie=:=,aberöberprÅfungauf'ungleich'.

TERMÑ<ÄTERM

Wie=:=,abereswirdÅberprÅft,obWert(PAR1)<Wert(PAR2).

TERMÑ=<ÄTERM

Wie<,aberöberprÅfungauf'kleinerodergleich'.Man
beachtedievonanderenProgrammiersprachenabweichende
Schreibweise;derOperator'<='sollfÅrdenProgrammierer
zurVerfÅgungstehen(weilerschîneraussieht...).

TERMÑ>ÄTERM

Wie<,aberöberprÅfungauf'grîûer'.

TERMÑ>=ÄTERM

Wie<,aberöberprÅfungauf'grîûerodergleich'.

4.4.2.4FunktionenzumVergleichenvonLiteralen

NAMEÑ@<ÄNAME

öberprÅft,obPAR1inder(durchdenerweitertenZeichensatz
definierten)lexikographischenReihenfolgevorPAR2steht.

NAMEÑ@=<ÄNAME

Wie@<,aberÅberprÅftauf'kleinerodergleich'.

NAMEÑ@>ÄNAME

Wie@<,aberÅberprÅftauf'grîûer'.

NAMEÑ@>=ÄNAME

Wie@<,aberÅberprÅftauf'grîûerodergleich'.

4.4.2.5   FunktionenzumVergleichvonTermen

ÑeqvarÄ(VAR,VAR)

öberprÅft,obPAR1undPAR2zweiInstanzenderselben,nicht
anonymenVariablensind.

TERMÑ==ÄTERM

öberprÅft,obPAR1undPAR2zweiInstanzendesselbenTerms
sind.

TERMÑ\==ÄTERM       (\==)

Wie==,aberÅberprÅftaufUngleichheit.

àUnifikationsoperatorÄ:

TERMÑ=ÄTERM

Versucht,PAR1undPAR2zuunifizieren.

     ZurUnifikationinTOYPrologistnochfolgendesanzumerken:
DerverwendeteAlgorithmusenthÑlt(wieallgemeinÅblich)aus
EffizienzgrÅndenkeinen"occurrencecheck",d.h.eswird
nichtÅberprÅft,obeinTermsichselbstenthÑlt(voroder
nachdemUnifizieren).DaherkînnenbeiderUnifikation
ÅzyklischeÄDatenstrukturenentstehen.SolcheDatenstrukturen
mÅssenmitgroûerVorsichtbehandeltwerden,daderVersuch,
siemitanderenTermen(odersichselbst)zuunifizieren,den
InterpreterineineÅEndlosschleifeÄfÅhrt.

InfrÅherenVersionendesInterpretersfÅhrtensolcheTerme
auchbeiderAusgabezuEndlosschleifen;dieVersion4hat
diesenNachteilnichtmehr(sieheunten).

4.4.3     Ein-undAusgabe(allgemein)

DieEin-undAusgabeinTOYPrologSTgeschiehtÅber
ÅDatenstrîmeÄ.VomBenutzerausgesehenisteinDatenstromein
Literal,nÑmlichentwederderNameeinesÅvordefiniertenÄoder
ÅStandard-DatenstromsÄ,oderderNameeinerDiskettendateides
TOS.Groû-undKleinschreibungwerdendabeiignoriert,d.h.
'USER'und'user'bezeichnenzwarverschiedeneLiterale,aber
denselbenDatenstrom.

4.4.3.1   VordefinierteDatenstrîme

EinvordefinierterDatenstromkanngleichzeitigzumLesenund
Schreibenbenutztwerden;Ausnahmensind'printer'(Lesen
nichterlaubt)und'memory'(Lesen/Schreibennicht
gleichzeitigmîglich).

     Esgibt6vordefinierteDatenstrîme:

àNameÄàLesezugriffÄàSchreibzugriffÄ

userStandardeingabeStandardausgabe
(Tastaturgepuffert)(Bildschirm)
keybdTastatureingabe          AusgabeandenProzessor
(ungepuffert)inderTastatur
printer-nichterlaubt-Centronics-Schnittstelle
modemRS232EingabeRS232Ausgabe
midiMIDIEingabeMIDIAusgabe
memoryEinreservierterTextpuffer,dervomeingebauten
Bildschirmeditorbenutztwird.ErspeichertZeilen
vonje80ZeichenLÑnge(öberlÑngenwerdenerkannt
undvomEditorunterstÅtzt).DerPufferkann
beliebigvieleZeilenaufnehmen(solangeder
SpeichernichtÅberlÑuft).

4.4.3.2   Dateistrîme

DerNameeinesDateistromskanneinbeliebigerDateinamedes
TOSsein,mitLaufwerksbezeichnung,PfadnamenundDateinamen.
'Wildcards'sindnichterlaubt.AufeineDateikannlesend
und-fallssienichtschreibgeschÅtztist-schreibend
zugegriffenwerden,aberÅnichtgleichzeitigÄ.DerVersuch,
einenDateistromzumLesenÅundÄSchreibenzuîffnen,fÅhrtzum
Fehlschlag.MehrmaligesôffneninderselbenRichtungwird
ignoriert.

EskînnenbeliebigvieleDateistrîmegleichzeitigoffensein.

4.4.3.3ôffnen,SchlieûenundUmschaltenvonDatenstrîmen

ÑseeÄ(DATEINAME)

SchaltetdieEingabeaufdenangegebenenDatenstromum.Falls
essichumeinenochnichtgeîffneteDateihandelt,wird
diesezumLesengeîffnet.

ÑseeingÄ(TERM)

Versucht,PAR1mitdemNamendesaktuellenEingabestromszu
unifizieren.

ÑseenÄ

SchlieûtdenaktuellenEingabestromundschaltetdieEingabe
auf'user'um.

ÑtellÄ(DATEINAME)

SchaltetdieAusgabeaufdenangegebenenDatenstromum.Falls
essichumeinenochnichtgeîffneteDateihandelt,wirdsie
ÅgelîschtÄundzumNeuschreibengeîffnet.AuchderTextpuffer
'memory'wirdbeimAufrufvontell/1gelîscht.

ÑretellÄ(DATEINAME)

Wietell/1,abereineschonexistierendeDateiwirdnicht
gelîscht,sondernzumFortschreibengeîffnet,d.h.neueDaten
werdenansEndeangehÑngt.DerTextpuffer'memory'wirddurch
retell/1ebenfallsnichtgelîscht.

ÑtellingÄ(TERM)

Versucht,PAR1mitdemNamendesaktuellenAusgabestromszu
unifizieren.

ÑtoldÄ

SchlieûtdenaktuellenAusgabestromundschaltetdieAusgabe
auf'user'um.

ÑioresetÄ(DATEINAME)

BeiBenutzungvonDateinstrîmen(bzw.desTextpuffers)kann
eszueinerVerklemmungkommen,wennderDatenstromdurch
einenProgrammabbruch(z.B.nacheinemFehler)geîffnet
bleibt.Durchioreset/1wirdeinesolcheVerklemmung
beseitigt,ohnedenInhaltdesDatenstromszulîschen.
DiesesPrÑdikatsollteinsbesonderevorÅjedemÄôffnendes
Textpuffersaufgerufenwerden.

4.4.3.4   SpezielleFunktionenfÅrEingabestrîme

ÑechoÄ

ErlaubtdieKontrollederEingabevoneinerDateiodereinem
PeripheriegerÑt.Nach'echo'werdenalleeingelesenenZeichen
zurKontrolleaufdemBildschirmausgegeben.

ÑnoechoÄ

SchaltetdieKontrollausgabewiederab.

Ñset_fstringÄ(ZAHL,NAME)

ErlaubtdieBelegungderFunktionstastenmitZeichenketten,
diebeimBetÑtigenderTasteneingelesenwerden.Die
erlaubtenWertefÅrPAR1,zusammenmitdenentsprechenden
Tasten,sind:

àWerteÄàTastenÄ
0-9F1bisF10
10-19F1bisF10mitShift
20-29F1bisF10mitAlternate
30-39F1bisF10mitAlternateundShift
40Help

FÅrPAR2,alsodasLiteral,dessenNamealsZeichenkette
benutztwird,giltnochfolgendes:
StehtimNamenein'backslash'(\),dannwirddasfolgende
Zeichensointerpretiert,alsobdieentsprechendeTaste
zusammenmit'Control'gedrÅcktwordenwÑre.Beispiele:

\H-'Backspace',\M-'Return',\Z-'EOF'

Umeineinzelnes'\'indieZeichenketteaufzunehmen,
schreibtman'\\'(wieÅblich...).

Ñ'$edit'Ä(TERM)

Diese'primitive'Systemfunktionbildetdieeinzige
SchnittstellezumBildschirmeditor.SieruftdenEditorauf;
nachdemVerlassendesEditorsmit'Escape'wirdversucht,
PAR1mitdemTermimTextpufferzuunifizieren.'$edit'/1
schlÑgtfehl,wennderEditormit'Undo'verlassenwird.
DieVerwendungdieserFunktionwirdnichtempfohlen;zum
EditierenvonTermensollteedit/2,zumVerÑndernvon
Klauselnedit/3verwendetwerden.DieseFunktionbenutzen
'$edit'/1.

4.4.3.5   FunktionenzurEin-undAusgabevonTermen

BeiderAusgabevonTermenmitdisplay/1,write/1und
writeq/1werdenzyklischeDatenstrukturen(ÅunendlicheTermeÄ)
erkannt.BeiderAusgabesolcherTermewirdeinTeilterm,der
innerhalbseinerselbstvorkommt,infolgenderForm
ausgegeben:

          <Funktor>:<Zahl>

Dabeiist<Funktor>derNamedesÑuûerstenFunktorsdes
Teilterms,<Zahl>gibtdieSchachtelungstiefean.

     Beispiel:      X=f(X)fÅhrtzurAntwort
X=f(f:1)

ÑdisplayÄ(TERM)

GibtPAR1inkanonischerFormaufdenaktuellenAusgabestrom
aus.

ÑwriteÄ(TERM)

GibtPAR1aufdenaktuellenAusgabestromaus.Diemomentanen
Operatorvereinbarungenwerdenbeachtet,aberNamenwerden
nichtinApostrophengesetzt.

ÑwriteqÄ(TERM)

Wiewrite/1,aberLiterale,diekeineNamenoderSymbole
sind,oderdieinKonfliktzueinerOperatorvereinbarung
stehen,werdeninApostrophengesetzt.Terme,diemit
'writeq'ausgegebenwurden,kînnenmit'read'wieder
eingelesenwerden.

ÑprettyprintÄ(TERM)

DerTermwirdalsKlauselausgegeben:JederAufrufkommtauf
eineeigeneZeileundwirdeingerÅckt.AnsEndewirdein
PunktangehÑngt.Ansonstenwiewriteq/1.

ÑwritetextÄ(STRING)

EinSTRINGisteineLISTEausEinzelzeichen.DieZeichen
werdenohneZwischenraumaufdenaktuellenAusgabestrom
ausgegeben.

àBemerkung:ÄDurchEingabevon'Control+C'wÑhrendeiner
AusgabekanndasaktuelleZielabgebrochen
werden.DerInterpreterruftdanachwiederdas
Standardzielauf.Alleo.a.Funktionenkînnen
dadurchunterbrochenwerden.
Eingabevon'Control+S'hÑltdieAusgabean,
ohnesieabzubrechen.Mit'Control+Q'kanndie
Ausgabedanachwiederfreigegebenwerden.

ÑreadÄ(TERM)

LiesteinenTermvomaktuellenEingabestrom(unter
BerÅcksichtigungdermomentanenOperatorvereinbarungen).Der
TermmuûdurcheinenPunktabgeschlossenwerden.Eswird
versucht,PAR1mitdemTermzuunifizieren.

FallseinSyntaxfehlerentdecktwird,wirdeineentsprechende
MeldungausgegebenunddereingegebeneTextbiszumnÑchsten
PunktÅbersprungen(auûerhalbvonKommentarenoderNamen;
fallskeinPunktgefundenwird,muûderBenutzereinen
eingeben.ImZweifelsfallzuerst'Return'drÅcken.Auchder
Abbruchmit'Control+Z'istmîglich).Danachwirdversucht,
PAR1mitdemLiteral'err'zuunifizieren.

Wirdversucht,ÅberdasEndeeinerDateihinauszulesen,
sowirddieEingabeautomatischauf'user'umgeschaltetund
read/1schlÑgtfehl.

ÑreadÄ(TERM,TERM)

Wieread/1,aberPAR2wirdmiteinerÅSymboltabelleÄunifiziert
(fÅrdieBenutzerschnittstelle,ansonstenunwichtig).

4.4.3.6   OperatorvereinbarungundvordefinierteOperatoren

ÑopÄ(ZAHL,LITERAL,LITERAL)

VereinbartPAR3alsOperatormitTypPAR2undPrioritÑtPAR1.
Esmuûgelten1ÛPAR1Û1200;OperatorenmitkleinererZahl
habenVorrang.DiePrioritÑtwirdimNormalfallkleinerals
1000gewÑhltwerden,umKonfliktemitdenOperatoren',',
';',':-'und'-->'zuvermeiden.
PAR2muûausderMenge{xf,yf,fx,fy,xfx,xfy,yfx}
gewÑhltwerden.PAR3muûohneApostrophendruckbarsein.
FallsbereitseineOperatorvereinbarungfÅrPAR3besteht,
wirdsiemodifiziert;einOperatorkanngleichzeitigeinen
binÑrenundeinenunÑrenTypbesitzen,aberbeidemitder
gleichenPrioritÑt.

ÑdelopÄ(LITERAL)

LîschtdieOperatorvereinbarungfÅrPAR1.

DiefolgendenÅStandardoperatorenÄsindvordefiniert(teilsim
Interpreterselbst,teilsinSYSFILE.TOY):

àNameÄàTyp(en)Ä   àPrioritÑtÄ

:-xfx,fx1200
-->xfx1200
;xfy1100
,xfy1000
notfy900
=xfx700
isxfx700
=:=xfx700
=\=xfx700
<xfx700
=<xfx700
>xfx700
>=xfx700
@<xfx700
@=<xfx700
@>xfx700
@>=xfx700
==xfx700
\==xfx700
=..xfx700
oryfx650
andyfx600
xoryfx600
+yfx,fx500
-yfx,fx500
*yfx400
/yfx400
modxfx300

4.4.4Ein-undAusgabevonEinzelzeichen

DieEin-undAusgabevonEinzelzeicheninTOYPrologweicht
vonderinProlog-10angetroffenenMethodeab.InProlog-10
gibtesOperationenwie'get','put','skip',diemitASCII-
Wertenarbeiten.
DerHauptunterschiedliegt-nebenderReprÑsentationder
Zeichen-inderArtundWeise,wieTOYPrologundProlog-10
dieEingabehandhaben.'get'inProlog-10holtimmerdas
nÑchsteZeichen;diesesZeichengehtverloren,wenn'get'
wiedererfÅlltwerdensoll.InTOYPrologwirdeinZeichenin
einenÅPufferÄgelesenundbleibtsolangeerhalten,bisdas
nÑchsteZeichenindenPufferwandert.AuchdasBacktracking
ÑndertdenPuffernicht.

DieFunktionenvonProlog-10kînnenauffolgendeWeise
nachgebildetwerden,sindaberwegendeserwÑhntenVerhaltens
nichtvollstÑndigkompatibel:

get0(Ord):-rch,lastch(Ch),ordchr(Ord,Ch).

get(Ord):-rch,skipbl,lastch(Ch),ordchr(Ord,Ch).

skip(X):-repeat,get0(X),!.

put(Ord):-ordchr(Ord,Ch),wch(Ch).

4.4.4.1   FunktionenzurEin-/AusgabevonEinzelzeichen

ÑrchÄ

LiesteinZeichenvomaktuellenEingabestrominden
Zeichenpuffer.

ÑskipblÄ

LiestsolangeZeichenvomEingabestrom,bisderZeichenpuffer
eindruckbaresZeichenenthÑlt.FallsschonvordemAufruf
vonskipbl/0eindruckbaresZeichenimZeichenpuffersteht,
passiertnichts.

ÑlastchÄ(TERM)

Versucht,PAR1mitdemInhaltdesZeichenpufferszu
unifizieren.

ÑrdchÄ(TERM)

LiesteinZeichenindenZeichenpufferundversucht,PAR1mit
einerKopiedesZeichenszuunifizieren.Nichtdruckbare
ZeichenwerdeninBlanks(ASCII32)umgewandelt

ÑrdchskÄ(TERM)

Wierdch/1,abervorherwirdskipbl/0aufgerufen.

ÅAlleÄdieseEingabefunktionenschlagenfehl,wenndas
Dateiende(bzw.EOF)erreichtwurde.

ÑwchÄ(ZEICHEN)

SchreibtPAR1aufdenaktuellenAusgabestrom.CRwirdals
Zeilentrennerangesehen(undinCR-LFumgewandelt).

ÑnlÄ

GibtdasZeichenCRaus(Zeilenvorschub,ÅnewlineÄ).

ÑbellÄ

GibtdasZeichenBEL(ASCII7)aus-Glockenzeichenbei
Bildschirmausgabe,PiepserbeivielenDruckern.

4.4.4.2   Escape-Sequenzen

DasZeichenESC(ASCII27)hatbeiAusgabeaufdenBildschirm
eineSteuerfunktion:dieihmfolgenden1-3Zeichenwerden
nichtgedruckt,sondernalsKommandosinterpretiert
(entsprechendesgiltfÅrpraktischalleDrucker-siehederen
HandbÅcher).
DadieseinewichtigeundbequemeFunktionist,existiertdie
Funktion

ÑescapeÄ

GibtdasZeichenESCaufdenaktuellenAusgabestromaus.

EinBeispielzurAnwendungist

ÑclsÄ

GibtESCund'E'aus-LîschendesBildschirms.

WeitereEscape-SequenzenfÅrdenATARIST:

ESCACursorhoch
ESCBCursorrunter
ESCCCursorrechts
ESCDCursorlinks
ESCHCursorobenlinks
ESCICursorhochundrunterscrollen
ESCJLîschenvonCursorpositionbisBildschirmende
ESCKLîschenvonCursorpositionbisZeilenende
ESCLZeileeinfÅgen
ESCMZeilelîschen
ESCYÅrÄÅcÄCursornachZeile(ÅrÄ-32),Spalte(ÅcÄ-32)
ESCbÅcÄVordergrundfarbe:=ÅcÄ
ESCcÅcÄHintergrundfarbe:=ÅcÄ
ESCdLîschenBildschirmanfangbisCursorposition
ESCeCursoreinschalten
ESCfCursorausschalten
ESCjCursorpositionspeichern
ESCkCursorandiegespeichertePosition
ESClZeilelîschen,CursorzumlinkenRand
ESCoLîschenZeilenanfangbisCursorposition
ESCpReverseVideo(InvertierteSchrift)an
ESCqReverseVideoaus
ESCvZeilensprungan
ESCwZeilensprungaus
4.4.5     TermtypenundTermstruktur

4.4.5.1   FunktionenzurKlassifizierungvonTermen

ÑvarÄ(TERM)

WirdgenaudannerfÅllt,wennPAR1eine(freie)Variableist.

ÑatomÄ(TERM)

WirdgenaudannerfÅllt,wennPAR1einLiteralist.

ÑintegerÄ(TERM)

WirdgenaudannerfÅllt,wennPAR1eineZahlist.

ÑnonvarintÄ(TERM)

WirdgenaudannerfÅllt,wennPAR1einFTERM(auchohne
Argumente)ist.

ÑisclosedlistÄ(TERM)(sieheAbschnitt4.4.8)

öberprÅft,obPAR1eine"geschlossene"Listeist.

4.4.5.2   FunktionenzumZugriffaufdieTermstruktur

ÑfunctorÄ(VAR,ZAHL,0)

PAR3muûdieZahl0sein;PAR1undPAR2werdenunifiziert.

ÑfunctorÄ(VAR,LITERAL,ZAHL)

PAR1wirdmiteinemFTERMunifiziert,dessenFunktorden
NamenunddieStelligkeithat,diedurchPAR2undPAR3
festgelegtwerden,unddessenArgumenteverschiedenefreie
Variablensind.PAR3darfnichtnegativsein.

ÑfunctorÄ(ZAHL,TERM,TERM)

Versucht,PAR2mitPAR1undPAR3mitderZahl0zu
unifizieren.

ÑfunctorÄ(FTERM,TERM,TERM)

Versucht,PAR2mitdemNamenundPAR3mitderStelligkeitdes
ÑuûerstenFunktorsvonPAR1zuunifizieren.

ÑargÄ(ZAHL,FTERM,TERM)

SchlÑgtfehl,fallsPAR1kleinerals1odergrîûeralsdie
StelligkeitdesÑuûerstenFunktorsvonPAR2ist;ansonsten
wirdversucht,PAR3mitdemPAR1-tenArgumentvonPAR2zu
unifizieren.

VARÑ=..Ä[ZAHL]      (gesprochen"univ")

WirderfÅllt,nachdemPAR1mitderZahlinPAR2unifiziert
wurde.

VARÑ=..Ä[LITERAL|TERM]

TERMinPAR2muûeine("geschlossene")Listesein.Eswird
einFTERMerzeugt,dessenFunktorLITERALunddessen
ArgumentlisteTERMist;dieserFunktor-TermwirdmitPAR1
unifiziert.

ZAHLÑ=..ÄTERM

Versucht,PAR2mit[PAR1]zuunifizieren.

FTERMÑ=..ÄTERM

ErzeugteineListe,derenKopfderÑuûersteFunktorvonPAR1
undderenRumpfdieListederArgumentevonPAR1ist.
Versucht,dieseListemitPAR2zuunifizieren.

ÑpnameÄ(LITERAL,TERM)

ErzeugteineListederEinzelzeichen,ausdenenderNamevon
PAR1besteht,undversucht,dieseListemitPAR2zu
unifizieren.

ÑpnameÄ(VAR,STRING)

PAR2muûeineListevonEinzelzeichensein;PAR1wirdmit
einemLITERALunifiziert,dessenNameausdenEinzelzeichen
besteht.

ÑpnameiÄ(ZAHL,TERM)

ErzeugteineListederZiffernzeichen,diediedezimale
DarstellungvonPAR1bilden,undversucht,dieseListemit
PAR2zuunifizieren.ÅPAR1darfnichtnegativseinÄ.

ÑpnameiÄ(VAR,STRING)

PAR2muûeineListevonZiffernzeichenseinunddarf
insbesondereÅkeinVorzeichenÄenthalten.PAR1wirdmitder
Zahlunifiziert,derenDezimaldarstellungdieZifferninPAR2
sind.AuchbeisyntaktischkorrektenParameternkannein
ÅnumerischeröberlaufÄauftreten,fallsderdarstellbare
Zahlenbereich(momentanbis32767=2ê15Ä-1)Åberschritten
wird.

'pname'und'pnamei'entsprechenderFunktion'name'von
Prolog-10,dienichtmitEinzelzeichen,sondernmitASCII-
Wertenarbeitet.

4.4.6     ZugriffaufdieDatenbank;dynamischeProgrammierung

4.4.6.1   SchutzvorVerÑnderung

ÑprotectÄ(LITERAL,ZAHL)

DieKlauselndesPrÑdikats,dessenFunktordurchPAR1(Name)
undPAR2(Stelligkeit)bestimmtwird,werdenvor
VerÑnderungengeschÅtzt.

ÑprotectÄ(LITERAL,VAR)

Wieoben,jedochwerdenallePrÑdikatemitdemangegebenen
ÅNamenÄ(unabhÑngigvonihrenStelligkeiten)geschÅtzt.Die
Variablewirdnichtinstantiiert.

ÑprotectÄ(VAR,ZAHL)

Wieoben,jedochwerdenallePrÑdikatemitderangegebenen
ÅStelligkeitÄ(unabhÑngigvonihrenNamen)geschÅtzt.Die
Variablewirdnichtinstantiiert.

ÑprotectÄ(VAR,VAR)

Wieoben,jedochwerdenÅalleÄPrÑdikateinderDatenbank
geschÅtzt.DieVariablenwerdennichtinstantiiert.

FÅralleAufrufmustergiltdieEinschrÑnkung,daûPrÑdikate,
fÅrdiekeineKlauselninderDatenbankvorhandensind,ànichtÄ
geschÅtztwerden.

ÑunprotectÄ(TERM,TERM)

AlleAufrufmustervonprotect/2sindgÅltig.FÅrdie
ausgewÑhltenPrÑdikatewirdderSchutzaufgehoben.

4.4.6.2   AbfragenvonInformationen/LesenvonKlauseln

ÑpredefinedÄ(LITERAL,ZAHL)

WirdgenaudannerfÅllt,wenndurchPAR1undPAR2derFunktor
einerSystemfunktionbezeichnetwird.PAR2darfnichtnegativ
sein.

ÑprocÄ(TERM)

Versucht,PAR1miteinemFTERM,derdenNamenunddie
StelligkeitdeserstenPrÑdikatsinderDatenbankbesitzt,zu
unifizieren.Sollproc/1wiedererfÅlltwerden,wirdjeweils
dasnÑchstePrÑdikatbenutzt;amEndederDatenbankschlÑgt
proc/1fehl.DieReihenfolgeistànichtÄalphabetisch(siewird
durchdas'hashing'beimSpeichernvonFunktorenbestimmt).

proc/1benutztdie'primitiven'Systemfunktionen'$procinit',
'$proc'und'$proclimit'.DadieseFunktionenalleinkeinen
besonderenNutzenbieten,wirdaufihreFunktionnichtweiter
eingegangen.

ÑclauseÄ(LITERAL,ZAHL,ZAHL,TERM,TERM)

PAR2darfnichtnegativsein.DurchPAR1undPAR2wirdein
PrÑdikatfestgelegt;fallseskeineKlauselmitNummerPAR3
besitzt,schlÑgtclause/5fehl.Andernfallswirdversucht,
PAR4mitdemKopfundPAR5mitdemRumpfderKlauselzu
unifizieren.FaktenerhaltendabeidenRumpf'true'.

ÑclauseÄ(FTERM,TERM)

FindetdieersteKlausel,derenKopfmitPAR1undderenRumpf
mitPAR2unifiziertwerdenkann,undwird(nachUnifikation)
erfÅllt.Sollclause/2wiedererfÅlltwerden,sowirdnachder
nÑchstenKlauselgesucht,usw.FaktenerhaltendenRumpf
'true'.

ÑlistingÄ(LITERAL)

AlleKlauselnallerPrÑdikatemitNamenPAR1werdenaufden
aktuellenAusgabestromausgegeben.

ÑlistingÄ(LITERAL/ZAHL)

AlleKlauselndesdurchPAR1bestimmtenPrÑdikatswerden
ausgegeben.

ÑlistingÄ(LISTE)

DieElementevonPAR1mÅssenentwederLITERALeoderTermeder
FormLITERAL/ZAHLsein(oderverschachtelteListendieser
Form).FÅrjedesElementvonPAR1wirdlisting/1aufgerufen.

ÑlistingÄ

AlleKlauselninderDatenbankwerdenaufdenaktuellen
Ausgabestromausgegeben.ZurReihenfolgesieheproc/1.

4.4.6.3EntfernenvonKlauselnausderDatenbank

ÑretractÄ(LITERAL,ZAHL,ZAHL)

PAR2darfnichtnegativsein.PAR1undPAR2bestimmenein
PrÑdikat;fallsdieseskeineKlauselmitNummerPAR3besitzt,
schlÑgtretract/3fehl.Ansonstenwirdretract/3nach
EntfernenderentsprechendenKlauselausderDatenbank
erfÅllt.
âAchtung:ÄFallszumZeitpunktderLîschungnochInstanzender
gelîschtenKlauselaktivsind,werdenindenallermeisten
FÑllenÅkatastrophaleÄFehler(mitnachfolgendemSystemabsturz)
auftreten!DasLîschenderKlausel,inderdergeradeaktive
Aufrufvonretract/3steht,gehîrtzudieserSortevon
Fehlern.

ÑretractÄ(FTERM)

BehandeltPAR1alseineKlausel;fallsderenÑuûerster
Funktor':-'/2ist,muûdasersteseinerArgumenteeinFTERM
sein.DieerstemitPAR1unifizierbareKlauselwirdausder
Datenbankentfernt.Wennretract/1wiedererfÅlltwerdensoll,
wirddienÑchstemitPAR1unifizierbareKlauselgelîscht,
usw.ZuFehlersituationensieheretract/3.

ÑabolishÄ(LITERAL,ZAHL)

PAR2darfnichtnegativsein;dasdurchPAR1undPAR2
bestimmtePrÑdikatwirdvollstÑndiggelîscht.Zu
Fehlersituationensieheretract/3.

4.4.6.4   AufnehmenneuerKlauselnindieDatenbank

ÑassertÄ(FTERM,TERM,ZAHL)

PAR2muûeinkorrekterKlauselrumpfsein.DurchPAR1undPAR2
wirdeineRegeloder-wennPAR2'true'ist-einFakt
beschrieben.DieseKlauselwirddirektnachdern-tenKlausel
desdurchPAR1bestimmtenPrÑdikatsindieDatenbank
eingefÅgt(n=PAR3,fallsdieKlauselmitdieserNummer
existiert;n=NummerderletztenKlausel,fallsPAR3>
AnzahlderKlauseln;fallsPAR3<1,wirddieneueKlausel
alsersteeingefÅgt).

ÑassertaÄ(FTERM)

PAR1muûeinesyntaktischkorrekteKlauselsein.Siewirdals
ÅersteÄKlauseldesentsprechendenPrÑdikatsindieDatenbank
eingefÅgt('a'istÅersterÄBuchstabedesAlphabets...).

ÑassertzÄ(FTERM)

Wieasserta/1,aberPAR1wirdalsÅletzteÄKlauseldes
entsprechendenPrÑdikatsindieDatenbankeingefÅgt('z'ist
ÅletzterÄBuchstabedesAlphabets...).

ÑassertÄ(FTERM)

EinSynonymfÅrasserta/1-bewirktgenaudasselbe.

4.4.6.5   EinlesenundAbspeichernvonPrÑdikaten

ÑconsultÄ(DATEINAME)

SchaltetdieEingabeaufPAR1umundliestKlauseln,die
danachmitassertz/1gespeichertwerden.Esgibtdabeieine
Ausnahme:TermemitdemFunktor':-'/1sindKommandosund
werdensofortausgefÅhrt.DasDateiendebzw.dasvonder
TastaturauseingegebeneZeichenEOF(Control+Z)beendetden
Einlesevorgang.

ÑreconsultÄ(DATEINAME)

Wieconsult/1,aberdiealtenKlauselndereingelesenen
PrÑdikatewerdenÅÅberschriebenÄ.Eswerdennur
zusammenhÑngendeFolgenvonKlauselnerkannt;Beispiel:

à?-Äreconsult(user).
prÑdikat1(eins).
prÑdikat2.
prÑdikat1(zwei).
end.
àyesÄ
à?-Älisting(prÑdikat1)
àprÑdikat1(zwei).Ä
àyesÄ

ÑconsultallÄ(LISTE)

DieElementevonPAR1mÅsseneinfacheDATEINAMEnoderTerme
derForm-DATEINAMEsein(auchgemischt).FÅrjeden
einfachenDATEINAMEnwirdconsult/1,fÅrjedenanderen
reconsult/1aufgerufen.DiesesPrÑdikatwirdvonder
Benutzerschnittstelleaufgerufen,wenneineListeals
Kommandoeingegebenwurde.

ÑsaveÄ(TERM,DATEINAME)

MitdiesemPrÑdikatkînneneinzelnePrÑdikateoderGruppen
vonPrÑdikatenalsDateienabgespeichertwerden.PAR1darf
alleWerteannehmen,diealsArgumentevonlisting/1erlaubt
sind(siehedort).PAR2gibtdieerzeugteDateian.

4.4.6.6PrÑdikatezumAufrufdesBildschirmeditors

ÑeditÄ(TERM,TERM)

DiesesPrÑdikatdientdazu,einenTerminteraktivzu
verÑndern.PAR1wirdindenTextpuffergeschriebenundder
Editoraufgerufen.NachdemVerlassendesEditorsmitÅEscapeÄ
wirdversucht,PAR2mitdemeditiertenTermzuunifizieren.
WirdderEditormitÅUndoÄabgebrochen,soschlÑgtedit/2fehl.

ÑeditÄ(LITERAL,ZAHL,ZAHL)

DiesesPrÑdikatdientdazu,KlauselninderDatenbankgezielt
zuverÑndern.DieParameterentsprechendenParameternvon
retract/3:PAR1muûNameeinesPrÑdikatssein,PAR2dessen
Stelligkeit;wenneineKlauselmitNummerPAR3existiert,
wirdsieindenTextpuffergeschriebenundkanninteraktiv
verÑndertwerden.NachVerlassendesEditorsmitÅEscapeÄwird
diealteVersionderKlauseldurchdieneueàersetztÄ.Eswird
nichtÅberprÅft,obdiealteunddieneueKlauseldemselben
PrÑdikatangehîren;deshalbkannmanmitedit/3auchKlauseln
voneinemPrÑdikatineinanderesversetzen.
MitÅUndoÄkannwieÅblichderEditorabgebrochenwerden,ohne
dasbearbeitetePrÑdikatzuverÑndern.

4.4.7     HilfsmittelzumTestenvonProgrammen

4.4.7.1AnzeigevonundefiniertenPrÑdikaten

ÑnonexistentÄ

SorgtdafÅr,daûAufrufevonundefiniertenPrÑdikatenam
Bildschirmgemeldetwerden.

ÑnononexistentÄ

SchaltetdieöberwachungundefinierterPrÑdikateaus.

4.4.7.2   DerTestmodus

ImTestmoduskînneneinzelnePrÑdikateÅberwachtwerden.FÅr
einÅberwachtesPrÑdikatwerdenMeldungenderfolgenden
Formenausgegeben:

CALL:AufrufwenndasPrÑdikatzumerstenMal
aufgerufenwird.
REDO:Name/Stell.wenndasPrÑdikatwiedererfÅlltwerden
soll.
EXIT:AufrufwenndasPrÑdikaterfolgreichverlassen
wird.
FAIL:Name/Stell.wenndasPrÑdikatfehlschlÑgt.

VorderMeldungwerdendieSchachtelungstiefenderAufrufeim
Kontrollstackausgegeben.

ÑspyÄ(TERM,TERM)

SchaltetdenTestmodusein.ZurBestimmungderbetroffenen
PrÑdikatesindalleAufrufmustervonprotect/2erlaubt.

ÑdebugÄ

SchaltetdenTestmodusfÅrÅalleÄPrÑdikateinderDatenbank
einundsorgtdafÅr,daûauchÅneueingegebeneÄPrÑdikatein
denTestmodusversetztwerden.

ÑnospyÄ(TERM,TERM)

SchaltetdenTestmodusaus.EssindalleAufrufmustervon
protect/2erlaubt.

ÑnodebugÄ

SchaltetdenTestmodusfÅrÅalleÄPrÑdikateausundsorgt
dafÅr,daûneueingegebenePrÑdikatenichtmehrautomatisch
indenTestmodusversetztwerden.

ÑspiedÄ(LITERAL,ZAHL)

PAR2darfnichtnegativsein.EswirdÅberprÅft,obdasdurch
PAR1undPAR2bestimmtePrÑdikatsichimTestmodusbefindet.

4.4.7.3   ProgrammunterbrechungundEinzelschrittmodus

DerProgrammablaufkannzuTestzweckenunterbrochenwerden.
DaskannaufdreiverschiedeneArtengeschehen:

---ÅExterneUnterbrechungÄdurchdenBenutzer:werdenauf
derTastaturdieTasten'Shift','Alternate'und'Help'
gleichzeitiggedrÅckt,soerfolgtÅbeimnÑchstenAufrufÄ
eineUnterbrechung.DieHardcopy-Funktion(mit
'Alternate'und'Help'allein)istnochverfÅgbar.
---ÅProgrammierteUnterbrechungÄ:EinAufrufderFunktion
interrupt/0bewirktebenfallseineUnterbrechung.
---DerAufrufeinesimÅEinzelschrittmodusÄbefindlichen
PrÑdikatesbewirktebenfallseineUnterbrechung.

WirddaslaufendeProgrammaufeinedieserArten
unterbrochen,sowirdeineMeldungderForm

INTR:Aufruf

ausgegeben,àsofernsichdasunterbrochenePrÑdikatnicht
Äàschonim  âTestmodusàbefindetÄ.Anschlieûendwirdinder
unterstenBildschirmzeileeinMenÅausgegeben,ausdem
folgendeOptionengewÑhltwerdenkînnen:

ÅAÄbortDasunterbrocheneZielwirdabgebrochen
(einschlieûlichderBenutzerschnittstelle).
ÅBÄacktraceDieVorfahrendesunterbrochenenZielswerden
angezeigt.
ÅCÄontinueDasunterbrocheneZielwirdbearbeitet.
ÅDÄebugON/OFFJenachAnzeigewirddebug/0(ON)oder
nodebug/0(OFF)aufgerufen.
ÅFÄailDasunterbrocheneZielschlÑgtohneweitere
Betrachtungfehl(ÅerzwungenerFehlschlagÄ).
ÅSÄtepON/OFFJenachAnzeigewirdstep/0(ON)odernostep/0
(OFF)aufgerufen.
SÅTÄatusstatus/0wirdaufgerufen(sieheAbschnitt
4.4.10).

AlleanderenEingabenwerdenignoriert.

ÑinterruptÄ

UnterbrichtdaslaufendeProgramm.ErfolgoderFehlschlag
hÑngenvonderEingabedesBenutzersab.interrupt/0kann
z.B.wÑhrendderTestphaseeinesProgrammsmitdemEditorals
'breakpoint'inzuuntersuchendePrÑdikateeingesetztwerden.

ÑstepÄ(TERM,TERM)

SchaltetdenEinzelschrittmodusein.ZurBestimmungder
betroffenenPrÑdikatesindalleAufrufmustervonprotect/2
erlaubt.

ÑstepÄ

SchaltetdenEinzelschrittmodusfÅrÅalleÄPrÑdikateinder
DatenbankeinundsorgtdafÅr,daûauchÅneueingegebeneÄ
PrÑdikateindenEinzelschrittmodusversetztwerden.

ÑnostepÄ(TERM,TERM)

SchaltetdenEinzelschrittmodusaus.Essindalle
Aufrufmustervonprotect/2erlaubt.

ÑnostepÄ

SchaltetdenEinzelschrittmodusfÅrÅalleÄPrÑdikateausund
sorgtdafÅr,daûneueingegebenePrÑdikatenichtmehr
automatischindenEinzelschrittmodusversetztwerden.

ÑsteppedÄ(LITERAL,ZAHL)

PAR2darfnichtnegativsein.EswirdÅberprÅft,obdasdurch
PAR1undPAR2bestimmtePrÑdikatsichimEinzelschrittmodus
befindet.

4.4.8     ListenundListenfunktionen

DieÅListeÄistauchinPrologeinewichtigeDatenstruktur.Die
normaleSchreibweisefÅrListenverschleiertjedochden
AufbaueinerListe.Listensindfolgendermaûendefiniert:

(1)[]isteineListe.
(2)EineStrukturderForm'.'(Kopf,Rumpf)istdanneine
Liste,wennRumpfeineListeist.

Ist'.'/2alsrechtsassoziativerInfix-Operatorvereinbart,
dannkannmanListenz.B.soschreiben:

[a,b,c]=a.b.c.[]

DieseSortevonListenwirdauchÅgeschlosseneListeÄgenannt.
BeieinerÅoffenenListeÄistdasschlieûende[](gesprochen
'nil')durcheineVariableersetzt.OffeneListenhaben
zumindestebensovieleAnwendungenwiegeschlosseneListen
(z.B.alsSymboltabelleninParsern).

VieleFunktionen(z.B.pname/2)liefernoderverarbeiten
Listen.EsgibtabereinigeFunktionen,diespeziellzur
Listenverarbeitunggedachtsind.

ÑisclosedlistÄ(TERM)

öberprÅft,obPAR1einegeschlosseneListeist.

ÑlengthÄ(LISTE,TERM)

PAR1muûeinegeschlosseneListesein.Eswirdversucht,ihre
LÑnge(AnzahlderElemente)mitPAR2zuunifizieren.[]hat
dieLÑnge0.

ÑmemberÄ(TERM,LISTE)

WirddannerfÅllt,wennPAR1alsElementinPAR2enthalten
ist.IstPAR2eineàoffeneÄListeundistPAR1ànichtÄinPAR2
enthalten,dannwirdPAR2umeinElement(nÑmlichumPAR1)
àverlÑngertÄ(bleibtabereineoffeneListe).member/2ist
nichtdeterministisch,kannalsomehrmals(aufverschiedene
Weise)erfÅlltwerden.EswirdoftalsÅGeneratorÄverwendet,
z.B.:

member(X,Liste),tu_was(X),fail.

wendetdasPrÑdikattu_was/1sukzessiveaufdieElementevon
'Liste'an.

ÑdmemberÄ(TERM,LISTE)

IsteineSystemfunktion,diefastÑquivalentzumember/2ist.
EsgibtzweigroûeUnterschiede:
     -dmember/2istdeterministischundkannnichtals
Generatorverwendetwerden.
-dmember/2arbeiteterheblichschnelleralsmember/2.
AusdemletztgenanntenGrundsolltedmember/2alsErsatzfÅr
member/2verwendetwerden,auûerwennbestimmteEigenschaften
vonmember/2gezielteingesetztwerdenmÅssen.

ÑappendÄ(TERM,TERM,TERM)

DiesesPrÑdikatkannverwendetwerden,umListenzu
verketten,aberauch,umsieaufzuspalten.AlsGeneratorkann
esalleMîglichkeitenermitteln,umeineListeinzwei
Teillistenaufzuteilen.DadiesesPrÑdikateinallgemein
verwendetesBeispielfÅrBacktracking,Rekursionetc.istund
indenmeistenBÅchernausfÅhrlichbehandeltwird,sollten
einpaarBeispielezurWirkunggenÅgen:

append([1,2],[a,b],X)     ->   X=[1,2,a,b]
append(X,Y,[1,2,a,b])    ->   X=[],Y=[1,2,a,b];
X=[1],Y=[2,a,b];
X=[1,2],Y=[a,b];
X=[1,2,a],Y=[b];
X=[1,2,a,b],Y=[]
append("hello",X,"hello,world")
->X=[',','',w,o,r,l,d]

4.4.9FunktionendesBetriebssystems

4.4.9.1   DatumundUhrzeit

ÑdateÄ(VARINT,VARINT,VARINT)

Versucht,PAR1mitdemJahr,PAR2mitdemMonatundPAR3mit
demTagdesmomentanenDatumszuunifizieren.

Ñset_dateÄ(ZAHL,ZAHL,ZAHL)

SetztdasmomentaneDatum.PAR1istdasJahr,PAR2derMonat
undPAR3derTag.EswirdnurgeprÅft,obdieParameterin
bestimmtenBereichenliegen,aberungÅltigeDaten(z.B.
30. Februar)werdennichterkannt.

ÑtimeÄ(VARINT,VARINT,VARINT)

Versucht,dieParametermitderaktuellenZeit(PAR1Stunde,
PAR2Minute,PAR3Sekunde)zuunifizieren.DieUhrdes
BetriebssystemsarbeitetinSchrittenvonjeàzweiÄSekunden.

Ñset_timeÄ(ZAHL,ZAHL,ZAHL)

SetztdieaktuelleZeit.ZuordnungderParameterwiebei
time/3.

4.4.9.2   ZugriffaufDateienundDateiverzeichnisse

Ñdisk_dirÄ(VAR)

PAR1wirdmitdemPfadnamendesaktuellenDateiverzeichnisses
unifiziert.

Ñdisk_dirÄ(LITERAL)

PAR1muûeingÅltigerPfadnamesein;esmÅssenentwederdie
LaufwerksbezeichnungoderdereigentlichePfadnameoderbeide
vorhandensein.FehlteinedieserBezeichnungen,wirdder
aktuelleWerteingesetzt.DersoerhaltenePfadnamewirdzum
aktuellenDateiverzeichnis.

ÑsubdirsÄ(TERM)

ErzeugteineListederUnterverzeichnissedesaktuellen
Dateiverzeichnissesundversucht,siemitPAR1zu
unifizieren.

ÑfindÄ(DATEINAME,TERM)

SuchtdieDateimitNamenPAR1imaktuellenDateiverzeichnis
undinallenUnterverzeichnissendavon(beliebigtief
verschachtelt).SchlÑgtfehl,fallsdieDateinirgendwo
gefundenwird;ansonstenwirdversucht,PAR2mitdemgesamten
NamendesDateiverzeichnisseszuunifizieren,indemdie
Dateigefundenwurde.

ÑopenÄ(DATEINAME)

SuchtdieDatei(mitfind/2)imaktuellenDateiverzeichnis
undinseinenUnterverzeichnissen.BeiErfolgwirddas
gefundeneDateiverzeichniszumaktuellenunddieDateiwird
mitsee/1geîffnet.

Ñdisk_searchÄ(LITERAL,ZAHL,TERM,TERM)

PAR1undPAR2werdenalsParameterfÅrdenGEMDOS-Aufruf
F_SFIRSTverwendet.DiesersuchtnachdererstenDateiim
aktuellenDateiverzeichnis(oderineinemVerzeichnis,das
durcheinenPfadnameninPAR1bestimmtwird),diedem
àSuchmusterÄinPAR1unddemàSuchattributÄPAR2entspricht.Das
SuchmusterwirdwieeinDateinameangegeben;allerdingssind
beidieserFunktiondie'wildcards'Å*ÄundÅ?Äerlaubt(nurim
Dateinamen,nichtimPfadnamen).
DieeinzelnenBitsdesSuchattributesPAR2bedeuten:

àBitÄàWertÄàBedeutungÄ
01DateiistschreibgeschÅtzt
12Dateiist'versteckt'
24DateiistSystemdatei(auchversteckt)
38keineDatei,sondernderDiskettenname
416keineDatei,sondernDateiverzeichnis
532Dateibeschriebenundgeschlossen(Ç???Ä)

WirdkeineDateigefunden,schlÑgtdisk_search/4fehl;
ansonstenwirdversucht,PAR3mitdemNamenundPAR4mitden
AttributendergefundenenDateizuunifizieren.

Ñdisk_searchÄ(TERM,TERM)

RuftdieGEMDOS-FunktionF_SNEXTauf:DieÅnÑchsteÄDateiwird
gesucht,derenNameundAttributezudenMusternimÅletztenÄ
Aufrufvondisk_search/4passen.Eswirdversucht,PAR3mit
demNamenundPAR4mitdenAttributendergefundenenDateizu
unifizieren.FallskeineDateigefundenwird,schlÑgt
disk_search/2fehl.

4.4.9.3   AuflistendesInhaltsverzeichnisses

ÑdirectoryÄ

GibtdasInhaltsverzeichnisdesaktuellenDateiverzeichnisses
aufdenmomentanenAusgabestromaus.DieNamenundAttribute
allergefundenenDateienwerdenausgegeben.

ÑdirectoryÄ(DATEINAME)

GibtdasInhaltsverzeichnisdesDateiverzeichnissesPAR1aus.

4.4.10    VerschiedeneFunktionen

ÑstatusÄ

GibtverschiedeneInformationenÅberdiemomentane
Speicherbelegungaus.DerSpeicheristinmehrereSegmente
aufgeteilt,wobeiinjedemSegmentzweiStacksliegen;der
Streuspeicher(Heap)undderMaschinenstackliegenimgrîûten
Segment.EinigeKontrollstackswerdenindervorliegenden
VersionebenfallsimStreuspeicherangelegt.

ÑbagofÄ(TERM,TERM,TERM)

Versucht,PAR2aufallemîglichenWeisenzuerfÅllen.Die
dabeientstehendenInstanzenvonPAR1werdenineinerListe
gesammelt.Eswirdversucht,dieseListemitPAR3zu
unifizieren.

Beispiel:EsgebeeinPrÑdikatkunde/2mitKlauseln

kunde(mÅller,1).kunde(meier,2).kunde(huber,3).
          (usw.usw.)

DerAufruf

bagof(Kunde,kunde(Kunde,_),NamensListe).

unifiziertdannNamensListemitdenKundennamen,also:

NamensListe=[mÅller,meier,huber,...]

ÑphraseÄ(AUFRUF,LISTE)

BetrachtetPAR1alsnicht-terminalesSymboleiner
grammatischenRegelundveranlaûtdieVerarbeitungvonPAR2,
wobeiPAR1alsStartsymbolverwendetwird.

