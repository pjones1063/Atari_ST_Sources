
[1mNAME[m
	strsed - ed(1)/tr(1)-like substitute and replace function

[1mSYNOPSIS[m
	[1mchar *strsed([4mstring[1m,[m [4mcommand[1m,[m [1m0)[m
	[1mchar *[4mstring[1m;[m
	[1mchar *[4mcommand[1m;[m

	or

	[1mchar *strsed([4mstring[1m,[m [4mcommand[1m,[m [4mrange[1m)[m
	[1mchar *[4mstring[1m;[m
	[1mchar *[4mcommand[1m;[m
	[1mint [4mrange[1m[2];[m

[1mDESCRIPTION[m
	[1mStrsed[m  is  a  regular  expression  pattern  match  and  replace
	function that also combines [4mtr[m(1)-like transliteration.  The GNU
	regex package is used for the regular expression matching.

	[1mStrsed[m can be used to provide the functionality of most  of  the
	other more   "complicated"   string  functions  (e.g.    [1mstrchr[m,
	[1mstrrchr[m, [1mstrpbrk[m, [1mstrspn[m, [1mstrcspn[m, and  [1mstrtok[m),  although  less
	efficiently in  each  case,  due to its generality.  [1mStrsed[m is a
	very powerful and general function that can be used to carry out
	complicated string manipulations such as those that are possible
	in text editors.

[1mUSAGE[m
	[4mString[m should be a null-terminated character string.  A copy  is
	made and will be operated on according to the search and replace
	instructions contained  in [4mcommand[m.  Unless an error occurs (see
	ERRORS), the passed character strings  [4mstring[m  and  [4mcommand[m  are
	[4mnever[m  corrupted,  and the string that is returned may always be
	passed to [4mfree[m(3) since its space is obtained from [4mmalloc[m(3).

	Both [4mstring[m and [4mcommand[m may contain the following C-like  escape
	sequences:

	    \b      Backspace.
	    \f      Formfeed.
	    \n      Newline.
	    \r      Carriage Return.
	    \s      Space.
	    \t      Horizontal Tab.
	    \v      Vertical Tab.
	    \z      Used to remove ambiguity if necessary.
	    \0-9    A reference to a register.
		    (except for \0 in a regular expression.)
	    \0x3d   The character whose value is 3d hexadecimal.
	    \0X3d   The character whose value is 3d hexadecimal.
	    \040    The character whose value is 40 octal.
	    \32     The character whose value is 32 decimal.

	The NUL  (0) character cannot be specified.  A ``\'' followed by
	one to three digits can be interpreted in several ways.  If  one
	or  two  hex  digits are preceeded by an ``x'' or an ``X'', they
	will be taken as specifying a  character  in  hexadecimal.    If
	there  are  exactly  three  octal digits and the first is in the
	range ``0'' to  ``3''  then  they  are  taken  as  specifying  a
	character in  octal.   Otherwise a single digit is taken to be a
	register reference and two or three digits  are  interpreted  as
	specifying a  character  in  decimal.    \z can be used to avoid
	problems with ambiguity.  For instance, [1m\007[m will be interpreted
	by [1mstrsed[m as octal 007.  To specify  the  contents  of  register
	zero  (\0)  followed  by  the two characters ``07'', use [1m\0\z07[m.
	The \z makes it clear what is meant (acting like  a  punctuation
	mark) and is otherwise ignored.

	[1mStrsed[m  allows  [4med[m(1) like regular expressions and substitutions
	on [4mstring[m.  The search  and  replace  command  is  specified  by
	[4mcommand[m.  The format of [4mcommand[m is either

	[1m/search_pattern/replacement/[m
	or
	[1mg/search_pattern/replacement/[m

	In  the  first form, the search and replace is performed once on
	the string, and in the second, the replacement is done  globally
	(i.e. for every occurrence of the search pattern in [4mstring[m.).  A
	leading ``s'' in the above is silently ignored.  This allows for
	a syntax more  like  that of [4med[m(1).  e.g.  [4ms/e/x/[m is the same as
	[4m/e/x/[m.

	If [4mreplacement[m is empty, then the matched text will be  replaced
	by nothing - i.e.  deleted.

	[4mSearch_pattern[m   is  a  full  regular  expression  (see  [4med[m(1)),
	including register specifications (i.e. [1m\( ... \)[m) and  register
	references,  (e.g.  [1m\2[m)  but not the [1m{m,n}[m repetition feature of
	[4med[m(1).

	[4mReplacement[m consists  of  ordinary  characters  and/or  register
	references (e.g.  [1m\1[m  or [1m\2[m).  [1m\0[m means the entire matched text.
	In addition, a register reference may be immediately followed by
	a transliteration request, of the form

	[1m{char-list-1}{char-list-2}[m.

	The characters from [4mchar-list-1[m will be transliterated into  the
	corresponding  ones  from  [4mchar-list-2[m  in  the  same  manner as
	[4mtr[m(1).  If  the  register  reference  before  a  transliteration
	request is omitted, it defaults to [1m\0[m.  Within a transliteration
	request,  the characters "}" and "-" are metacharacters and must
	be escaped with a leading \ if you want them to  be  interpreted
	literally.   Character  ranges  such  as a-z are expanded in the
	same fashion  as  [4mtr[m(1).    If  [4mchar-list-2[m  is   shorter   than
	[4mchar-list-1[m  then [4mchar-list-2[m is padded to be the same length as
	[4mchar-list-1[m by repeating its last character as many times as are
	needed.  For example, the transliteration request

	[1m{a-z}{X}[m

	will  transliterate  all  lower  case  letters  into   an   'X'.
	Character ranges may be increasing or decreasing.

	Unusual  character ranges (such as [1ma-f-0- x2d-c[m) are interpreted
	as running from their first character  to  their  last  (so  the
	above would  be  treated  as [1ma-c[m).  Note that it is [1mnot[m possible
	(in this release) to specify the complement of a character range
	in a transliteration request.  However, this can be done in  the
	[4msearch_pattern[m by commencing a character class with a "^" in the
	normal regular expression fashion.

	The highest register that can be referenced is [1m\9[m.

[1mEXAMPLES[m
	Here  are  some  example  [4mcommand[m strings that might be given to
	[1mstrsed[m:

	[1m/a/A/[m            # Change the first 'a' into an 'A'
	[1mg/a/A/[m           # Change every 'a' into an 'A'
	[1mg/://[m            # Delete every ':'
	[1mg/jack/jill/[m     # Change every 'jack' to a 'jill'
	[1m/[^\s\t]/X/[m      # Change the first non-whitespace
		         # character into an 'X'.

	Some more advanced examples...

	[1m/\([\s\t]*\)\([^\s\t]*\)/\1\2{a-z}{A-Z}/[m

	This converts the  first  non-whitespace  word  to  upper  case,
	preserving any  initial whitespace.  It catches the first run of
	spaces and TABs into register  one  \([\s\t]*\),  and  then  the
	following   run   of  non-white  characters  into  register  two
	\([^\s\t]*\).    The   replacement,   \1\2{a-z}{A-Z}   specifies
	register 1 (the whitespace) followed by the contents of register
	2 transliterated into uppercase.  This would produce

	"   SPOTTED pinto bean"

	if called on the string

	"   spotted pinto bean".

	[1mg/\([a-z]\)\1+/\1/[m

	This  is a very useful example and performs the same function as
	tr -s.  That is, it squeezes runs of  identical  characters  (in
	the  range  a to z) down to a single instance of that character.
	So "beeee good" becomes "be  god".    The  "+"  is  the  regular
	expression notation meaning "one or more".

	[1mg/\([\t\s]*\)\(.\)\([^\t\s]*\)/\1\2{a-z}{A-Z}\3/[m

	This  example  capitalises  the first letter of each word in the
	string, and preserves all whitespace.  It catches three things,

	1) the initial whitespace         \([\t\s]*\)  in register 1
	2) the next letter                \(.\)        in register 2
	3) the following nonwhite letters \([^\t\s]*\) in register 3

	and then prints them out as  they  were  found,  with  the  only
	difference  being  the  uppercase  conversion of the contents of
	register 2.  Given the string

	"  this is a line  "

	this command would return

	"  This Is A Line  ".

	If the initial 'g' was not present  in  the  command,  then  the
	capitalisation  would  only  be  done  to  the first word in the
	string.  It is important to understand this difference well.

[1mSEARCHING ONLY[m
	[1mStrsed[m may be used to search  for  a  regular  expression  in  a
	string, but  perform  no action.  The portion of the string that
	matched will be returned in the third argument [4mrange[m.   In  this
	case [4mcommand[m  should  be  of  the  form  [4m/pattern/[m.   On return,
	[4mrange[0][m will contain an  index  into  the  original  string  to
	indicate  where  the  match  began,  and [4mrange[1][m will index the
	first character after the end of the match.  For example,  after
	the call

	strsed("two big macs please", "/b.*c/", range);
	[4mrange[0][m will  contain  4  and [4mrange[1][m will contain 11.  If not
	match is found, both elements of [4mrange[m will contain -1.

[1mERRORS[m
	If [1mstrsed[m detects any error it returns NULL.  This can happen if
	the syntax of [4mcommand[m is incorrect, if the regular expression in
	[4mcommand[m  is  incorrect,  if  space  cannot  be   obtained   from
	[4mmalloc[m(3), or for other similar reasons.  Note that it is [1mnot[m an
	error if the empty string is returned.

[1mCOMPILING AND LINKING STRSED[m
	[1mStrsed[m  should  be compiled with the -O and -c options of your C
	compiler.  It has no main() function.  When you  come  to  link,
	you use strsed.o and regex.o from the GNU 18.55 (or 18.54) emacs
	distribution.

[1mOBSCURE NOTE ON REGULAR EXPRESSIONS[m
	It  is possible (but not too likely) that the regular expression
	language  that  is   recognised   may   differ   slightly   from
	installation to  installation.   This is because the GNU regular
	expression package may  compiled  with  different  settings  for
	recognition of   meta-characters.     So  on  one  machine,  the
	character "|" might be taken as being the  OR  operator,  whilst
	somewhere else  you  need  to  give  "\|" - or vice-versa.  This
	could be a pain in the neck, but there's not alot  that  can  be
	done about  it.   If you [4mreally[m need to know the difference in a
	portable way, look in regex.h to see what things are defined and
	then act accordingly when constructing commands for [1mstrsed[m.

[1mAUTHOR[m
	Terry Jones
	PCS Computer Systeme GmbH
	Pfaelzer-Wald-Str 36
	8000 Muenchen 90
	West Germany 49-89-68004288

	terry@distel.pcs.com
	or ...!{pyramid,unido}!pcsbst!distel!terry

	January 8th, 1990.

[1mACKNOWLEDGEMENTS[m
	Many thanks to  Jordan  K.  (mother)  Hubbard  for  discussions,
	bugfinding, handholding, forcing me to use emacs and torrents of
	(usually) uncalled-for abuse.

[1mSEE ALSO[m
	ed(1), tr(1)

