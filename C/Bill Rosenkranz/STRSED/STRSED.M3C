.\"
.\" $Header: h:/tmp/tmp/strsed\RCS\strsed.m3c,v 1.3 1990/03/07 15:48:59 terry Exp $
.\"
.\"
.\" $Log: strsed.m3c,v $
.\" Revision 1.3  90/03/07  15:48:59  terry
.\" Lots of little things.
.\"
.\" Revision 1.2  90/03/06  22:48:00  terry
.\" Changed the bit about the 3rd arg - which is now necessary.
.\"
.\" Revision 1.1  90/01/18  20:03:54  terry
.\" Initial revision
.\"
.\"
.TH STRSED 3C
.SH NAME
strsed \- ed(1)/tr(1)\-like substitute and replace function.
.SH SYNOPSIS
.BI "char *strsed(" string ,
.IB command ,
.B 0)
.br
.BI "char *" string ;
.br
.BI "char *" command ;
.br
.sp
or
.sp
.BI "char *strsed(" string ,
.IB command ,
.IB range )
.br
.BI "char *" string ;
.br
.BI "char *" command ;
.br
.BI "int " range [2];
.SH DESCRIPTION
.B Strsed
is a regular expression pattern match
and replace function that also combines
.IR tr (1)-like
transliteration.
The GNU regex package is used
for the regular expression matching.
.PP
.B Strsed
can be used to provide the functionality of most of
the other more "complicated" string functions (e.g.
.BR strchr ,
.BR strrchr ,
.BR strpbrk ,
.BR strspn ,
.BR strcspn ,
and
.BR strtok ),
although less efficiently in each case, due to its generality.
.B Strsed
is a very powerful and general function that can be used
to carry out complicated string manipulations such as
those that are possible in text editors.
.SH USAGE
.I String
should be a null\-terminated character string.
A copy is made and will be operated on according to the
search and replace instructions contained in
.IR command .
Unless an error occurs (see ERRORS), the passed character strings
.I string
and
.I command
are
.I never
corrupted, and the string that is returned may always be passed to
.IR free (3)
since its space is obtained from
.IR malloc (3).
.PP
Both
.I string
and
.I command
may contain the following C\-like escape sequences:
.sp
.nf
    \eb      Backspace.
    \ef      Formfeed.
    \en      Newline.
    \er      Carriage Return.
    \es      Space.
    \et      Horizontal Tab.
    \ev      Vertical Tab.
    \ez      Used to remove ambiguity if necessary.
    \e0\-9    A reference to a register.
             (except for \e0 in a regular expression.)
    \e0x3d   The character whose value is 3d hexadecimal.
    \e0X3d   The character whose value is 3d hexadecimal.
    \e040    The character whose value is 40 octal.
    \e32     The character whose value is 32 decimal.
.fi
.PP
The NUL (0) character cannot be specified.
A ``\e'' followed by one to three digits can be
interpreted in several ways.
If one or two hex digits are preceeded by
an ``x'' or an ``X'', they will be taken as specifying
a character in hexadecimal.
If there are exactly three octal digits and the first
is in the range ``0'' to ``3'' then they are taken as
specifying a character in octal.
Otherwise a single digit is taken to be a register
reference and two or three digits are interpreted as
specifying a character in decimal.
\ez can be used to avoid problems with ambiguity.
For instance, \fB\e007\fR
will be interpreted by
.B strsed
as octal 007.
To specify the contents of register zero (\e0)
followed by the two characters ``07'', use \fB\e0\ez07\fR.
The \ez makes it clear what is meant (acting like a punctuation mark)
and is otherwise ignored.
.PP
.B Strsed
allows
.IR ed (1)
like regular expressions and substitutions on
.IR string .
The search and replace command is specified by
.IR command .
The format of
.I command
is either
.sp
\fB/search_pattern/replacement/\fR
.br
or
.br
\fBg/search_pattern/replacement/\fR
.PP
In the first form, the search and replace is performed once on
the string, and in the second, the replacement is done globally
(i.e. for every occurrence of the search pattern in
.IR string .).
A leading ``s'' in the above is silently ignored.
This allows for a syntax more like that of
.IR ed (1).
e.g.
.I s/e/x/
is the same as
.IR /e/x/ .
.PP
If
.I replacement
is empty, then the matched text will be replaced by nothing \- i.e. deleted.
.PP
.I Search_pattern
is a full regular expression (see
.IR ed (1)),
including register specifications (i.e. \fB\e( ... \e)\fR) and register
references, (e.g. \fB\e2\fR) but not the \fB{m,n}\fR repetition feature of
.IR ed (1).
.PP
.I Replacement
consists of ordinary characters and/or register references
(e.g. \fB\e1\fR or \fB\e2\fR).
\fB\e0\fR means the entire matched text.
In addition, a register reference may be immediately followed by a
transliteration request, of the form
.sp
\fB{char\-list\-1}{char\-list\-2}\fR.
.PP
The characters from
.I char\-list\-1
will be transliterated into the corresponding ones from
.I char\-list\-2
in the same manner as
.IR tr (1).
If the register reference before a transliteration
request is omitted, it defaults to \fB\e0\fR.
Within a transliteration request, the characters
"}" and "\-" are metacharacters and must be escaped with
a leading \e if you want them to be interpreted literally.
Character ranges such as a\-z are expanded in the same fashion as
.IR tr (1).
If
.I char\-list\-2
is shorter than
.I char\-list\-1
then
.I char\-list\-2
is padded to be the same length as
.I char\-list\-1
by repeating its last character as many times as are needed.
For example, the transliteration request
.sp
.B {a\-z}{X}
.sp
will transliterate all lower case letters into an 'X'.
Character ranges may be increasing or decreasing.
.PP
Unusual character ranges (such as
.BR a\-f\-0\-\e0x2d\-c )
are interpreted as running from their first character
to their last (so the above would be treated as
.BR a\-c ).
Note that it is
.B not
possible (in this release) to specify the complement of a
character range in a transliteration request.
However, this can be done in the
.I search_pattern
by commencing a character class with a "^" in the normal
regular expression fashion.
.PP
The highest register that can be referenced is \fB\e9\fR.
.SH EXAMPLES
Here are some example
.I command
strings that might be given to
.BR strsed :
.sp
.nf
\fB/a/A/\fR            # Change the first 'a' into an 'A'
\fBg/a/A/\fR           # Change every 'a' into an 'A'
\fBg/://\fR            # Delete every ':'
\fBg/jack/jill/\fR     # Change every 'jack' to a 'jill'
\fB/[^\es\et]/X/\fR      # Change the first non\-whitespace
                 # character into an 'X'.
.fi
.PP
Some more advanced examples...
.sp
.nf
\fB/\e([\es\et]*\e)\e([^\es\et]*\e)/\e1\e2{a\-z}{A\-Z}/\fR
.fi
.sp
This converts the first non\-whitespace word to upper case,
preserving any initial whitespace.
It catches the first run of spaces and TABs into register
one \e([\es\et]*\e), and then the following run of non\-white
characters into register two \e([^\es\et]*\e).
The replacement,
\e1\e2{a\-z}{A\-Z} specifies register 1 (the whitespace) followed
by the contents of register 2 transliterated into uppercase.
This would produce
.sp
.nf
"   SPOTTED pinto bean"
.fi
.sp
if called on the string
.sp
.nf
"   spotted pinto bean".
.fi
.PP
\fBg/\e([a\-z]\e)\e1+/\e1/\fR
.sp
This is a very useful example and performs the same function
as tr \-s.
That is, it squeezes runs of identical characters
(in the range a to z) down to a single instance of that
character.
So "beeee good" becomes "be god".
The "+" is the regular expression notation meaning "one or more".
.sp
.nf
\fBg/\e([\et\es]*\e)\e(.\e)\e([^\et\es]*\e)/\e1\e2{a\-z}{A\-Z}\e3/\fR
.fi
.sp
This example capitalises the first letter of each word in the string,
and preserves all whitespace.
It catches three things,
.sp
.nf
1) the initial whitespace         \e([\et\es]*\e)  in register 1
2) the next letter                \e(.\e)        in register 2
3) the following nonwhite letters \e([^\et\es]*\e) in register 3
.fi
.sp
and then prints them out as they were found, with the only
difference being the uppercase conversion of the contents of
register 2.
Given the string
.sp
.nf
"  this is a line  "
.fi
.sp
this command would
return
.sp
.nf
"  This Is A Line  ".
.fi
.sp
If the initial 'g' was not present in the command, then the capitalisation
would only be done to the first word in the string.
It is important to understand this difference well.
.SH "SEARCHING ONLY"
.B Strsed
may be used to search for a regular expression in a
string, but perform no action.
The portion of the string
that matched will be returned in the third argument
.IR range .
In this case
.I command
should be of the form
.IR /pattern/ .
On return,
.I range[0]
will contain an index into the original
string to indicate where the match began, and
.I range[1]
will index the first character after the end of the match.
For example, after the call
.sp
strsed("two big macs please", "/b.*c/", range);
.sp
.I range[0]
will contain 4 and
.I range[1]
will contain 11.
If not match is found, both elements of
.I range
will contain \-1.
.SH ERRORS
If
.B strsed
detects any error it returns NULL.
This can happen if the syntax of
.I command
is incorrect, if the regular expression in
.I command
is incorrect, if space cannot be obtained from
.IR malloc (3),
or for other similar reasons.
Note that it is
.B not
an error if the empty string is returned.
.SH "COMPILING AND LINKING STRSED"
.B Strsed
should be compiled with the \-O and \-c options of your C compiler.
It has no main() function.
When you come to link, you use strsed.o
and regex.o from the GNU 18.55 (or 18.54) emacs distribution.
.SH "OBSCURE NOTE ON REGULAR EXPRESSIONS"
It is possible (but not too likely) that the regular expression
language that is recognised may differ
slightly from installation to installation.
This is because the
GNU regular expression package may compiled with different settings
for recognition of meta-characters.
So on one machine, the character
"|" might be taken as being the OR operator, whilst somewhere else
you need to give "\e|" \- or vice-versa.
This could be a pain in the
neck, but there's not alot that can be done about it.
If you
.I really
need to know the difference in a portable way, look in regex.h to see
what things are defined and then act accordingly when constructing
commands for
.BR strsed .
.SH AUTHOR
Terry Jones
.br
PCS Computer Systeme GmbH
.br
Pfaelzer\-Wald\-Str 36
.br
8000 Muenchen 90
.br
West Germany       49\-89\-68004288
.sp
terry@distel.pcs.com
.br
or \&...!{pyramid,unido}!pcsbst!distel!terry
.sp
January 8th, 1990.
.SH ACKNOWLEDGEMENTS
Many thanks to Jordan K. (mother) Hubbard for discussions, bugfinding,
handholding, forcing me to use emacs and torrents of (usually)
uncalled\-for abuse.
.SH "SEE ALSO"
ed(1), tr(1)
