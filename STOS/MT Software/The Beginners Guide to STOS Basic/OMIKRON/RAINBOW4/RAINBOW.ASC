
                      RAINBOW for GFA BASIC

After fiddling about with GFA, I came to miss my old 8-bit ATARI's 
ability to generate the famous Atari rainbow effect. Then, I heard 
this rumor about "RAINBOW TOS". Well, that just exacerbated the 
problem. 

I knew that assembly language was the only way to get a rainbow on 
the 8-bit, so it was pretty clear that assembly language was the 
only way to get it on the ST. Being an insatiable reader of ST 
magazines, I found a demonstration in a British magazine (ATARI ST 
USER) that demonstrated a rainbow effect for FAST BASIC. 

NUTS! said I. I don't have FAST BASIC. Well, the assembly code was 
reasonably clear, so I set out to see if I could make the rainbow 
work with GFA BASIC.

There were a couple of minor problems to overcome. First, the 
assembly code was not location independent (there were a lot of 
"save value" memory locations and jumping in the code). Second, 
GFA doesn't have an inline assembly function. There is an INLINE 
command that let you load a binary file into memory directly, but 
no assembler. Also, in GFA (even in version 3.x) the EXEC 3, load 
only, command is broken. It will load, but not let you execute the 
program so loaded. 

Fortunately, I noticed a program uploaded by MichTron before they 
severed relations with GFA that, if properly linked with another 
object file, would relocate the compiled code within a GFA program.

Now, let's try to explain that all over again. Suppose you had a 
nice little C routine that you wanted to use in a GFA Basic 
program. Let's say that you used the INLINE command to load the C 
program after you compiled it. Then, when you were ready to use 
it, you just used a CALL adr% and...blappp! Noting happened, or 
worse, the program reported 2 or more bombs. Or even worse still, 
your computer locked up. Why for?!?!? Simple. A PRG file is 
RELOCATABLE. For an ST, this means that since you never know where 
in memory a program is going to load, you can't use absolute 
memory references and expect the program to work. "BUT WAIT A 
MINUTE, BUB." you say. "I KNOW THAT THERE ARE GOBS OF JMPs and 
STORE TO MEMORY LOCATION COMMANDS IN THAT CODE MY COMPILER 
CREATES. SO, WHAT GIVES?" Good question. What gives is that the 
compiler puts a relocation table at the end of the code, so that 
when TOS or GEM loads a program, it consults the table, then 
adjusts all of the memory pointers in the code to the actual 
location that the program is loaded in memory. Every thing now 
works smoothly.

Now, that is good, in theory also. It turns out that something in 
the relocation code whacks up the INLINE process also, so that, at 
odd times, it fails, and you get a 3 BOMB, illegal machine code 
error or an "ILLEGAL HANDLE" error. Now, I don't know just why and 
I would like to know, if anyone has an idea. However, the code is 
good (to the best of my limited ability to discern) so I tried the 
third method. That is, to use data statements to generate a LST 
file of data to merge with the program. This takes up the most 
room and is slower. One could BLOAD it into a string and then 
execute it. I selected the DATA method for this demo. (My 
apologies to Fred Beckman, the ST Librarian at GEnie, for having 
to have him point this out. I thought I had really tested this 
thing out. Oh well...)

GFA does the same trick with EXEC 0, which loads AND runs the 
program. The only problem is EXEC 3, which only loads the program 
and returns a load address is broken and won't properly relocate 
your code. 

Hence, REL.S to the rescue. The intent is to link REL.S (after 
you've compiled it to REL.O, of course) with your code. REL.S goes 
in front and is executed first. When it executes, it walks the 
relocation table for you and relocates your code.

Now, I've modified REL.S to work for the Mark Williams C assembler 
(selfishly so, since I use it for linking with C programs as 
well). Simply assemble REL.S to an object file named REL.O 
(original, eh?). Next, write your code ( in this case, our rainbow 
example, RAINBOW3.S). Next, if you are using MWC, you must 
assemble and link RAINBOW3.S with REL.O. This can be done by using 
the following command line:

 cc.ttp -V -f -o r3.prg -Nrrel.o \lib\libaes.a \lib\libvdi.a r3.s

  (note: I used "r3" in the command line to shorten it. the file 
   would have to be named "r3.s" to make this work)


Next, to make the program smaller, run the STRIP.PRG on it to 
eliminate the symbol table. You won't need it, and it will simply 
waste space.

Now, if you have successfully done all the above, you will have a 
compiled program called "R3.PRG". DO NOT TRY TO RUN THIS PROGRAM. 
It probably won't work (at best) and may lock up your ST if you try 
to run it from the desktop (at worst). Just use the DATACONV2 
program that I have included and merge the results into your GFA 
program. Or, as indicated above, just reserve some space in a 
string (the string must be filled out with spaces or some 
character), the  BLOAD the INL file directly into the string.

There are some obvious limitations. You MUST run the program with 
a CALL asm%  command. REL.S uses the a0,a1 and d0,d1 registers, so 
you have to work around them in your program.

Well, that's how you make the assembly part work.

Now for the

  RRRRR      AA     II  NNN    NN  BBBB   OOOOO   WW       WW   !!
  RR  RR    AAAA    II  NN N   NN  BB BB OOO OOO  WW       WW   !!
  RRRRR    AA  AA   II  NN  N  NN  BBBB  OO   OO  WW  WWW  WW   !!
  RR RR   AAAAAAAA  II  NN   N NN  BB BB OOO OOO  WW WW WW WW     
  RR  RR  AA    AA  II  NN    NNN  BBBB   OOOOO   WWW     WWW   !!



The ST Rainbow effect is achieved using horizontal and vertical 
blank interrupts. Interrupts are generated when the monitor draws 
lines on the screen. As you probably know the screen is drawn by 
an electron beam travelling from left to right and from top to 
bottom. It draws one horizontal line at a time starting in the 
upper left corner and proceeding, line by line until it reaches 
the bottom. The computer will generate a Horizontal Interrupt 
when the electron beam completes its scan from left to 
right and is ready to return to the left edge. Similarly, a 
Vertical Blank Interrupt is generated when then scan has completed 
an entire screen and is ready to travel to the top to begin all 
over again.

It is possible to execute a small assembly language program during 
the brief interval of these interrupts. This ability is what makes 
it possible, in our example, to generate a rainbow effect. We are 
going to use this brief time to switch the background palette to 
generate the rainbow. What will happen is this. As the screen is 
being drawn, at an appropriate point (every fourth scan line) we 
are going to swap the background color with another. If we do this 
several times as the screen is being redrawn from top to bottom, 
we will get a rippling rainbow of colors.

The GFA program itself is very simple. It is mainly a shell for 
the machine language program that generates the rainbow. If saved 
in the tokenized form, the machine language portion is saved, 
also. Upon running the program, a small, egocentric advertisement 
is displayed and the rainbow begins. Hitting any key exits. Note 
that you must exit in the proper manner, otherwise you will be 
rainbowing forever (or at least until you computer locks up when 
the vblank and hblank code is moved).

What we are doing from the assembly is this: we calculate the 
address of the color to be changed by the program. There are 16 
registers, so there are 16 addresses starting at $FF8240 for the 
first, $FF8242 for the second and so on. Note that the colors are 
stored in the order 0, 15, 1, 2, 4, 6, 3, 5, 7, 8, 9, 10, 12, 14, 
11, and 13. As you examine the code, you will find that this 
location must be change in SUPERVISOR mode, since the palette is 
stored in protected memory.

That's about it. If you study the source code and have any 
questions, drop me a GEmail note. I would be interested in  
doing some programming team projects via modem, and have some 
ideas for possible projects. Anyone that would like to try a 
project, let's discuss it. Drop me a note.

Happy RAINBOWing!
Steve Crunk (S.CRUNK)
1/14/90
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

