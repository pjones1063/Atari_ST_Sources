 Is_Entry(0,1,0,L(0),1)
 Is_Open(0,F$,Reclen-1,1,1): FIELD 1,Reclen-1 AS F$
 Exit$="s"+ CHR$($1)+"s"+ CHR$($62)+"s"+ CHR$($77)
 REPEAT
    R=0: FOR I=0 TO Anzahl-1:A$(I)="": NEXT
    REPEAT
       Disp_Mask(0,Anzahl-1)
       Input_Mask(0,Anzahl-1,F)
       IF F=3 THEN
          S$=FN Long$(A$(0),L(0))
             LSET F$=S$:Is_Search(0,1,R)
          IF R>0 THEN
             GET 1,R:P=1
             FOR I=0 TO Anzahl-2
                L=L(I):A$(I)=FN Short$( MID$(F$,P,L)):P=P+L
             NEXT I
          ELSE
             PRINT CHR$(7);
          ENDIF
       ENDIF
    UNTIL F=2 OR F=0 AND A$(Anzahl-1)<>"N" OR F=4
    IF F=0 THEN
       IF A$(Anzahl-1)="L" THEN
          IF R THEN
             Is_Delete(0,R)
          ENDIF
       ELSE
          P=1
          FOR I=0 TO Anzahl-2
             L=L(I): MID$ (F$,P,L)=FN Long$(A$(I),L):P=P+L
          NEXT I
          IF R THEN
             Is_Replace(0,R)
          ELSE
             Is_Insert(0)
          ENDIF
       ENDIF
    ENDIF
 UNTIL F=2
 Is_Close(0)

 END ' Isam-Library. Stand 23.02.87
 DEF PROC Is_Open(Handle,Is_Name$,Laenge,Filenr,Anzahl)
 Is_Namtest: DIM Is_Such$(1):Is_Fnr(Handle)=Filenr:Is_Nam$(Handle)=Is_Name$
 Is_Anz(Handle)=Anzahl:Is_Rcl(Handle)=Laenge:Is_Open: RETURN
 '
 DEF PROC Is_Close(Handle)
 Is_Close: RETURN
 '
 DEF PROC Is_Update(Handle)
 Is_Close:Is_Open: RETURN
 '
 DEF PROC Is_Backup(Is_Von$,Is_Nach$,Is_Name$,Anzahl): LOCAL I
 Is_Namtest:Is_Von$=Is_Von$+Is_Name$:Is_Nach$=Is_Nach$+Is_Name$
 COPY Is_Von$+".DAT" TO Is_Nach$+".BAK"
 FOR I=1 TO Anzahl
 COPY Is_Von$+FN Is_Index$(I) TO Is_Nach$+".B"+ RIGHT$( STR$(100+I),2)
 NEXT : RETURN
 '
 DEF PROC Is_Kill(Is_Von$,Is_Name$,Anzahl): LOCAL I
 Is_Namtest:Is_Von$=Is_Von$+Is_Name$: KILL Is_Von$+".DAT"
 FOR I=1 TO Anzahl: KILL Is_Von$+FN Is_Index$(I): NEXT : RETURN
 '
 DEF FN Is_Index$(I)=".I"+ RIGHT$( STR$(100+I),2)
 '
 DEF PROC Is_Namtest
 IF INSTR(Is_Name$,".") OR INSTR(Is_Name$,"*") OR INSTR(Is_Name$,"?") THEN ERROR 64 ELSE RETURN
 '
 DEF PROC Is_Open: LOCAL I,Filenr=Is_Fnr(Handle)
 OPEN "R",Filenr,Is_Nam$(Handle)+".DAT",Is_Rcl(Handle): FOR I=1 TO Is_Anz(Handle)
 OPEN "R",Filenr+I,Is_Nam$(Handle)+FN Is_Index$(I),2+Is_Len(Handle,I): NEXT
 FIELD Filenr,6 AS Is_$: GET Is_Fnr(Handle),1
 IF EOF(Filenr) THEN LSET Is_$= MKIL$($20002)+ MKI$(0)
 Is_Next(Handle)= CVI(Is_$):Is_Free(Handle)= CVI( MID$(Is_$,3)):Is_Size(Handle)= CVI( MID$(Is_$,5))
 ON Handle GOTO Is_1,Is_2,Is_3,Is_4,Is_5,Is_6,Is_7,Is_8,Is_9,Is_10
-Is_0
 FIELD Is_Fnr(0),0
 '
 '
 RETURN
-Is_1
 FIELD Is_Fnr(1),0
 '
 '
 RETURN
-Is_2
 FIELD Is_Fnr(2),0
 '
 '
 RETURN
-Is_3
 FIELD Is_Fnr(3),0
 '
 '
 RETURN
-Is_4
 FIELD Is_Fnr(4),0
 '
 '
 RETURN
-Is_5
 FIELD Is_Fnr(5),0
 '
 '
 RETURN
-Is_6
 FIELD Is_Fnr(6),0
 '
 '
 RETURN
-Is_7
 FIELD Is_Fnr(7),0
 '
 '
 RETURN
-Is_8
 FIELD Is_Fnr(8),0
 '
 '
 RETURN
-Is_9
 FIELD Is_Fnr(9),0
 '
 '
 RETURN
-Is_10
 FIELD Is_Fnr(10),0
 '
 '
 RETURN
 '
 DEF PROC Is_Close: LOCAL I
 FOR I=0 TO Is_Anz(Handle): CLOSE Is_Fnr(Handle)+I: NEXT : RETURN
 '
 DEF PROC Is_Entry(Handle,Nr,Position,Laenge,Typ)
 Is_Len(Handle,Nr)=Laenge:Is_Pos(Handle,Nr)=Position:Is_Typ(Handle,Nr)=Typ: RETURN
 '
 DEF PROC Is_Insert(Handle): LOCAL Filenr=Is_Fnr(Handle),I,Von,Bis,Mitte,R
 FIELD Filenr,Is_Rcl(Handle) AS Is_Field$:Is_Field2$=Is_Field$
 R=Is_Free(Handle): IF R=Is_Next(Handle) THEN
 Is_Free(Handle)=R+1:Is_Next(Handle)=R+1 ELSE
 GET Filenr,R:Is_Free(Handle)= CVI(Is_Field$): LSET Is_Field$=Is_Field2$
 ENDIF PUT Filenr,R
 FOR I=1 TO Is_Anz(Handle):Is_Rec$= MKI$(R)+ MID$(Is_Field2$,Is_Pos(Handle,I)+1,Is_Len(Handle,I))
 LSET Is_Field$=Is_Field2$:Is_Search:Is_Move(Mitte,Is_Size(Handle)+1)
 NEXT :Is_Size(Handle)=Is_Size(Handle)+1:Is_Update_Len: RETURN
 '
 DEF PROC Is_Replace(Handle,Old): LOCAL Filenr=Is_Fnr(Handle),I,Von,Bis,Mitte,Mitte2,R
 FIELD Filenr,Is_Rcl(Handle) AS Is_Field$:Is_Field2$=Is_Field$
 GET Filenr,Old:Is_Field3$=Is_Field$
 FOR I=1 TO Is_Anz(Handle)
 LSET Is_Field$=Is_Field3$:Is_Search: WHILE CVI(Is_$)<>Old:Mitte=Mitte+1: GET Filenr+I,Mitte: WEND
 Mitte2=Mitte: LSET Is_Field$=Is_Field2$:Is_Search:Mitte=Mitte+(Mitte>Mitte2)
 IF Mitte<>Mitte2 THEN :Is_Rec$= MKI$(Old)+ MID$(Is_Field2$,Is_Pos(Handle,I)+1,Is_Len(Handle,I))
 Is_Move(Mitte,Mitte2) ENDIF NEXT : LSET Is_Field$=Is_Field2$: PUT Filenr,Old: RETURN
 '
 DEF PROC Is_Delete(Handle,Old): LOCAL Filenr=Is_Fnr(Handle),I,Von,Bis,Mitte,Is_Rec$,Is_T$
 FIELD Filenr,Is_Rcl(Handle) AS Is_Field$: GET Filenr,Old:Is_Field2$=Is_Field$
 FOR I=1 TO Is_Anz(Handle)
 LSET Is_Field$=Is_Field2$:Is_Search: WHILE CVI(Is_$)<>Old:Mitte=Mitte+1: GET Filenr+I,Mitte: WEND
 Is_Rec$= CHR$(0)*(Is_Len(Handle,I)+1+1):Is_Move(Is_Size(Handle),Mitte)
 NEXT : LSET Is_Field$= MKI$(Is_Free(Handle)): PUT Filenr,Old:Is_Free(Handle)=Old
 Is_Size(Handle)=Is_Size(Handle)-1:Is_Update_Len: RETURN
 '
 DEF PROC Is_Update_Len
 FIELD Filenr,6 AS Is_Field$
 LSET Is_Field$= MKI$(Is_Next(Handle))+ MKI$(Is_Free(Handle))+ MKI$(Is_Size(Handle))
 PUT Filenr,1: RETURN
 '
 DEF PROC Is_Search: LOCAL Flag
 FIELD Filenr,Is_Pos(Handle,I),Is_Len(Handle,I) AS Is_Such$:Is_Such2$=Is_Such$
 Von=1:Bis=Is_Size(Handle): FIELD Filenr+I,2,Is_Len(Handle,I) AS Is_$
 WHILE Von<=Bis:Mitte=(Von+Bis) SHR 1: GET Filenr+I,Mitte
 ON Is_Typ(Handle,I) GOTO Is_Search1,Is_Search2
 Flag=Is_Such2$>Is_$: GOTO Is_Search3
-Is_Search1:Is_Such$(0)=Is_Such2$:Is_Such$(1)=Is_$: SORT Is_Such$(0)
 Flag=Is_Such$(0)<>Is_Such2$: GOTO Is_Search3
-Is_Search2:Flag= VAL(Is_Such2$)> VAL(Is_$)
-Is_Search3: IF Flag THEN Von=Mitte+1 ELSE Bis=Mitte-1
 WEND :Mitte=Von: GET Filenr+I,Mitte: FIELD Filenr+I,2 AS Is_$: RETURN
 '
 DEF PROC Is_Search(Handle,I,R R): LOCAL Filenr=Is_Fnr(Handle),Von,Bis,Mitte
 IF I=-1 THEN Mitte=Is_Last(Handle)-1
 IF I=0 THEN Mitte=Is_Last(Handle)+1
 IF I>0 THEN Is_Lasti(Handle)=I:Is_Search
 R=Mitte: IF R=0 THEN Mitte=1 ELSE IF R>Is_Size(Handle) THEN Mitte=Is_Size(Handle):R=0
 I=Is_Lasti(Handle):Is_Last(Handle)=Mitte
 IF R THEN GET Filenr+I,R: FIELD Filenr+I,2 AS Is_$:R= CVI(Is_$) ENDIF RETURN
 '
 DEF PROC Is_Move(Von,Bis): LOCAL Filenr=Filenr+I,R1,R2,L=Is_Len(Handle,I)+1+1,P
 IF ABS(Von-Bis)>100 THEN
 CLOSE Filenr: OPEN "R",Filenr,Is_Nam$(Handle)+FN Is_Index$(I),L*50
 FIELD Filenr,L*50 AS Is_$:R1=(Von-1)\50+1:R2=(Bis-1)\50+1
 P=((Von-1) MOD 50)*L: GET Filenr,R1
 IF Von<Bis THEN
 Is_Such2$= LEFT$(Is_$,P)+Is_Rec$+ MID$(Is_$,P+1)
 WHILE R1<R2: LSET Is_$=Is_Such2$: PUT Filenr,R1:R1=R1+1: GET Filenr,R1:Is_Such2$= RIGHT$(Is_Such2$,L)+Is_$: WEND
 P=((Bis-1) MOD 50)*L
 LSET Is_$= LEFT$(Is_Such2$,P+L)+ MID$(Is_Such2$,P+L*2+1): PUT Filenr,R2
 ELSE
 Is_Such2$= LEFT$(Is_$,P+L)+Is_Rec$+ MID$(Is_$,P+L+1)
 WHILE R1>R2: RSET Is_$=Is_Such2$: PUT Filenr,R1:R1=R1-1: GET Filenr,R1:Is_Such2$=Is_$+ LEFT$(Is_Such2$,L): WEND
 P=((Bis-1) MOD 50)*L
 LSET Is_$= LEFT$(Is_Such2$,P)+ MID$(Is_Such2$,P+L+1): PUT Filenr,R2
 ENDIF
 CLOSE Filenr: OPEN "R",Filenr,Is_Nam$(Handle)+FN Is_Index$(I),L
 ELSE
 FIELD Filenr,L AS Is_$: FOR R1=Von TO Bis STEP SGN(Bis-Von+.1)
 GET Filenr,R1:Is_Such$=Is_$: LSET Is_$=Is_Rec$: PUT Filenr,R1: SWAP Is_Such$,Is_Rec$: NEXT
 ENDIF RETURN
