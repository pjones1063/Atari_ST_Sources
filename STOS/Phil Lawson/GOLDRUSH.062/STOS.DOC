                                  SCROLL ON

            Part two of Phil Lawson's maze game, where the screen is
                  scrolled and the baddies make an appearance.

We finished last month with a routine to move our little man around a small
area of the maze displayed on the screen. We'll now write the bits that control
the scrolling of the maze, so allowing the man to travel to other parts of the
maze.

Remember that the maze is layed out in a 3 x 3 grid:

                                1   2   3

                                4   5   6

                                7   8   9

So, moving up from screen 9 will take use to screen 6, whereas moving left puts
us on screen 8, but we cannot move right or down. Obviously we'll need to know
which screen the player is going to and the best way to work this out is by
using an array, in this case SCR(9,4).

The number 9 defines nine subscripts of the array, one for each screen. The 4
defines four elements, one for each direction possible. The routine below sets
this up, where the numbers represent the screen you'll end up on by moving in
the corresponding direction:

590 restore 591 : for A=1 to 9 : for B=1 to 4 : read SCR(A,B) : next B : next
A
591 data 0,4,0,2
592 data 0,5,1,3
593 data 0,6,2,0
594 data 1,7,0,5
595 data 2,8,4,6
596 data 3,9,5,0
597 data 4,0,0,8
598 data 5,0,7,9
599 data 6,0,8,0

The directions are up, down, left and right. For example, moving down from
screen 6, (line 596), will take us to screen 9. Moving left puts us on screen
5. Note the 0, which is used to say we cannot move to the right on this
screen.

Ok, we now know where we're going, but how do we actually get there? What we
could do is to draw all the screens, store them in memory banks and just scroll
them on when required. This is fine if you don't want your games to work on
anything less thn a 1Mb machine. (9 x 32000 = 288000 bytes).

Since the whole maze is already stored in the array MAZE(9,11,20), it's a good
idea to use this to only draw a screen when it's wanted and then scroll it on
to the display.

All the graphics used in the game are stored in the sprite bank, but using
SPRITE and PUT SPRITE commands to draw the screen before scrolling will take
far too long, making the game look amaturish.

The best way, and here comes one of my favourite tricks for drawing screens
quickly, is to first set up a dummy screen containing the graphics that are
used in the actual construction of the maze, including walls, spaces, doors,
keys bags of gold and clocks. Take a look at the following lines:

432 reserve as screen 6 : cls 6 : logic=back : cls back
434 for A=1 to 13 : sprite 1,A*16,10,PATTS(A) : wait vbl
436 screen copy logic,A*16,10,A*16+16,26 to back,A*16,10
438 XP=XP+16 : next A : wait vbl : screen copy back to 6 : logic=physic

1000 gosub 2500
1010 gosub 1500
1020 goto 1010
1500 rem move the little man around
1501 rem **************************
1510 J=joy : if J=0 or J>8 then return
1520 TX=XP : TY=YP : M=0
1530 if J=1 then dec TY : M=1
1540 if J=2 then inc TY : M=2
1550 if J=4 then dec TX : M=3
1560 if J=8 then inc TX : M=4
1565 if TX<1 then gosub 2000 : return
1566 if TX>20 then gosub 2100 : return
1567 if TY<1 then gosub 2200 : return
1568 if TY>11 then gosub 2300 : return
1570 if M=0 or MAZE(MAZ,TX,TY)=1 then return
1580 XP=TX : YP=TY
1590 move x 1,MOVX$(M) : move y 1,MOVY$(M)
1600 anim 1,AN$(M) : anim on (1) : move on (1)
1610 if movon(1)<>0 then 1610
1620 move off (1) : anim off (1)
1630 return

2000 rem move to the left
2001 rem ****************
2010 YY=y sprite(1) : TT=SCR(MAZ,M) : if TT=0 then return
2020 reserve as screen 7
2025 for B=20 to 1 step-1 : for C=1 to 11
2030 XX=MAZE(TT,B,C) : screen copy 6,XX*16,10,XX*16+16,26 to 7,0,(C-1)*16
2040 next C
2050 screen copy physic,0,0,304,176 to physic,16,0
2060 screen copy 7,0,0,16,176 to physic,0,0
2070 cls 7 : next B : wait vbl : screen copy physic to back
2080 erase 7
2090 MAZ=TT : sprite 1,304,YY,10 : wait vbl : sprite on (1) : wait vbl : XP=20
2099 gosub 2500 : return

Lines 1000 to 1630 is just the routine that moves the man around, which has
been renumbered from last month's version. The only changes are:

1565 if TX<1 then gosub 2000 : return
1566 if TX>20 then gosub 2100 : return
1567 if TY<1 then gosub 2200 : return
1568 if TY>11 then gosub 2300 : return
1570 if M=0 or MAZE(MAZ,TX,TY)=1 then return

These are just to test the position of the man and jump to the correct
scrolling routine if required. Line 1570 now makes sure that the joystick has
been moved and the man isn't trying to walk into a wall before allowing the man
to move.

Back to business, lines 432 to 438 sets up the dummy bank to hold the graphics
and copies the sprite images onto it, one next to another.

The important bit of work is done in lines 2000 to 2099. This shows how the
screen to the left of the current one is scrolled on. Firstly, bank 7 is
defined and the two FOR... NEXT loops are set up. Notice that B counts down
from 20 to 1. This is because we're drawing the screen from right to left, so
that after each column has been drawn, it is scrolled onto the main screen.
This gives a fairly quick scrolling technique, without having to resort to
deperate measures such as dedicated machine code routines.

Line 2030 reads the data from the MAZE array and copies the correct graphic
from screen 6 to screen 7. When a whole column has been drawn, (C = 11), line
2050 copies the main display 16 pixels to the right and line 2060 copies the
newly drawn column of graphics to the left hand side of the screen. Although
the theory seems a little crude, (and even confusing), the whole effect is one
of a reasonably quick scroll, especially when all twenty columns have been
drawn and scrolled.

Notice line 2070, which before the next column is drawn clears bank 7. If this
wasn't done, you'd end up with some objects appearing on top of others. Try
removing the CLS 7 command from line 2070 in the main program to see the actual
effect for yourself.

Only one thing remains to be done and that is to copy the physical screen to
the background and reposition the man on the screen, at the right hand side.
The variable YY was set up at the start of the routine to hold the y-coordinate
of the sprite for when we redraw it. Notice there was no need to keep a record
of the X-coordinate, because we know it will automatically be changed to the
very right most point of the screen.

For the time being we'll ignore the GOSUB 2500 instruction.

Well, that's how to scroll. I suggest you examine the main program very closely
until you get a good idea of EXACTLY what's going on in the scrolling routines.
The tricks you'll learn are quite invaluable and can be used in many types of
game, not just scrolling mazes.

The routines at lines 2100,2200 and 2300 are similar in operation, except these
scroll the new screens from the right, above and below. I suggest to take a
look at these three, just to make sure you understand how they work.

Enough of scrolling, let's get those baddies into the game. You should remember
from last month the picture I used to read the maze data from. This also
contained a few green dotted lines which show the paths each baddie will be
taking.

I also mentioned that the rough design of the maze was done first on a large
piece of graph paper. It's this graph I've used to work out where each baddie
will start and how it will move.

It's possible to use an array for moving the baddies, but this would mean
having to move each one with a specific command. The time this takes wouldn't
be too long, but there are more things we could be doing with the time
available. For this reason, and because the paths are quite simple, I decided
to go back to the good old MOVE commands.

Lines 600 to 650 control the setting up of five arrays:

    BADS(9)   How amny baddies there are on each screen
 SXBAD(9,4)   The starting X coord of each baddie on the screen
 SYBAD(9,4)   The starting Y coord of each baddie on the screen
BADDX$(9,4)   Command data for the MOVE X command
BADDY$(9,4)   Command dtat for the MOVE Y command

600 rem set up the baddie movements for each screen
601 rem *******************************************
610 restore 620 : for A=1 to 9 : read BADS(A) : next A
620 data 4,2,3,3,0,3,2,3,4
630 restore 700 : for A=1 to 9
640 if BADS(A)>0 then for B=1 to BADS(A) : read SXBAD(A,B),BADDX$(A,B) : read
SYBAD(A,B),BADDY$(A,B) : next B
650 next A

Notice screen 5 has no baddies on it.

Lines 900 to 940 show the data for each of the four baddies on screen 9. For a
full explanation of the MOVE X and MOVE Y commands see page 82 of the user
manual, but a brief note on these follows:

Syntax   MOVE X sp,"(speed, pixels to move, how many times)"

It is always best to have a speed value of 1. The 'how many times' is literally
how many times the sprite will move the designated number of pixels. For
example:

MOVE X 1,"(1,1,100)" - will move sprite 1, 1 pixel to the right a hundred
times, giving the appearance of the sprite moving right by 100 pixels.

MOVE X 1,"(1,-1,100)" - Exactly the same, except the sprite will move to the
left.

MOVE X 1,"(1,2,50)" - This will also appear to move 100 pixels to the right,
but twice as fast as the example. This is because it's moving two pixels at a
time instead of one. I've made use of this last example to have some baddies
moving faster than others.

898 rem BADDIE DATA FOR SCREEN NINE
899 rem ===========================
900 data 240,"(1,1,48)(1,0,32)(1,-1,48)(1,0,32)L"
910 data 16,"(1,0,48)(1,1,32)(1,0,48)(1,-1,32)L"
915 data 48,"(1,2,120)(1,0,32)(1,-2,120)(1,0,32)L"
920 data 80,"(1,0,120)(1,2,32)(1,0,120)(1,-2,32)L"
925 data 144,"(1,0,64)(1,0,64)L"
930 data 80,"(1,1,64)(1,-1,64)L"
935 data 192,"(1,0,64)(1,0,64)L"
940 data 144,"(1,-1,64)(1,1,64)L"

Each sprites data is split into two lines, the first one controlling the X
movement and the second controlling the Y. The data at the beginning of the
lines identifies the starting position of the sprite. For example, the data for
screen nine indicates:

               Sprite     Starting   Starting
               Number      X-Pos      Y-Pos

                 1          240        16
                 2           48        80
                 3          144        80
                 4          192       144


Right, now we know where the baddies will start and where they're going. The
last routine for this month is just to put them on the screen and set them
moving:

2500 rem put the baddies on the screen and set them moving
2501 rem *************************************************
2510 sprite off (2) : sprite off (3) : sprite off (4) : sprite off (5)
2520 if MAZ=5 then return
2530 for A=1 to BADS(MAZ)
2540 sprite A+1,SXBAD(MAZ,A),SYBAD(MAZ,A),30
2550 anim A+1,"(28,5)(29,5)(30,5)(31,5)l"
2560 move x A+1,BADDX$(MAZ,A)
2570 move y A+1,BADDY$(MAZ,A)
2580 next A
2590 move on : anim on : return

Quite simple really, isn't it? Line 2510 turns off any sprites that shouldn't
be there, and line 2520 makes sure that we're not on screen 5. Remember this
screen has no baddies.

The main loop, (2530 to 2580), put each sprite at its start position,
initialises the animation sequence and finally sets up the MOVE commands. Once
the loop is finished with, line 2590 sets the movement and animation going and
returns to the calling routine.

Remember the GOSUB 2500 instructions at the end of the scrolling routines?
Well, this routine is also used to put the new baddies on the screen after it
has been scrolled.

Before I finish, time to iron out the bugs I've found so far. Stop laughing -
Bug Hunting is all part and parcel of programming. Obviously, it would be very
nice to write bug-free programs first time, but life just isn't that kind.

The first one concerns the doors. These are arranged throughout the maze and
can only be opened with the right coloured key. On checking the state of the
maze I found there were more keys than there should be, and not one door in
sight. The error was tracked down to these three lines:

260 if TT=1 then MAZE(A,B,C)=10 : if point(XP,YP-1)=8 then MAZE(A,B,C)=5
280 if TT=3 then MAZE(A,B,C)=9 : if point(XP,YP-1)=8 then MAZE(A,B,C)=3
300 if TT=6 then MAZE(A,B,C)=11 : if point(XP,YP-1)=8 then MAZE(A,B,C)=7

To get them working correctly, change the - signs to +'s.

When testing the game I also found that gold pieces were appearing directly
under the little man when the screen was scrolled. Since the man hasn't
actually moved - just the screen has been scrolled - it follows there should
have been gold beneath him BEFORE the scrolling took place, but usually there
wasn't.

The answer to this was to make sure that gold could not be put at the very edge
of a screen:

390 if MAZE(A,B,C)<>0 or (A=STM and B=STX and C=STY) or B=1 or B=20 or C=1 or
C=11 then 380

The final bug lies with drawing spaces. Previously I had just ignored any space
and just drawn the more important bits, such as walls, gold and keys. The quick
definition of a blank sprite, drawn with a colour set to black - (other than
zero of course, because colour zero is used purely for the background and
doesn't affect the main display one bit) - solved this one.

Now to draw a space I just use sprite pattern number 27, which nicely
obliterates anything underneath it. This pattern needs including in the PATTS()
array, which is achieved by:

420 restore 430 : for A=0 to 13 : read PATTS(A) : next A
430 data 27,2,26,19,18,17,16,21,20,23,22,24,25,1

Don't forget that line 434 needs changing from:

434 for A=1 to 13 : sprite 1,A*16,10,PATTS(A) : wait vbl

to:

434 for A=0 to 13 : sprite 1,A*16,10,PATTS(A) : wait vbl

That's it folks! The full, so-far-working version of the game can be found on
the cover disc. Please examine the code quite carefully to be sure you
understand everything that's going on. Next month it's time to get the gold or
die. In other words we'll be including the timer, picking up the gold and
bumping into baddies and acid pools.
