                        GET ON THE RIGHT PATH

                Phil Lawson shows how to use the data
                 set up with the sprite path definer.

First of all, a big whoops needs getting over with. Somehow the sprite path
definer has a very small, almost insignificant, (ok it was massive), bug. It
affected the way that sprite paths were played after loading them from disc.
This has now been sorted out, and the new version of the program appears on
this months disc.

For all the STOS users who requested the Basic program, all you need to do is
change line 720 to:

720 if HI(A)>0 then doke ADDR,X(A,0) : inc ADDR : inc ADDR : doke ADDR,Y(A,0) :
inc ADDR : inc ADDR : for B=1 to HI(A) : poke ADDR,X(A,B) : inc ADDR : poke
ADDR,Y(A,B) : inc ADDR : next B

Secondly, a small note to any other readers thinking about asking for the Basic
listing. At the moment I'm sending out single sided discs with all sorts of
goodies, including PI1 pictures, new character sets and some useful STOS
routines that will format discs without having to return to the desktop. If you
have a double sided drive, please tell me as I'll then be able to put more
files on it for you.


Right, down to this month's business. It's no good defining all these wonderful
sprite paths, if you cannot use them in your next blockbusting game. You'll
find the breakdown of the data file at the end of this article, but the program
below shows exactly how to load the data, store it in an array and play it:

10 MODE 0 : KEY OFF : CURS OFF : HIDE ON
20 REM INITIALISE VARIABLES
30 REM ********************
40 DIM x(10,999),y(10,999),hi(10),strt(9)
50 ERASE 5 : RESERVE AS DATA 5,19000
60 strt(1)=START(5)+4 : FOR a=2 TO 9 : strt(a)=strt(a-1)+2100 : NEXT a
90 REM LOAD SPRITE PATH(S)
100 REM *******************
110 LOAD "PATHDATA.MBK",5
120 temp=START(5) : IF PEEK(temp)<>11 OR PEEK(temp+1)<>22 OR PEEK(temp+2)<>33
OR PEEK(temp+3)<>44 THEN STOP
130 FOR a=1 TO 9 : addr=strt(a) : hi(a)=DEEK(addr) : INC addr : INC addr
140 x(a,0)=DEEK(addr) : INC addr : INC addr : y(a,0)=DEEK(addr) : INC addr :
INC addr
150 IF hi(a)=0 THEN 200
160 FOR b=1 TO hi(a) : x(a,b)=PEEK(addr) : INC addr : y(a,b)=PEEK(addr) : INC
addr
170 IF x(a,b)>128 THEN x(a,b)=x(a,b)-256
180 IF y(a,b)>128 THEN y(a,b)=y(a,b)-256
190 NEXT b
200 NEXT a
1000 REM PLAY THE LOADED SPRITE PATHS
1001 REM ****************************
1010 FOR a=1 TO 9 : IF hi(a)=0 THEN 1060
1020 SPRITE 1,x(a,0),y(a,0),2 : WAIT VBL
1030 FOR b=1 TO hi(a) : SPRITE 1,X SPRITE(1)+x(a,b),Y SPRITE(1)+y(a,b)
1040 WAIT VBL
1050 NEXT b
1060 NEXT a
1070 GOTO 1010

The important bits are between lines 100 to 200. This loads the named path data
into memory bank 5 and copies the relevant information into the arrays x(a,b)
and y(a,b).

Line 120 also checks the first four bytes. These must be 11, 22, 33 and 44,
otherwise the loaded file has not been created using the Sprite Path Definer
and the program halts.

The next byte is how many positions are in the next sprite path, followed by
the starting X and Y positions, (see the breakdown at the end of the article).

Lines 160 to 190 reads all the data into the arrays. This data is a series of
offset values, which range from 127 to -127, and represent how far the sprite
has to move from its last position. For instance, take a look at the table
below.


Current sprite position   X-offset    Y-offset      New sprite position

  X = 100    Y = 80          2            0           X = 102   Y = 80
  X = 102    Y = 80         -1           -1           X = 101   Y = 79
  X = 101    Y = 79          0           -2           X = 101   Y = 77
  X = 101    Y = 77         -2            1           X =  99   Y = 78

Table I: How offset values affect the sprite position.


The part of the program that actually displays and move the sprite starts at
line 1000. Line 1010 simply checks that the current path (1 to 9) contains some
data. If the value of hi(a), (howmany positions are defined for that path), is
zero, the rest of the routine is bypassed by jumping to line 1060.

Line 1020 places the sprite at its start position, defined by the zeroth
element of the arrays -  x(a,0) and y(a,0)

Lines 1030 to 1050 now move the sprite around the screen, by taking the current
position and adding the next offset values.

As shown, the program will show all the sprite paths in the order they were
defined, but you could easily change this to display them in any order you
want.

Note, the important part of the program is lines 10 to 200. This only needs to
be done at the very start to setup the arrays, and can be ignored for the rest
of the time. You must agree that for compicated sprite paths, using a few lines
as shown in 1000 to 1070 is a lot easier than constructing hundreds of MOVE
commands.

                   WHAT THE DATA FILE LOOKS LIKE
                   ÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿ
This information is taken from the original text that described how to use the
Sprite Path Definer.



1) When saving the path data to a file, the following format is used:

The first four bytes are 11, 22, 33 and 44. This is used to identify a sprite
path file when loading it back into SPD. The next byte is how many positions
are defined in this path.

The next four bytes are the actual starting position of the sprite, in hi-lo
order. For instance, if these were 01, 04, 00 and 95, the start position can be
found by:

       x = (01 * 256) + 04  =  260
       y = (00 * 256) + 95  =   95


The remainder is taken up with the offset values for each of the sprite
positions defined within this path. Note, if an offset value is greater than
127, treat it as a negative number. The way to calculate negatives is:

if num > 127 then num = 256 - num

All the above information, apart from the 11,22,33 and 44, is repeated for the
whole nine paths. If any of these is empty, the "how many" value will be zero.


If you haven't got a copy of the Sprite Path Definer, or would like the Basic
listing, send a cheque for œ2.00 to cover the cost of disc, postage, packaging
and so on to:

Phil Lawson
7, Eaglescliffe Close
New Marske
Redcar
Cleveland
TS11 8BB

Please also indicate the type of disc drive you have access to, (single or
double sided), and I'll fill it with all sorts of other goodies as well. Also,
if you have any suggestions for articles, please let me know by sending them to
the Editors, as they insist on knowing what I'm upto. Ah, the problems of
working freelance.
