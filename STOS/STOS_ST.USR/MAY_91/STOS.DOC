                                 DO OR DIE

           Things really start to get interesting as Phil Lawson
          introduces death and glory to his goldrush arcade game.


Over the past couple of months I've recieved countless requests for the Sprite
Path Definer plus all the other goodies. Several of these have included ideas
for future articles, which I'll be getting round to just as soon as I sort out
a couple of bugs.

Right, down to this month's business, where we'll be adding the routines to
pick up gold, keys and clocks, not to mention dying through running out of
time, walking into acid pools, being caught by the baddies (ouch), closing
doors and opening them again.

First things first. If we're going to have a timer, we'd better decide on how
to display it. Since most of the screen is taken up with the playing area,
there's only the bottom part left. Now we could display the time left using
digits, but updating them every half second or so really will slow down the
rest of the game.

My favourite way of displaying the time left is by using a bar at the bottom of
the screen, which slowly gets shorter and shorter until it eventually
disappears and you're out of time. These bars look quite effective, especially
when surrounded by box, which is nicely done with line 552:

552 ink 3 : for A=1 to 4 : draw 50,179+A to 228,179+A : draw 50,191+A to 228,
191+A : draw 49+A,180 to 49+A,195 : draw 224+A,180 to 224+A,195 : next A

We could also do with some way of displaying the number of lives left, the
score and what colour key we're holding, all of which are achieved with the
following small changes to the main program:

551 locate 1,24 : pen 3 : print "KEY"; : locate 34,24 : print "SCORE";
557 logic=physic : appear back
558 ink 1 : for A=54 to 224 : draw A,184 to A,191 : wait 1 : next A : TIM=224
559 sprite 2,230,180,4 : sprite 3,240,180,4 : sprite 4,250,180,4 : wait vbl :
put sprite (2) : put sprite (3) : put sprite (4) : wait vbl : sprite off (2) :
sprite off (3) : sprite off (4)

Line 558 simply fills the timer box from the left to the right and sets the
value of TIM to 224. This is the variable we'll be using to test if the payer
has run out of time.

That's got the boring bits out of the way, now it's down to business. Take a
look at the following changes to the program:

1010 while DEAD=0 : gosub 1500
1020 if timer>25 then gosub 3000
1030 if fire=-1 then gosub 4000
1040 if collide(1,8,15)>0 then gosub 5000
1090 wend
1100 stop

We've introduced a new variable, DEAD. This, surprise surprise, not only tells
us if the player has died, (not literally), but also how.

DEAD = 0  -   Not dead
DEAD = 1  -   Timer run out
DEAD = 2  -   Caught by a baddie
DEAD = 3  -   Walked into acid pool

The above bit of code will continue to loop around until the variable DEAD
contains something other than zero.

The next line checks the value of TIMER. Now this is a system variable, which
increases by 50 every second. So we can see that after every half second the
program will call the routine at line 3000:

3000 rem decrease the timer bar
3001 rem **********************
3010 ink 15 : draw TIM,184 to TIM,191
3020 dec TIM : if TIM=53 then DEAD=1
3030 timer=0 : return

All that happens here is that a small vertical black line is drawn at a
position TIM pixles from the left. This gives the appearance of the time bar
decreasing slightly. Next, the actual value of TIM is decreased, so that next
time a bit more of the bar will disappear. If all the bar has gone, which will
be the case when TIM becomes 53, the variable DEAD is set.

The final part of this routine is just to reset the value of TIMER, so that
another half second passes before the routine is called again.

THE KEY TO THE PROBLEM

Whenever the joystick fire button is pressed, the player will do one of three
things:

1) Drop the key currently held
2) Pick up a new key
or
3) Both

All this is handled by the short routine starting at line 4000:

4000 rem pickup / drop key
4001 rem *****************
4010 TEMP=MAZE(MAZ,XP,YP) : if TEMP<>0 and TEMP<>9 and TEMP<>10 and TEMP<>11
then return
4020 if KK=0 and TEMP=0 then return
4030 MAZE(MAZ,XP,YP)=KK
4040 screen copy 6,KK*16,10,KK*16+16,26 to back,XP*16-16,YP*16-16
4050 KK=TEMP
4060 screen copy 6,KK*16,10,KK*16+16,26 to back,16,176 : screen copy 6,KK*16,
10,KK*16+16,26 to physic,16,176
4070 wait vbl : while fire=-1 : wend
4080 return

Firstly, line 4010 makes sure that either the player is standing over a key to
pick it up, or an empty space to drop one. If not the player is wasting his
time pressing the fire button and so the program returns to line 1040.

Line 4020 also tests for players doing silly things, in this case standing over
an empty space and not having a key to drop. The variable KK is used to denote
what colour key is being carried:

 9 = Yellow key
10 = Red key
11 = Blue key

Lines 4030 to 4080 are quite clever, as they will perform all three possible
actions without once having to check which one is really being done.

First of all line 4030 sets the position beneath the player to the value of KK.
The consequences of this are:

1) If no key is held there must be one under the player. Therefore KK will
originally be zero, which is placed in the MAZE array effectively removing the
key from the map.
2) If a key was held, the area under the player will be set to the same value
of KK, (9,10 or 11), which is the same as dropping the key.
3) If a key is being held and the player is also standing over a key, the
effect will be to obliterate the old key under the player and replace it with
the new one.

Line 4040 copies the appropiate graphics from screen 6, to either show that a
key has been picked up or dropped.

Remember line 4010. This set the variable TEMP to whateer was under the player.
This had to be either a key or a space, so the value of TEMP would have to be
0, 9, 10 or 11. Line 4050 now copies this into the variable KK. So, we can see
that whatever the player was standing over is now stored in KK, which will
either be a space or one of the three keys.

Line 4070 waits until the player has finished pressing the fire button,
otherwise keys would be quicky dropped and picked up again whenever you tapped
the button. This would leave you with only a 50-50 chance of releasing the
button at the correct time. Try putting a REM statement at the start of line
4070 to see the problems for yourself.

We've already looked at running out of time as a way of dying, but now it's
time for the other two. I'm not going to bother writing any elaborate death
scenes, simply because these will only take up valuable space without teaching
you anything. If you want an exercise, you could always write your own and
place them before the RETURN commands in the following two routines:

5000 rem baddie has caught the man
5001 rem *************************
5010 move off : anim off
5020 DEAD=2
5030 return

1628 if TT=2 then gosub 6000
6000 rem walked into an acid pool
6001 rem ************************
6010 anim off : move off
6020 DEAD=3
6040 return

Notice the value of DEAD in each routine. This is so that later on in the
program you can test how the player died. Remember, it's possible to walk into
an acid pool just as the timer runs out and a baddie catches you, so by using
different values you can easily find out which one caused you untimely demise.

With all this talk of death, let's not forget the aim of the game - namely to
collect all the gold possible. To pick some gold up all you have to do is walk
over it and these next lines do the rest:

1627 if TT=13 then SCR=SCR+10 : S$="$"+str$(SCR) : S$=mid$(hex$(val(S$),6),3) :
locate 34,23 : print S$ : TT=0 : gosub 1700
1700 MAZE(MAZ,XP,YP)=TT : screen copy 6,TT*16,10,TT*16+16,26 to back,XP*16-16,
YP*16-16 : screen copy 6,TT*16,10,TT*16+16,26 to physic,XP*16-16,YP*16-16
1710 return

All that happens here is that line 1627 checks if the player is over some gold
and increases the score accordingly. The technique to print the score has been
covered several times in past articles and all it does is print leading zeros.
The routine at line 1700 simply blanks out whatever is under the player, in
this case a bag of gold and replaces it with the graphic represented by TT.

Since this routine will be handy, I figured it was a good idea to save space
and use it as a subroutine. That way I could replace some complex typing by
setting TT to the correct value and using a GOSUB statement.

Since we've got the routine to pickup and drop keys, we might as well get to
open and shut doors:

1575 TT=MAZE(MAZ,TX,TY) : if (TT=4 or TT=6 or TT=8) and KK<>(TT/2)+7 then
return
1625 if TT=3 or TT=5 or TT=7 then inc TT : gosub 1700

The first line checks if the player is trying to walk into a locked door
without carrying the correct key. If he has got the right key, the player is
allowed to pass, which has the effect of shutting the door again. Since the
door will only be open for a very short period of time, we can forget about
actually showing it on the screen. This saves us some time and prevents the
game from being too slow.

Speaking of time, the last bit of code for this month is concerned with picking
up the clocks, which like the gold is done by walking over it:

1629 if TT=12 then gosub 7000
1630 return
7000 rem picked up a clock
7001 rem *****************
7010 TT=0 : gosub 1700
7020 ink 1 : for A=TIM to 224 : draw A,184 to A,191 : wait 1 : next A :
TIM=224
7030 return

Simplicity itself! Line 1629 checks for a clock under the player and calls the
routine at 7000 if one is found.

The variable TT is set to 0, indicating a space and the Overwrite routine at
1700 is invoked to remove the clock from the playing area.

Line 7020 fills up the time box again and the variable TIM is set to its
maximum of 224.

That's all for this month and next time we'll be finishing of the game with
some music, sound effects, hi-score tables, title screens and even a few cheat
modes.
