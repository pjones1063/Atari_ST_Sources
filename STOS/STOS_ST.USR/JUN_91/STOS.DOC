                             THE GAME MUST GO ON

         Phil Lawson brings the short series on writing an actual game
              to an end with music, sound effects, hi-score tables
                       and the inevitable cheat modes.


What we've got to get through in the next hour or so is music, sound effects,
hi-scores, cheats and title screens - so hang on to your hats!

Firstly, music and sound effects. We've all at some time or other played around
with the music editor supplied with STOS, but it's so unfriendly that most
users give up on it completely. Well don't worry as I hope to bring you a much
easier to use version shortly - just as soon as I've got the bugs ironed out.

Anyway, the STOS music editor gives us control over three sound channels and by
playing notes on each of these at the same time we can produce quite reasonable
tunes. If you use all three channels however, you'll find there's no room for
the sound effects. You could try stopping the music, playing the effect and
then restarting the music, but this sounds bloody awful.

The best way around this is to only use two channels for your music, leaving
the third free for our effects. In this months program you'll find a tune
stored in bank 3. Actually there are three tunes, all exactly the same except
the second is quieter than the first and the third is even quieter still.

This is so the player has a choice of three different volume levels, which is
selected by the routine at line 10000. Here we end up with two variables - MM
and VV. These represent the volume at which to play the music, (MM), and the
sound effects, (VV).

Any really clever bods amongst you will probably know of another way to change
the volume of a tune, rather than having three or more versions of it stored in
the music bank, but I'll be covering this in the article on music in the near
future.

Throughout this months program you'll find instructions such as:

volume 3,VV : play 3,50,5 : volume 3,0

or

volume 3,VV : for A=1 to 10 : play 3,A*9,A : next A : volume 3,0

These set the volume of channel three to the value of VV, without affecting the
other two channels that are playing the background music. The first instruction
just plays one note, where are the second plays a series of notes all rising in
pitch. Do remember to turn the note off, (VOLUME 3,0), when you've finished
with it otherwise it will just continue.

Since I'm tone-deaf I'll leave you to devise your own sound effects, but I've
put a few simple ones in just to give you the general idea, such as when the
screen scrolls, collecting keys, clocks and gold bags.

Once a player has lost all his lives, in this case three, the program has to
check the high-scores and see if his name deserves to be in the hall of fame.
This is all done with the routines 11000 and 12000:

11000 rem the hi-score tables
11001 rem *******************
11005 music off
11010 clw : sprite off : cls back : cls physic
11020 windopen 2,0,0,40,12,0,3 : curs off
11030 if SCR>HI(10) then gosub 12000
11040 clw : curs off : centre "Today's mega-heros"
11050 pen 3 : print
11060 for A=1 to 10 : locate 5,A+1 : print HI$(A);"   ";HI(A);
11070 next A
11080 wait 500 : windel 2 : return

Firstly the music is turned off and the screen cleared. To get some nice big
letters on the screen I've opened a window to fill the screen, but with a
larger character set. Line 11030 checks if the player has beaten the last score
on the table. If he has, it's obvious that the score will have to included so
control is passed to line 12000.

Once the routine at 12000 is completed, or if the player didn't reach the
hi-score table, the best scores for today are displayed. Quite simple eh?

12000 rem get name for hi-score position
12001 rem ******************************
12010 centre "You are a hero" : locate 0,1 : centre "of the first order"
12020 print : print : centre " Please enter your name o great one"
12030 locate 14,4 : pen 1 : input N$
12040 if len(N$)>12 then N$=left$(N$,12)
12045 if len(N$)<12 then N$="."+N$ : goto 12045
12050 rem got the name, so now sort it into the correct position
12060 HI$(10)=N$ : HI(10)=SCR
12070 for A=9 to 1 step-1
12080 if HI(A)<HI(A+1) then swap HI$(A),HI$(A+1) : swap HI(A),HI(A+1)
12090 next A : if N$="..PINK FLOYD" then CM=1
12100 return

After hours of battling away though an arcade game, the most depressing message
has to be:

YOU HAVE MADE THE HI-SCORE TABLE   PLEASE ENTER YOUR NAME

For crying out loud, try and beef it up a bit. Remember, games players are on
an ego trip. They want to be the best and to be told so in no uncertain terms.
Flash letters, some fancy sprites and even a little tune can transform what is
basically a list of names into something to really aim for. One nice touch,
which I just didn't have time for, is to make the top players name flash in
some pretty colours. This is easily done by printing this name in a different
colour to the rest and using the SHIFT command as described on page 133 of the
user manual.

Cheat modes are normally activated at the hi-score table. By entering a code
word the player can either set various options in motion, such as never dying,
skipping levels, getting mega bonuses and so on. In this game the entry of PINK
FLOYD for a name will initialise the cheat to stop the time bar from
decreasing.

Notice line 12045. To make sure every name lines up on the screen, they are
padded out to a maximum of twelve characters. The final step is to put the
player's name at the correct place in the table. See lines 12050 to 12080.

Since our player has achieved a high score, the tenth position will 'fall off'.
Therefore all we have to do is place our player's name and score at the tenth
position and use what's known as a 'bubble' sort to get it at the correct
position.

Once a program is completed, you can add the title screen. This is best done by
placing a line similar to the following one at a position in the program when
the game is in progress:

screen copy physic to back : wait vbl : save "TITLE.PI1",back

This will store a copy of the screen on disc in DEGAS low-res format. If you're
using a different art package, such as Neochrome, just change the PI1 bit to
something your package will understand, for example NEO. A full list of
available filename extensions can be found on page 49 of the user manual.

Now, using an art package, design a simple title screen and save it to disc.
With the COMPACT.ACB accessory, squash the picture file and save it as an MBK
file. The main program can now load this into a spare bank, unpack it and copy
it to the main screen.

When designing a title screen, bear in mind a few points.

1) A small design, as I've used, can give a more pleasing result than a screen
crammed with images.

2) Make sure the title of the game appears in big bold characters. These can be
as fancy as you like, but should definately stand out from the rest of the
picture.

3) Please try and avoid the temptation to put long scrolling messages on the
bottom of the screen. I know I've done articles on these in the past, but that
was purely to show how various instructions and commands could be used to great
effect if used sparingly. There's nothing worse than having to sit through five
minutes of waffle before being told that the right mouse button will start the
game.

4) Rather than splash your name all over the screen, or even just in one
corner, try using only your initials - or better still a small logo. People who
don't know you won't be at all impressed anyway, whereas those who do know you
will be when you tell them.

Before I finish for this month, one small word about music. For some weird
reason, certain commands stop music from playing. These include:

ERASE bank and
RESERVE AS SCREEN number

Why this should happen I don't have a clue, but they're worth watching out for.
Because of this I've had to alter a few lines of last months program, mainly
2120, 2220, 2320 and 2400, plus one or two others. There are also a couple of
other minor alterations, which I'm sure you'll have no trouble spotting.

All that remains is the bug-testing. So far I've only found one - the game is
just too hard. Some of the baddies are moving too fast to get past them.
Remember from a couple of articles back that the speed of the baddies was set
in the MOVE commands? Well, it's these that will need changing and I'll leave
that to you.

You may also feel that the movement of the little man is just a bit too jerky,
but this would be quickly dealt with if the game was compiled. Let's face it,
without the compiler any games writer is either the best programmer ever to
draw breath or wasting his time.

Oops! Another small bug has just appeared. When the man is moving, sometimes
the baddies fail to catch him, even when they pass right on top of him. This
one is beaten by including the COLLIDE command in the routine that controls the
man's movement.

That wraps it up for this month. See you next time when I hope to have the new
music editor finished.
