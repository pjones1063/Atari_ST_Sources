                       STOS goes back on the game!

                Phil Lawson shows how to write scrolling
                 maze type games, from start to finish.

Over the past months the STOS column has concentrated on tricks and tips as
used by many of the countries top games programmers. However, now is the time
to leave these for a while and get back to the actual business of designing
and
writing games. For the next three months or so I'll be taking you through all
the stages necessary to produce a scrolling maze type game, complete with
baddies, objects to be picked up and problems to solve.

Obviously, when designing any game you'll first have to decide exactly what
features it's going to contain. These can be anything you like, but it's best
not to go beyond your capabilities, otherwise what seem like brilliant ideas
will only be thrown away later. I decided on the following:

1) - A scrolling maze. When the edge of the screen is reached, the whole maze
is scrolled to show the next bit.
2) - The purpose of the game is to guide a little man around the maze and
collect all the gold that lies in it.
3) - Around the maze are doors, blue, red and yellow, which need corresponding
keys to open them. You can only carry one key at a time, and to pick up
another
you must be stood over it and press the fire button. This drops any key you
currently have and picks up the new one.
4) Walking through a door will have the effect of immediately closing it. To
get through it again you'll need to have the correct key. Since all the doors
are open at the start of the game, rushing around without a plan of action can
leave you trapped with no keys to open the doors once you've been through
them.
5) - Baddies. These follow predefined paths and must be avoided at all costs.
In some cases you can only get to a key by getting past some of the trickier
baddies.
6) - Clocks. Not only will the game finish when you lose a set number of
lives,
but there is also a timer which ends the game should it run out. To get extra
time, pick up a clock by simply moving over it.
7) - Acid pools. Ever since Ravenskull came out on the old 8 bit BBC Micro, no
maze game is complete without the obligatory acid pool. Needless to say, like
the baddies these should also be avoided.
8) - Hi Score table.
9) - Fancy title screen.
10) - Music, which can be set at any of three levels, full blast, just nice or
off.
11) - Sound effects. Again can be set at one of three volume levels.
12) - Pressing the Escape key will kill the little man. This should only be
used when you're stuck, as it loses a life. It does however mean you'll be
transported back to the starting position, so it could be used for short cuts.


Well, that gets the proposed features out of the way, but it doesn't mean
we're
finished with them. At any time we can remove or alter any of them and
possibly
even add some more. Since I don't get paid by the word, we'll cut the waffle
right here and get down to business.

The most important part of any maze game has to be the maze itself. This needs
to be designed in a logical manner, preferably with at least one section that
can only be got to by following a certain path. This is best done roughly on a
large piece of graph paper, but don't forget that at some point we'll need to
transfer all the data into the computer.

For this reason I completed the map with Degas Elite, and wrote a small
routine
to load the picture and read the information directly from it. A copy of the
picture, called GOLDRUSH.PI1 can be found on the disc. It can be found in the
STOS folder on Side Two of the disk.

GOLDRUSH.PC1: <<SCREENSHOT>>

Also needed are a series of sprite patterns, which are stored in bank 1 of
this months program. Please feel free to alter any of these, but do keep them
in exactly the same order, otherwise you'll never follow the articles.

The first part of the program simple lists all the codes for the maze and what
they mean. For example, 0 indicates a space, 1 is wall and 13 is a bag of
gold.
The numbers to the right show the colour these appear on the Degas picture of
the map. Where two colours are used, (for the doors), this means that the door
symbol is made up of two colours, to distinguish them from keys of the same
colour.

The first thing we have to do is load the picture into STOS and read the data.
This is shown in lines 180 to 360 of the program. It may look a little
cumbersome, but the only alternative was to have hundreds of DATA lines, which
would have taken up valuable bytes.

Notice how lines 200 and 220 load the picture into bank 5 and unpack it to the
background screen. This is so that later on we can display the title screen
while all the data reading is going on. Since we'll only be needing bank 5 to
load the packed picture, it can be erased to reclaim memory once the unpacking
has been done:

180 rem Create the maze data from the picture
190 mode 0 : key off : curs off : hide
200 load "picture.mbk",5
220 unpack 5,back : wait vbl: erase 5

Line 230 defines the arrays we'll be using and these are described below:

230 dim MAZE(9,20,11),PATTS(13),AN$(4),MOVX$(4),MOVY$(4) : XP=2 : YP=2

MAZE(9,20,11) - Holds the data that makes up the maze. Notice on the Degas
picture the white lines dividing the maze into nine sections. Each of these is
a separate playing area filling 90 percent of the screen. Moving into the
other
sections is done by travelling along a pathway until the edge of the screen is
reached, at which point the next area will scroll onto the screen. Each of the
nine sections has 20 characters across and 11 down.

PATTS(13) - The map is defined by numbers 0 to 13 as shown at the beginning of
the program. However, the sprite patterns which are used to show these on the
screen, we're defined in a different order. This array holds the corresponding
pattern number for each of the 14 (0 to 13) objects and is set in lines 420
and
430. For example, the wall (object 1) is sprite pattern 2, the clock (object
12) is pattern 25 and the gold bag (object 13) is pattern 1.

AN$(4) - Since the little man can move in four directions, (up, down, left and
right), it is easier to store the animation sequences in an array and use a
variable (M) to show the correct graphics. These are set up in lines 570 to
575.

MOVX$(4) and MOVY$(4) - These contain the data for actually moving the man in
the required direction and are also set up in lines 570 to 575.

For a complete breakdown of the move and animation commands see pages 82, 84
and 87 of the STOS manual. I will point out however, that using a STEP of zero
in the move command actually prevents a sprite from moving in that direction.
This little tip means we don't have to continually check which way the man is
moving. All we have to do is select the appropriate array. For example, to
move
the man upwards we'd use arrays MOVX$(1) and MOVY$(1). Since the STEP value of
the MOVX array is zero, the man will not move at all in the X direction, only
the Y.

Back to reading the map. Lines 240 to 360 use the POINT command to check the
colour of the pixel at position XP,YP on the background screen. This is then
tested against all the used colours to determine what object is represents and
the MAZE array is updated accordingly.

Line 320 tests if the 15th colour has been found, in this case white, because
this is used to define the starting position. If it has, the three variables
STM, STX and STY are used to store the STarting Map number (1 to 9) and the
STarting X and Y coordinates on that map (X=1 to 20, Y=1 to 11):

240 for A=1 to 9 : for C=1 to 11 : for B=1 to 20
250 TT=point(XP,YP)
260 if TT=1 then MAZE(A,B,C)=10 : if point(XP,YP-1)=8 then MAZE(A,B,C)=5
270 if TT=2 then MAZE(A,B,C)=2
280 if TT=3 then MAZE(A,B,C)=9 : if point(XP,YP-1)=8 then MAZE(A,B,C)=3
290 if TT=5 then MAZE(A,B,C)=12
300 if TT=6 then MAZE(A,B,C)=11 : if point(XP,YP-1)=8 then MAZE(A,B,C)=7
310 if TT=8 then MAZE(A,B,C)=1
320 if TT=15 then STM=A : STX=B : STY=C
330 XP=XP+4 : next B
340 XP=XP-80 : YP=YP+4 : next C
350 XP=XP+80 : YP=YP-44 : if XP>240 then XP=2 : YP=YP+44
360 next A

You may have notice that the original picture of the maze, which has now been
read into the MAZE array didn't contain one single piece of gold. Well, if the
gold was always in the same place the game would become a little boring, so a
random factor is used to disperse the gold all over the map. This is achieved
in lines 370 to 410. Notice line 390, which ensures that nothing already
exists
at the randomly choosen spot and that it isn't the starting position either:

370 for GOLD=1 to 200
380 A=rnd(8)+1 : B=rnd(19)+1 : C=rnd(10)+1
390 if MAZE(A,B,C)<>0 or (A=STM and B=STX and C=STY) then 380
400 MAZE(A,B,C)=13
410 next GOLD
420 restore 430 : for A=1 to 13 : read PATTS(A) : next A
430 data 2,26,19,18,17,16,21,20,23,22,24,25,1

Lines 440 to 470 are the now familiar pieces of code that get the required
colours from the sprite bank. These won't actually appear here in the final
game, but they are needed to show you what you've achieved this month:

440 rem set up screen and colours
450 mode 0 : hide on : click off : key off : curs off
460 X=hunt(start(1) to start(1)+length(1),"PALT")+4
470 for L=0 to 15 : colour L,deek(X) : inc X : inc X : next

Now to draw the screen. Because all the graphics are stored in the sprite
bank,
it is necessary to use the PATTS array to find out which pattern to show.
Also,
since it takes a few seconds to actually draw the screen, appearances can be
made much better by drawing everything on the background screen and then using
the APPEAR command to display it.

Line 530 makes use of the SCREEN COPY function to copy the sprites image onto
the background screen. I can already hear some of you screaming "Why doesn't
he
use PUT SPRITE instead?". Well, the answer is quite simple. Some of the sprite
images will need to be put at the left most side of the screen, with an X
value
of zero. Now there's a little known bug, (sorry - feature), in STOS which
prevents the PUT SPRITE command from working if the X coordinate of the sprite
is zero. If you would like to see exactly what's going on with this routine,
remove the LOGIC=BACK, LOGIC=PHYSIC and APPEAR BACK commands:

500 XP=0 : YP=0 : logic=back : for C=1 to 11 : for B=1 to 20
510 TT=MAZE(STM,B,C)
520 if TT>0 then sprite 1,XP,YP,PATTS(TT)
530 wait vbl : screen copy logic,XP,YP,XP+16,YP+16 to back,XP,YP
540 XP=XP+16 : next B
550 XP=0 : YP=YP+16 : next C : logic=physic : appear back

All we need to do now is position the man on the screen and set up the
movement
and animation arrays:

560 sprite 1,STX*16-16,STY*16-16,4
570 AN$(1)="(7,4)(8,4)(7,4)(9,4)L" : MOVX$(1)="(1,0,16)" :
MOVY$(1)="(1,-1,16)"
572 AN$(2)="(4,4)(5,4)(4,4)(6,4)L" : MOVX$(2)="(1,0,16)" : MOVY$(2)="(1,1,16)"
574 AN$(3)="(10,4)(11,4)(10,4)(12,4)L" : MOVX$(3)="(1,-1,16)" :
MOVY$(3)="(1,0,16)"
575 AN$(4)="(13,4)(14,4)(13,4)(15,4)L" : MOVX$(4)="(1,1,16)" :
MOVY$(4)="(1,0,16)"
580 MAZ=STM : XP=STX : YP=STY

Line 580 simply transfers the position of the man into more easily remembered
variables. Also, we'll need to keep the starting position for when a life is
lost.

This is the bit you've all been waiting for, where you get to move the man
about the screen. The simplicity of this routine cannot be overstressed.
Firstly the joystick is tested to see if the player is trying to do something.
Two temporary variables are set up and altered according to the direction of
movement.

For example, is the original coordinates were XP=4 and YP=8, moving the
joystick upwards would result in the following

XP = 4
YP = 8 (we haven't changed it YET!)
TX = 4
TY = 7 (this is the one we changed)
 M = 1

Line 1037 makes sure we're not trying to leave the edge of the screen and also
that were not walking into a wall. If everything is alright, 1038 updates the
values of XP and YP:

600 gosub 1000
610 goto 600
1000 rem move the little man around
1001 rem **************************
1010 J=joy : if J=0 or J>8 then return
1020 TX=XP : TY=YP
1030 if J=1 then dec TY : M=1
1032 if J=2 then inc TY : M=2
1034 if J=4 then dec TX : M=3
1036 if J=8 then inc TX : M=4
1037 if TX<1 or TY<1 or TX>20 or TY>11 or MAZE(MAZ,TX,TY)=1 then return
1038 XP=TX : YP=TY

Now we know which way to go, its a simple matter to use the MOVX, MOVY and AN
arrays to give the little man some action. Line 1070 just waits until the man
has stopped before turning off the animation and movement.

1040 move x 1,MOVX$(M) : move y 1,MOVY$(M)
1050 anim 1,AN$(M) : anim on (1) : move on (1)
1070 if movon(1)<>0 then 1070
1080 move off (1) : anim off (1)
1090 return


Three small things to point out before I finish for this month.

1) The movement routine is a SUBroutine, so that it only needs to be called
when needed and can be left if the player isn't doing anything.

2) At the moment the player cannot do anything but move about. Therefore the
bit at line 1010 which tests for the fire button, (or j>8) will be altered
when
the get/drop key routine is added.

3) On the actual map show in the Degas picture, you may have noticed that the
areas immediately next to the white lines are identical. This is so that when
you move from one screen to another, you will not run the risk of walking
straight into a baddie or acid pool. What actually happens is that the new
screen will scroll on, but you will really be in exactly the same place on the
map, just with a different view.

That wraps everything up for this month. Next time we'll be adding the
scrolling routines and some baddies.



*******************************************************************************


                                   LAST MONTH
                                   ----------

As some of you may have discovered, there was an error in the way the STOS.ARC
file on the February disk was packed. This meant that some of you may have
been
unable to unpack the files with the copy of ARCX.TTP included on the disk.

It is possible to de-archive the file using the archiving programs from the
December CoverDisk. Simply follow the detailed instructions for using the ARC
Shell program included on the Disk.

For those of you who don't have the December disk, or don't want to go to the
trouble, we'e included the programs on this month's disk. In the STOS folder
is
another folder called STOS.FEB which has all the files to go with last month's
STOS column.

SORRY FOR ANY PROBLEMS!
