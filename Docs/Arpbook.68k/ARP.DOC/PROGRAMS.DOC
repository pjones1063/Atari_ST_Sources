               Atari ST Machine Specific Programming In Assembly
               

Program Index

     Source files are listed in alphabetical and numerical order, the order in 
  
which they appear in the book.  The following information is given for each 
  
entry: the folder in which the source file and assembled programs are stored on 
  
disk; the chapter in which the program is introduced and the page number within 
  
the chapter; a brief description of program function.

  
Alphabetical Listing
  

 Source    Folder   Chapter  Program  Function
  Name      Name     /Page    Number

AUT_DATA  INSTTEST    7/62      38    A version of program 37 in which data 
  
                                      areas are declared within the AUTs.
                                      
CLR_MEM   ALGRTEST    6/29      29    Compares 6 ways of clearing 32,000 bytes 
  
                                      of ram.
                                      
CLR_MEM2  ALGRTEST    6/36      30    Measures specific values reported by 
  
                                      program 29 with greater accuracy.
                                      
CONFIG    UTILITY     6/16      27    Configures certain system variables during 
  
                                      boot.
                                      
CMD_TEST  UTILITY     5/36      20    Compares the command line processing 
  
                                      algorithms used in programs 16, 18 and 19.
                                      
CUSTOM    CUSTTRAP    7/53      --    This is a version of program 13 to which 
  
                                      program 34 has been added.
                                      
HEX_TEST  ALGRTEST    4/67      14    Verifies the accuracy of the binary to 
  
                                      ASCII decimal algorithm used in PRG_4AP 
                                      
                                      and TRAPS.
                                      
LEA_ADDA  ALGRTEST    6/49      33    Confirms that the LEA instruction is the 
  
                                      better choice for stack adjustments 
                                      
                                      greater than 8 bytes.
                                      
LEA_MOVE  INSTTEST    7/50      37    Compares the execution speed and requisite 
  
                                      memory of two algorithms that write data 
                                      
                                      to a location.
                                      
LEAMOVEA  INSTTEST    7/73      40    Compares the execution speed and requisite 
  
                                      memory of two instructions that load an 
  
                                      address into an address register.
                                      
MULTIPLY  ALGRTEST    6/45      32    Compares the speed of three multiplication 
  
                                      algorithms.
                                      
PEA_MOVE  INSTTEST    7/79      41    Compares two ways of pushing the contents 
  
                                      of an address register onto the stack.
                                      
PRG_1AP   PRG_1       2/19       1    A minimum ST program.
  
PRG_1BP   PRG_1       2/46       2    Waits for a keypress.

PRG_1CP   PRG_1       2/56       3    Exposes an AssemPro bug.

PRG_1DP   PRG_1       2/60       4    A bug killer.

PRG_1EP   PRG_1       2/74       5    Embedding data between program text 
  
                                      segments.

PRG_2AR   PRG_2       3/3        6    Exposes an error in the AssemPro manual.

PRG_2AC   PRG_2       3/16       7    Introduces the Combo assembly mode.

PRG_2BR   PRG_2       3/19       8    Illustrates the type of instructions that 
  
                                      are not compatible with PC-relative 
                                      
                                      assembly.
                                      
PRG_2CC   PRG_2       6/3       23    Programs 23 and 24 are used to generate 
  
                                      executable files assembled in three modes 
                                      
                                      so that their load and execute times can 
                                      
                                      be compared.
                                      
PRG_2CP   PRG_2       6/5       24    Used to generate the PC-relative and 
  
                                      Relocatable files for the comparison 
                                      
                                      discussed above.
                                      
PRG_2DP   PRG_2       6/9       25    Compares the effects of three floppy disk 
  
                                      formatting techniques.
                                      
PRG_3AP   PRG_3       4/12       9    Compares two methods of calculating the 
  
                                      length of a program.
                                      
PRG_3BP   PRG_3       4/36      10    Illustrates the use of GEMDOS $4A.
  
PRG_3CP   PRG_3       4/41      11    Compares two binary to ASCII decimal 
  
                                      conversion algorithms.
                                      
PRG_4AP   PRG_4       4/54      12    Illustrates the use of GEMDOS $31.
  
PRG_5AP   PRG_5       5/22      17    Exercises SPEED_1 and custom traps 3, 6 
  
                                      and 8.
                                      
PUSHZERO  ALGRTEST    6/22      28    Compares three ways of pushing zero onto 
  
                                      the stack.
                                      
SPAWN     UTILITY     5/70      22    Spawns a process and saves its redirected 
  
                                      output in a disk file.
                                      
SPEED_1   UTILITY     5/15      16    Computes a program's load and execution 
  
                                      times.
                                      
SPEED_2   UTILITY     5/26      18    Improved SPEED_1.
  
SPEED_3   UTILITY     5/31      19    Improved SPEED_2.
  
SPEEDTST  UTILITY     5/65      21    Improved SPEED_3 = final algorithm in 
  
                                      series.
                                      
TIMES_4   ALGRTEST    6/40      31    Refutes the claim that multiplying by 4 
  
                                      using add dn, dn twice is faster than 
                                      
                                      using asl #2, dn.
                                      
TRAP_9    CUSTTRAP    5/12      15    Installs a custom trap for programs 16-19.
  
TRAP_9P   CUSTTRAP    7/17      34    Installs an adaptive algorithm that 
  
                                      reconstructs itself to form an executable 
                                      
                                      loop about an algorithm under test (AUT) 
                                      
                                      and reports the AUT's execution time and 
                                      
                                      requisite memory.
                                      
TRAP_9R   CUSTTRAP    7/39      36    Installs an adaptive algorithm that 
  
                                      reconstructs itself to form an executable 
                                      
                                      loop about an algorithm under test (AUT) 
                                      
                                      and reports the AUT's execution time and 
                                      
                                      requisite memory.  This is program 34 
                                      
                                      designed for Relocatable assembly.
                                      
TRAP_10   CUSTTRAP    6/14      26    Converts a timed interval passed as a 
  
                                      parameter in D0 to milliseconds, then 
                                      
                                      prints the ASCII decimal value of that 
                                      
                                      interval.
                                      
TRAP9DAT  CUSTTRAP    7/65      39    A version of program 34 designed to work 
  
                                      with AUTs which have declared data areas, 
                                      
                                      such as those in program 38.
                                      
TRAP9TST  CUSTTRAP    7/35      35    Verifies that program 34 functions 
  
                                      correctly.  Measures the speed of 
                                      
                                      multiplication algorithms.
                                      
TRAPS     CUSTTRAP    4/59      13    Installs 8 custom traps.

  
Numerical Listing

Program  Chapter   Source    Folder   Function
 Number   /Page     Name      Name    

    -      7/53   CUSTOM    CUSTTRAP  This is a version of program 13 to which 
  
                                      program 34 has been added.
                                      
    1      2/19   PRG_1AP   PRG_1     A minimum ST program.

    2      2/46   PRG_1BP   PRG_1     Waits for a keypress.

    3      2/56   PRG_1CP   PRG_1     Exposes an AssemPro bug.

    4      2/60   PRG_1DP   PRG_1     A bug killer.

    5      2/74   PRG_1EP   PRG_1     Embedding data between program text 
  
                                      segments.

    6      3/3    PRG_2AR   PRG_2     Exposes an error in the AssemPro manual.

    7      3/16   PRG_2AC   PRG_2     Introduces the Combo assembly mode.

    8      3/19   PRG_2BR   PRG_2     Illustrates the type of instructions that 
  
                                      are not compatible with PC-relative 
                                      
                                      assembly.
                                      
    9      4/12   PRG_3AP   PRG_3     Compares two methods of calculating the 
  
                                      length of a program.
                                      
   10      4/36   PRG_3BP   PRG_3     Illustrates the use of GEMDOS $4A.
  
   11      4/41   PRG_3CP   PRG_3     Compares two binary to ASCII decimal 
  
                                      conversion algorithms.
                                      
   12      4/54   PRG_4AP   PRG_4     Illustrates the use of GEMDOS $31.
  
   13      4/59   TRAPS     CUSTTRAP  Installs 8 custom traps.
  
   14      4/67   HEX_TEST  ALGRTEST  Verifies the accuracy of the binary to 
  
                                      ASCII decimal algorithm used in PRG_4AP 
                                      
                                      and TRAPS.
                                      
   15      5/12   TRAP_9    CUSTTRAP  Installs a custom trap for programs 16-19.
  
   16      5/15   SPEED_1   UTILITY   Computes a program's load and execution 
  
                                      times.
                                      
   17      5/22   PRG_5AP   PRG_5     Exercises SPEED_1 and custom traps 3, 6 
  
                                      and 8.
                                      
   18      5/26   SPEED_2   UTILITY   Improved SPEED_1.
  
   19      5/31   SPEED_3   UTILITY   Improved SPEED_2.
  
   20      5/36   CMD_TEST  UTILITY   Compares the command line processing 
  
                                      algorithms used in programs 16, 18 and 19.
                                      
   21      5/65   SPEEDTST  UTILITY   Improved SPEED_3 = final algorithm in 
  
                                      series.
                                      
   22      5/70   SPAWN     UTILITY   Spawns a process and saves its redirected 
  
                                      output in a disk file.
                                      
   23      6/3    PRG_2CC   PRG_2     Programs 23 and 24 are used to generate 
  
                                      executable files assembled in three modes 
                                      
                                      so that their load and execute times can 
                                      
                                      be compared.
                                      
   24      6/5    PRG_2CP   PRG_2     Used to generate the PC-relative and 
  
                                      Relocatable files for the comparison 
                                      
                                      discussed above.
                                      
   25      6/9    PRG_2DP   PRG_2     Compares the effects of three floppy disk 
  
                                      formatting techniques.
                                      
   26      6/14   TRAP_10   CUSTTRAP  Converts a timed interval passed as a 
  
                                      parameter in D0 to milliseconds, then 
                                      
                                      prints the ASCII decimal value of that 
                                      
                                      interval.
                                      
   27      6/16   CONFIG    UTILITY   Configures certain system variables during 
  
                                      boot.
                                      
   28      6/22   PUSHZERO  ALGRTEST  Compares three ways of pushing zero onto 
  
                                      the stack.
                                      
   29      6/29   CLR_MEM   ALGRTEST  Compares 6 ways of clearing 32,000 bytes 
  
                                      of ram.
                                      
   30      6/36   CLR_MEM2  ALGRTEST  Measures specific values reported by 
  
                                      program 29 with greater accuracy.
                                      
   31      6/40   TIMES_4   ALGRTEST  Refutes the claim that multiplying by 4 
  
                                      using add dn, dn twice is faster than 
                                      
                                      using asl #2, dn.
                                      
   32      6/45   MULTIPLY  ALGRTEST  Compares the speed of three multiplication 
  
                                      algorithms.   
                                      
   33      6/49   LEA_ADDA  ALGRTEST  Confirms that the LEA instruction is the 
  
                                      better choice for stack adjustments 
                                      
                                      greater than 8 bytes.
                                      
   34      7/17   TRAP_9P   CUSTTRAP  Installs an adaptive algorithm that 
  
                                      reconstructs itself to form an executable 
                                      
                                      loop about an algorithm under test (AUT) 
                                      
                                      and reports the AUT's execution time and 
                                      
                                      requisite memory.
                                      
   35      7/35   TRAP9TST  CUSTTRAP  Verifies that program 34 functions 
  
                                      correctly.  Measures the speed of 
                                      
                                      multiplication algorithms.
                                      
   36      7/39   TRAP_9R   CUSTTRAP  Installs an adaptive algorithm that 
  
                                      reconstructs itself to form an executable 
                                      
                                      loop about an algorithm under test (AUT) 
                                      
                                      and reports the AUT's execution time and 
                                      
                                      requisite memory.  This is program 34 
                                      
                                      designed for Relocatable assembly.
                                      
   37      7/50   LEA_MOVE  INSTTEST  Compares the execution speed and requisite 
  
                                      memory of two algorithms that write data 
                                      
                                      to a location.
                                      
   38      7/62   AUT_DATA  INSTTEST  A version of program 37 in which data 
  
                                      areas are declared within the AUTs.
                                      
   39      7/65   TRAP9DAT  CUSTTRAP  A version of program 34 designed to work 
  
                                      with AUTs which have declared data areas, 
                                      
                                      such as those in program 38.
                                      
   40      7/73   LEAMOVEA  INSTTEST  Compares the execution speed and requisite 
  
                                      memory of two instructions that load an 
                                      
                                      address into an address register.
                                      
   41      7/79   PEA_MOVE  INSTTEST  Compares two ways of pushing the contents 
  
                                      of an address register onto the stack.

