Anmerkungen zu MagiC 3 (SHUTDOWN-Mechanismus)
---------------------------------------------

Andreas Kromke
12.11.95

Achtung:	énderungen am Mechnismus seit 28.6.95
		Vulture-UnterstÅtzung seit 11.11.95


1. Allgemeines
--------------

Bei einem Multitaskingsystem ist es eigentlich nicht mehr zulÑssig, den
Rechner nach Gebrauch einfach abzuschalten. Auch ein RÅcksetzen (per
Reset-Taster) ist "tabu". Vielmehr muû sichergestellt werden, daû alle
Programme korrekt beendet und alle Dateien korrekt geschlossen sind, bevor
dem System der Strom abgedreht wird. Ansonsten kann es zu Datenverlusten
kommen.

Aus diesem Grund haben andere Systeme wie UNIX oder der Macintosh einen
sogenannten Shutdown-Mechanismus. Ein solcher wurde auch von Atari bei
MultiTOS eingefÅhrt und ist jetzt auch ab MagiC 3 eingebaut.

Aktiviert wird der Shutdown mit dem MenÅeintrag "Optionen/Ausschalten" 
(Magxdesk 3) bzw. "Datei/Ausschalten" (Magxdesk 2.5). Weiterhin kann der 
Shutdown aktiviert werden durch die Tastenkombination Ctrl-Alt-Del oder 
durch einen Auflîsungswechsel. Letzterer ist Magxdesk 3 durch 
Optionen/Auflîsung bzw. in MAGXDESK 2.5 Åber den Dialog 
Optionen/Einstellungen wechseln durchzufÅhren. WÑhrend des Shutdown kînnen 
keine Programme gestartet werden.

Alle laufenden Programme erhalten eine Nachricht ("AP_TERM"), daû sie sich
beenden sollten. Sind nach einer gewissen Zeit (Åber SchlÅsselwort 
"timout" in der Konfigurationsdatei SHUTDOWN.INF einstellbar, Angabe in
Millisekunden) immer noch Programme im Speicher, gibt SHUTDOWN eine
Fehlermeldung aus. Ein Timeout von 0 bedeutet, daû SHUTDOWN.PRG beliebig
lang wartet, d.h. ein Programm, das AP_TERM versteht, aber in einer
Endlosschleife steckt, fÅhrt zum Systemstillstand. In der Datei
SHUTDOWN.INF kînnen Sie weiterhin Programmnamen (ohne ".prg" oder ".app")
angeben, die unkritisch sind und nicht zu einer Fehlermeldung durch SHUTDOWN
fÅhren sollen.

Nachdem alle im Speicher befindlichen Programme terminiert sind bzw. ignoriert
werden dÅrfen, fÅhrt SHUTDOWN.PRG alle Programme (*.prg) im Verzeichnis
\gemsys\magic\stop aus. Anschlieûend werden alle GEMDOS-GerÑtedateien (-1,-2,-3)
auf u:\dev\null um (d.h. auf -4) umgelenkt und sÑmtliche Devices in u:\dev\
gelîscht. GerÑtetreiber kînnen sich dabei aus den Systemvektoren zurÅckziehen.

éltere Versionen von MagicMac werden am besten dadurch beendet, daû 
zunÑchst im "Atari" der Shutdown durchgefÅhrt wird. Wenn eine 
Atari-Dialogbox das System zum Abschalten freigibt, schalten Sie Ihren Mac 
nicht aus, sondern beenden MagicMac mit [Command]-Q; direkt Åber der 
Atari-Alertbox erscheint dann eine Ñhnliche (sehr einfach und schlicht 
aufgebaute und daher lange nicht so hÅbsche) des MacOS. Jetzt kînnen Sie 
MagicMac gefahrlos durch BetÑtigen des entsprechenden Buttons der 
Mac-Dialogbox beenden.
Neuere Versionen von MagicMac werden automatisch beendet, d.h. 
SHUTDOWN.PRG fÅhrt direkt zurÅck in den Macintosh Finder.

Beachtung: Wenn Sie das System Åber Ctrl-Alt-Del beenden wollen, mÅssen Sie
           darauf achten, daû der Bildschirm nicht gesperrt ist, d.h. daû
           z.B. nicht gerade ein Programm eine Dialogbox oder Alertbox auf
           dem Bildschirm bearbeitet. Weiterhin muû die Shell (i.a. MAGXDESK)
           geladen sein, d.h. es darf kein Programm im "single mode" oder im
           Modus "Shell nicht resident" (z.B. per Alt-Doppelklick) geladen
           sein.
           Ist der Bildschirm gesperrt, wird nur der Writeback-Daemon
           beendet, d.h. der Cache zurÅckgeschrieben. Erst nach Freigeben des
           Bildschirms (d.h. nach Schlieûen der Dialogbox oder Alertbox) kann
           der Shutdown durchgefÅhrt werden. Sollte das System derart
           abgestÅrzt sein, daû kein Shutdown mehr mîglich ist, betÑtigen Sie
           Ctrl-Alt-Del ein zweites Mal; jetzt wird der Warmstart
           durchgefÅhrt, ohne daû Programme beendet werden.
           Ist der "single mode" aktiv oder die Shell nicht geladen, wird
           ebenfalls nur der Writeback-Daemon beendet und der Cache
           zurÅckgeschrieben. FÅr den vollstÑndigen Shutdown muû erst
           das laufende Programm beendet werden, so daû die Shell wieder
           aktiv ist. Der Shutdown MUSS dann Åber den MenÅpunkt
           Optionen/ausschalten bzw. Datei/ausschalten durchgefÅhrt werden.

2. Von der Applikationsseite
----------------------------

An jedes Programm wird beim Shutdown oder Auflîsungswechsel die folgende
Nachricht verschickt:

msg[0]         AP_TERM (50)
msg[1]         ap_id der Applikation, die den Shutdown ausgelîst hat
msg[5]         AP_TERM    (50)     bei Shutdown
               AP_RESCHNG (57)     beim Auflîsungswechsel

Anmerkung: Wurde Ctrl-Alt-Del betÑtigt, bekommen zunÑchst nur der
           Writeback-Daemon und die Applikation 0 eine AP_TERM-Nachricht.
           Als Absender ist dabei -1 eingetragen. Die Applikation 0 (i.a.
           die Shell MAGXDESK) beendet sich dann und startet das
           Shutdown-Programm.

Die Art und Weise, wie MagiC beim Shutdown Applikationen behandelt, hÑngt
davon ab, ob sie das AES informiert haben, daû sie die Nachricht AP_TERM
verstehen. Mit shel_write und doex = SHW_INFRECGN (9) informiert eine
Applikation per Parameter <isgr>, welche Nachrichten sie versteht. Ein
gesetztes Bit 0 von <isgr> bedeutet dabei, daû AP_TERM verstanden wird.

WÑhrend MultiTOS AP_TERM nur an solche Applikationen verschickt, die explizit
AP_TERM verstehen, verschickt MagiC die Nachricht an sÑmtliche Applikationen.
Der Shutdown wird vom AES als "erfolgreich" angesehen, wenn alle 
Applikationen, die explizit AP_TERM verstehen, sich beendet haben. Ein 
Sonderfall liegt vor, wenn diese Applikationen terminiert sind, aber 
weitere Programme im System verbleiben, hier liefert das AES eine 
spezielle Nachricht (s.u.). Der Shutdown wird vom AES nur dann 
abgebrochen, wenn eine Applikation das AES informiert, daû sie sich nicht 
beenden kann. Eine Applikation, die AP_TERM empfangen hat, hat also 
prinzipiell nur zwei erlaubte Mîglichkeiten:

a) Die Applikation terminiert sofort
b) Die Applikation macht folgenden Aufruf:

     int msg[8];
     msg[0] = AP_TFAIL /*51*/;
     msg[1] = err;
     shel_write(SHW_AESSEND /*10*/, 0, 0, (char *) msg, NULL);

   und informiert damit das AES, daû der Vorgang mit Fehlercode <err>
   unterbrochen wurde. Die Applikation, die den Shutdown verursacht hat,
   bekommt die ap_id und den Fehlercode der unterbrechenden Applikation
   mitgeteilt.

Reagiert die Applikation anders, d.h. ignoriert die AP_TERM-Nachricht, hÑngt
das Verhalten des Systems davon ab, ob dem System mitgeteilt wurde, daû die
Applikation AP_TERM versteht:

a) Versteht die Applikation explizit AP_TERM, geht das System davon aus, daû
   die Applikation z.Zt. keine Nachrichten empfangen kann. D.h. der
   Shutdown-Mechanismus wird nicht unterbrochen, sondern dauert solange, bis
   der Aufrufer (d.h. i.a. das Programm SHUTDOWN) den Shutdown abbricht.
   SHUTDOWN verwendet dazu einen Timeout, der in SHUTDOWN.INF per Default auf
   10s gesetzt ist, d.h. wenn 10s nach Beginn des Shutdown noch Programme aktiv
   sind, die AP_TERM verstehen, bricht SHUTDOWN den Shutdown-Prozeû ab. Man
   kann auch den Timeout auf 0 setzen, dann bricht SHUTDOWN nicht ab. "Klemmt"
   aber eine Applikation, muû man entweder diese oder aber SHUTDOWN selbst
   Åber den Programm-Manager (Ctrl-Alt-Esc) terminieren.

b) Versteht die Applikation nicht explizit AP_TERM, meldet das System dem
   Initiator des Shutdown (d.h. i.a. SHUTDOWN.PRG) den erfolglosen (!) Abschluû
   des Shutdown-Vorgangs; d.h. der Shutdown-Modus wird vom System automatisch
   deaktiviert. Da SHUTDOWN.PRG sehr nachsichtig mit alten Programmen ist,
   testet es, ob noch Applikationen aktiv sind, und gibt ggf.
   eine Meldung aus. Dabei kann man in SHUTDOWN.INF Programme angeben, die
   nicht zu einer Fehlermeldung fÅhren sollen, d.h. die nicht beendet zu
   werden brauchen.

3. Von der Initiatorseite
-------------------------

Der Shutdown-Prozeû und der Auflîsungswechsel werden in MagiC 3 von dem
Programm SHUTDOWN Åbernommen. Prinzipiell besteht keine Notwendigkeit, ein
eigenes Programm zu entwickeln, d.h. den Shutdown selbst durchzufÅhren.
SHUTDOWN.PRG wird mit folgenden Parametern aufgerufen:

     SHUTDOWN.PRG <dev> <txt>

bzw. ab MagiC 4:

     SHUTDOWN.PRG <dev> <txt> <xdv>

Dabei ist <dev> = -1, wenn ein Shutdown ohne Auflîsungswechsel durchgefÅhrt
werden soll, ansonsten die GerÑtenummer des VDI-Bildschirmtreibers. <txt> ist
die Texthîhe fÅr das AES, diese sollte i.a. Null sein (d.h. Default-Hîhe).
Wenn eine Falcon-Auflîsung eingestellt werden soll, kann zusÑtzlich das
Falcon- Moduswort <xdv> angegeben werden.

Ein Shutdown wird mit folgendem Systemaufruf durchgefÅhrt:

     ret = shel_write(SHW_SHUTDOWN /*4*/, TRUE, 0, NULL, NULL));

Ein RÅckgabewert von 0 bedeutet, daû ein Shutdown nicht mîglich ist, weil
z.B. bereits ein Shutdown lÑuft. Auûerdem darf der Shutdown nicht ausgefÅhrt
werden, wenn der Aufrufer den Bildschirm per wind_update(BEG_UDPATE) bzw.
wind_update(BEG_MCTRL) gesperrt hat (da die anderen Programme dann nicht
terminieren kînnen). Dies wird jedoch aus KompatibilitÑt zu MultiTOS nicht
vom System ÅberprÅft (ab Version vom 17.5.).
Bei Erfolg ist ret = 1.

Ein Auflîsungswechsel wird mit folgendem Systemaufruf durchgefÅhrt:

     ret = shel_write(SHW_RESCHNG /*5*/, dev, 0, NULL, NULL));

Dabei ist <dev> der VDI-GerÑtetreiber. Alternativ kann man mit

     ret = shel_write(SHW_RESCHNG /*5*/, xdv, 1, NULL, NULL));

in <xdv> einen Falcon-Auflîsungsmodus angeben.
Diese Aufrufe sind alle MultiTOS-konform. ZusÑtzlich existiert in MagiC 3 noch
folgender Aufruf:

     ret = shel_write(SHW_RESCHNG /*5*/, dev, 100+txt, NULL, NULL));

Hiermit kann man die Texthîhe fÅr das AES festlegen. Eine Falcon-Auflîsung
kann man bei diesem Modus nicht Åbergeben, <dev> ist also die GerÑtenummer
des VDI-Bildschirmtreibers.

Dieser Aufruf wurde in MagiC 4 ersetzt (!) durch:

     ret = shel_write(SHW_RESCHNG /*5*/, dev, (txt<<8), NULL, NULL));
bzw.
     ret = shel_write(SHW_RESCHNG /*5*/, xdv, (txt<<8)+(dev<<1)+1, NULL, NULL));

Dabei kann man im Hibyte des dritten Parameters die Texthîhe fÅr das AES
festlegen, sowohl bei der Falcon-Auflîsung als auch bei normalen VDI-
GerÑtenummern. ZusÑtzlich kann man in den Bits 1..4 desselben Parameters
auch fÅr den Falcon ein VDI-Device festlegen, wobei 0 dem Device 5
entspricht (Falcon-Standard).

Die GerÑtenummer hÑngt vom verwendeten System und vom VDI (bzw. NVDI oder
Nova-VDI usw.) ab. Bei einem "nackten" ST, TT oder Falcon ohne Grafikkarte gilt
folgende Zuordung:

     1    Default-Auflîsung
     2    ST niedrig     (320*200*16)
     3    ST mittel      (640*200*4)
     4    ST hoch        (640*400*2)
     5	Falcon-Modi mit zusÑtzl. Moduscode
     6    TT mittel      (640*480*16)
     8    TT hoch        (1280*960*2)
     9    TT niedrig     (320*480*256)

Bei Einsatz einer Grafikkarte oder auf einem Mac stehen die GerÑtenummern in
der Datei ASSIGN.SYS im Wurzelverzeichnis des Bootlaufwerks.

Nach dem erfolgreichen shel_write-Aufruf befindet sich das System im
Shutdown-Modus, es kînnen keine Programme mehr gestartet werden. Nach einem
erfolgreichen Abschluû des Shutdown oder Auflîsungswechsels erhÑlt der
Initiator folgende Nachricht:

     msg[0] = SHUT_COMPLETED  (60)
     msg[3] = 1 - Shutdown erfolgreich

bzw. beim Auflîsungswechsel

     msg[0] = RESCH_COMPLETED  (61)
     msg[3] = 1 - Auflîsungswechsel erfolgreich

"Erfolgreich" heiût fÅr das System, daû alle Programme, die explizit AP_TERM
verstehen, sich beendet haben, und daû keine weiteren Programme aktiv 
sind (nur noch ggf. ACCs). Soll der Shutdown trotzdem abgebrochen werden,
kann mit

     ret = shel_write(SHW_SHUTDOWN /*4*/, FALSE, 0, NULL, NULL));

der Shutdown-Modus bzw. Auflîsungswechsel abgebrochen werden. Andernfalls
wird der Auflîsungswechsel endgÅltig durchgefÅhrt, wenn sich der Initiator
beendet hat. Der Shutdown dagegen wird abgebrochen, wenn der Initiator
terminiert.

Hat ein Programm per AP_TFAIL (s.o.) den Shutdown verweigert, erhÑlt der
Initiator folgende Nachricht.

     msg[0] = SHUT_COMPLETED  (60)
     msg[3] = 0 - Shutdown abgebrochen
     msg[4] = ap_id der Applikation, die verweigert hat, oder -1
     msg[5] = Fehlercode dieser Applikation (s.o.)

bzw. beim Auflîsungswechsel

     msg[0] = RESCH_COMPLETED  (61)
     msg[3] = 0 - Auflîsungswechsel abgebrochen
     msg[4] = ap_id der Applikation, die verweigert hat, oder -1
     msg[5] = Fehlercode dieser Applikation (s.o.)

Das System hat in diesem Fall den Shutdown bzw. Auflîsungswechsel schon
beendet, d.h. der Initiator kann nichts mehr tun. Ist msg[4] == -1, sind 
alle Programme, die explizit AP_TERM verstehen, beendet; es befinden sich 
aber noch weitere Programme (ACCs zÑhlen hier nicht) im System.

Weil es (z.B. grundsÑtzlich bei XCONTROL) vorkommen kann, daû der
Shutdown-Prozeû niemals vom System als abgeschlossen oder abgebrochen
gemeldet wird (d.h. die Nachricht RESCH_COMPLETED oder SHUT_COMPLETED wird
niemals verschickt), sollte der Initiator beim Warten auf die Nachricht einen
Timeout vorsehen. Tritt dieser Fall ein, muû der Shutdown explizit
abgebrochen werden (s.o.).

Per appl_search() kann der Initiator testen, ob noch Programme aktiv sind,
die nicht explizit AP_TERM verstehen. Auf diese Weise arbeitet SHUTDOWN.PRG.
